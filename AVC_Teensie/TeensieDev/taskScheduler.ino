///////////////////////////////////////////////////////////////////////////////
// Main file for the AVC racer teensie control program
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Local header files
///////////////////////////////////////////////////////////////////////////////
#include "taskScheduler.h"

///////////////////////////////////////////////////////////////////////////////
// Global variables - These globals are defined in teensieMain.ino
///////////////////////////////////////////////////////////////////////////////
extern task taskList[];

// The number of functions scheduled
uint32_t numTasks; 

///////////////////////////////////////////////////////////////////////////////
// initExecuteTasks - called during setup to initialize the task execution 
// system.
/////////////////////////////////////////////////////////////////////////////// 
void initExecuteTasks ()
{
   uint32_t currTime = millis();
   
   // Figure out how many tasks there are
   numTasks =  sizeof(taskList) / sizeof(task); 
   
   for (uint32_t t = 0; t < numTasks; t++)
   {
      // Set each task to execute for the first time 10 msecs from now
      // plus their timeOffset
      taskList[t].nextExecTime = currTime + taskList[t].timeOffset + 10;
   }
}

///////////////////////////////////////////////////////////////////////////////
// executeTasks - called during the loop function to execute the tasks which 
// are scheduled to run at the current time.
///////////////////////////////////////////////////////////////////////////////
void executeTasks (uint32_t currTime)
{
   for (uint32_t t = 0; t < numTasks; t++)
   {
      // Check which tasks are ready to execute...
      if (taskList[t].nextExecTime <= currTime)
      {
         (taskList[t].func) (currTime);
         taskList[t].nextExecTime = currTime + taskList[t].timeDelta;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
// 
///////////////////////////////////////////////////////////////////////////////
