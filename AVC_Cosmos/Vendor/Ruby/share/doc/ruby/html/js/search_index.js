var search_data = {"index":{"searchIndex":["acl","aclentry","acllist","argf","abbrev","addrinfo","argumenterror","array","base64","basicobject","basicsocket","benchmark","tms","bigdecimal","bigmath","binding","cgi","cookie","html3","html4","html4fr","html4tr","html5","htmlextension","invalidencoding","queryextension","session","filestore","memorystore","nullstore","pstore","util","cmath","csv","malformedcsverror","row","table","class","closedqueueerror","comparable","complex","compatible","conditionvariable","continuation","coverage","dbm","dbmerror","debugger__","thread","drb","drbarray","drbbadscheme","drbbaduri","drbconn","thread","drbconnerror","drberror","drbidconv","drbidconv","drbmessage","drbobject","drbobject","drbobservable","drbprotocol","drbremoteerror","drbsslsocket","sslconfig","drbserver","invokemethod18mixin","drbservernotfound","drbtcpsocket","drbunixsocket","drbundumped","drbundumped","drbunknown","drbunknownerror","extserv","extservmanager","gw","gwidconv","thread","timeridconv","timerholder2","invalidindexerror","data","date","datetime","delegator","digest","base","class","instance","md5","rmd160","sha1","dir","env","eoferror","erb","defmethod","util","exception_type","exception_type","exception_type","exception_type","encoding","compatibilityerror","converter","converternotfounderror","invalidbytesequenceerror","undefinedconversionerror","encodingerror","english","enumerable","enumerator","generator","lazy","yielder","errno","econnaborted","econnreset","eproto","etc","exception","exception2messagemapper","e2mm","falseclass","fcntl","fiber","fibererror","fiddle","basictypes","cparser","cstruct","cstructbuilder","cstructentity","cunion","cunionentity","closure","blockcaller","compositehandler","dlerror","function","handle","importer","pointer","win32types","file","file::constants","stat","filetest","fileutils","dryrun","lowmethods","nowrite","streamutils_","verbose","find","float","floatdomainerror","forwardable","gc","profiler","gdbm","gdbmerror","gdbmfatalerror","gem","availableset","basicspecification","command","commandlineerror","commandmanager","commands","buildcommand","certcommand","checkcommand","cleanupcommand","contentscommand","dependencycommand","environmentcommand","fetchcommand","generateindexcommand","helpcommand","installcommand","listcommand","lockcommand","mirrorcommand","opencommand","outdatedcommand","ownercommand","pristinecommand","pushcommand","querycommand","rdoccommand","searchcommand","servercommand","setupcommand","sourcescommand","specificationcommand","stalecommand","uninstallcommand","unpackcommand","updatecommand","whichcommand","yankcommand","configfile","conflicterror","consoleui","defaultuserinteraction","dependency","dependencyerror","dependencyinstaller","dependencylist","dependencyremovalexception","dependencyresolutionerror","deprecate","doctor","documenterror","endofyamlexception","errorreason","exception","ext","builderror","builder","cmakebuilder","configurebuilder","extconfbuilder","rakebuilder","fakefetcher","filepermissionerror","formatexception","gemnotfoundexception","gemnotinhomeexception","gemrunner","gemcutterutilities","impossibledependencieserror","indexer","installerror","installupdateoptions","installer","fakepackage","installertestcase","invalidspecificationexception","licenses","list","loaderror","localremoteoptions","missingspecerror","missingspecversionerror","mockgemui","inputeoferror","systemexitexception","tty","termerror","nametuple","noaliasyamltree","operationnotsupportederror","package","digestio","error","formaterror","nonseekableio","old","patherror","tarheader","tarinvaliderror","tarreader","entry","unexpectedeof","tartestcase","tarwriter","boundedstream","fileoverflow","restrictedstream","toolongfilename","packagetask","pathsupport","platform","platformmismatch","rbconfig","remoteerror","remotefetcher","fetcherror","unknownhosterror","remoteinstallationcancelled","remoteinstallationskipped","remotesourceexception","request","requestset","gemdependencyapi","lockfile","parseerror","parser","tokenizer","requirement","badrequirementerror","resolver","apiset","apispecification","activationrequest","bestset","composedset","conflict","currentset","dependencyrequest","gitset","gitspecification","indexset","indexspecification","installedspecification","installerset","localspecification","lockset","lockspecification","molinillo","circulardependencyerror","delegates","resolutionstate","specificationprovider","dependencygraph","action","addedgenocircular","deleteedge","detachvertexnamed","log","tag","vertex","dependencystate","nosuchdependencyerror","possibilitystate","resolutionstate","resolver","resolution","resolvererror","specificationprovider","ui","versionconflict","requirementlist","set","sourceset","specspecification","specification","stats","vendorset","vendorspecification","rubyversionmismatch","security","exception","policy","signer","trustdir","server","silentui","source","git","installed","local","lock","specificfile","vendor","sourcefetchproblem","sourcelist","specfetcher","specificgemnotfoundexception","specification","streamui","silentdownloadreporter","silentprogressreporter","simpleprogressreporter","verbosedownloadreporter","verboseprogressreporter","stubspecification","systemexitexception","testcase","specfetchersetup","staticset","text","uninstaller","unsatisfiabledependencyerror","uriformatter","userinteraction","util","validator","verificationerror","version","versionoption","getoptlong","ambiguousoption","error","invalidoption","missingargument","needlessargument","httpmovedtemporarily","httpmultiplechoice","httprequesturitoolarge","hash","io","eagainwaitreadable","eagainwaitwritable","einprogresswaitreadable","einprogresswaitwritable","ewouldblockwaitreadable","ewouldblockwaitwritable","waitreadable","waitwritable","generic_readable","generic_writable","ioerror","ipaddr","addressfamilyerror","error","invalidaddresserror","invalidprefixerror","ipsocket","irb","abort","context","contextextender","extendcommand","changeworkspace","currentworkingworkspace","foreground","fork","help","irbcommand","jobs","kill","load","nop","popworkspace","pushworkspace","require","source","workspaces","extendcommandbundle","fileinputmethod","frame","inputmethod","inspector","irb","irbloader","jobmanager","loadabort","locale","methodextender","notifier","abstractnotifier","compositenotifier","levelednotifier","nomsgnotifier","outputmethod","readlineinputmethod","slex","node","stdioinputmethod","stdiooutputmethod","workspace","indexerror","integer","interrupt","json","circulardatastructure","ext","generatorerror","genericobject","jsonerror","missingunicodesupport","nestingerror","parsererror","unparsererror","jacobian","kconv","kernel","keyerror","lusolve","loaderror","localjumperror","logger","formatter","logdevice","period","severity","makemakefile","logging","rbconfig","string_or_failed_format","marshal","matchdata","math","domainerror","matrix","eigenvaluedecomposition","lupdecomposition","method","module","monitor","monitormixin","conditionvariable","timeout","mutex_m","nkf","nameerror","net","apop","apopsession","ftp","bufferedsslsocket","bufferedsocket","mlsxentry","nullsocket","ftpconnectionerror","ftperror","ftppermerror","ftpprotoerror","ftpreplyerror","ftptemperror","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpconflict","httpcontinue","httpcreated","exception_type","httpexceptions","httpexpectationfailed","httpfaileddependency","httpfatalerror","httpforbidden","httpmovedtemporarily","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpimused","httpinformation","httpinsufficientstorage","httpinternalservererror","httplengthrequired","httplocked","httpmethodnotallowed","httpmovedpermanently","httpmultistatus","httpmultiplechoice","httpnetworkauthenticationrequired","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httppaymentrequired","httppermanentredirect","httppreconditionfailed","httppreconditionrequired","httpproxyauthenticationrequired","httpredirection","httprequest","httprequestentitytoolarge","httprequestheaderfieldstoolarge","httprequesttimeout","httprequesturitoolarge","httprequestedrangenotsatisfiable","httpresetcontent","httpresponse","exception_type","httpseeother","httpservererror","httpserverexception","httpserviceunavailable","httpsuccess","httpswitchprotocol","httptemporaryredirect","httptoomanyrequests","httpunauthorized","httpunavailableforlegalreasons","httpunknownresponse","httpunprocessableentity","httpunsupportedmediatype","httpupgraderequired","httpuseproxy","httpversionnotsupported","imap","badresponseerror","bodytypeattachment","bodytypebasic","bodytypeextension","bodytypemessage","bodytypemultipart","bodytypetext","byeresponseerror","crammd5authenticator","dataformaterror","digestmd5authenticator","error","flagcounterror","loginauthenticator","noresponseerror","numvalidator","plainauthenticator","responseerror","responseparseerror","internetmessageio","netprivate","writeadapter","opentimeout","pop3","popauthenticationerror","popbadresponse","poperror","popmail","protoautherror","protocommanderror","protofatalerror","protoretriableerror","protoservererror","protosyntaxerror","protounknownerror","protocretryerror","protocolerror","readtimeout","smtp","response","smtpauthenticationerror","smtperror","smtpfatalerror","smtpserverbusy","smtpsyntaxerror","smtpunknownerror","smtpunsupportedcommand","newton","nilclass","nomemoryerror","nomethoderror","notimplementederror","numeric","oleproperty","object","parseerror","timeouterror","objectspace","internalobjectwrapper","weakmap","observable","open3","openssl","asn1","asn1data","asn1error","constructive","objectid","primitive","bn","bnerror","buffering","cipher","cipher","ciphererror","config","configerror","digest","digesterror","engine","engineerror","extconfig","hmac","hmacerror","netscape","spki","spkierror","ocsp","basicresponse","certificateid","ocsperror","request","response","singleresponse","opensslerror","pkcs12","pkcs12error","pkcs5","pkcs5error","pkcs7","pkcs7error","recipientinfo","signerinfo","pkey","dh","dherror","dsa","dsaerror","ec","group","error","point","error","ecerror","pkey","pkeyerror","rsa","rsaerror","random","randomerror","ssl","sslcontext","extconfig","sslerror","sslerrorwaitreadable","sslerrorwaitwritable","sslserver","sslsocket","extconfig","session","sessionerror","socketforwarder","x509","attribute","attributeerror","crl","crlerror","certificate","certificateerror","extension","extensionerror","extensionfactory","name","rfc2253dn","nameerror","request","requesterror","revoked","revokederror","store","storecontext","storeerror","openstruct","openuri","httperror","httpredirect","meta","openread","optionparser","ac","acceptables","ambiguousargument","ambiguousoption","arguable","completinghash","completion","invalidargument","invalidoption","list","missingargument","needlessargument","optionmap","parseerror","switch","noargument","optionalargument","placedargument","requiredargument","pp","ppmethods","pstore","error","pty","childexited","pathname","prettyprint","singleline","prime","eratosthenesgenerator","eratosthenessieve","generator23","pseudoprimegenerator","trialdivision","trialdivisiongenerator","proc","process","gid","status","sys","uid","waiter","profiler__","psych","badalias","classloader","restricted","coder","disallowedclass","exception","handler","dumperoptions","handlers","recorder","json","stream","treebuilder","nodes","alias","document","mapping","node","scalar","sequence","stream","omap","parser","mark","scalarscanner","set","stream","streaming","classmethods","syntaxerror","treebuilder","visitors","depthfirst","emitter","jsontree","noaliasruby","toruby","visitor","yamltree","queue","rdoc","rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","comment","constant","context","crossreference","erbio","erbpartial","encoding","error","extend","generator","ghostmethod","i18n","include","markdown","memoentry","parseerror","ruleinfo","markup","metamethod","methodattr","mixin","normalclass","normalmodule","options","parser","rd","rdoc","ri","error","require","rubylex","error","rubytoken","tkerror","tkid","tkkw","tknode","tkopasgn","tkop","tksymbol","tkunknownchar","tkval","token","rdoc","servlet","singleclass","stats","store","error","missingfileerror","task","testcase","text","tokenstream","tomdoc","toplevel","rdoctask","rexml","attlistdecl","attribute","attributes","cdata","child","comment","dtd","attlistdecl","elementdecl","entitydecl","notationdecl","parser","declaration","doctype","document","element","elementdecl","elements","encoding","entity","entityconst","externalentity","formatters","default","pretty","transitive","functions","iosource","instruction","light","node","namespace","node","notationdecl","output","parent","parseexception","parsers","baseparser","lightparser","pullevent","pullparser","sax2parser","streamparser","treeparser","ultralightparser","xpathparser","quickpath","sax2listener","security","source","sourcefactory","streamlistener","syncenumerator","text","undefinednamespaceexception","validation","choice","event","interleave","oneormore","optional","ref","relaxng","sequence","state","validationexception","validator","zeroormore","xmldecl","xmltokens","xpath","xpathparser","rss","atom","commonmodel","contentmodel","classmethods","dateconstruct","duplicatelinkchecker","entry","feed","author","category","contributor","entry","content","published","source","summary","generator","icon","id","link","logo","rights","subtitle","title","updated","personconstruct","email","name","uri","textconstruct","uricontentmodel","basedublincoremodel","baselistener","basemodel","baseparser","basetrackbackmodel","contentmodel","conversionerror","converter","dublincoremodel","dublincoremodel","element","error","itunesbasemodel","ituneschannelmodel","itunescategory","itunesimage","itunesowner","itunesitemmodel","itunesduration","itunesmodelutils","imagefaviconmodel","imagefavicon","imageitemmodel","imageitem","imagemodelutils","invalidrsserror","listenermixin","maker","atom","entry","channel","cloud","description","generator","skipdays","day","skiphours","hour","image","items","item","textinput","feed","channel","categories","category","cloud","generator","links","link","skipdays","day","skiphours","hour","image","items","item","categories","category","content","enclosure","guid","links","link","source","categories","category","generator","icon","links","link","logo","textinput","atomcategory","atomgenerator","atomlink","atomlogo","atompersonconstructbase","atompersons","atomtextconstruct","atomtextconstructbase","ensurexmlcontent","base","channelbase","authorsbase","authorbase","categoriesbase","categorybase","cloudbase","contributorsbase","contributorbase","copyrightbase","descriptionbase","generatorbase","itunescategories","itunescategory","itunesimage","itunesowner","linksbase","linkbase","skipdaysbase","daybase","skiphoursbase","hourbase","titlebase","contentmodel","dublincoremodel","itunesbasemodel","ituneschannelmodel","itunescategoriesbase","itunescategorybase","itunesimagebase","itunesownerbase","itunesitemmodel","itunesdurationbase","imagebase","imagefaviconmodel","imagefaviconbase","imageitemmodel","imageitembase","itemsbase","itembase","contentbase","descriptionbase","enclosurebase","guidbase","itunesduration","rightsbase","sourcebase","iconbase","logobase","rightsbase","subtitlebase","titlebase","titlebase","rss09","rss091","channel","image","items","item","textinput","rss092","channel","image","items","item","textinput","channel","authors","author","categories","category","cloud","contributors","contributor","copyright","description","generator","links","link","skipdays","day","skiphours","hour","title","image","items","item","authors","author","categories","category","content","contributors","contributor","description","enclosure","guid","links","link","rights","source","authors","author","categories","category","contributors","contributor","generator","icon","links","link","logo","rights","subtitle","title","title","textinput","rss10","channel","authors","author","categories","category","cloud","contributors","contributor","copyright","description","generator","links","link","skipdays","day","skiphours","hour","title","image","items","item","authors","author","categories","category","content","contributors","contributor","description","enclosure","guid","links","link","rights","source","authors","author","categories","category","contributors","contributor","generator","icon","links","link","logo","rights","subtitle","title","title","textinput","rss20","channel","categories","category","cloud","generator","skipdays","day","skiphours","hour","image","items","item","authors","author","categories","category","enclosure","guid","source","links","link","textinput","rssbase","setupdefaultdate","setupdefaultlanguage","slashmodel","syndicationmodel","taxonomytopicmodel","taxonomytopicsbase","taxonomytopicbase","taxonomytopicsmodel","taxonomytopicsbase","textinputbase","trackbackmodel","trackbackaboutsbase","trackbackaboutbase","xmlstylesheets","xmlstylesheet","missingattributeerror","missingtagerror","nserror","notavailablevalueerror","notexpectedtagerror","notseterror","notvalidxmlparser","notwellformederror","overlappedprefixerror","parser","rdf","bag","li","channel","image","items","seq","textinput","image","item","li","seq","li","textinput","rexmllikexmlparser","rexmllistener","rexmlparser","rss09","rss10","rootelementmixin","rss","channel","cloud","image","item","category","enclosure","guid","source","skipdays","day","skiphours","hour","textinput","setupmaker","slashmodel","syndicationmodel","taxonomytopicmodel","taxonomytopic","taxonomytopicsmodel","taxonomytopics","bag","toomuchtagerror","trackbackmodel10","trackbackabout","trackbackping","trackbackmodel20","trackbackabout","trackbackping","trackbackutils","unknownconversionmethoderror","unknowntagerror","unsupportedmakerversionerror","utils","csv","inheritedreader","yescleanother","yesother","xml","element","xmlparserlistener","xmlparsernotfound","xmlparserparser","xmlscanlistener","xmlscanparser","xmlstylesheet","xmlstylesheetmixin","racc","cparseparams","parseerror","parseerror","parser","rake","random","formatter","range","rangeerror","rational","compatible","readline","regexp","regexperror","resolv","dns","config","nxdomain","otherresolverror","decodeerror","encodeerror","name","query","requester","requesterror","resource","any","cname","domainname","generic","hinfo","in","a","aaaa","srv","wks","loc","minfo","mx","ns","ptr","soa","txt","hosts","ipv4","ipv6","loc","alt","coord","size","mdns","resolverror","resolvtimeout","rinda","drbobjecttemplate","invalidhashtuplekey","notifytemplateentry","requestcancelederror","requestexpirederror","rindaerror","ringfinger","ringprovider","ringserver","simplerenewer","template","templateentry","tuple","tuplebag","tuplebin","tupleentry","tuplespace","tuplespaceproxy","waittemplateentry","ripper","filter","rubylex","rubytoken","tkerror","tkid","tknode","tkopasgn","tkop","tkunknownchar","tkval","token","rubyvm","instructionsequence","runtimeerror","sdbm","sdbmerror","sockssocket","scanf","formatspecifier","formatstring","scripterror","securerandom","securityerror","set","shell","appendfile","appendio","builtincommand","cat","commandprocessor","concat","echo","error","filter","glob","processcontroller","systemcommand","tee","thread","void","shellwords","signal","signalexception","simpledelegator","singleforwardable","singleton","sizedqueue","socket","ancillarydata","constants","ifaddr","option","udpsource","socketerror","sortedset","standarderror","stopiteration","string","stringio","stringscanner","error","struct","symbol","symbol","synchronizer","synchronizer_m","err","lockmodefailer","unknownlocker","synchronizer","synchronizer_m","syntaxerror","syslog","constants","facility","level","logger","formatter","severity","macros","option","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","cyclic","tempio","tempfile","remover","test","thwait","thread","location","mutex","threaderror","threadgroup","thwait","time","timeout","error","timeouterror","tracepoint","tracer","thread","trueclass","typeerror","udpsocket","unixserver","unixsocket","uri","badurierror","error","escape","ftp","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","regexp","rfc2396_parser","rfc2396_regexp","pattern","unboundmethod","uncaughtthrowerror","unicodenormalize","vector","zerovectorerror","webrick","accesslog","accesslogerror","basiclog","cgi","config","cookie","daemon","genericserver","htmlutils","httpauth","authenticator","basicauth","digestauth","htdigest","htgroup","htpasswd","proxyauthenticator","proxybasicauth","proxydigestauth","userdb","httpproxyserver","httprequest","httpresponse","httpserver","httpservererror","httpservlet","abstractservlet","cgihandler","defaultfilehandler","erbhandler","filehandler","httpservleterror","prochandler","httpstatus","clienterror","eoferror","error","info","redirect","servererror","status","success","httputils","formdata","httpversion","log","servererror","simpleserver","utils","timeouthandler","process","win32ole","variant","win32oleruntimeerror","win32ole_event","win32ole_method","win32ole_param","win32ole_record","win32ole_type","win32ole_typelib","win32ole_variable","win32ole_variant","warning","weakref","referror","xml","parser","xmlencoding_ja","sjishandler","xmp","stringinputmethod","yaml","dbm","store","syck","syck","zerodivisionerror","zlib","buferror","dataerror","deflate","error","gzipfile","crcerror","error","lengtherror","nofooter","gzipreader","gzipwriter","inflate","memerror","needdict","streamend","streamerror","versionerror","zstream","fatal","unknown","!()","!()","!=()","!=()","!~~()","=~()","=~()","=~()","=~()","=~()","=~()","=~()",">()",">()",">()",">()",">()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">=()",">=()",">=()",">=()",">>()",">>()",">>()",">>()",">>()",">>()",">>()","apop()","asciiz()","additiveexpr()","andexpr()","array()","bigdecimal()","csv()","complex()","currentcontext()","d()","debug()","debug=()","delegateclass()","digest()","digest()","digest()","e()","equalityexpr()","fail()","fail()","fail()","fail()","filterexpr()","float()","functioncall()","hash()","i()","integer()","json()","jobmanager()","log_mask()","log_upto()","locationpath()","multiplicativeexpr()","nodetest()","orexpr()","pi()","pathexpr()","pathname()","permalink?()","predicate()","primaryexpr()","proxy()","raise()","rational()","relationalexpr()","relativelocationpath()","sp()","sp_z()","string()","string()","uri()","uri()","unaryexpr()","unionexpr()","zpermalink?()","__callee__()","__dir__()","__drbref()","__drbref()","__drburi()","__drburi()","__evaluate__()","__exit__()","__getobj__()","__getobj__()","__id__()","__method__()","__raise__()","__send__()","__setobj__()","__setobj__()","__to_xpath_helper()","__validate()","_ac_arg_enable()","_attrs()","_attrs()","_check_ac_args()","_dispatch_0()","_dispatch_1()","_dispatch_2()","_dispatch_3()","_dispatch_4()","_dispatch_5()","_dispatch_6()","_dispatch_7()","_do_nothing()","_dump()","_dump()","_dump()","_dump()","_dump()","_getproperty()","_gets_noecho()","_httpdate()","_id2ref()","_invoke()","_iso8601()","_jisx0301()","_load()","_load()","_load()","_load()","_load()","_ns()","_parse()","_parse()","_parse()","_parse()","_parse_date_if_needed()","_racc_do_parse_c()","_racc_do_parse_rb()","_racc_do_reduce()","_racc_evalact()","_racc_init_sysvars()","_racc_setup()","_racc_yyparse_c()","_racc_yyparse_rb()","_reverse()","_rfc2822()","_rfc3339()","_rfc822()","_segments()","_set_default_values()","_set_default_values()","_set_default_values()","_set_default_values()","_set_default_values()","_set_default_values()","_set_last_value()","_setproperty()","_setup_maker_element()","_strptime()","_strptime()","_tags()","_to_string()","_validate()","_version()","_xmlschema()","`()","a()","abbrev()","abbrev()","abbrev()","abbreviate()","abbreviate()","abort()","abort()","abort()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","abs()","abs()","abs()","abs()","abs()","abs()","abs()","abs2()","abs2()","absolute()","absolute?()","absolute?()","absolute?()","absolute_path()","absolute_path()","absolute_path()","ac_arg_disable()","ac_arg_enable()","ac_arg_with()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept_charset()","accept_charset=()","accept_loop()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_uri_http()","access_log()","acct()","acos()","acos()","acos()","acosh()","acosh()","acosh()","action_name()","action_name()","action_name()","action_name()","action_name()","activate()","activate()","activate_dependencies()","activate_spec()","activated()","activated?()","active?()","active?()","active?()","active?()","active_count()","active_job?()","active_jobs()","active_jobs_exist?()","active_process_controllers()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add!()","add?()","add_git()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_always_install()","add_attribute()","add_attribute()","add_attribute()","add_attribute()","add_attributes()","add_authenticator()","add_bindir()","add_bulk_threshold_option()","add_c_enclosure()","add_c_variables()","add_cert()","add_certid()","add_certificate()","add_checksums()","add_child_vertex()","add_class()","add_class()","add_class_or_module()","add_clear_sources_option()","add_comment()","add_common_option()","add_constant()","add_constant()","add_constant()","add_converter()","add_crl()","add_crl()","add_data()","add_date()","add_dependency()","add_dependency_with_type()","add_development_dependency()","add_dictionary()","add_edge()","add_edge_no_circular()","add_edge_no_circular()","add_element()","add_element()","add_entry()","add_event_to_arry()","add_event_to_arry()","add_extend()","add_extension()","add_extension()","add_extension()","add_extra_args()","add_field()","add_file()","add_file()","add_file()","add_file()","add_file_digest()","add_file_signed()","add_file_simple()","add_filter()","add_generator()","add_handler()","add_have_children_element()","add_html()","add_include()","add_include()","add_install_update_options()","add_key_option()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_local()","add_local_remote_options()","add_log_header()","add_maker()","add_method()","add_method()","add_method()","add_module()","add_module()","add_module_alias()","add_namespace()","add_need_initialize_variable()","add_need_initialize_variable()","add_nonce()","add_nonce()","add_observer()","add_option()","add_other_element()","add_owners()","add_parser_run_info()","add_path()","add_path()","add_platform()","add_platform_option()","add_plural_form()","add_prerelease_option()","add_private_type()","add_protocol()","add_protocol()","add_proxy_option()","add_recipient()","add_require()","add_response_handler()","add_revoked()","add_row()","add_ruby_type()","add_runtime_dependency()","add_schedule()","add_section()","add_self_to_load_path()","add_signer()","add_source_gem()","add_source_option()","add_spec()","add_special()","add_specific_extra_args()","add_specs()","add_status()","add_stress_to_class()","add_symlink()","add_text()","add_to()","add_to_classes_or_modules()","add_to_element_method()","add_to_fetcher()","add_token()","add_tokens()","add_trace_func()","add_unconverted_fields()","add_update_sources_option()","add_value()","add_version_option()","add_vertex()","add_vertex()","add_word_pair()","addr()","addr()","addr()","addr()","addr_mask()","addr_port()","adjugate()","adler()","adler32()","adler32_combine()","advise()","afamily()","after_resolution()","ajd()","alert()","alert()","alert_error()","alert_error()","alert_warning()","alert_warning()","alias()","alias()","alias_command()","alias_command()","alias_extension()","alias_map()","alias_method()","aliases()","alien()","alive?()","alive?()","alive?()","alive?()","alive?()","all()","all()","all=()","all?()","all_classes()","all_classes_and_modules()","all_files()","all_modules()","all_names()","all_spec_names()","all_specs()","all_symbols()","all_waits()","all_waits()","all_waits()","all_waits()","allocate()","allocation_class_path()","allocation_generation()","allocation_method_id()","allocation_sourcefile()","allocation_sourceline()","allow_addr?()","allow_missing?()","allow_missing?()","allow_missing?()","allow_socket?()","alpn_protocol()","alt_name_or_x509_entry()","alternate=()","amjd()","amount_constrained()","ancestor?()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors()","angle()","angle()","angle()","angle_with()","any?()","any?()","any?()","any_content()","any_to_s()","api_endpoint()","api_endpoint()","api_key()","api_keys()","apop?()","apop?()","apop?()","app_script_text()","append()","append()","append()","append_data()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","appendable?()","apply_offset()","approximate_recommendation()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","arg()","arg()","arg()","arglists()","args()","arguments()","argv()","argv0()","arity()","arity()","arity()","array()","array_attributes()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","ascend()","ascii_compatible?()","ascii_only?()","asciicompat_encoding()","asctime()","asctime()","asin()","asin()","asin()","asinh()","asinh()","asinh()","ask()","ask()","ask()","ask_for_password()","ask_for_password()","ask_if_ok()","ask_yes_no()","ask_yes_no()","asn1_flag()","asn1_flag=()","assert_activate()","assert_contains_make_command()","assert_directory()","assert_file()","assert_headers_equal()","assert_path_exists()","asset()","assign_names()","assoc()","assoc()","assoc()","at()","at()","at()","at_exit()","atan()","atan()","atan()","atan()","atan2()","atan2()","atan2()","atanh()","atanh()","atanh()","atime()","atime()","atime()","atime()","atom_validate()","atom_validate()","atom_validate()","atom_validate()","atom_validate()","atom_validate()","attempt_to_activate()","attempt_to_activate_existing_spec()","attempt_to_activate_new_spec()","attempt_to_swap_possibility()","attlistdecl()","attlistdecl()","attlistdecl?()","attr()","attr_accessor()","attr_reader()","attr_writer()","attribute()","attribute()","attribute_names()","attribute_of()","attributes()","attributes()","attributes()","attributes=()","attributes=()","attributes_of()","auth_capable?()","auth_cram_md5()","auth_data=()","auth_login()","auth_method()","auth_only()","auth_only()","auth_plain()","auth_tag()","auth_tag=()","auth_tag_len=()","authenticate()","authenticate()","authenticate()","authenticate()","authenticated?()","author()","author=()","authors()","authors=()","autoclose=()","autoclose?()","autoload()","autoload()","autoload?()","autoload?()","avail_in()","avail_out()","avail_out=()","available_specs()","available_tags()","axe()","b()","backtrace()","backtrace()","backtrace()","backtrace()","backtrace_locations()","backtrace_locations()","backtracking!()","banner()","base()","base()","base64()","base64_encode()","base64digest()","base64digest()","base64digest!()","base_dir()","base_dir()","base_label()","base_label()","base_name()","basename()","basename()","basic()","basic_auth()","basic_quote_characters()","basic_quote_characters=()","basic_word_break_characters()","basic_word_break_characters=()","basis()","beep()","before_resolution()","before_running_rdoc()","before_running_rdoc()","begin()","begin()","begin_adding()","begin_transport()","beginning_of_line?()","begins?()","benchmark()","benchmark()","between?()","bin_dir()","bin_file()","bin_for_find()","bin_key()","bin_path()","binary=()","binary?()","binary?()","binary_mode()","bind()","bind()","bind()","bind()","bind()","bind()","bind_function()","binding()","binding()","binding()","bindir()","binmode()","binmode()","binmode()","binmode?()","binmode?()","binread()","binread()","binwrite()","binwrite()","birthtime()","birthtime()","birthtime()","birthtime()","bit_length()","bit_length()","bit_set?()","blank_line()","blinding_off!()","blinding_on!()","blksize()","block()","block_given?()","block_length()","block_length()","block_length()","block_output_synchronize()","block_params=()","block_scanf()","block_scanf()","block_size()","blockdev?()","blockdev?()","blockdev?()","blockdev?()","blockquote()","blocks()","bm()","bm()","bmbm()","bmbm()","body()","body()","body=()","body=()","body_exist?()","body_permitted?()","body_stream=()","bool()","bool()","boolean()","boolean_writer()","both?()","bottom()","bottom()","break_on_newline()","break_outmost_groups()","break_points()","breakable()","breakable()","broadaddr()","broadcast()","broadcast()","bsearch()","bsearch()","bsearch_index()","bubblebabble()","bubblebabble()","bubblebabble()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build2()","build_args()","build_args()","build_args=()","build_eigenvectors()","build_extensions()","build_extensions()","build_heading()","build_indices()","build_info_dir()","build_info_file()","build_marshal_gemspecs()","build_message()","build_message()","build_modern_index()","build_modern_indices()","build_paragraph()","build_path_query()","build_rake_in()","build_verbatim()","builtin_curves()","bump()","bundled_gem_in_old_ruby?()","by_col()","by_col!()","by_col_or_row()","by_col_or_row!()","by_id()","by_row()","by_row!()","byte()","byte()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes_read()","bytesize()","byteslice()","cache()","cache_dir()","cache_dir()","cache_file()","cache_path()","cache_update_path()","cache_update_path()","cachesize=()","calc_checksum()","calc_indent()","calculate()","calculate_checksum()","call()","call()","call()","call()","call()","call()","call()","call_seq=()","callcc()","callee_id()","caller()","caller_locations()","can_parse()","can_parse_by_name()","cancel()","cancel()","cancel()","cancel()","canceled?()","candidate()","candidate()","candidate()","canonical_ordering_one()","canonname()","capabilities()","capability()","capable?()","capable_auth_types()","capable_cram_md5_auth?()","capable_login_auth?()","capable_plain_auth?()","capable_starttls?()","capitalize()","capitalize()","capitalize!()","caption()","capture2()","capture2()","capture2e()","capture2e()","capture3()","capture3()","captures()","casecmp()","casecmp()","casecmp?()","casecmp?()","casefold?()","cat()","catch()","catch()","catch()","catch()","cause()","cbrt()","cbrt()","cbrt()","cd()","cd()","cd()","cd()","cdata()","cdata()","cdata?()","cdatas()","cdiv()","ceil()","ceil()","ceil()","ceil()","ceil()","ceil()","ceiling()","center()","cert()","cert_files()","cert_path()","cert_path()","cert_status()","certid()","certid()","certificates()","certificates=()","certificates_matching()","certs()","chain()","challenge()","challenge()","challenge()","challenge=()","change_privilege()","change_privilege()","change_workspace()","changed()","changed?()","character()","characters()","chardev?()","chardev?()","chardev?()","chardev?()","charpos()","chars()","chars()","chars()","chars()","charset()","chdir()","chdir()","chdir()","chdir()","chdir()","check()","check()","check()","check()","check_auth_args()","check_auth_continue()","check_auth_method()","check_auth_response()","check_cert()","check_chain()","check_closed()","check_continue()","check_credentials_permissions()","check_data()","check_files()","check_gems()","check_generator()","check_headers()","check_host()","check_insecure_method()","check_inspect_key()","check_key()","check_key()","check_modeline()","check_modify()","check_names()","check_names()","check_nonce()","check_ns()","check_opaque()","check_password()","check_path()","check_port()","check_private_key()","check_response()","check_root()","check_ruby_version()","check_scheme()","check_shift_log()","check_signedness()","check_sizeof()","check_to()","check_trust()","check_typecode()","check_until()","check_user()","check_userinfo()","check_validity()","checkbox()","checkbox_group()","child_name()","children()","children()","children()","children()","chmod()","chmod()","chmod()","chmod()","chmod()","chmod_r()","chmod_r()","chomp()","chomp()","chomp!()","choose_from_list()","choose_from_list()","chop()","chop()","chop!()","chown()","chown()","chown()","chown()","chown()","chown_r()","chown_r()","chr()","chr()","chr()","chroot()","chunk()","chunk()","chunk_while()","chunk_while()","chunked=()","chunked?()","cipher()","cipher()","cipher=()","ciphers()","ciphers()","ciphers=()","civil()","civil()","clamp()","class()","class_attributes()","class_eval()","class_exec()","class_file()","class_method_list()","class_methods()","class_name()","class_name()","class_path()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","classes()","classes_and_modules()","classes_hash()","classes_hash()","classify()","clean()","clean_gems()","clean_text()","cleanpath()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_bit!()","clear_cache()","clear_comment()","clear_comments()","clear_default_specs()","clear_paths()","client_ca()","client_cert_cb()","client_error?()","client_error?()","clobber_task_description()","clobber_task_description()","clobber_task_name()","clobber_task_name()","clock_getres()","clock_gettime()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close!()","close_all()","close_enabled?()","close_on_exec=()","close_on_exec?()","close_read()","close_read()","close_read()","close_write()","close_write()","close_write()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed_read?()","closed_write?()","cmds()","cmp()","cmp()","cmp()","cmp()","cmp()","cmp_issuer()","cmsg_is?()","code()","codepage()","codepage=()","codepoints()","codepoints()","codepoints()","codepoints()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce_other()","cofactor()","cofactor()","cofactor_expansion()","collect()","collect()","collect()","collect()","collect()","collect()","collect!()","collect!()","collect2()","collect_attributes()","collect_attrs()","collect_concat()","collect_concat()","collect_method()","collect_tokens()","column()","column()","column()","column_vector()","column_vectors()","columns()","combination()","comma_breakable()","command()","command=()","command_names()","commands()","comment()","comment()","comment()","comment()","comment=()","comment=()","comment?()","comments()","commercial()","commercial()","commit()","common_installer_setup()","common_installer_teardown()","common_options()","compact()","compact()","compact()","compact!()","compact!()","compact_specs()","compare()","compare_by_identity()","compare_by_identity()","compare_by_identity?()","compare_by_identity?()","compare_file()","compare_file()","compare_language()","compare_stream()","compare_stream()","compatible?()","compile()","compile()","compile_error()","compile_file()","compile_option()","compile_option=()","complain()","complete()","complete()","complete()","complete()","complete()","completer_quote_characters()","completer_quote_characters=()","completer_word_break_characters()","completer_word_break_characters=()","completion_append_character()","completion_append_character=()","completion_case_fold()","completion_case_fold=()","completion_proc()","completion_proc=()","component()","component()","component()","component()","component_ary()","compose_sets()","compress()","compress_indices()","compute_key()","compute_primes()","concat()","concat()","concat()","concat()","concat()","concat()","conf()","config()","config()","config_file()","config_file_name()","configuration()","configuration=()","configure_connection_for_https()","configure_options()","conflicting_dependencies()","conflicting_dependencies()","conflicts()","conflicts()","confstr()","conj()","conj()","conj()","conjugate()","conjugate()","conjugate()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect_address()","connect_from()","connect_internal()","connect_nonblock()","connect_nonblock()","connect_to()","connection_for()","consider_local?()","consider_remote?()","console()","const_defined?()","const_get()","const_load()","const_missing()","const_set()","constants()","constants()","construct()","consume()","consume()","consume_rbuff()","contains()","contains_requirable_file?()","content()","content=()","content=()","content_encoding()","content_is_set?()","content_length()","content_length()","content_length=()","content_setup()","content_type()","content_type()","content_type()","content_type()","content_type=()","content_writer()","contents()","contents()","context()","context()","context()","context=()","continue?()","continue_timeout=()","conv_arg()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert_attr_reader()","convert_fields()","convert_to_uri()","converter=()","converters()","convertible_int()","convpath()","cooked()","cooked!()","copy()","copy()","copy()","copy()","copy()","copy_entry()","copy_entry()","copy_file()","copy_file()","copy_internal()","copy_nonce()","copy_stream()","copy_stream()","copy_stream()","copy_to()","copy_to()","coredump?()","correct?()","correct_for_windows_path()","cos()","cos()","cos()","cos()","cosh()","cosh()","cosh()","count()","count()","count()","count()","count()","count_imemo_objects()","count_nodes()","count_objects()","count_objects_size()","count_observers()","count_symbols()","count_tdata_objects()","covector()","cover?()","coverage_level=()","cp()","cp()","cp_r()","cp_r()","cram_md5_challenge()","cram_md5_response()","cram_secret()","crc()","crc32()","crc32_combine()","crc_table()","creatable?()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_cert()","create_cert_email()","create_cert_self_signed()","create_conflict()","create_entry()","create_ext()","create_ext_from_array()","create_ext_from_hash()","create_ext_from_string()","create_extension()","create_from()","create_guid()","create_header()","create_key()","create_listeners()","create_listeners()","create_logfile()","create_makefile()","create_new_id()","create_option_parser()","create_self_signed_cert()","create_self_signed_cert()","create_ssl_params()","create_ssl_params()","create_tmpdir()","create_value()","created_specs()","credentials_path()","critical()","critical=()","critical?()","crl=()","crls()","crls=()","cross()","cross_product()","crypt()","css()","csv_attr_reader()","csv_integer_writer()","csv_writer()","ctime()","ctime()","ctime()","ctime()","ctime()","ctime()","ctrl_cmd()","current()","current()","current()","current=()","current_cert()","current_crl()","current_element()","current_group()","current_line()","current_line()","current_section()","current_server()","current_server()","curry()","curry()","cursor()","cursor=()","curve_name()","cwday()","cweek()","cwyear()","cycle()","cycle()","d()","d_o_s()","daemon()","data()","data()","data()","data()","data=()","data_type()","datadir()","datadir()","date()","date=()","date=()","date=()","date=()","date_writer()","datetime_format()","datetime_format=()","day()","day()","day_fraction()","dclone()","dclone()","dclone()","dclone()","dclone()","dclone()","deafen()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug=()","debug=()","debug=()","debug=()","debug?()","debug?()","debug?()","debug?()","debug?()","debug_level=()","debug_output=()","debug_thread_info()","declare()","decode()","decode()","decode()","decode64()","decode_all()","decode_utf7()","decode_www_form()","decode_www_form_component()","decrypt()","decrypt()","dedent_string()","dedent_string()","deep_clone()","def_array_element()","def_atom_persons()","def_atom_text_construct()","def_children_accessor()","def_class()","def_class_accessor()","def_class_accessor()","def_classed_element()","def_classed_element_without_accessor()","def_classed_elements()","def_convert()","def_corresponded_attr_reader()","def_corresponded_attr_writer()","def_csv_accessor()","def_csv_element()","def_delegator()","def_delegator()","def_delegators()","def_delegators()","def_e2message()","def_element_class_accessor()","def_elements_class_accessor()","def_elements_class_accessor()","def_else_enc()","def_erb_method()","def_erb_method()","def_exception()","def_extend_command()","def_extend_command()","def_get_text_element()","def_head_option()","def_iconv_convert()","def_inspector()","def_instance_delegator()","def_instance_delegators()","def_method()","def_module()","def_notifier()","def_notifier()","def_notifier()","def_option()","def_other_element()","def_other_element_without_accessor()","def_post_proc()","def_pre_proc()","def_same_enc()","def_single_delegator()","def_single_delegators()","def_system_command()","def_system_command()","def_tail_option()","def_to_euc_jp_from_iso_2022_jp()","def_to_euc_jp_from_shift_jis()","def_to_euc_jp_from_utf_8()","def_to_iso_2022_jp_from_euc_jp()","def_to_iso_8859_1_from_utf_8()","def_to_shift_jis_from_euc_jp()","def_to_shift_jis_from_utf_8()","def_to_utf_8_from_euc_jp()","def_to_utf_8_from_iso_8859_1()","def_to_utf_8_from_shift_jis()","def_uconv_convert_if_can()","def_yes_clean_other_accessor()","def_yes_other_accessor()","default()","default()","default()","default()","default=()","default_acl()","default_argc_limit()","default_bindir()","default_cert_path()","default_dir()","default_event_sources()","default_exec_format()","default_ext_dir_for()","default_external()","default_external=()","default_gem?()","default_gems_use_full_paths?()","default_id_conv()","default_imap_port()","default_imaps_port()","default_internal()","default_internal=()","default_key_path()","default_load_limit()","default_ole_types()","default_parser()","default_parser=()","default_passive()","default_passive=()","default_path()","default_path()","default_pop3_port()","default_pop3s_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_proc()","default_proc=()","default_record_separator()","default_record_separator=()","default_rubygems_dirs()","default_safe_level()","default_sources()","default_spec_cache_dir()","default_spec_file()","default_specifications_dir()","default_src_encoding()","default_ssl_context()","default_ssl_port()","default_ssl_port()","default_stubs()","default_submission_port()","default_system_path()","default_system_path=()","default_title=()","default_tls_port()","default_tls_port()","default_value()","defaults()","defaults()","defaults_str()","define()","define()","define()","define()","define_aliases()","define_aliases()","define_by_keywords()","define_finalizer()","define_head()","define_method()","define_singleton_method()","define_tail()","defined_class()","defined_in?()","definition()","definition()","definition()","definition()","definition_lists()","deflate()","deflate()","deflate()","deflate()","degree()","delegate()","delegate()","deletable?()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete!()","delete?()","delete_all()","delete_all()","delete_all()","delete_all()","delete_at()","delete_at()","delete_attribute()","delete_edge()","delete_edge()","delete_element()","delete_field()","delete_first()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_legacy_args()","delete_legacy_args()","delete_namespace()","delete_observer()","delete_observers()","delete_passwd()","delete_passwd()","delete_text()","delete_unless_alive()","deleted?()","denominator()","denominator()","denominator()","denominator()","denominator()","denominator()","dep()","depend_rules()","dependencies()","dependencies()","dependencies()","dependencies_for()","dependencies_for()","dependencies_for()","dependency()","dependency_order()","dependency_request()","dependent_gems()","dependent_specs()","deprecate()","deprecate()","deprecate_constant()","depth()","deq()","deq()","dequote()","dequote()","descend()","descendant_or_self()","descendent?()","description()","description()","description=()","deserialize()","destination_encoding()","destination_encoding()","destination_encoding()","destination_encoding_name()","destination_encoding_name()","det()","det()","det_e()","detach()","detach_vertex_named()","detach_vertex_named()","detached()","detached=()","detached?()","detect()","detect()","detect_encoding()","detect_gemdeps()","detect_implicit()","determinant()","determinant()","determinant_bareiss()","determinant_e()","dev()","dev_major()","dev_minor()","development?()","development?()","development_dependencies()","dfdxi()","dh_compute_key()","diagonal()","diagonal?()","diagonalize()","difference()","dig()","dig()","dig()","dig()","digest()","digest()","digest()","digest()","digest()","digest()","digest!()","digest_length()","digest_length()","digest_length()","digits()","digits()","dir()","dir()","dir()","dir_config()","direct_ancestors()","direct_ancestors()","directory?()","directory?()","directory?()","directory?()","directory?()","directory?()","directory_makable?()","dirname()","dirname()","dirs()","dirs=()","disable()","disable()","disable()","disable_close()","disable_ssl()","disable_ssl()","disable_ssl()","disable_starttls()","disable_tls()","disasm()","disasm()","disassemble()","disassemble()","disconnect()","disconnected?()","disjoint?()","dispid()","display()","display()","display()","display?()","display?()","display_header()","div()","div()","div()","div()","divide()","divmod()","divmod()","divmod()","divmod()","divmod()","dlload()","dlopen()","dlopen()","dlunwrap()","dlwrap()","dn()","dn=()","do_get()","do_get()","do_get()","do_head()","do_options()","do_options()","do_post()","do_configuration()","do_finish()","do_finish()","do_helo()","do_not_reverse_lookup()","do_not_reverse_lookup()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_parse()","do_reply()","do_start()","do_start()","do_validate()","do_validate=()","do_write()","do_write()","doc()","doc_dir()","doc_root()","doc_stats()","doctor()","doctor()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype?()","doctype_end()","document()","document()","document()","document()","document()","document()","document_children=()","document_order()","document_self=()","document_self_or_methods()","documentation_page()","documentation_search()","documentation_source()","documented?()","documented?()","documented?()","documented?()","done()","done()","done()","done()","done()","done?()","done_adding()","done_documenting=()","done_installing()","dot()","dot_pat()","dot_pat_str()","double_fig()","down()","down()","down()","down()","down()","downcase()","downcase()","downcase!()","download()","download()","download()","download()","download()","download()","download_reporter()","download_to_cache()","download_to_cache()","downto()","downto()","downto()","dowrite()","drop()","drop()","drop()","drop_while()","drop_while()","drop_while()","dsa_sign_asn1()","dsa_verify_asn1()","dst?()","dstaddr()","dummy?()","dummy_makefile()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump_all()","dump_coder()","dump_ivars()","dump_list()","dump_stream()","dup()","dup()","e2mm_message()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each2()","each_active_object()","each_address()","each_address()","each_address()","each_address()","each_address()","each_ancestor()","each_attribute()","each_attribute()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_certificate()","each_char()","each_char()","each_char()","each_char()","each_char()","each_child()","each_child()","each_classmodule()","each_codepoint()","each_codepoint()","each_codepoint()","each_codepoint()","each_cons()","each_const()","each_constant()","each_data()","each_element()","each_element_with_attribute()","each_element_with_text()","each_entry()","each_entry()","each_entry()","each_entry()","each_extend()","each_filename()","each_include()","each_index()","each_index()","each_key()","each_key()","each_key()","each_key()","each_key()","each_key()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_localized_path()","each_mail()","each_method()","each_name()","each_name()","each_name()","each_name()","each_object()","each_option()","each_option()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_parent()","each_prime()","each_prime()","each_recursive()","each_resource()","each_response_header()","each_section()","each_slice()","each_source()","each_spec()","each_strongly_connected_component()","each_strongly_connected_component()","each_strongly_connected_component_from()","each_strongly_connected_component_from()","each_sublocale()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_with_index()","each_with_index()","each_with_index()","each_with_object()","each_with_object()","each_with_something()","ecdh_curves=()","echo()","echo=()","echo?()","edit_path()","egd()","egd_bytes()","egid()","egid=()","ehlo()","eid()","eid()","eigen()","eigensystem()","eigenvalue_matrix()","eigenvalues()","eigenvector_matrix()","eigenvector_matrix_inv()","eigenvectors()","element()","element()","element=()","element_initialize_arguments?()","elementdecl()","elementdecl()","elementdecl?()","elements()","elements_to_f()","elements_to_f()","elements_to_i()","elements_to_i()","elements_to_r()","elements_to_r()","emacs_editing_mode()","emacs_editing_mode?()","email_to_name()","emit_coder()","emphasis()","empty()","empty()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_content?()","empty_content?()","empty_marshal_checksum()","empty_marshal_data()","enable()","enable()","enable()","enable_close()","enable_config()","enable_shared()","enable_ssl()","enable_ssl()","enable_ssl()","enable_starttls()","enable_starttls_auto()","enable_tls()","enabled?()","enabled?()","enc_key()","enclose()","enclosed?()","encode()","encode()","encode()","encode!()","encode64()","encode_fallback()","encode_multipart_form_data()","encode_re()","encode_str()","encode_utf7()","encode_www_form()","encode_www_form_component()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding=()","encoding=()","encoding=()","encoding_updated()","encoding_updated()","encrypt()","encrypt()","end()","end()","end()","endelement()","end_document()","end_document()","end_document()","end_element()","end_element?()","end_mapping()","end_prefix_mapping()","end_resolution()","end_seen?()","end_sequence()","end_stream()","end_stream()","end_transport()","end_with?()","ended?()","endgrent()","endpwent()","engines()","england()","enq()","enq()","ensure_default_gem_subdirectories()","ensure_dependency()","ensure_gem_subdirectories()","ensure_loadable_spec()","ensure_number()","ensure_nz_number()","ensure_xml_content()","enterable?()","entity()","entity()","entity()","entity()","entity()","entity?()","entity_class()","entity_class()","entity_expansion_limit()","entity_expansion_limit()","entity_expansion_limit=()","entity_expansion_limit=()","entity_expansion_text_limit()","entity_expansion_text_limit()","entity_expansion_text_limit=()","entity_expansion_text_limit=()","entitydecl()","entitydecl()","entitydecl?()","entries()","entries()","entries()","entry_details()","entry_versions()","enum_for()","enum_for()","env_requirement()","env_table()","environment()","eof()","eof()","eof()","eof()","eof()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eos?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","equality_relational_compare()","erf()","erfc()","errno()","error()","error()","error()","error()","error()","error()","error()","error=()","error?()","error?()","error?()","error?()","error?()","error?()","error_bytes()","error_char()","error_depth()","error_message()","error_print()","error_string()","errors()","errors()","errors()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape8bit()","escapeelement()","escapehtml()","escape_element()","escape_form()","escape_html()","escape_path()","escape_re()","escape_userpass()","euid()","euid=()","eval()","eval()","eval()","eval_history=()","eval_input()","evaluate()","evaluate()","even?()","even?()","event()","event?()","event_interface()","event_type()","exact?()","examine()","exception()","exception()","exception()","exception()","exception()","exception()","exception_class()","exclude_end?()","exclusive()","exec()","exec()","exec_format()","exec_if()","executable()","executable=()","executable?()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","executable_real?()","executables()","executables=()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","exist?()","exist?()","exist?()","exist?()","exist?()","exists?()","exists?()","exists?()","exit()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit_value()","exited?()","exitstatus()","exp()","exp()","exp()","exp()","expand()","expand()","expand_hexstring()","expand_pair()","expand_path()","expand_path()","expand_path()","expand_path()","expand_ref_in()","expand_tabs()","expand_value()","expanded_name()","expect()","expected()","expected()","expected()","expected()","expected()","expected()","expired?()","expires()","expires=()","explain()","explanation()","explicit?()","exponent()","export()","export()","export()","export()","expr()","expunge()","extend()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extended()","extension()","extension()","extension?()","extension_dir()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions=()","extensions=()","extensions=()","extensions=()","extensions=()","extensions_dir()","extern()","external_encoding()","external_encoding()","external_encoding()","external_encoding()","extname()","extname()","extra_args()","extra_args=()","extra_rdoc_files()","extra_rdoc_files=()","extract()","extract()","extract_bin()","extract_call_seq()","extract_files()","extract_files()","extract_files()","extract_files()","extract_reference()","facility()","fail()","fail()","false()","family()","family()","family_addrinfo()","fast_generate()","fastmode=()","fatal()","fatal()","fatal()","fatal?()","fatal?()","fcntl()","fcntl()","fcntl()","fdatasync()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","feed()","feed_info()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch_file()","fetch_http()","fetch_https()","fetch_internal()","fetch_path()","fetch_path()","fetch_resource()","fetch_s3()","fetch_server()","fetch_server()","fetch_size()","fetch_size()","fetch_spec()","fetch_spec()","fetch_values()","fetcher()","fetcher()","fetcher=()","field()","field?()","field_row?()","fields()","file()","file()","file()","file?()","file?()","file?()","file?()","file?()","file?()","file_field()","file_input?()","file_name()","file_name()","filename()","filename()","filename()","filename_quote_characters()","filename_quote_characters=()","fileno()","fileno()","fileno()","fileno()","files()","files=()","files_hash()","files_in()","files_in_default_gem()","files_in_gem()","fill()","fill_breakable()","fill_rbuff()","filter()","filter()","filter()","filter=()","filter_backtrace()","filter_backtrace()","final()","finalize()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find_active_stub_by_path()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all_by_name()","find_all_satisfiers()","find_all_template()","find_ancestor_local_symbol()","find_attribute()","find_attribute_named()","find_by_name()","find_by_path()","find_c_enclosure()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_command()","find_command_possibilities()","find_constant_named()","find_data()","find_enclosing_module_named()","find_encoding()","find_executable()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_files()","find_files_for_gem()","find_first_recursive()","find_header()","find_home()","find_in_cache()","find_in_unresolved()","find_in_unresolved_tree()","find_inactive_by_path()","find_index()","find_index()","find_index()","find_instance_method_named()","find_ivars()","find_latest_files()","find_library()","find_local_symbol()","find_local_symbol()","find_method()","find_method_named()","find_module_named()","find_module_named()","find_module_named()","find_name()","find_paths()","find_proxy()","find_response()","find_spec()","find_spec_by_name_and_version()","find_spec_for_exe()","find_state_for()","find_symbol()","find_symbol_module()","find_system_command()","find_text_page()","find_type()","find_unique()","find_unresolved_default_spec()","finger()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish_page_dir()","finish_resolve()","finished?()","finished?()","finished?()","finite?()","finite?()","finite?()","finite?()","fips_mode=()","first()","first()","first()","first()","first()","first()","first()","first?()","first_lineno()","first_minor()","fix()","fix_basic_object_inheritance()","fixed_encoding?()","fixup_swapped_children()","flags()","flags=()","flags=()","flat_map()","flat_map()","flatten()","flatten()","flatten()","flatten!()","flatten!()","flock()","floor()","floor()","floor()","floor()","floor()","floor()","floor()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush_buffer()","flush_left()","flush_next_in()","flush_next_out()","flush_sessions()","fnmatch()","fnmatch()","fnmatch?()","fnmatch?()","following()","following_node_of()","for()","for_cache()","for_current_gems()","for_fd()","for_fd()","for_spec()","for_spec?()","force_documentation=()","force_encoding()","force_encoding()","force_quotes?()","force_zone!()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","fork()","fork()","fork()","form()","format()","format()","format()","format()","format()","format()","format=()","format_date()","format_datetime()","format_datetime()","format_message()","format_severity()","format_text()","format_time()","format_time()","formatted_program_filename()","frac()","fragment=()","free()","free()","free=()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","frexp()","friday?()","friday?()","friendly_path()","from()","from()","from_file()","from_hash()","from_list()","from_module()","from_name()","from_name()","from_prime_division()","from_prime_division()","from_specs()","from_yaml()","front()","front()","front()","frozen?()","frozen?()","fsync()","fsync()","ftype()","ftype()","ftype()","fu_blksize()","fu_default_blksize()","fu_stream_blksize()","fu_windows?()","full_gem_path()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","full_require_paths()","full_spec()","fully_documented?()","fully_documented?()","fully_expanded_name()","function()","gamma()","garbage_collect()","garbage_collect()","gather_files()","gcd()","gcd()","gcd()","gcdlcm()","gcdlcm()","gem()","gem()","gem()","gem()","gem_contents()","gem_dir()","gem_dir()","gem_file_list()","gem_install_dir()","gem_original_require()","gem_repository?()","gems_dir()","gems_dir()","gemspec()","gemspec_stubs_in()","gen_random()","gen_random()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate_bin_script()","generate_bin_symlink()","generate_default_dirs()","generate_event()","generate_index()","generate_key()","generate_key!()","generate_key!()","generate_line()","generate_prime()","generate_tag()","generate_windows_script()","generation_hook()","generation_hook()","generator()","generator_descriptions()","generator_for()","get()","get()","get()","get()","get2()","get_all_gem_names()","get_all_gem_names_and_versions()","get_attribute()","get_attribute_ns()","get_attributes()","get_byte()","get_candidate_gems()","get_cert_files()","get_definition()","get_elements()","get_env_editor()","get_file_and_line_from_caller()","get_first()","get_gems_to_cleanup()","get_group()","get_instance()","get_key_string()","get_line()","get_listeners()","get_metadata()","get_namespace()","get_namespace()","get_namespace()","get_nth_prime()","get_one_gem_name()","get_one_optional_argument()","get_option()","get_passwd()","get_passwd()","get_passwd()","get_path()","get_platform_from_requirements()","get_primary_gems()","get_print()","get_procs()","get_proxy_from_env()","get_relative_path()","get_renewer()","get_response()","get_response()","get_response()","get_screen_size()","get_set()","get_tagged_response()","get_text()","get_thread()","get_value()","get_version_from_requirements()","getacl()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress_orig()","getaddresses()","getaddresses()","getaddresses()","getaddresses()","getaddrinfo()","getaddrinfo()","getbinaryfile()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getc()","getc()","getc()","getc()","getc()","getc()","getch()","getch()","getch()","getdir()","getegid()","geteuid()","getgid()","getgm()","getgrent()","getgrgid()","getgrnam()","gethostbyaddr()","gethostbyname()","gethostbyname()","gethostname()","getifaddrs()","getlocal()","getlogin()","getname()","getname()","getname()","getname()","getnameinfo()","getnameinfo()","getnames()","getnames()","getnames()","getnames()","getok()","getopts()","getopts()","getopts()","getpass()","getpass()","getpeereid()","getpeername()","getpgid()","getpgrp()","getpriority()","getpty()","getpwent()","getpwnam()","getpwuid()","getquota()","getquotaroot()","getresource()","getresources()","getrlimit()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","getservbyname()","getservbyport()","getservername()","getservername()","getsid()","getsockname()","getsockopt()","getsockopt()","getter()","gettextfile()","getuid()","getutc()","getwd()","getwd()","getwd()","getwd()","gid()","gid()","gid=()","git()","git_gem()","git_source()","github()","glob()","glob()","glob()","global_variables()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","goto()","grant_privilege()","grant_privilege()","great_job()","gregorian()","gregorian?()","gregorian_leap?()","grep()","grep()","grep_v()","grep_v()","group()","group()","group()","group()","group()","group()","group=()","group_by()","group_sub()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","guard_inspect_key()","guess()","guess()","guess()","guess()","guess_type()","guess_type_if_need()","guid()","guid()","gunzip()","gunzip()","gunzip()","gzip()","gzip()","gzip()","gzip()","gzip_to()","h()","h()","h()","h()","handle()","handle_arguments()","handle_entitydecl()","handle_interrupt()","handle_missing_or_push_dependency_state()","handle_options()","handle_pipe()","handler()","handler()","handler=()","handlers()","handles?()","hangul_comp_one()","hangul_decomp_one()","hard_break()","has_attributes?()","has_conflicts?()","has_elements?()","has_expires?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_name?()","has_name?()","has_next?()","has_text?()","has_value?()","has_value?()","has_value?()","has_value?()","has_value?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash?()","hash_algorithm()","hash_old()","have_author?()","have_author?()","have_author?()","have_author?()","have_children_elements()","have_const()","have_content?()","have_extensions?()","have_file?()","have_framework()","have_func()","have_git?()","have_header()","have_library()","have_macro()","have_option?()","have_rdoc_4_plus?()","have_required_elements?()","have_required_elements?()","have_required_elements?()","have_required_elements?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_struct_member()","have_type()","have_var()","have_xml_content?()","have_xml_content?()","have_xml_content?()","head()","head()","head2()","header()","header()","header()","header()","header?()","header_convert()","header_converters()","header_row?()","header_row?()","headers()","headers()","headers()","headers=()","helo()","help()","help()","helpcontext()","helpcontext()","helpfile()","helpfile()","helpstring()","helpstring()","here?()","here?()","here?()","hermitian?()","hessenberg_to_real_schur()","hex()","hex()","hexdigest()","hexdigest()","hexdigest()","hexdigest()","hexdigest!()","hexencode()","hidden()","hierarchical?()","hierarchical?()","history_file()","history_file=()","hmac_md5()","home()","home_workspace()","host()","host()","host()","host=()","host=()","hostname()","hostname=()","hostname=()","hour()","hour()","hour=()","hour=()","href=()","hstack()","hstack()","html()","html()","html_escape()","html_escape()","html_escape()","html_name()","html_name()","hton()","http_default_port()","http_header()","http_url()","http_url()","httpdate()","httpdate()","httpdate()","httpdate()","httpdate()","httponly=()","https?()","https_default_port()","hypot()","i()","icon()","icon=()","iconv()","id()","id()","id()","id2name()","ident()","identical?()","identical?()","identical?()","identical?()","identity()","idle()","idle_done()","if_modified_since()","ifindex()","iflush()","ignore()","ignore_unknown_element()","ignore_unknown_element=()","ignore_whitespace_nodes()","ignored?()","imag()","imag()","imag()","image()","image_button()","image_size=()","imaginary()","imaginary()","imaginary()","img()","implemented_ole_types()","implicit?()","import()","import_function()","import_symbol()","import_value()","in6_addr()","in_addr()","in_transaction()","in_transaction_wr()","inactivate()","inc()","inc()","include()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","included()","included()","included()","included()","included()","included()","included_modules()","incompatible_argument_styles()","incompatible_argument_styles()","incomplete_input?()","indent()","indent_text()","indent_text()","independent?()","independent?()","index()","index()","index()","index()","index()","index()","index()","index()","index_in_parent()","indicate_progress()","indicate_progress()","infinite?()","infinite?()","infinite?()","infinite?()","infinity?()","inflate()","inflate()","inflate()","inflate()","inflate()","info()","info()","info()","info?()","info?()","info?()","info?()","inherit_convert_attr_reader()","inherited()","inherited()","inherited()","inherited_array_reader()","inherited_base()","inherited_base()","inherited_hash_reader()","inherited_reader()","init()","init()","init_comments()","init_converters()","init_headers()","init_parsers()","init_separators()","init_with()","init_with_ary()","init_with_hash()","initgroups()","initial_start_rdf()","initial_start_entry()","initial_start_feed()","initial_start_rss()","initial_state()","initialize()","initialize()","initialize_clone()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_have_children_elements()","initialize_http_header()","initialize_methods_etc()","initialize_pattern()","initialize_query()","initialize_regexp()","initialize_tracer()","initialize_variables()","initialize_variables()","inject()","inject()","inject_into_list()","inline_html?()","inline_html?()","inline_other?()","inline_other?()","inline_other_base64?()","inline_other_base64?()","inline_other_text?()","inline_other_text?()","inline_other_xml?()","inline_other_xml?()","inline_text?()","inline_text?()","inline_xhtml?()","inline_xhtml?()","inner_product()","ino()","inplace_mode()","inplace_mode=()","input()","input=()","input=()","input=()","input=()","input=()","input?()","insecure_method?()","insert()","insert()","insert()","insert_after()","insert_before()","insert_output()","insert_text()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect?()","inspect_mode=()","inspect_sockaddr()","inspect_value()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install_accessor_base()","install_acl()","install_acl()","install_alias_method()","install_class_name()","install_date_element()","install_default_gems()","install_default_specs()","install_dublin_core()","install_element()","install_executables()","install_extend_commands()","install_extend_commands()","install_file()","install_from_gemdeps()","install_gem()","install_gem_user()","install_get_attribute()","install_get_text_element()","install_have_attribute_element()","install_have_child_element()","install_have_children_element()","install_id_conv()","install_id_conv()","install_image_favicon()","install_image_item()","install_indices()","install_into()","install_lib()","install_list()","install_model()","install_must_call_validator()","install_ns()","install_rdoc()","install_siginfo_handler()","install_specs()","install_system_commands()","install_taxo_topic()","install_taxo_topics()","install_text_element()","install_update_defaults_str()","installable?()","installable_platform?()","installable_platform?()","installable_platform?()","installation_satisfies_dependency?()","installed?()","installed?()","installed_docs()","installed_specs()","installed_stubs()","instance()","instance()","instance()","instance()","instance_attributes()","instance_delegate()","instance_eval()","instance_exec()","instance_method()","instance_method_list()","instance_methods()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_set()","instance_variables()","instruction()","instruction()","instruction?()","instructions()","int()","int()","int()","int()","int_from_prime_division()","integer?()","integer?()","integer?()","integer_writer()","intern()","intern()","internal_class_of()","internal_encoding()","internal_encoding()","internal_encoding()","internal_object_id()","internal_super_of()","interrupt()","interrupt()","intersect?()","intersection()","inv()","invalidate_memoized_attributes()","inverse()","invert()","invert()","invert()","invert()","invert()","invert()","invert!()","invkind()","invoke()","invoke()","invoke_kind()","invoke_service()","invoke_service_command()","invoke_thread()","invoke_with_build_args()","ioctl()","ioflush()","ip()","ip6_arpa()","ip6_int()","ip?()","ip_address()","ip_address_list()","ip_pktinfo()","ip_pktinfo()","ip_port()","ip_unpack()","ipv4?()","ipv4?()","ipv4_compat()","ipv4_compat?()","ipv4_loopback?()","ipv4_mapped()","ipv4_mapped?()","ipv4_multicast?()","ipv4_multicast_loop()","ipv4_multicast_loop()","ipv4_multicast_ttl()","ipv4_multicast_ttl()","ipv4_private?()","ipv6?()","ipv6?()","ipv6_linklocal?()","ipv6_loopback?()","ipv6_mc_global?()","ipv6_mc_linklocal?()","ipv6_mc_nodelocal?()","ipv6_mc_orglocal?()","ipv6_mc_sitelocal?()","ipv6_multicast?()","ipv6_pktinfo()","ipv6_pktinfo()","ipv6_pktinfo_addr()","ipv6_pktinfo_ifindex()","ipv6_sitelocal?()","ipv6_to_ipv4()","ipv6_unique_local?()","ipv6_unspecified?()","ipv6_v4compat?()","ipv6_v4mapped?()","ipv6only!()","irb()","irb()","irb_abort()","irb_at_exit()","irb_context()","irb_exit()","irb_exit()","irb_level()","irb_load()","irb_load()","irb_require()","isequal()","is_a?()","is_alias_for()","is_reachable_from?()","is_version_1_2?()","isatty()","isatty()","isdst()","iseuc()","iseuc()","iseuc()","isjis()","isjis()","isjis()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","issetugid()","issjis()","issjis()","issjis()","issuer()","issuer()","issuer()","issuer()","issuer=()","issuer=()","issuer_certificate=()","issuer_key_hash()","issuer_name_hash()","issuer_of()","isutf8()","isutf8()","isutf8()","italy()","item()","items()","items()","iteration!()","iterator?()","itself()","iv=()","iv_len()","iv_len=()","j()","jacobian()","jd()","jd()","jd()","jisx0301()","jisx0301()","jisx0301()","jisx0301()","jj()","jobs()","jobs()","jobs_exist?()","join()","join()","join()","join()","join()","join()","join()","join()","join()","join_nowait()","join_nowait()","json_creatable?()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","julian()","julian?()","julian_leap?()","kconv()","kconv()","kconv()","keep_alive?()","keep_alive?()","keep_alive?()","keep_clean()","keep_if()","keep_if()","keep_if()","keep_if()","key()","key()","key()","key()","key()","key()","key=()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_len()","key_len=()","key_path()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys_with_inspector()","kill()","kill()","kill()","kill()","kill()","kill()","kill_job()","kind_of?()","known_class?()","l()","label()","label()","lambda()","lambda?()","lang()","laplace_expansion()","last()","last()","last()","lastbuilddate=()","last_error()","last_error()","last_error=()","last_match()","last_modified()","last_modified()","last_update()","last_update=()","latest_gc_info()","latest_rubygems_version()","latest_spec_for()","latest_specs()","latest_specs()","latest_version?()","latest_version_for()","launch()","lazy()","lazy()","lchmod()","lchmod()","lchown()","lchown()","lcm()","lcm()","ld()","ldexp()","leap?()","leap?()","legacy_platform()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","level()","level()","level()","level=()","level=()","level_notifier=()","levenshtein_distance()","lex()","lgamma()","lib_dirs_glob()","lib_files()","liberal_parsing?()","library_name()","libyaml_version()","license()","license=()","licenses()","licenses=()","limit()","line()","line()","line()","line_buffer()","line_trace_all()","line_trace_specify()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno=()","lineno=()","lineno=()","lineno=()","lines()","lines()","lines()","lines()","lines()","linger()","linger()","link()","link()","link()","link()","link_to()","list()","list()","list()","list()","list()","list()","list()","list()","list_files_in_directory()","list_item_from()","listable?()","listen()","listen()","listen()","listen()","listen()","listen()","listen()","listen()","listener()","listener()","listener()","listener=()","literalize()","ljust()","ln()","ln()","ln()","ln_s()","ln_s()","ln_sf()","ln_sf()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load_all()","load_and_instantiate()","load_api_keys()","load_cache()","load_cert()","load_certificate()","load_class()","load_class_data()","load_data()","load_default_cert()","load_default_key()","load_defaults()","load_documents()","load_env_plugins()","load_file()","load_file()","load_file()","load_from_binary()","load_from_binary_extra_data()","load_gemdeps()","load_key()","load_method()","load_mime_types()","load_mime_types()","load_options()","load_page()","load_path_insert_index()","load_plugins()","load_private_key()","load_public_key()","load_random_file()","load_rdoc()","load_rdoc()","load_spec()","load_specs()","load_stream()","load_yaml()","load_yaml()","loaded_spec_names()","local()","local()","local?()","local_address()","local_name()","local_name()","local_name=()","local_variable_defined?()","local_variable_get()","local_variable_set()","local_variables()","local_variables()","local_variables()","locale()","locale=()","locale_charmap()","localtime()","location=()","location_of_caller()","lock()","lock()","lock_shift_log()","locked?()","locked_requirement_named()","log()","log()","log()","log()","log()","log()","log()","log()","log10()","log10()","log10()","log2()","log2()","log2()","logging()","logging()","login()","login()","logo()","logo=()","logout()","long_name()","lookup_ring()","lookup_ring_any()","lookup_server()","loop()","lower_triangular?()","ls()","lshift!()","lstat()","lstat()","lstat()","lstrip()","lstrip!()","lsub()","ludecomp()","lup()","lup_decomposition()","lusolve()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","mail()","mailfrom()","mails()","main()","main()","main()","main=()","main_irb()","main_loop()","main_thread()","major_version()","major_version()","make()","make()","make()","make()","make_affine!()","make_command()","make_command()","make_compiler()","make_destination_dirs()","make_edge()","make_edge()","make_entry()","make_expires()","make_feed()","make_feed()","make_feed()","make_feed()","make_link()","make_methods()","make_parser()","make_passwd()","make_passwd()","make_passwd()","make_regexp()","make_socket()","make_start_tag()","make_switch()","make_symlink()","make_temp_directories()","make_thread_list()","make_time()","make_tuple()","make_variable_map()","make_xml_stylesheets()","makedirs()","makedirs()","maker()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","makers()","malloc()","malloc()","malloc()","malloc()","malloc_allocated_size()","malloc_allocations()","manage_owners()","map()","map()","map()","map()","map()","map()","map!()","map!()","map2()","map=()","map_gems_to_specs()","mark_version()","markup()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_version()","mask()","mask()","mask!()","mask=()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match?()","match?()","match?()","match?()","match?()","match?()","match?()","match_platform!()","match_platform?()","match_to()","match_to_consume()","matched()","matched?()","matched_size()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_for_glob()","matches_spec?()","matches_spec?()","matching_specs()","math_mode=()","max()","max()","max()","max()","max=()","max_by()","max_flag_count()","max_flag_count=()","maxgroups()","maxgroups=()","maybe_xml?()","mday()","mday()","mdtm()","measure()","measure()","media_subtype()","media_subtype()","media_subtype()","media_subtype()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","members()","members()","memberwise()","memsize_of()","memsize_of_all()","merge()","merge()","merge()","merge()","merge()","merge!()","merge!()","merge_key()","merge_options()","merge_path()","message()","message()","message()","message()","message_loop()","meta_vars()","method()","method_added()","method_added()","method_defined?()","method_file()","method_id()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_removed()","method_undefined()","methods()","methods()","methods_by_type()","methods_matching()","mime_split()","mime_type()","mime_type()","min()","min()","min()","min()","min()","min_by()","minmax()","minmax_by()","minor()","minor_version()","minor_version()","minute()","minute=()","minute=()","missing_extensions?()","mjd()","mkcol()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir_p()","mkdir_p()","mkfifo()","mkpath()","mkpath()","mkpath()","mktime()","mktmpdir()","mlsd()","mlst()","mod_add()","mod_exp()","mod_inverse()","mod_mul()","mod_sqr()","mod_sub()","mode()","mode()","models()","module()","module?()","module?()","module_eval()","module_exec()","module_function()","module_names()","modules()","modules_hash()","modules_hash()","modulo()","modulo()","modulo()","modulo()","modulo()","mon()","mon()","mon_check_owner()","mon_enter()","mon_enter_for_cond()","mon_exit()","mon_exit_for_cond()","mon_initialize()","mon_synchronize()","mon_try_enter()","monday?()","monday?()","month()","month()","month_days()","mount()","mount_proc()","mountpoint?()","move()","move()","move()","move()","move()","msg2str()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime=()","mu_lock()","mu_locked?()","mu_pp()","mu_synchronize()","mu_try_lock()","mu_unlock()","mul()","mult()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart_form()","must_c_version()","must_call_validators()","mv()","mv()","n_bytes()","n_jobs()","n_mails()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name=()","name=()","name=()","name_for()","name_for()","name_for()","name_for_explicit_dependency_source()","name_for_explicit_dependency_source()","name_for_locking_dependency_source()","name_for_locking_dependency_source()","name_for_path()","name_for_path()","name_list()","name_path()","name_pattern()","name_prefix()","name_prefix()","name_tuple()","named_captures()","named_captures()","names()","names()","names()","namespace()","namespace()","namespace()","namespace=()","namespace_context()","namespace_context=()","namespace_of()","namespace_uri()","namespaces()","namespaces()","namespaces=()","namespaces=()","namesplit()","nan?()","nan?()","nary()","native()","nc()","need_base64_encode?()","need_base64_encode?()","need_initialize_variables()","need_initialize_variables()","need_keeper?()","need_parent?()","need_parent?()","need_source_encoding_update?()","needs()","negative?()","negative?()","negative?()","nest()","nesting()","netmask()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_alias_name()","new_cond()","new_default_spec()","new_internet_message_io()","new_ntoh()","new_offset()","new_seed()","new_spec_satisfied?()","new_start()","new_toplevel()","new_with()","new_with()","new_with_uri()","new_with_uri()","new_with_value_if_need()","newobj()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next!()","next5()","next_current()","next_day()","next_element()","next_float()","next_month()","next_rotate_time()","next_sibling=()","next_sibling_node()","next_sibling_node()","next_token()","next_token()","next_update()","next_update()","next_update=()","next_values()","next_wait()","next_wait()","next_year()","nfc_one()","nfd_one()","nil?()","nil?()","nkf()","nlink()","nlsolve()","nlst()","nmake_found?()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","noecho()","noecho()","non_aliases()","non_nil_attributes()","nonblock()","nonblock=()","nonblock?()","none?()","none?()","nonzero?()","nonzero?()","noop()","noop()","norm()","norm()","normal?()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize!()","normalize_comment()","normalize_path()","normalize_path()","normalize_rss()","normalize_searching_criteria()","normalize_space()","normalize_yaml_input()","normalized()","normalized?()","normalized_file_list()","not()","not_after()","not_after=()","not_before()","not_before=()","not_found()","not_need_to_call_setup_maker_variables()","not_need_to_call_setup_maker_variables()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","not_set_required_variables()","notation()","notationdecl()","notationdecl()","notationdecl?()","notations()","note()","note_for()","notes()","notify()","notify()","notify()","notify()","notify()","notify()","notify?()","notify?()","notify?()","notify_event()","notify_observers()","notify_observers()","notwice()","now()","now()","nowrite()","npn_protocol()","nprocessors()","nread()","ns_declarations()","nsec()","ntop()","null()","null?()","num_bits()","num_bytes()","num_waiting()","num_waiting()","number()","numerator()","numerator()","numerator()","numerator()","numerator()","numerator()","object_address_group()","object_class()","object_group()","object_id()","object_maker()","oct()","oct()","odd?()","odd?()","odd?()","of()","off()","off_event()","offset()","offset()","offset_vtbl()","oflush()","oid()","oid()","oid()","oid=()","oid=()","ok?()","ok_to_remove?()","old_enc=()","ole_activex_initialize()","ole_classes()","ole_classes()","ole_free()","ole_free()","ole_func_methods()","ole_get_methods()","ole_instance_variable_get()","ole_instance_variable_set()","ole_method()","ole_method_help()","ole_methods()","ole_methods()","ole_obj_help()","ole_put_methods()","ole_query_interface()","ole_reference_count()","ole_respond_to?()","ole_show_help()","ole_type()","ole_type()","ole_type()","ole_type()","ole_type_detail()","ole_type_detail()","ole_typelib()","ole_typelib()","ole_types()","on()","on()","on_attr_charref()","on_attr_charref_hex()","on_attr_entityref()","on_attr_value()","on_attribute()","on_charref()","on_charref_hex()","on_connect()","on_curve?()","on_default()","on_entityref()","on_error()","on_etag()","on_event()","on_event_with_outargs()","on_head()","on_stag()","on_stag_end()","on_stag_end_empty()","on_tail()","on_windows?()","on_xmldecl_encoding()","on_xmldecl_end()","on_xmldecl_standalone()","on_xmldecl_version()","one?()","one?()","ongoing_visibility=()","opaque=()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open!()","open_and_lock_file()","open_editor()","open_gem()","open_logfile()","open_message_stream()","open_server()","open_server()","open_server()","open_uri_or_path()","open_uri_original_open()","open_uri_original_open()","opendir()","opened?()","option_list()","option_list()","optional?()","options()","options()","options()","options()","options()","options()","options()","options=()","options=()","options_of()","optname()","ord()","ord()","ord()","order()","order()","order!()","order!()","ordering=()","ordinal()","ordinal()","orig_initialize()","orig_name()","orig_name=()","original_name()","original_name()","orthogonal?()","os_code()","other_elements()","others_possible?()","out()","out()","out_of_line?()","out_of_line?()","outdated()","outdated_and_latest_version()","output()","output()","output()","output=()","output?()","output_encoding=()","output_flag_file()","output_name()","output_query_results()","output_versions()","owned?()","owned?()","owned?()","owned?()","owned?()","owner()","owner()","p()","p()","pack()","pack_sockaddr_in()","pack_sockaddr_un()","padding=()","page()","page_file()","page_name()","pair()","pair()","para()","paragraph()","param_list()","param_seq()","parameters()","parameters()","parameters()","params()","params()","params()","params()","params()","params=()","params_ok?()","paranoid()","parent()","parent()","parent()","parent()","parent=()","parent=()","parent=()","parent?()","parent?()","parent_file_name()","parent_name()","parent_name()","parent_of()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse_arg()","parse_args()","parse_args()","parse_bind_options()","parse_config()","parse_config_lines()","parse_ctype()","parse_dn()","parse_dot_doc_file()","parse_file()","parse_file()","parse_files()","parse_files_matching()","parse_form_data()","parse_form_data()","parse_header()","parse_header()","parse_headers()","parse_helper()","parse_int()","parse_line()","parse_make_command_line()","parse_mlsx_entry()","parse_openssl()","parse_pasv_ipv4_host()","parse_pasv_ipv6_host()","parse_pasv_port()","parse_pi_content()","parse_printf_format()","parse_query()","parse_query()","parse_query()","parse_qvalues()","parse_qvalues()","parse_range_header()","parse_range_header()","parse_rfc2253()","parse_set_cookie()","parse_set_cookies()","parse_signature()","parse_source()","parse_source()","parse_stream()","parse_stream()","parse_struct_signature()","parse_time()","parser()","parser()","parser()","partition()","partition()","pass()","passwd()","password()","password=()","password_field()","patch()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path=()","path_ok?()","path_separator()","path_to?()","pathconf()","paths()","paths=()","pattern()","pattern()","pbkdf2_hmac()","pbkdf2_hmac_sha1()","peek()","peek()","peek()","peek()","peek()","peek_result()","peek_values()","peep()","peer_cert()","peer_cert()","peer_cert_chain()","peeraddr()","peeraddr()","peeraddr()","peg_parse()","pem_files_in()","pending()","pending_interrupt?()","pending_interrupt?()","percent_doc()","permanent_link=()","permanent_link?()","permutation()","permutation?()","permute()","permute!()","permute!()","pfamily()","phase()","phase()","phase()","pick_best!()","pid()","pid()","pid()","pid()","pid()","pin_gem_source()","pipe()","pipe?()","pipe?()","pipe?()","pipe?()","pipeline()","pipeline()","pipeline_r()","pipeline_r()","pipeline_rw()","pipeline_rw()","pipeline_start()","pipeline_start()","pipeline_w()","pipeline_w()","pkcs5_keyivgen()","pkg_config()","platform()","platform()","platform()","platform()","platform=()","platform_defaults()","platforms()","platforms()","platforms=()","plural_forms()","point()","point=()","point_conversion_form()","point_conversion_form=()","pointer()","pointer=()","polar()","polar()","polar()","pools_for()","pop()","pop()","pop()","pop()","pop()","pop()","pop!()","pop_inspect_key()","pop_possibility_state()","pop_token()","pop_workspace()","popd()","popdir()","popen()","popen()","popen2()","popen2()","popen2e()","popen2e()","popen3()","popen3()","popup_menu()","port()","port()","port=()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos=()","pos=()","pos=()","pos=()","pos=()","position()","position()","position()","position()","position()","positive?()","positive?()","positive?()","positive_integer_writer()","possibilities()","possibility()","post()","post()","post2()","post_build()","post_connection_check()","post_form()","post_install()","post_match()","post_match()","post_reset()","post_uninstall()","power()","pp()","pp()","pp()","pp()","pp()","pp()","pp_hash()","pp_object()","ppid()","ppx()","ppx()","pre_input_hook()","pre_input_hook=()","pre_install()","pre_install_checks()","pre_match()","pre_match()","pre_reset()","pre_uninstall()","preceding()","preceding_node_of()","precs()","pred()","pred()","predecessors()","predicate()","predicate()","predicate()","predicate_to_string()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefix()","prefix()","prefix()","prefix_of()","prefixes()","prefixes()","prepend()","prepend()","prepend()","prepend()","prepend()","prepend_features()","prepended()","prerelease=()","prerelease=()","prerelease?()","prerelease?()","prerelease?()","prerelease?()","prerelease_specs()","pressed?()","pretty()","pretty_generate()","pretty_inspect()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","pretty_print()","pretty_print()","pretty_print()","prev_day()","prev_float()","prev_month()","prev_year()","previous=()","previous_element()","previous_period_end()","previous_sibling=()","previous_sibling_node()","primary()","prime?()","prime?()","prime?()","prime?()","prime_division()","prime_division()","prime_division()","prime_fasttest?()","primes()","primes_so_far()","primitive_convert()","primitive_errinfo()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print_profile()","print_usage()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printn()","printn()","priority()","priority=()","private()","private?()","private?()","private?()","private?()","private_call?()","private_class_method()","private_constant()","private_decrypt()","private_encrypt()","private_instance_methods()","private_key()","private_key=()","private_key?()","private_method_defined?()","private_methods()","proc()","procdest()","process()","process()","process()","process()","process_args()","process_based_port()","process_based_port()","process_directive()","process_topmost_state()","processinginstruction()","processing_instruction()","processing_instruction()","product()","progid()","progids()","program_name()","progress()","progress_rate()","progress_reporter()","prompt_mode=()","prompting?()","proper_subset?()","proper_superset?()","propfind()","proppatch()","protected()","protected_instance_methods()","protected_method_defined?()","protected_methods()","protected_methods()","protocol()","provide()","proxy?()","proxy_address()","proxy_basic_auth()","proxy_class?()","proxy_for()","proxy_from_env?()","proxy_pass()","proxy_port()","proxy_uri()","proxy_user()","proxyaddr()","proxyport()","prune()","prune()","pseudo_bytes()","psych_to_yaml()","psych_yaml_as()","ptr()","pubdate()","pubdate()","pubdate=()","pubdate=()","public()","public()","public?()","public?()","public?()","public?()","public_class_method()","public_constant()","public_decrypt()","public_encrypt()","public_instance_method()","public_instance_methods()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key=()","public_key=()","public_key=()","public_key=()","public_key?()","public_method()","public_method_defined?()","public_methods()","public_methods()","public_send()","pull()","pull()","pull_event()","purgeable?()","purpose=()","purpose=()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push_action()","push_inspect_key()","push_state_for_requirements()","push_workspace()","pushd()","pushdir()","put()","put_string()","putback()","putbinaryfile()","putc()","putc()","putc()","putc()","putc()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puttextfile()","pwd()","pwd()","pwd()","pwd()","pwd()","qdval()","query()","query=()","quick()","quick_gem()","quiet()","quiet=()","quit()","quit()","quo()","quo()","quo()","quo()","quo()","quote()","quote()","quote()","quote_string()","quoting_detection_proc()","quoting_detection_proc=()","r()","racc_accept()","racc_e_pop()","racc_next_state()","racc_print_stacks()","racc_print_states()","racc_read_token()","racc_reduce()","racc_shift()","racc_token2str()","radio_button()","radio_group()","raise()","raise()","raise()","raise_for_undefined_entity?()","raise_for_undefined_entity?()","raise_for_undefined_entity?()","raised_exception()","rand()","rand()","rand()","rand()","random_add()","random_bytes()","random_bytes()","random_iv()","random_key()","random_number()","random_string()","random_string()","rank()","rank_e()","rassoc()","rassoc()","rassoc()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","raw()","raw()","raw()","raw!()","raw_cookie()","raw_cookie2()","raw_data()","raw_encoding()","raw_seed()","rb_files_in()","rcptto()","rcptto_list()","rdev()","rdev_major()","rdev_minor()","rdoc()","rdoc_installed?()","rdoc_installed?()","rdoc_options()","rdoc_options=()","rdoc_target()","rdoc_target()","rdoc_task_description()","rdoc_task_description()","rdoc_task_name()","rdoc_task_name()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","re_sign()","reachable_objects_from()","reachable_objects_from_root()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read_all()","read_all()","read_binary()","read_binary()","read_body()","read_body_0()","read_cache()","read_checksums()","read_file()","read_from_cmdline()","read_multipart()","read_nonblock()","read_nonblock()","read_nonblock()","read_nonblock()","read_smime()","read_status_line()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","read_type_class()","read_with_substitution()","readable?()","readable?()","readable?()","readable?()","readable?()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readable_real?()","readable_real?()","readable_real?()","readable_real?()","readagain_bytes()","readbyte()","readbyte()","readbyte()","readbyte()","readchar()","readchar()","readchar()","readchar()","readchar()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlink()","readlink()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","ready()","ready?()","real()","real()","real()","real?()","real?()","real?()","real_load()","realdirpath()","realdirpath()","realloc()","really_verbose()","realpath()","realpath()","realtime()","realtime()","reason()","reason()","reason_phrase()","reason_phrase()","reason_phrase()","receive()","receive_responses()","receiver()","receiver()","receiver()","recipients()","record_depth()","record_entity_expansion()","record_location()","record_location()","record_requirements()","record_response()","recover()","rect()","rect()","rect()","rect()","rectangular()","rectangular()","rectangular()","rectangular()","recurse()","recurse_proc()","recursive_predecessors()","recursive_successors()","recv()","recv_io()","recv_nonblock()","recv_response()","recvfrom()","recvfrom()","recvfrom()","recvfrom_nonblock()","recvfrom_nonblock()","recvmsg()","recvmsg_nonblock()","redirect?()","redirect?()","redirect_to_directory_uri()","redirector()","redisplay()","reduce()","reduce_to_hessenberg()","ref()","reference()","refine()","refresh()","refresh_line()","refute_file()","refute_path_exists()","regexp()","regexp()","regexp()","regist()","regist_server()","regist_server()","register()","register()","register()","register()","register()","register()","register()","register_command()","register_default_spec()","register_empty()","register_uri()","registry=()","regular?()","rehash()","rehash()","rehash()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject!()","reject!()","reject!()","reject!()","reject!()","reject!()","reject!()","relative?()","relative?()","relative_path_from()","release()","release()","reload()","reload()","reload()","reload()","remainder()","remainder()","remainder()","remainder()","remote=()","remote?()","remote_address()","remote_ip()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove_all()","remove_by_name()","remove_class_variable()","remove_const()","remove_dir()","remove_dir()","remove_entry()","remove_entry()","remove_entry_secure()","remove_entry_secure()","remove_executables()","remove_file()","remove_file()","remove_from_documentation?()","remove_frozen_string_literal()","remove_handler()","remove_installed!()","remove_instance_variable()","remove_invisible()","remove_method()","remove_modeline()","remove_nodoc()","remove_nodoc_children()","remove_old_bin_files()","remove_old_lib_files()","remove_option()","remove_owners()","remove_private()","remove_response_handler()","remove_server()","remove_server()","remove_siginfo_handler()","remove_spec()","remove_specs_unsatisfied_by()","remove_stress_to_class()","remove_unparseable()","remove_unresolved_default_spec()","renamable?()","rename()","rename()","rename()","rename()","renew()","renew()","reopen()","reopen()","reopen()","reopen()","reopen()","reorganize()","repeated_combination()","repeated_permutation()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace!()","replace_child()","replace_with()","replacement()","replacement=()","replicate()","reply()","reply_service()","report()","report()","report_attributes()","report_class_module()","report_constants()","report_methods()","report_on_exception()","report_on_exception()","report_on_exception=()","report_on_exception=()","represent_map()","represent_object()","represent_scalar()","represent_seq()","req()","request()","request()","request()","request_body_permitted?()","request_context()","request_get()","request_head()","request_path()","request_post()","request_uri()","requester()","requests()","require()","require()","require_nested_dependencies_for()","require_path()","require_path=()","require_paths()","require_paths=()","require_relative()","required_attribute?()","required_attributes()","required_element?()","required_element?()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_ruby_version=()","required_rubygems_version=()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variable_names()","required_variables_are_set?()","requirement()","requirement()","requirement()","requirement!()","requirement_for_existing_name()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_tree_for()","requirement_trees()","requirements()","requirements()","requirements()","requirements=()","requirements_list()","rerdoc_task_description()","rerdoc_task_description()","rerdoc_task_name()","rerdoc_task_name()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset_nil_attributes_to_default()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve_aliases()","resolve_class()","resolve_current()","resources()","resources()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","response_body_permitted?()","response_class()","responses()","rest()","rest?()","rest_size()","restore()","restore()","restore()","restore()","restore()","restore()","restore()","restsize()","result()","result()","result()","result()","resume()","resume()","retrbinary()","retrlines()","return_headers?()","return_type()","return_type_detail()","return_value()","return_vtype()","retval?()","reverse()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","reverse_each()","revive()","revive_hash()","revocation_reason()","revocation_time()","revoked()","revoked=()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind_to()","rewind_to()","rfc1123_date()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc3339()","rfc3339()","rfc3339()","rfc3339()","rfc822()","rfc822()","rfc822()","rfc822()","rfc822()","ri_dir()","ri_installed?()","ri_installed?()","ri_paths()","rid()","rid()","rindex()","rindex()","rjust()","rm()","rm()","rm_f()","rm_f()","rm_r()","rm_r()","rm_rf()","rm_rf()","rmdir()","rmdir()","rmdir()","rmdir()","rmdir()","rmdir()","rmtree()","rmtree()","rmtree()","root()","root()","root()","root()","root()","root()","root?()","root?()","root_node()","root_search()","root_vertex_named()","roots()","rotate()","rotate!()","round()","round()","round()","round()","round()","round()","round()","round()","round()","round()","route_from()","route_to()","row()","row_count()","row_size()","row_vector()","row_vectors()","rows()","rpartition()","rset()","rshift!()","rsqrt()","rsqrt()","rss()","rstrip()","rstrip!()","ruby()","ruby()","ruby=()","ruby_api_version()","ruby_code()","ruby_engine()","ruby_version()","rubybin()","rubygems_api_key()","rubygems_api_key=()","rubygems_api_request()","rubygems_target_version()","rubygems_version()","rule()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_config()","runtime?()","runtime_dependencies()","s3_expiration()","safe_level()","safe_load()","safe_unlink()","safe_unlink()","same_attributes?()","same_feed_type?()","sample()","sanitize()","sanitize_path()","sanitize_string()","satisfied_by?()","satisfies_requirement?()","saturday?()","saturday?()","save()","save_cache()","save_class()","save_data()","save_data_with_atomic_file_rename_strategy()","save_data_with_fast_strategy()","save_exception_mode()","save_gemspec()","save_history()","save_history=()","save_limit()","save_loaded_features()","save_method()","save_page()","save_rounding_mode()","say()","say()","scalar()","scalar()","scalar()","scalar()","scalar=()","scan()","scan()","scan()","scan()","scan()","scan_full()","scan_make_command_lines()","scan_until()","scanf()","scanf()","scanf()","scheme=()","scheme_list()","scope()","scope=()","scrolling_list()","scrub()","scrub!()","search()","search()","search()","search()","search_const()","search_convpath()","search_file()","search_for()","search_for()","search_for()","search_for_dependency()","search_full()","search_internal()","search_record()","search_record()","search_record()","search_servlet()","searcher=()","sec()","sec()","sec_fraction()","second()","second=()","second=()","second_fraction()","section()","section_contents()","sections()","sections()","secure=()","security_level()","security_level=()","see()","seed()","seed()","seed()","seed=()","seek()","seek()","seek()","seek()","seek()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select!()","select!()","select!()","select!()","self()","send()","send()","send()","send()","send_command()","send_data()","send_entity()","send_gem()","send_io()","send_list_data()","send_literal()","send_mail()","send_message()","send_number_data()","send_quoted_string()","send_request()","send_request_with_body()","send_request_with_body_data()","send_request_with_body_stream()","send_string_data()","send_symbol_data()","send_time_data()","sendcmd()","sender()","sendmail()","sendmsg()","sendmsg_nonblock()","separator()","seplist()","seq=()","serial()","serial()","serial()","serial()","serial()","serial=()","serial=()","server_error?()","server_error?()","server_name()","service()","service()","service()","service()","session()","session=()","session_add()","session_cache_mode()","session_cache_mode=()","session_cache_size()","session_cache_size=()","session_cache_stats()","session_get_cb()","session_new_cb()","session_remove()","session_reused?()","set()","set_api_key()","set_api_key()","set_attributes()","set_backtrace()","set_backtrace()","set_bit!()","set_close_on_exec()","set_close_on_exec()","set_component()","set_component()","set_crt_params()","set_ctypes()","set_ctypes()","set_current_section()","set_debug_output()","set_debug_output()","set_debug_output()","set_default()","set_default_paths()","set_default_values()","set_dev()","set_dictionary()","set_dictionary()","set_dn()","set_element()","set_element()","set_encoding()","set_encoding()","set_encoding()","set_encoding()","set_eoutvar()","set_eoutvar()","set_eoutvar()","set_error()","set_error()","set_extensions()","set_factors()","set_filter()","set_generator()","set_get_line_procs()","set_headers()","set_host()","set_key()","set_key()","set_key()","set_last_thread()","set_last_value()","set_next_element()","set_non_blocking()","set_non_blocking()","set_opaque()","set_option()","set_options()","set_params()","set_parent()","set_passwd()","set_passwd()","set_passwd()","set_password()","set_path()","set_path()","set_payload()","set_payload()","set_port()","set_pqg()","set_pqg()","set_redirect()","set_scheme()","set_scope()","set_screen_size()","set_size()","set_socket()","set_to()","set_to_infinity!()","set_trace()","set_trace_func()","set_trace_func()","set_typecode()","set_user()","set_userinfo()","set_visibility_for()","set_xhtml_uri_as_default_uri()","setacl()","setbyte()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setgid?()","setgrent()","setpgid()","setpgrp()","setpriority()","setproctitle()","setproperty()","setpwent()","setquota()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setsid()","setsockopt()","setsockopt()","setter()","setuid()","setuid?()","setuid?()","setuid?()","setuid?()","setup()","setup()","setup()","setup()","setup()","setup()","setup_certificate()","setup_elements()","setup_elements()","setup_elements()","setup_elements()","setup_generator()","setup_image()","setup_image()","setup_items()","setup_items()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_attributes()","setup_maker_element()","setup_maker_element()","setup_maker_element()","setup_maker_element()","setup_maker_element()","setup_maker_element()","setup_maker_element_writer()","setup_maker_element_writer()","setup_maker_elements()","setup_maker_elements()","setup_maker_elements()","setup_maker_elements()","setup_maker_elements()","setup_next_element()","setup_next_element_in_unknown_element()","setup_other_elements()","setup_output_dir()","setup_params()","setup_signer()","setup_ssl_context()","setup_textinput()","setup_textinput()","setup_values()","sev_threshold=()","sexp()","sexp_raw()","sfork()","shallow_eql?()","shebang()","shellescape()","shellescape()","shellescape()","shelljoin()","shelljoin()","shelljoin()","shellsplit()","shellsplit()","shellsplit()","shellwords()","shellwords()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift_log_age()","shift_log_period()","short_name()","show_documentation()","show_files()","show_gems()","show_help()","show_lookup_failure()","show_owners()","show_rdoc_for_pattern()","show_release_notes()","show_version()","shuffle()","shuffle!()","shutdown()","shutdown()","shutdown()","shutdown()","sid_available?()","sid_available?()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign_in()","sign_s3_url()","signal()","signal()","signal()","signal_handle()","signal_status()","signaled?()","signame()","signature()","signature_algorithm()","signature_algorithm()","signature_algorithm()","signed_time()","signers()","signo()","silent_system()","sin()","sin()","sin()","sin()","single?()","single_delegate()","singleline_format()","singleline_pp()","singleton_class()","singleton_class?()","singleton_method()","singleton_method_added()","singleton_method_added()","singleton_method_added()","singleton_method_removed()","singleton_method_undefined()","singleton_methods()","singular?()","singular?()","sinh()","sinh()","sinh()","site()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size=()","size=()","size?()","size?()","size?()","size?()","size_opt_params()","size_params()","sizeof()","skip()","skip()","skip()","skip_blanks?()","skip_during()","skip_during()","skip_until()","sleep()","sleep()","sleep()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice_after()","slice_after()","slice_before()","slice_before()","slice_when()","slice_when()","sn()","snippet()","soak_up_spaces()","sockaddr_in()","sockaddr_un()","socket?()","socket?()","socket?()","socket?()","socketpair()","socketpair()","socktype()","solve()","sort()","sort()","sort()","sort!()","sort_by()","sort_by!()","sort_by!()","sort_dependencies()","sort_dependencies()","sort_dependencies()","sort_if_need()","sort_internal()","sort_obj()","sort_sections()","sorted()","sorted_requests()","source()","source()","source()","source()","source()","source_encoding()","source_encoding()","source_encoding()","source_encoding_name()","source_encoding_name()","source_file()","source_for()","source_location()","source_location()","source_location()","source_ole_types()","source_paths()","sources()","sources=()","spawn()","spawn()","spawn()","spec()","spec()","spec()","spec()","spec()","spec()","spec_authors()","spec_cache_dir()","spec_dir()","spec_fetcher()","spec_file()","spec_file()","spec_for()","spec_for()","spec_for_dependency()","spec_groups()","spec_homepage()","spec_license()","spec_loaded_from()","spec_name()","spec_name()","spec_path()","spec_platforms()","spec_predecessors()","spec_summary()","special_prefixes()","special_prefixes=()","specific?()","specific?()","specific_extra_args()","specific_extra_args_hash()","specs()","specs()","specs()","specs_in()","split()","split()","split()","split()","split()","split()","split()","split_arguments()","split_gem_path()","split_header_value()","split_header_value()","split_name()","split_path()","split_userinfo()","sprintf()","sqr()","sqrt()","sqrt()","sqrt()","sqrt()","sqrt()","sqrt()","square?()","squeeze()","squeeze!()","srand()","srand()","src_type()","ssl?()","ssl?()","ssl_params()","ssl_socket()","ssl_version()","ssl_version=()","sspi_auth()","sspi_auth?()","stand_alone?()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","startelement()","start_collecting_tokens()","start_doc()","start_document()","start_document()","start_document()","start_element()","start_element?()","start_else_element()","start_export()","start_get_text_element()","start_have_something_element()","start_import()","start_job()","start_keeper()","start_mapping()","start_prefix_mapping()","start_profile()","start_resolution()","start_sequence()","start_service()","start_service()","start_stream()","start_stream()","start_tls_session()","start_tls_session()","start_with?()","started?()","started?()","started?()","starts_with()","starttls()","starttls()","starttls?()","starttls_always?()","starttls_auto?()","stat()","stat()","stat()","stat()","stat()","stat()","state()","state()","state_any?()","state_index_for_unwind()","status()","status()","status()","status()","status()","status()","status()","status=()","status?()","status_line()","status_string()","status_type_char()","stdinput()","stdout()","stdout=()","stdoutput()","step()","step()","step()","sticky?()","sticky?()","sticky?()","sticky?()","stop()","stop()","stop()","stop?()","stop_doc()","stop_profile()","stop_service()","stop_service()","stop_service()","stop_service()","stopped?()","stopsig()","storbinary()","store()","store()","store()","store()","store()","store()","store()","store=()","store=()","store=()","store=()","store=()","store=()","store=()","store_for()","store_internal()","storlines()","stream=()","stream_check()","stream_end?()","streaming?()","stress()","stress=()","strftime()","strftime()","strftime()","strict_decode64()","strict_encode64()","string()","string()","string()","string()","string()","string=()","string=()","string_length()","string_value()","strip()","strip!()","strip_hashes()","strip_newlines()","strip_quotes()","strip_stars()","strong()","strongly_connected_components()","strongly_connected_components()","strptime()","strptime()","strptime()","struct()","stubbed?()","stubbed?()","stubs()","stubs_for()","su()","su()","sub()","sub()","sub()","sub()","sub!()","sub_ext()","subdomain_of?()","subject()","subject()","subject=()","subject=()","subject_certificate=()","subject_request=()","submit()","subscribe()","subsec()","subset?()","substring()","substring_after()","substring_before()","subtract()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ!()","success?()","success?()","success?()","success?()","success?()","successors()","suffix_pattern()","suffixes()","suggest_gems_from_name()","suggestions()","sum()","sum()","sum()","sum()","summarize()","summarize()","summarize()","summary()","summary=()","sunday?()","sunday?()","super_each()","super_method()","super_method()","superclass()","superclass()","superclass()","superclass=()","superclass_method()","superset?()","supply_default_content_type()","supported?()","suppress()","suppressed?()","suspend()","suspend_context()","suspend_input_method()","suspend_name()","suspend_workspace()","swapcase()","swapcase()","swapcase!()","switch()","switch()","switch()","switch_name()","sym()","sym()","sym()","symbolize()","symlink()","symlink()","symlink()","symlink?()","symlink?()","symlink?()","symlink?()","symlink?()","symmetric?()","sync()","sync()","sync()","sync()","sync()","sync=()","sync=()","sync=()","sync_exclusive?()","sync_exclusive?()","sync_extend()","sync_extend()","sync_initialize()","sync_initialize()","sync_inspect()","sync_inspect()","sync_lock()","sync_lock()","sync_locked?()","sync_locked?()","sync_point?()","sync_shared?()","sync_shared?()","sync_synchronize()","sync_synchronize()","sync_try_lock()","sync_try_lock()","sync_try_lock_sub()","sync_try_lock_sub()","sync_unlock()","sync_unlock()","synchronize()","synchronize()","syncmode=()","sysaccept()","sysaccept()","sysaccept()","syscall()","sysclose()","sysconf()","sysconfdir()","syslog()","syslog=()","sysopen()","sysopen()","sysread()","sysread()","sysread()","sysread()","sysread_nonblock()","sysseek()","syssign()","system()","system()","system()","system()","system_path=()","systmpdir()","sysverify()","syswrite()","syswrite()","syswrite_nonblock()","t()","table()","tag()","tag()","tag()","tag()","tag()","tag_end()","tag_end()","tag_filter()","tag_name()","tag_name()","tag_name_with_prefix()","tag_start()","tag_start()","tagurize()","taint()","taint()","taint()","tainted?()","take()","take()","take()","take()","take()","take_while()","take_while()","take_while()","tan()","tan()","tan()","tanh()","tanh()","tanh()","tap()","tar_dir_header()","tar_file_header()","tar_symlink_header()","tcp()","tcp()","tcp_server_loop()","tcp_server_sockets()","tcp_socket()","teardown()","tee()","tell()","tell()","tell()","tell()","tell()","tell()","temp_dir()","template_dir_for()","terminal()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate_interaction()","terminate_interaction()","terminate_interaction()","terminate_job()","terminated?()","terminated?()","termsig()","test()","test()","text()","text()","text()","text()","text()","text()","text=()","text=()","text=()","text?()","text?()","text_field()","text_type_writer()","textarea()","textinput()","texts()","this()","this_update()","thread()","thread()","thread()","thread()","thread_internal()","thread_list()","thread_list_all()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","throw()","thursday?()","thursday?()","time()","time()","time()","time=()","time=()","time=()","time=()","timeout()","timeout()","timeout()","timeout()","timeout=()","timeouts=()","times()","times()","times()","timestamp()","title()","title=()","tls?()","tlsconnect()","tmp_dh_callback()","tmp_ecdh_callback()","tmp_key()","tmpdir()","to=()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_ary()","to_ary()","to_atom()","to_basic()","to_binary()","to_bn()","to_bn()","to_bn()","to_bn()","to_c()","to_c()","to_c()","to_c()","to_class_name()","to_csv()","to_csv()","to_d()","to_d()","to_d()","to_d()","to_d()","to_d()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_digits()","to_dot()","to_element_methods()","to_enum()","to_enum()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed_for_categories()","to_fullpath()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_id()","to_id()","to_id()","to_id()","to_id()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_io()","to_io()","to_io()","to_io()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_mailtext()","to_name()","to_name()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_oct()","to_path()","to_path()","to_path()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_proc()","to_proc()","to_proc()","to_proc()","to_ptr()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_range()","to_request_set()","to_rfc822text()","to_rss()","to_ruby()","to_ruby()","to_ruby_for_cache()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_set()","to_set()","to_sockaddr()","to_spec()","to_spec()","to_spec()","to_specs()","to_str()","to_str()","to_string()","to_string()","to_sym()","to_sym()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_time()","to_time()","to_time()","to_uri()","to_value()","to_write_io()","to_xml()","to_yaml()","to_yaml()","today()","toeuc()","toeuc()","toeuc()","tojis()","tojis()","tojis()","token_stream()","token_to_str()","tokenize()","tokenize()","tokenize()","tokenize()","tokenize()","tokens_to_s()","tolocale()","tolocale()","tolocale()","tomdoc?()","top()","top()","top()","top()","top()","top_level()","top_level()","top_level_test()","toplevel_load()","tosjis()","tosjis()","tosjis()","total_in()","total_out()","total_time()","touch()","touch()","toutf16()","toutf16()","toutf16()","toutf32()","toutf32()","toutf32()","toutf8()","toutf8()","toutf8()","tr()","tr()","tr!()","tr_s()","tr_s!()","trace()","trace()","trace()","trace_func()","trace_object_allocations()","trace_object_allocations_clear()","trace_object_allocations_debug_start()","trace_object_allocations_start()","trace_object_allocations_stop()","trace_var()","transact()","transaction()","transfer()","transform()","transform_values()","transform_values!()","translate()","transport_request()","transpose()","transpose()","trap()","trap()","traverse()","traverse()","traverse_parents()","tree()","tridiagonalize()","true()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate_text()","trust()","trust()","trust=()","trust=()","trust_cert()","trust_dir()","trusted_certificates()","try_activate()","try_const()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_lock()","try_mon_enter()","try_type()","tsort()","tsort()","tsort()","tsort_each()","tsort_each()","tsort_each_child()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","tsort_each_node()","tty?()","tty?()","tty?()","tty?()","tuesday?()","tuesday?()","tv_nsec()","tv_sec()","tv_usec()","type()","type()","type()","type()","type()","type()","type()","type=()","typealias()","typecode=()","typekind()","typelibs()","typelibs()","typename()","u()","u()","u()","ucmp()","udp()","udp_server_loop()","udp_server_loop_on()","udp_server_recv()","udp_server_sockets()","ui()","ui()","ui()","ui=()","ui=()","uid()","uid()","uid=()","uid_copy()","uid_fetch()","uid_move()","uid_search()","uid_sort()","uid_store()","uid_thread()","uidl()","umask()","umount()","unadvise()","unalias_command()","unalias_command()","uname()","unbind()","unconverted_fields?()","undef_method()","undef_system_command()","undef_system_command()","undefine_finalizer()","undoc_params()","unescape()","unescape()","unescape()","unescape()","unescape()","unescapeelement()","unescapehtml()","unescape_element()","unescape_form()","unescape_html()","unescape_value()","ungetbyte()","ungetbyte()","ungetbyte()","ungetc()","ungetc()","ungetc()","ungetc()","unicode_normalize()","unicode_normalize!()","unicode_normalized?()","uninstall()","uninstall_all()","uninstall_dep()","uninstall_gem()","uninstall_gem()","uninstall_old_gemcutter()","uninstall_specific()","union()","union()","union()","uniq()","uniq()","uniq()","uniq!()","unique_classes()","unique_classes_and_modules()","unique_id()","unique_modules()","unit()","unitary?()","unix()","unix()","unix?()","unix_path()","unix_rights()","unix_rights()","unix_server_loop()","unix_server_socket()","unix_socket_abstract_name?()","unknown()","unknown()","unknown()","unlink()","unlink()","unlink()","unlink()","unlink()","unlock()","unlock()","unmount()","unnormalize()","unnormalize()","unnormalized()","unpack()","unpack()","unpack()","unpack1()","unpack_sockaddr_in()","unpack_sockaddr_un()","unregist()","unregister_command()","unresolved_deps()","unresolved_names()","unscan()","unshift()","unshift()","unshift()","unshift()","unshift()","unsubscribe()","untaint()","untaint()","untaint()","untrace_var()","untrust()","untrust()","untrusted?()","unused()","unwind_for_conflict()","up()","up()","up()","up()","up()","upcase()","upcase()","upcase!()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update_aliases()","update_cache?()","update_checksum()","update_content()","update_content()","update_extends()","update_gem()","update_gems()","update_includes()","update_index()","update_output_dir()","update_rubygems()","update_specs_index()","updated()","updated()","updated()","updated()","updated()","updated()","updated=()","updated=()","updated=()","upgrade_to_class()","upper_bound()","upper_bound=()","upper_triangular?()","upto()","upto()","upto()","upto()","uptodate?()","uptodate?()","uri()","uri()","uri_convert_attr_reader()","uri_encode()","uri_option()","uri_option()","uri_registered?()","url_encode()","url_encode()","urlsafe_base64()","urlsafe_decode64()","urlsafe_encode64()","usage()","use_gemdeps()","use_loader()","use_loader=()","use_loader?()","use_markup()","use_paths()","use_readline=()","use_ssl=()","use_ssl?()","use_ssl?()","use_ssl?()","use_tracer=()","use_ui()","use_ui()","usec()","used_modules()","user()","user=()","user_agent()","user_dir()","user_home()","userinfo()","userinfo=()","using()","using_anon_cipher?()","utc()","utc()","utc?()","utc_offset()","util_build_gem()","util_clear_gems()","util_dir_entry()","util_entry()","util_gem()","util_gzip()","util_inst_bindir()","util_installer()","util_make_exec()","util_make_gems()","util_remove_gem()","util_restore_ruby_version()","util_set_ruby_version()","util_set_arch()","util_setup_fake_fetcher()","util_setup_gem()","util_setup_spec_fetcher()","util_spec()","util_symlink_entry()","util_zip()","utime()","utime()","uuid()","v()","v()","v_inv()","valid?()","valid_civil?()","valid_commercial?()","valid_date?()","valid_encoding?()","valid_jd?()","valid_number?()","valid_nz_number?()","valid_ordinal?()","valid_v6?()","validate()","validate()","validate()","validate_attribute()","validate_data()","validate_duplicate_links()","validate_for_stream()","validate_line()","validate_one_tag_name()","validate_permissions()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value=()","value=()","value=()","value=()","value=()","value=()","value?()","value?()","value?()","value?()","value?()","values()","values()","values()","values()","values()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","variable_is_set?()","variable_is_set?()","variable_is_set?()","variable_kind()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables()","variables=()","variables=()","varkind()","vartype()","vc_windows?()","vc_windows?()","vendor_gem()","ver()","ver()","verb()","verbose()","verbose()","verbose()","verbose=()","verbose=()","verbose?()","verbose_capture_io()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify_api_key()","verify_callback=()","verify_certificate()","verify_certificate_identity()","verify_certificate_identity()","verify_certificate_message()","verify_entry()","verify_files()","verify_gem()","verify_gem_file()","verify_internal_consistency()","verify_result()","verify_signatures()","verify_spec_name()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version=()","version=()","version=()","version=()","version_1_2()","version_1_2?()","versions()","vertex_named()","vi_editing_mode()","vi_editing_mode?()","virtual_host()","visibility=()","visible?()","visible?()","visible?()","visible?()","visit()","visit()","visit_array()","visit_basicobject()","visit_bigdecimal()","visit_class()","visit_complex()","visit_date()","visit_datetime()","visit_encoding()","visit_exception()","visit_falseclass()","visit_float()","visit_hash()","visit_integer()","visit_module()","visit_nameerror()","visit_nilclass()","visit_object()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_document()","visit_psych_nodes_document()","visit_psych_nodes_document()","visit_psych_nodes_mapping()","visit_psych_nodes_mapping()","visit_psych_nodes_mapping()","visit_psych_nodes_scalar()","visit_psych_nodes_scalar()","visit_psych_nodes_scalar()","visit_psych_nodes_sequence()","visit_psych_nodes_sequence()","visit_psych_nodes_sequence()","visit_psych_nodes_stream()","visit_psych_nodes_stream()","visit_psych_nodes_stream()","visit_psych_omap()","visit_psych_set()","visit_range()","visit_rational()","visit_regexp()","visit_string()","visit_string()","visit_struct()","visit_symbol()","visit_time()","visit_trueclass()","visit_array_subclass()","visit_hash_subclass()","voidcmd()","vstack()","vstack()","w3cdtf()","w3cdtf()","wait()","wait()","wait()","wait()","wait()","wait2()","wait?()","wait?()","wait_all_jobs_execution()","wait_for_child_process_to_exit()","wait_for_continue()","wait_readable()","wait_to_finish_all_process_controllers()","wait_until()","wait_while()","wait_writable()","waitall()","waiting()","waiting_job?()","waiting_jobs()","waiting_jobs_exist?()","waitpid()","waitpid2()","wakeup()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn?()","warn?()","warning()","wday()","wday()","weakref_alive?()","wednesday?()","wednesday?()","when_invoked()","which_to_update()","whitespace()","why_not_ok?()","win32_last_error()","win32_last_error=()","win_platform=()","win_platform?()","win_platform?()","win_platform?()","windows_stub_script()","winsize()","winsize=()","with()","with_config()","with_index()","with_index()","with_no_such_dependency_error_handling()","with_object()","with_object()","with_response()","wordy()","wordy()","workspaces()","world_readable?()","world_readable?()","world_readable?()","world_readable?()","world_writable?()","world_writable?()","world_writable?()","world_writable?()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap()","writable?()","writable?()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","writable_real?()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write_binary()","write_build_info_file()","write_cache_file()","write_cdata()","write_cdata()","write_comment()","write_comment()","write_default_spec()","write_document()","write_document()","write_element()","write_element()","write_element()","write_file()","write_header()","write_headers?()","write_instruction()","write_nonblock()","write_nonblock()","write_nonblock()","write_options()","write_random_file()","write_services()","write_smime()","write_spec()","write_text()","write_text()","write_text()","write_with_substitution()","xhtml()","xhtml()","xhtml=()","xlist()","xml()","xml=()","xmldecl()","xml_content=()","xml_content=()","xml_decl()","xml_getter()","xml_getter()","xml_setter()","xml_setter()","xml_stylesheet_pi()","xml_type?()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl?()","xmled_content()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmp()","xpath()","xpath()","xpath()","y()","yaml()","yaml_as()","yaml_tag()","yank_api_request()","yank_gem()","yday()","yday()","year()","year()","yes_clean_other_attr_reader()","yes_clean_other_writer()","yes_other_attr_reader()","yes_other_writer()","yield()","yield()","yyaccept()","yydebug()","yydebug=()","yyerrok()","yyerror()","yyparse()","zero()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zip()","zip?()","zlib_version()","zone()","zone()","zone_offset()","zone_utc?()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","~()","~()","~()","~()","~()","readme.ja","readme","contributing","contributors","dtrace_probes","extension.ja","extension","globals","keywords","grammar.en","license","maintainers","marshal","regexp","security","standard_library","syntax","assignment","calling_methods","control_expressions","exceptions","literals","methods","miscellaneous","modules_and_classes","precedence","refinements"],"longSearchIndex":["acl","acl::aclentry","acl::acllist","argf","abbrev","addrinfo","argumenterror","array","base64","basicobject","basicsocket","benchmark","benchmark::tms","bigdecimal","bigmath","binding","cgi","cgi::cookie","cgi::html3","cgi::html4","cgi::html4fr","cgi::html4tr","cgi::html5","cgi::htmlextension","cgi::invalidencoding","cgi::queryextension","cgi::session","cgi::session::filestore","cgi::session::memorystore","cgi::session::nullstore","cgi::session::pstore","cgi::util","cmath","csv","csv::malformedcsverror","csv::row","csv::table","class","closedqueueerror","comparable","complex","complex::compatible","conditionvariable","continuation","coverage","dbm","dbmerror","debugger__","debugger__::thread","drb","drb::drbarray","drb::drbbadscheme","drb::drbbaduri","drb::drbconn","drb::drbconn::thread","drb::drbconnerror","drb::drberror","drb::drbidconv","drb::drbidconv","drb::drbmessage","drb::drbobject","drb::drbobject","drb::drbobservable","drb::drbprotocol","drb::drbremoteerror","drb::drbsslsocket","drb::drbsslsocket::sslconfig","drb::drbserver","drb::drbserver::invokemethod18mixin","drb::drbservernotfound","drb::drbtcpsocket","drb::drbunixsocket","drb::drbundumped","drb::drbundumped","drb::drbunknown","drb::drbunknownerror","drb::extserv","drb::extservmanager","drb::gw","drb::gwidconv","drb::thread","drb::timeridconv","drb::timeridconv::timerholder2","drb::timeridconv::timerholder2::invalidindexerror","data","date","datetime","delegator","digest","digest::base","digest::class","digest::instance","digest::md5","digest::rmd160","digest::sha1","dir","env","eoferror","erb","erb::defmethod","erb::util","exception_type","exception_type","exception_type","exception_type","encoding","encoding::compatibilityerror","encoding::converter","encoding::converternotfounderror","encoding::invalidbytesequenceerror","encoding::undefinedconversionerror","encodingerror","english","enumerable","enumerator","enumerator::generator","enumerator::lazy","enumerator::yielder","errno","errno::econnaborted","errno::econnreset","errno::eproto","etc","exception","exception2messagemapper","exception2messagemapper::e2mm","falseclass","fcntl","fiber","fibererror","fiddle","fiddle::basictypes","fiddle::cparser","fiddle::cstruct","fiddle::cstructbuilder","fiddle::cstructentity","fiddle::cunion","fiddle::cunionentity","fiddle::closure","fiddle::closure::blockcaller","fiddle::compositehandler","fiddle::dlerror","fiddle::function","fiddle::handle","fiddle::importer","fiddle::pointer","fiddle::win32types","file","file::constants","file::stat","filetest","fileutils","fileutils::dryrun","fileutils::lowmethods","fileutils::nowrite","fileutils::streamutils_","fileutils::verbose","find","float","floatdomainerror","forwardable","gc","gc::profiler","gdbm","gdbmerror","gdbmfatalerror","gem","gem::availableset","gem::basicspecification","gem::command","gem::commandlineerror","gem::commandmanager","gem::commands","gem::commands::buildcommand","gem::commands::certcommand","gem::commands::checkcommand","gem::commands::cleanupcommand","gem::commands::contentscommand","gem::commands::dependencycommand","gem::commands::environmentcommand","gem::commands::fetchcommand","gem::commands::generateindexcommand","gem::commands::helpcommand","gem::commands::installcommand","gem::commands::listcommand","gem::commands::lockcommand","gem::commands::mirrorcommand","gem::commands::opencommand","gem::commands::outdatedcommand","gem::commands::ownercommand","gem::commands::pristinecommand","gem::commands::pushcommand","gem::commands::querycommand","gem::commands::rdoccommand","gem::commands::searchcommand","gem::commands::servercommand","gem::commands::setupcommand","gem::commands::sourcescommand","gem::commands::specificationcommand","gem::commands::stalecommand","gem::commands::uninstallcommand","gem::commands::unpackcommand","gem::commands::updatecommand","gem::commands::whichcommand","gem::commands::yankcommand","gem::configfile","gem::conflicterror","gem::consoleui","gem::defaultuserinteraction","gem::dependency","gem::dependencyerror","gem::dependencyinstaller","gem::dependencylist","gem::dependencyremovalexception","gem::dependencyresolutionerror","gem::deprecate","gem::doctor","gem::documenterror","gem::endofyamlexception","gem::errorreason","gem::exception","gem::ext","gem::ext::builderror","gem::ext::builder","gem::ext::cmakebuilder","gem::ext::configurebuilder","gem::ext::extconfbuilder","gem::ext::rakebuilder","gem::fakefetcher","gem::filepermissionerror","gem::formatexception","gem::gemnotfoundexception","gem::gemnotinhomeexception","gem::gemrunner","gem::gemcutterutilities","gem::impossibledependencieserror","gem::indexer","gem::installerror","gem::installupdateoptions","gem::installer","gem::installer::fakepackage","gem::installertestcase","gem::invalidspecificationexception","gem::licenses","gem::list","gem::loaderror","gem::localremoteoptions","gem::missingspecerror","gem::missingspecversionerror","gem::mockgemui","gem::mockgemui::inputeoferror","gem::mockgemui::systemexitexception","gem::mockgemui::tty","gem::mockgemui::termerror","gem::nametuple","gem::noaliasyamltree","gem::operationnotsupportederror","gem::package","gem::package::digestio","gem::package::error","gem::package::formaterror","gem::package::nonseekableio","gem::package::old","gem::package::patherror","gem::package::tarheader","gem::package::tarinvaliderror","gem::package::tarreader","gem::package::tarreader::entry","gem::package::tarreader::unexpectedeof","gem::package::tartestcase","gem::package::tarwriter","gem::package::tarwriter::boundedstream","gem::package::tarwriter::fileoverflow","gem::package::tarwriter::restrictedstream","gem::package::toolongfilename","gem::packagetask","gem::pathsupport","gem::platform","gem::platformmismatch","gem::rbconfig","gem::remoteerror","gem::remotefetcher","gem::remotefetcher::fetcherror","gem::remotefetcher::unknownhosterror","gem::remoteinstallationcancelled","gem::remoteinstallationskipped","gem::remotesourceexception","gem::request","gem::requestset","gem::requestset::gemdependencyapi","gem::requestset::lockfile","gem::requestset::lockfile::parseerror","gem::requestset::lockfile::parser","gem::requestset::lockfile::tokenizer","gem::requirement","gem::requirement::badrequirementerror","gem::resolver","gem::resolver::apiset","gem::resolver::apispecification","gem::resolver::activationrequest","gem::resolver::bestset","gem::resolver::composedset","gem::resolver::conflict","gem::resolver::currentset","gem::resolver::dependencyrequest","gem::resolver::gitset","gem::resolver::gitspecification","gem::resolver::indexset","gem::resolver::indexspecification","gem::resolver::installedspecification","gem::resolver::installerset","gem::resolver::localspecification","gem::resolver::lockset","gem::resolver::lockspecification","gem::resolver::molinillo","gem::resolver::molinillo::circulardependencyerror","gem::resolver::molinillo::delegates","gem::resolver::molinillo::delegates::resolutionstate","gem::resolver::molinillo::delegates::specificationprovider","gem::resolver::molinillo::dependencygraph","gem::resolver::molinillo::dependencygraph::action","gem::resolver::molinillo::dependencygraph::addedgenocircular","gem::resolver::molinillo::dependencygraph::deleteedge","gem::resolver::molinillo::dependencygraph::detachvertexnamed","gem::resolver::molinillo::dependencygraph::log","gem::resolver::molinillo::dependencygraph::tag","gem::resolver::molinillo::dependencygraph::vertex","gem::resolver::molinillo::dependencystate","gem::resolver::molinillo::nosuchdependencyerror","gem::resolver::molinillo::possibilitystate","gem::resolver::molinillo::resolutionstate","gem::resolver::molinillo::resolver","gem::resolver::molinillo::resolver::resolution","gem::resolver::molinillo::resolvererror","gem::resolver::molinillo::specificationprovider","gem::resolver::molinillo::ui","gem::resolver::molinillo::versionconflict","gem::resolver::requirementlist","gem::resolver::set","gem::resolver::sourceset","gem::resolver::specspecification","gem::resolver::specification","gem::resolver::stats","gem::resolver::vendorset","gem::resolver::vendorspecification","gem::rubyversionmismatch","gem::security","gem::security::exception","gem::security::policy","gem::security::signer","gem::security::trustdir","gem::server","gem::silentui","gem::source","gem::source::git","gem::source::installed","gem::source::local","gem::source::lock","gem::source::specificfile","gem::source::vendor","gem::sourcefetchproblem","gem::sourcelist","gem::specfetcher","gem::specificgemnotfoundexception","gem::specification","gem::streamui","gem::streamui::silentdownloadreporter","gem::streamui::silentprogressreporter","gem::streamui::simpleprogressreporter","gem::streamui::verbosedownloadreporter","gem::streamui::verboseprogressreporter","gem::stubspecification","gem::systemexitexception","gem::testcase","gem::testcase::specfetchersetup","gem::testcase::staticset","gem::text","gem::uninstaller","gem::unsatisfiabledependencyerror","gem::uriformatter","gem::userinteraction","gem::util","gem::validator","gem::verificationerror","gem::version","gem::versionoption","getoptlong","getoptlong::ambiguousoption","getoptlong::error","getoptlong::invalidoption","getoptlong::missingargument","getoptlong::needlessargument","httpmovedtemporarily","httpmultiplechoice","httprequesturitoolarge","hash","io","io::eagainwaitreadable","io::eagainwaitwritable","io::einprogresswaitreadable","io::einprogresswaitwritable","io::ewouldblockwaitreadable","io::ewouldblockwaitwritable","io::waitreadable","io::waitwritable","io::generic_readable","io::generic_writable","ioerror","ipaddr","ipaddr::addressfamilyerror","ipaddr::error","ipaddr::invalidaddresserror","ipaddr::invalidprefixerror","ipsocket","irb","irb::abort","irb::context","irb::contextextender","irb::extendcommand","irb::extendcommand::changeworkspace","irb::extendcommand::currentworkingworkspace","irb::extendcommand::foreground","irb::extendcommand::fork","irb::extendcommand::help","irb::extendcommand::irbcommand","irb::extendcommand::jobs","irb::extendcommand::kill","irb::extendcommand::load","irb::extendcommand::nop","irb::extendcommand::popworkspace","irb::extendcommand::pushworkspace","irb::extendcommand::require","irb::extendcommand::source","irb::extendcommand::workspaces","irb::extendcommandbundle","irb::fileinputmethod","irb::frame","irb::inputmethod","irb::inspector","irb::irb","irb::irbloader","irb::jobmanager","irb::loadabort","irb::locale","irb::methodextender","irb::notifier","irb::notifier::abstractnotifier","irb::notifier::compositenotifier","irb::notifier::levelednotifier","irb::notifier::nomsgnotifier","irb::outputmethod","irb::readlineinputmethod","irb::slex","irb::slex::node","irb::stdioinputmethod","irb::stdiooutputmethod","irb::workspace","indexerror","integer","interrupt","json","json::circulardatastructure","json::ext","json::generatorerror","json::genericobject","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::unparsererror","jacobian","kconv","kernel","keyerror","lusolve","loaderror","localjumperror","logger","logger::formatter","logger::logdevice","logger::period","logger::severity","makemakefile","makemakefile::logging","makemakefile::rbconfig","makemakefile::string_or_failed_format","marshal","matchdata","math","math::domainerror","matrix","matrix::eigenvaluedecomposition","matrix::lupdecomposition","method","module","monitor","monitormixin","monitormixin::conditionvariable","monitormixin::conditionvariable::timeout","mutex_m","nkf","nameerror","net","net::apop","net::apopsession","net::ftp","net::ftp::bufferedsslsocket","net::ftp::bufferedsocket","net::ftp::mlsxentry","net::ftp::nullsocket","net::ftpconnectionerror","net::ftperror","net::ftppermerror","net::ftpprotoerror","net::ftpreplyerror","net::ftptemperror","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpconflict","net::httpcontinue","net::httpcreated","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfaileddependency","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpimused","net::httpinformation","net::httpinsufficientstorage","net::httpinternalservererror","net::httplengthrequired","net::httplocked","net::httpmethodnotallowed","net::httpmovedpermanently","net::httpmultistatus","net::httpmultiplechoices","net::httpnetworkauthenticationrequired","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppaymentrequired","net::httppermanentredirect","net::httppreconditionfailed","net::httppreconditionrequired","net::httpproxyauthenticationrequired","net::httpredirection","net::httprequest","net::httprequestentitytoolarge","net::httprequestheaderfieldstoolarge","net::httprequesttimeout","net::httprequesturitoolong","net::httprequestedrangenotsatisfiable","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserverexception","net::httpserviceunavailable","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httptoomanyrequests","net::httpunauthorized","net::httpunavailableforlegalreasons","net::httpunknownresponse","net::httpunprocessableentity","net::httpunsupportedmediatype","net::httpupgraderequired","net::httpuseproxy","net::httpversionnotsupported","net::imap","net::imap::badresponseerror","net::imap::bodytypeattachment","net::imap::bodytypebasic","net::imap::bodytypeextension","net::imap::bodytypemessage","net::imap::bodytypemultipart","net::imap::bodytypetext","net::imap::byeresponseerror","net::imap::crammd5authenticator","net::imap::dataformaterror","net::imap::digestmd5authenticator","net::imap::error","net::imap::flagcounterror","net::imap::loginauthenticator","net::imap::noresponseerror","net::imap::numvalidator","net::imap::plainauthenticator","net::imap::responseerror","net::imap::responseparseerror","net::internetmessageio","net::internetmessageio::netprivate","net::internetmessageio::writeadapter","net::opentimeout","net::pop3","net::popauthenticationerror","net::popbadresponse","net::poperror","net::popmail","net::protoautherror","net::protocommanderror","net::protofatalerror","net::protoretriableerror","net::protoservererror","net::protosyntaxerror","net::protounknownerror","net::protocretryerror","net::protocolerror","net::readtimeout","net::smtp","net::smtp::response","net::smtpauthenticationerror","net::smtperror","net::smtpfatalerror","net::smtpserverbusy","net::smtpsyntaxerror","net::smtpunknownerror","net::smtpunsupportedcommand","newton","nilclass","nomemoryerror","nomethoderror","notimplementederror","numeric","oleproperty","object","object::parseerror","object::timeouterror","objectspace","objectspace::internalobjectwrapper","objectspace::weakmap","observable","open3","openssl","openssl::asn1","openssl::asn1::asn1data","openssl::asn1::asn1error","openssl::asn1::constructive","openssl::asn1::objectid","openssl::asn1::primitive","openssl::bn","openssl::bnerror","openssl::buffering","openssl::cipher","openssl::cipher::cipher","openssl::cipher::ciphererror","openssl::config","openssl::configerror","openssl::digest","openssl::digest::digesterror","openssl::engine","openssl::engine::engineerror","openssl::extconfig","openssl::hmac","openssl::hmacerror","openssl::netscape","openssl::netscape::spki","openssl::netscape::spkierror","openssl::ocsp","openssl::ocsp::basicresponse","openssl::ocsp::certificateid","openssl::ocsp::ocsperror","openssl::ocsp::request","openssl::ocsp::response","openssl::ocsp::singleresponse","openssl::opensslerror","openssl::pkcs12","openssl::pkcs12::pkcs12error","openssl::pkcs5","openssl::pkcs5::pkcs5error","openssl::pkcs7","openssl::pkcs7::pkcs7error","openssl::pkcs7::recipientinfo","openssl::pkcs7::signerinfo","openssl::pkey","openssl::pkey::dh","openssl::pkey::dherror","openssl::pkey::dsa","openssl::pkey::dsaerror","openssl::pkey::ec","openssl::pkey::ec::group","openssl::pkey::ec::group::error","openssl::pkey::ec::point","openssl::pkey::ec::point::error","openssl::pkey::ecerror","openssl::pkey::pkey","openssl::pkey::pkeyerror","openssl::pkey::rsa","openssl::pkey::rsaerror","openssl::random","openssl::random::randomerror","openssl::ssl","openssl::ssl::sslcontext","openssl::ssl::sslcontext::extconfig","openssl::ssl::sslerror","openssl::ssl::sslerrorwaitreadable","openssl::ssl::sslerrorwaitwritable","openssl::ssl::sslserver","openssl::ssl::sslsocket","openssl::ssl::sslsocket::extconfig","openssl::ssl::session","openssl::ssl::session::sessionerror","openssl::ssl::socketforwarder","openssl::x509","openssl::x509::attribute","openssl::x509::attributeerror","openssl::x509::crl","openssl::x509::crlerror","openssl::x509::certificate","openssl::x509::certificateerror","openssl::x509::extension","openssl::x509::extensionerror","openssl::x509::extensionfactory","openssl::x509::name","openssl::x509::name::rfc2253dn","openssl::x509::nameerror","openssl::x509::request","openssl::x509::requesterror","openssl::x509::revoked","openssl::x509::revokederror","openssl::x509::store","openssl::x509::storecontext","openssl::x509::storeerror","openstruct","openuri","openuri::httperror","openuri::httpredirect","openuri::meta","openuri::openread","optionparser","optionparser::ac","optionparser::acceptables","optionparser::ambiguousargument","optionparser::ambiguousoption","optionparser::arguable","optionparser::completinghash","optionparser::completion","optionparser::invalidargument","optionparser::invalidoption","optionparser::list","optionparser::missingargument","optionparser::needlessargument","optionparser::optionmap","optionparser::parseerror","optionparser::switch","optionparser::switch::noargument","optionparser::switch::optionalargument","optionparser::switch::placedargument","optionparser::switch::requiredargument","pp","pp::ppmethods","pstore","pstore::error","pty","pty::childexited","pathname","prettyprint","prettyprint::singleline","prime","prime::eratosthenesgenerator","prime::eratosthenessieve","prime::generator23","prime::pseudoprimegenerator","prime::trialdivision","prime::trialdivisiongenerator","proc","process","process::gid","process::status","process::sys","process::uid","process::waiter","profiler__","psych","psych::badalias","psych::classloader","psych::classloader::restricted","psych::coder","psych::disallowedclass","psych::exception","psych::handler","psych::handler::dumperoptions","psych::handlers","psych::handlers::recorder","psych::json","psych::json::stream","psych::json::treebuilder","psych::nodes","psych::nodes::alias","psych::nodes::document","psych::nodes::mapping","psych::nodes::node","psych::nodes::scalar","psych::nodes::sequence","psych::nodes::stream","psych::omap","psych::parser","psych::parser::mark","psych::scalarscanner","psych::set","psych::stream","psych::streaming","psych::streaming::classmethods","psych::syntaxerror","psych::treebuilder","psych::visitors","psych::visitors::depthfirst","psych::visitors::emitter","psych::visitors::jsontree","psych::visitors::noaliasruby","psych::visitors::toruby","psych::visitors::visitor","psych::visitors::yamltree","queue","rdoc","rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::comment","rdoc::constant","rdoc::context","rdoc::crossreference","rdoc::erbio","rdoc::erbpartial","rdoc::encoding","rdoc::error","rdoc::extend","rdoc::generator","rdoc::ghostmethod","rdoc::i18n","rdoc::include","rdoc::markdown","rdoc::markdown::memoentry","rdoc::markdown::parseerror","rdoc::markdown::ruleinfo","rdoc::markup","rdoc::metamethod","rdoc::methodattr","rdoc::mixin","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::parser","rdoc::rd","rdoc::rdoc","rdoc::ri","rdoc::ri::error","rdoc::require","rdoc::rubylex","rdoc::rubylex::error","rdoc::rubytoken","rdoc::rubytoken::tkerror","rdoc::rubytoken::tkid","rdoc::rubytoken::tkkw","rdoc::rubytoken::tknode","rdoc::rubytoken::tkopasgn","rdoc::rubytoken::tkop","rdoc::rubytoken::tksymbol","rdoc::rubytoken::tkunknownchar","rdoc::rubytoken::tkval","rdoc::rubytoken::token","rdoc::rubygemshook","rdoc::servlet","rdoc::singleclass","rdoc::stats","rdoc::store","rdoc::store::error","rdoc::store::missingfileerror","rdoc::task","rdoc::testcase","rdoc::text","rdoc::tokenstream","rdoc::tomdoc","rdoc::toplevel","rdoctask","rexml","rexml::attlistdecl","rexml::attribute","rexml::attributes","rexml::cdata","rexml::child","rexml::comment","rexml::dtd","rexml::dtd::attlistdecl","rexml::dtd::elementdecl","rexml::dtd::entitydecl","rexml::dtd::notationdecl","rexml::dtd::parser","rexml::declaration","rexml::doctype","rexml::document","rexml::element","rexml::elementdecl","rexml::elements","rexml::encoding","rexml::entity","rexml::entityconst","rexml::externalentity","rexml::formatters","rexml::formatters::default","rexml::formatters::pretty","rexml::formatters::transitive","rexml::functions","rexml::iosource","rexml::instruction","rexml::light","rexml::light::node","rexml::namespace","rexml::node","rexml::notationdecl","rexml::output","rexml::parent","rexml::parseexception","rexml::parsers","rexml::parsers::baseparser","rexml::parsers::lightparser","rexml::parsers::pullevent","rexml::parsers::pullparser","rexml::parsers::sax2parser","rexml::parsers::streamparser","rexml::parsers::treeparser","rexml::parsers::ultralightparser","rexml::parsers::xpathparser","rexml::quickpath","rexml::sax2listener","rexml::security","rexml::source","rexml::sourcefactory","rexml::streamlistener","rexml::syncenumerator","rexml::text","rexml::undefinednamespaceexception","rexml::validation","rexml::validation::choice","rexml::validation::event","rexml::validation::interleave","rexml::validation::oneormore","rexml::validation::optional","rexml::validation::ref","rexml::validation::relaxng","rexml::validation::sequence","rexml::validation::state","rexml::validation::validationexception","rexml::validation::validator","rexml::validation::zeroormore","rexml::xmldecl","rexml::xmltokens","rexml::xpath","rexml::xpathparser","rss","rss::atom","rss::atom::commonmodel","rss::atom::contentmodel","rss::atom::contentmodel::classmethods","rss::atom::dateconstruct","rss::atom::duplicatelinkchecker","rss::atom::entry","rss::atom::feed","rss::atom::feed::author","rss::atom::feed::category","rss::atom::feed::contributor","rss::atom::feed::entry","rss::atom::feed::entry::content","rss::atom::feed::entry::published","rss::atom::feed::entry::source","rss::atom::feed::entry::summary","rss::atom::feed::generator","rss::atom::feed::icon","rss::atom::feed::id","rss::atom::feed::link","rss::atom::feed::logo","rss::atom::feed::rights","rss::atom::feed::subtitle","rss::atom::feed::title","rss::atom::feed::updated","rss::atom::personconstruct","rss::atom::personconstruct::email","rss::atom::personconstruct::name","rss::atom::personconstruct::uri","rss::atom::textconstruct","rss::atom::uricontentmodel","rss::basedublincoremodel","rss::baselistener","rss::basemodel","rss::baseparser","rss::basetrackbackmodel","rss::contentmodel","rss::conversionerror","rss::converter","rss::dublincoremodel","rss::dublincoremodel","rss::element","rss::error","rss::itunesbasemodel","rss::ituneschannelmodel","rss::ituneschannelmodel::itunescategory","rss::ituneschannelmodel::itunesimage","rss::ituneschannelmodel::itunesowner","rss::itunesitemmodel","rss::itunesitemmodel::itunesduration","rss::itunesmodelutils","rss::imagefaviconmodel","rss::imagefaviconmodel::imagefavicon","rss::imageitemmodel","rss::imageitemmodel::imageitem","rss::imagemodelutils","rss::invalidrsserror","rss::listenermixin","rss::maker","rss::maker::atom","rss::maker::atom::entry","rss::maker::atom::entry::channel","rss::maker::atom::entry::channel::cloud","rss::maker::atom::entry::channel::description","rss::maker::atom::entry::channel::generator","rss::maker::atom::entry::channel::skipdays","rss::maker::atom::entry::channel::skipdays::day","rss::maker::atom::entry::channel::skiphours","rss::maker::atom::entry::channel::skiphours::hour","rss::maker::atom::entry::image","rss::maker::atom::entry::items","rss::maker::atom::entry::items::item","rss::maker::atom::entry::textinput","rss::maker::atom::feed","rss::maker::atom::feed::channel","rss::maker::atom::feed::channel::categories","rss::maker::atom::feed::channel::categories::category","rss::maker::atom::feed::channel::cloud","rss::maker::atom::feed::channel::generator","rss::maker::atom::feed::channel::links","rss::maker::atom::feed::channel::links::link","rss::maker::atom::feed::channel::skipdays","rss::maker::atom::feed::channel::skipdays::day","rss::maker::atom::feed::channel::skiphours","rss::maker::atom::feed::channel::skiphours::hour","rss::maker::atom::feed::image","rss::maker::atom::feed::items","rss::maker::atom::feed::items::item","rss::maker::atom::feed::items::item::categories","rss::maker::atom::feed::items::item::categories::category","rss::maker::atom::feed::items::item::content","rss::maker::atom::feed::items::item::enclosure","rss::maker::atom::feed::items::item::guid","rss::maker::atom::feed::items::item::links","rss::maker::atom::feed::items::item::links::link","rss::maker::atom::feed::items::item::source","rss::maker::atom::feed::items::item::source::categories","rss::maker::atom::feed::items::item::source::categories::category","rss::maker::atom::feed::items::item::source::generator","rss::maker::atom::feed::items::item::source::icon","rss::maker::atom::feed::items::item::source::links","rss::maker::atom::feed::items::item::source::links::link","rss::maker::atom::feed::items::item::source::logo","rss::maker::atom::feed::textinput","rss::maker::atomcategory","rss::maker::atomgenerator","rss::maker::atomlink","rss::maker::atomlogo","rss::maker::atompersonconstructbase","rss::maker::atompersons","rss::maker::atomtextconstruct","rss::maker::atomtextconstructbase","rss::maker::atomtextconstructbase::ensurexmlcontent","rss::maker::base","rss::maker::channelbase","rss::maker::channelbase::authorsbase","rss::maker::channelbase::authorsbase::authorbase","rss::maker::channelbase::categoriesbase","rss::maker::channelbase::categoriesbase::categorybase","rss::maker::channelbase::cloudbase","rss::maker::channelbase::contributorsbase","rss::maker::channelbase::contributorsbase::contributorbase","rss::maker::channelbase::copyrightbase","rss::maker::channelbase::descriptionbase","rss::maker::channelbase::generatorbase","rss::maker::channelbase::itunescategories","rss::maker::channelbase::itunescategories::itunescategory","rss::maker::channelbase::itunesimage","rss::maker::channelbase::itunesowner","rss::maker::channelbase::linksbase","rss::maker::channelbase::linksbase::linkbase","rss::maker::channelbase::skipdaysbase","rss::maker::channelbase::skipdaysbase::daybase","rss::maker::channelbase::skiphoursbase","rss::maker::channelbase::skiphoursbase::hourbase","rss::maker::channelbase::titlebase","rss::maker::contentmodel","rss::maker::dublincoremodel","rss::maker::itunesbasemodel","rss::maker::ituneschannelmodel","rss::maker::ituneschannelmodel::itunescategoriesbase","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase","rss::maker::ituneschannelmodel::itunesimagebase","rss::maker::ituneschannelmodel::itunesownerbase","rss::maker::itunesitemmodel","rss::maker::itunesitemmodel::itunesdurationbase","rss::maker::imagebase","rss::maker::imagefaviconmodel","rss::maker::imagefaviconmodel::imagefaviconbase","rss::maker::imageitemmodel","rss::maker::imageitemmodel::imageitembase","rss::maker::itemsbase","rss::maker::itemsbase::itembase","rss::maker::itemsbase::itembase::contentbase","rss::maker::itemsbase::itembase::descriptionbase","rss::maker::itemsbase::itembase::enclosurebase","rss::maker::itemsbase::itembase::guidbase","rss::maker::itemsbase::itembase::itunesduration","rss::maker::itemsbase::itembase::rightsbase","rss::maker::itemsbase::itembase::sourcebase","rss::maker::itemsbase::itembase::sourcebase::iconbase","rss::maker::itemsbase::itembase::sourcebase::logobase","rss::maker::itemsbase::itembase::sourcebase::rightsbase","rss::maker::itemsbase::itembase::sourcebase::subtitlebase","rss::maker::itemsbase::itembase::sourcebase::titlebase","rss::maker::itemsbase::itembase::titlebase","rss::maker::rss09","rss::maker::rss091","rss::maker::rss091::channel","rss::maker::rss091::image","rss::maker::rss091::items","rss::maker::rss091::items::item","rss::maker::rss091::textinput","rss::maker::rss092","rss::maker::rss092::channel","rss::maker::rss092::image","rss::maker::rss092::items","rss::maker::rss092::items::item","rss::maker::rss092::textinput","rss::maker::rss09::channel","rss::maker::rss09::channel::authors","rss::maker::rss09::channel::authors::author","rss::maker::rss09::channel::categories","rss::maker::rss09::channel::categories::category","rss::maker::rss09::channel::cloud","rss::maker::rss09::channel::contributors","rss::maker::rss09::channel::contributors::contributor","rss::maker::rss09::channel::copyright","rss::maker::rss09::channel::description","rss::maker::rss09::channel::generator","rss::maker::rss09::channel::links","rss::maker::rss09::channel::links::link","rss::maker::rss09::channel::skipdays","rss::maker::rss09::channel::skipdays::day","rss::maker::rss09::channel::skiphours","rss::maker::rss09::channel::skiphours::hour","rss::maker::rss09::channel::title","rss::maker::rss09::image","rss::maker::rss09::items","rss::maker::rss09::items::item","rss::maker::rss09::items::item::authors","rss::maker::rss09::items::item::authors::author","rss::maker::rss09::items::item::categories","rss::maker::rss09::items::item::categories::category","rss::maker::rss09::items::item::content","rss::maker::rss09::items::item::contributors","rss::maker::rss09::items::item::contributors::contributor","rss::maker::rss09::items::item::description","rss::maker::rss09::items::item::enclosure","rss::maker::rss09::items::item::guid","rss::maker::rss09::items::item::links","rss::maker::rss09::items::item::links::link","rss::maker::rss09::items::item::rights","rss::maker::rss09::items::item::source","rss::maker::rss09::items::item::source::authors","rss::maker::rss09::items::item::source::authors::author","rss::maker::rss09::items::item::source::categories","rss::maker::rss09::items::item::source::categories::category","rss::maker::rss09::items::item::source::contributors","rss::maker::rss09::items::item::source::contributors::contributor","rss::maker::rss09::items::item::source::generator","rss::maker::rss09::items::item::source::icon","rss::maker::rss09::items::item::source::links","rss::maker::rss09::items::item::source::links::link","rss::maker::rss09::items::item::source::logo","rss::maker::rss09::items::item::source::rights","rss::maker::rss09::items::item::source::subtitle","rss::maker::rss09::items::item::source::title","rss::maker::rss09::items::item::title","rss::maker::rss09::textinput","rss::maker::rss10","rss::maker::rss10::channel","rss::maker::rss10::channel::authors","rss::maker::rss10::channel::authors::author","rss::maker::rss10::channel::categories","rss::maker::rss10::channel::categories::category","rss::maker::rss10::channel::cloud","rss::maker::rss10::channel::contributors","rss::maker::rss10::channel::contributors::contributor","rss::maker::rss10::channel::copyright","rss::maker::rss10::channel::description","rss::maker::rss10::channel::generator","rss::maker::rss10::channel::links","rss::maker::rss10::channel::links::link","rss::maker::rss10::channel::skipdays","rss::maker::rss10::channel::skipdays::day","rss::maker::rss10::channel::skiphours","rss::maker::rss10::channel::skiphours::hour","rss::maker::rss10::channel::title","rss::maker::rss10::image","rss::maker::rss10::items","rss::maker::rss10::items::item","rss::maker::rss10::items::item::authors","rss::maker::rss10::items::item::authors::author","rss::maker::rss10::items::item::categories","rss::maker::rss10::items::item::categories::category","rss::maker::rss10::items::item::content","rss::maker::rss10::items::item::contributors","rss::maker::rss10::items::item::contributors::contributor","rss::maker::rss10::items::item::description","rss::maker::rss10::items::item::enclosure","rss::maker::rss10::items::item::guid","rss::maker::rss10::items::item::links","rss::maker::rss10::items::item::links::link","rss::maker::rss10::items::item::rights","rss::maker::rss10::items::item::source","rss::maker::rss10::items::item::source::authors","rss::maker::rss10::items::item::source::authors::author","rss::maker::rss10::items::item::source::categories","rss::maker::rss10::items::item::source::categories::category","rss::maker::rss10::items::item::source::contributors","rss::maker::rss10::items::item::source::contributors::contributor","rss::maker::rss10::items::item::source::generator","rss::maker::rss10::items::item::source::icon","rss::maker::rss10::items::item::source::links","rss::maker::rss10::items::item::source::links::link","rss::maker::rss10::items::item::source::logo","rss::maker::rss10::items::item::source::rights","rss::maker::rss10::items::item::source::subtitle","rss::maker::rss10::items::item::source::title","rss::maker::rss10::items::item::title","rss::maker::rss10::textinput","rss::maker::rss20","rss::maker::rss20::channel","rss::maker::rss20::channel::categories","rss::maker::rss20::channel::categories::category","rss::maker::rss20::channel::cloud","rss::maker::rss20::channel::generator","rss::maker::rss20::channel::skipdays","rss::maker::rss20::channel::skipdays::day","rss::maker::rss20::channel::skiphours","rss::maker::rss20::channel::skiphours::hour","rss::maker::rss20::image","rss::maker::rss20::items","rss::maker::rss20::items::item","rss::maker::rss20::items::item::authors","rss::maker::rss20::items::item::authors::author","rss::maker::rss20::items::item::categories","rss::maker::rss20::items::item::categories::category","rss::maker::rss20::items::item::enclosure","rss::maker::rss20::items::item::guid","rss::maker::rss20::items::item::source","rss::maker::rss20::items::item::source::links","rss::maker::rss20::items::item::source::links::link","rss::maker::rss20::textinput","rss::maker::rssbase","rss::maker::setupdefaultdate","rss::maker::setupdefaultlanguage","rss::maker::slashmodel","rss::maker::syndicationmodel","rss::maker::taxonomytopicmodel","rss::maker::taxonomytopicmodel::taxonomytopicsbase","rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase","rss::maker::taxonomytopicsmodel","rss::maker::taxonomytopicsmodel::taxonomytopicsbase","rss::maker::textinputbase","rss::maker::trackbackmodel","rss::maker::trackbackmodel::trackbackaboutsbase","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase","rss::maker::xmlstylesheets","rss::maker::xmlstylesheets::xmlstylesheet","rss::missingattributeerror","rss::missingtagerror","rss::nserror","rss::notavailablevalueerror","rss::notexpectedtagerror","rss::notseterror","rss::notvalidxmlparser","rss::notwellformederror","rss::overlappedprefixerror","rss::parser","rss::rdf","rss::rdf::bag","rss::rdf::bag::li","rss::rdf::channel","rss::rdf::channel::image","rss::rdf::channel::items","rss::rdf::channel::items::seq","rss::rdf::channel::textinput","rss::rdf::image","rss::rdf::item","rss::rdf::li","rss::rdf::seq","rss::rdf::seq::li","rss::rdf::textinput","rss::rexmllikexmlparser","rss::rexmllistener","rss::rexmlparser","rss::rss09","rss::rss10","rss::rootelementmixin","rss::rss","rss::rss::channel","rss::rss::channel::cloud","rss::rss::channel::image","rss::rss::channel::item","rss::rss::channel::item::category","rss::rss::channel::item::enclosure","rss::rss::channel::item::guid","rss::rss::channel::item::source","rss::rss::channel::skipdays","rss::rss::channel::skipdays::day","rss::rss::channel::skiphours","rss::rss::channel::skiphours::hour","rss::rss::channel::textinput","rss::setupmaker","rss::slashmodel","rss::syndicationmodel","rss::taxonomytopicmodel","rss::taxonomytopicmodel::taxonomytopic","rss::taxonomytopicsmodel","rss::taxonomytopicsmodel::taxonomytopics","rss::taxonomytopicsmodel::taxonomytopics::bag","rss::toomuchtagerror","rss::trackbackmodel10","rss::trackbackmodel10::trackbackabout","rss::trackbackmodel10::trackbackping","rss::trackbackmodel20","rss::trackbackmodel20::trackbackabout","rss::trackbackmodel20::trackbackping","rss::trackbackutils","rss::unknownconversionmethoderror","rss::unknowntagerror","rss::unsupportedmakerversionerror","rss::utils","rss::utils::csv","rss::utils::inheritedreader","rss::utils::yescleanother","rss::utils::yesother","rss::xml","rss::xml::element","rss::xmlparserlistener","rss::xmlparsernotfound","rss::xmlparserparser","rss::xmlscanlistener","rss::xmlscanparser","rss::xmlstylesheet","rss::xmlstylesheetmixin","racc","racc::cparseparams","racc::parseerror","racc::parseerror","racc::parser","rake","random","random::formatter","range","rangeerror","rational","rational::compatible","readline","regexp","regexperror","resolv","resolv::dns","resolv::dns::config","resolv::dns::config::nxdomain","resolv::dns::config::otherresolverror","resolv::dns::decodeerror","resolv::dns::encodeerror","resolv::dns::name","resolv::dns::query","resolv::dns::requester","resolv::dns::requester::requesterror","resolv::dns::resource","resolv::dns::resource::any","resolv::dns::resource::cname","resolv::dns::resource::domainname","resolv::dns::resource::generic","resolv::dns::resource::hinfo","resolv::dns::resource::in","resolv::dns::resource::in::a","resolv::dns::resource::in::aaaa","resolv::dns::resource::in::srv","resolv::dns::resource::in::wks","resolv::dns::resource::loc","resolv::dns::resource::minfo","resolv::dns::resource::mx","resolv::dns::resource::ns","resolv::dns::resource::ptr","resolv::dns::resource::soa","resolv::dns::resource::txt","resolv::hosts","resolv::ipv4","resolv::ipv6","resolv::loc","resolv::loc::alt","resolv::loc::coord","resolv::loc::size","resolv::mdns","resolv::resolverror","resolv::resolvtimeout","rinda","rinda::drbobjecttemplate","rinda::invalidhashtuplekey","rinda::notifytemplateentry","rinda::requestcancelederror","rinda::requestexpirederror","rinda::rindaerror","rinda::ringfinger","rinda::ringprovider","rinda::ringserver","rinda::simplerenewer","rinda::template","rinda::templateentry","rinda::tuple","rinda::tuplebag","rinda::tuplebag::tuplebin","rinda::tupleentry","rinda::tuplespace","rinda::tuplespaceproxy","rinda::waittemplateentry","ripper","ripper::filter","rubylex","rubytoken","rubytoken::tkerror","rubytoken::tkid","rubytoken::tknode","rubytoken::tkopasgn","rubytoken::tkop","rubytoken::tkunknownchar","rubytoken::tkval","rubytoken::token","rubyvm","rubyvm::instructionsequence","runtimeerror","sdbm","sdbmerror","sockssocket","scanf","scanf::formatspecifier","scanf::formatstring","scripterror","securerandom","securityerror","set","shell","shell::appendfile","shell::appendio","shell::builtincommand","shell::cat","shell::commandprocessor","shell::concat","shell::echo","shell::error","shell::filter","shell::glob","shell::processcontroller","shell::systemcommand","shell::tee","shell::thread","shell::void","shellwords","signal","signalexception","simpledelegator","singleforwardable","singleton","sizedqueue","socket","socket::ancillarydata","socket::constants","socket::ifaddr","socket::option","socket::udpsource","socketerror","sortedset","standarderror","stopiteration","string","stringio","stringscanner","stringscanner::error","struct","symbol","symbol","sync","sync_m","sync_m::err","sync_m::err::lockmodefailer","sync_m::err::unknownlocker","synchronizer","synchronizer_m","syntaxerror","syslog","syslog::constants","syslog::facility","syslog::level","syslog::logger","syslog::logger::formatter","syslog::logger::severity","syslog::macros","syslog::option","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","tsort::cyclic","tempio","tempfile","tempfile::remover","test","thwait","thread","thread::backtrace::location","thread::mutex","threaderror","threadgroup","threadswait","time","timeout","timeout::error","timeout::timeouterror","tracepoint","tracer","tracer::thread","trueclass","typeerror","udpsocket","unixserver","unixsocket","uri","uri::badurierror","uri::error","uri::escape","uri::ftp","uri::generic","uri::http","uri::https","uri::invalidcomponenterror","uri::invalidurierror","uri::ldap","uri::ldaps","uri::mailto","uri::regexp","uri::rfc2396_parser","uri::rfc2396_regexp","uri::rfc2396_regexp::pattern","unboundmethod","uncaughtthrowerror","unicodenormalize","vector","vector::zerovectorerror","webrick","webrick::accesslog","webrick::accesslog::accesslogerror","webrick::basiclog","webrick::cgi","webrick::config","webrick::cookie","webrick::daemon","webrick::genericserver","webrick::htmlutils","webrick::httpauth","webrick::httpauth::authenticator","webrick::httpauth::basicauth","webrick::httpauth::digestauth","webrick::httpauth::htdigest","webrick::httpauth::htgroup","webrick::httpauth::htpasswd","webrick::httpauth::proxyauthenticator","webrick::httpauth::proxybasicauth","webrick::httpauth::proxydigestauth","webrick::httpauth::userdb","webrick::httpproxyserver","webrick::httprequest","webrick::httpresponse","webrick::httpserver","webrick::httpservererror","webrick::httpservlet","webrick::httpservlet::abstractservlet","webrick::httpservlet::cgihandler","webrick::httpservlet::defaultfilehandler","webrick::httpservlet::erbhandler","webrick::httpservlet::filehandler","webrick::httpservlet::httpservleterror","webrick::httpservlet::prochandler","webrick::httpstatus","webrick::httpstatus::clienterror","webrick::httpstatus::eoferror","webrick::httpstatus::error","webrick::httpstatus::info","webrick::httpstatus::redirect","webrick::httpstatus::servererror","webrick::httpstatus::status","webrick::httpstatus::success","webrick::httputils","webrick::httputils::formdata","webrick::httpversion","webrick::log","webrick::servererror","webrick::simpleserver","webrick::utils","webrick::utils::timeouthandler","webrick::utils::timeouthandler::process","win32ole","win32ole::variant","win32oleruntimeerror","win32ole_event","win32ole_method","win32ole_param","win32ole_record","win32ole_type","win32ole_typelib","win32ole_variable","win32ole_variant","warning","weakref","weakref::referror","xml","xml::parser","xmlencoding_ja","xmlencoding_ja::sjishandler","xmp","xmp::stringinputmethod","yaml","yaml::dbm","yaml::store","yaml::syck","yaml::syck","zerodivisionerror","zlib","zlib::buferror","zlib::dataerror","zlib::deflate","zlib::error","zlib::gzipfile","zlib::gzipfile::crcerror","zlib::gzipfile::error","zlib::gzipfile::lengtherror","zlib::gzipfile::nofooter","zlib::gzipreader","zlib::gzipwriter","zlib::inflate","zlib::memerror","zlib::needdict","zlib::streamend","zlib::streamerror","zlib::versionerror","zlib::zstream","fatal","unknown","basicobject#!()","delegator#!()","basicobject#!=()","delegator#!=()","object#!~()","bigdecimal#%()","float#%()","integer#%()","integer#%()","numeric#%()","openssl::bn#%()","string#%()","array#&()","falseclass#&()","ipaddr#&()","integer#&()","integer#&()","nilclass#&()","process::status#&()","set#&()","trueclass#&()","array#*()","benchmark::tms#*()","bigdecimal#*()","complex#*()","float#*()","integer#*()","integer#*()","matrix#*()","openssl::bn#*()","rational#*()","string#*()","vector#*()","bigdecimal#**()","complex#**()","float#**()","integer#**()","integer#**()","matrix#**()","openssl::bn#**()","rational#**()","array#+()","benchmark::tms#+()","bigdecimal#+()","complex#+()","date#+()","fiddle::pointer#+()","float#+()","integer#+()","integer#+()","matrix#+()","openssl::bn#+()","pathname#+()","rational#+()","set#+()","shell::filter#+()","string#+()","time#+()","uri::generic#+()","vector#+()","bigdecimal#+@()","fiddle::pointer#+@()","matrix#+@()","numeric#+@()","string#+@()","vector#+@()","array#-()","benchmark::tms#-()","bigdecimal#-()","complex#-()","date#-()","fiddle::pointer#-()","float#-()","integer#-()","integer#-()","matrix#-()","openssl::bn#-()","rational#-()","set#-()","time#-()","uri::generic#-()","vector#-()","bigdecimal#-@()","complex#-@()","fiddle::pointer#-@()","float#-@()","integer#-@()","integer#-@()","matrix#-@()","numeric#-@()","rational#-@()","string#-@()","vector#-@()","benchmark::tms#/()","bigdecimal#/()","complex#/()","float#/()","integer#/()","integer#/()","matrix#/()","openssl::bn#/()","pathname#/()","rational#/()","vector#/()","bigdecimal#<()","comparable#<()","float#<()","hash#<()","integer#<()","integer#<()","module#<()","set#<()","shell::filter#<()","array#<<()","csv#<<()","csv::row#<<()","csv::table#<<()","date#<<()","digest::base#<<()","digest::instance#<<()","gem::availableset#<<()","gem::sourcelist#<<()","io#<<()","io::generic_writable#<<()","ipaddr#<<()","integer#<<()","integer#<<()","logger#<<()","net::internetmessageio::writeadapter#<<()","openssl::bn#<<()","openssl::buffering#<<()","openssl::digest#<<()","openssl::hmac#<<()","psych::visitors::yamltree#<<()","queue#<<()","rexml::attributes#<<()","rexml::document#<<()","rexml::elements#<<()","rexml::light::node#<<()","rexml::output#<<()","rexml::parent#<<()","rexml::text#<<()","rexml::validation::choice#<<()","rexml::validation::state#<<()","rss::xml::element#<<()","set#<<()","sizedqueue#<<()","string#<<()","stringscanner#<<()","webrick::basiclog#<<()","webrick::httputils::formdata#<<()","zlib::deflate#<<()","zlib::gzipwriter#<<()","zlib::inflate#<<()","bigdecimal#<=()","comparable#<=()","float#<=()","hash#<=()","integer#<=()","integer#<=()","module#<=()","set#<=()","array#<=>()","bigdecimal#<=>()","date#<=>()","fiddle::pointer#<=>()","file::stat#<=>()","float#<=>()","gem::dependency#<=>()","gem::nametuple#<=>()","gem::source#<=>()","gem::source::git#<=>()","gem::source::installed#<=>()","gem::source::local#<=>()","gem::source::specificfile#<=>()","gem::source::vendor#<=>()","gem::version#<=>()","ipaddr#<=>()","irb::notifier::levelednotifier#<=>()","integer#<=>()","integer#<=>()","module#<=>()","numeric#<=>()","object#<=>()","openssl::bn#<=>()","openssl::x509::name#<=>()","pathname#<=>()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::methodattr#<=>()","rdoc::mixin#<=>()","rexml::comment#<=>()","rexml::text#<=>()","rss::maker::itemsbase::itembase#<=>()","rational#<=>()","string#<=>()","symbol#<=>()","time#<=>()","webrick::httpversion#<=>()","array#==()","basicobject#==()","bigdecimal#==()","csv::row#==()","csv::table#==()","comparable#==()","complex#==()","delegator#==()","digest::instance#==()","encoding::converter#==()","exception#==()","fiddle::pointer#==()","float#==()","gem::nametuple#==()","gem::platform#==()","gem::resolver::molinillo::dependencygraph#==()","gem::resolver::molinillo::dependencygraph::vertex#==()","hash#==()","ipaddr#==()","integer#==()","integer#==()","matchdata#==()","matrix#==()","method#==()","module#==()","openssl::bn#==()","openssl::pkey::ec::group#==()","openssl::pkey::ec::point#==()","openssl::ssl::session#==()","openstruct#==()","pathname#==()","process::status#==()","rdoc::attr#==()","rdoc::constant#==()","rdoc::toplevel#==()","rexml::attribute#==()","rexml::comment#==()","rexml::instruction#==()","rexml::validation::event#==()","rexml::xmldecl#==()","rss::xml::element#==()","random#==()","range#==()","rational#==()","regexp#==()","set#==()","string#==()","struct#==()","symbol#==()","uri::generic#==()","unboundmethod#==()","vector#==()","bigdecimal#===()","date#===()","falseclass#===()","float#===()","gem::dependency#===()","gem::platform#===()","gem::requirement#===()","ipaddr#===()","integer#===()","integer#===()","module#===()","nilclass#===()","object#===()","openssl::bn#===()","pathname#===()","proc#===()","range#===()","regexp#===()","rinda::drbobjecttemplate#===()","rinda::template#===()","rinda::templateentry#===()","string#===()","symbol#===()","systemcallerror::===()","trueclass#===()","gem::dependency#=~()","gem::platform#=~()","gem::requirement#=~()","object#=~()","rexml::light::node#=~()","regexp#=~()","string#=~()","symbol#=~()","bigdecimal#>()","comparable#>()","float#>()","hash#>()","integer#>()","integer#>()","module#>()","set#>()","shell::filter#>()","bigdecimal#>=()","comparable#>=()","float#>=()","hash#>=()","integer#>=()","integer#>=()","module#>=()","set#>=()","date#>>()","ipaddr#>>()","integer#>>()","integer#>>()","openssl::bn#>>()","process::status#>>()","shell::filter#>>()","net::pop3::apop()","gem::package::tartestcase#asciiz()","rexml::parsers::xpathparser#additiveexpr()","rexml::parsers::xpathparser#andexpr()","kernel#array()","kernel#bigdecimal()","object#csv()","kernel#complex()","irb::currentcontext()","net::http#d()","thread::debug()","thread::debug=()","object#delegateclass()","object#digest()","openssl#digest()","openssl::digest()","bigmath#e()","rexml::parsers::xpathparser#equalityexpr()","exception2messagemapper#fail()","sync_m::err::fail()","sync_m::err::lockmodefailer::fail()","sync_m::err::unknownlocker::fail()","rexml::parsers::xpathparser#filterexpr()","kernel#float()","rexml::parsers::xpathparser#functioncall()","kernel#hash()","matrix::i()","kernel#integer()","kernel#json()","irb::jobmanager()","syslog::macros#log_mask()","syslog::macros#log_upto()","rexml::parsers::xpathparser#locationpath()","rexml::parsers::xpathparser#multiplicativeexpr()","rexml::parsers::xpathparser#nodetest()","rexml::parsers::xpathparser#orexpr()","bigmath#pi()","rexml::parsers::xpathparser#pathexpr()","kernel#pathname()","rss::rss::channel::item::guid#permalink?()","rexml::parsers::xpathparser#predicate()","rexml::parsers::xpathparser#primaryexpr()","net::http::proxy()","exception2messagemapper#raise()","kernel#rational()","rexml::parsers::xpathparser#relationalexpr()","rexml::parsers::xpathparser#relativelocationpath()","gem::package::tartestcase#sp()","gem::package::tartestcase#sp_z()","irb::locale#string()","kernel#string()","kernel#uri()","kernel::uri()","rexml::parsers::xpathparser#unaryexpr()","rexml::parsers::xpathparser#unionexpr()","gem::package::tartestcase#z()","array#[]()","array::[]()","cgi::queryextension#[]()","cgi::session#[]()","csv::row#[]()","csv::table#[]()","continuation#[]()","dbm#[]()","drb::drbsslsocket::sslconfig#[]()","drb::gw#[]()","dir::[]()","env::[]()","fiddle::cstructentity#[]()","fiddle::compositehandler#[]()","fiddle::handle#[]()","fiddle::handle::[]()","fiddle::importer#[]()","fiddle::pointer::[]()","fiddle::pointer#[]()","gdbm#[]()","gem::commandmanager#[]()","gem::configfile#[]()","hash::[]()","hash#[]()","integer#[]()","integer#[]()","json::[]()","json::genericobject#[]()","matchdata#[]()","matrix::[]()","matrix#[]()","method#[]()","net::httpheader#[]()","oleproperty#[]()","objectspace::weakmap#[]()","openssl::config#[]()","openstruct#[]()","pstore#[]()","prime::trialdivision#[]()","proc#[]()","psych::coder#[]()","rexml::attlistdecl#[]()","rexml::attributes#[]()","rexml::element#[]()","rexml::elements#[]()","rexml::light::node#[]()","rexml::parent#[]()","rexml::parsers::pullevent#[]()","rss::maker::[]()","rss::xml::element#[]()","rinda::tuple#[]()","rinda::tupleentry#[]()","sdbm#[]()","set::[]()","shell::commandprocessor#[]()","string#[]()","stringscanner#[]()","struct#[]()","symbol#[]()","thread#[]()","vector#[]()","vector::[]()","webrick::cgi#[]()","webrick::genericserver#[]()","webrick::httprequest#[]()","webrick::httpresponse#[]()","webrick::httpstatus::[]()","webrick::httputils::formdata#[]()","win32ole#[]()","win32ole_variant#[]()","yaml::dbm#[]()","array#[]=()","cgi::session#[]=()","csv::row#[]=()","csv::table#[]=()","dbm#[]=()","drb::gw#[]=()","env::[]=()","fiddle::cstructentity#[]=()","fiddle::pointer#[]=()","gdbm#[]=()","gem::configfile#[]=()","hash#[]=()","json::genericobject#[]=()","matrix#[]=()","net::httpheader#[]=()","oleproperty#[]=()","objectspace::weakmap#[]=()","openssl::config#[]=()","openstruct#[]=()","pstore#[]=()","psych::coder#[]=()","rexml::attributes#[]=()","rexml::elements#[]=()","rexml::light::node#[]=()","rexml::parent#[]=()","rexml::xpathparser#[]=()","rss::xml::element#[]=()","sdbm#[]=()","string#[]=()","struct#[]=()","thread#[]=()","vector#[]=()","webrick::httpresponse#[]=()","win32ole#[]=()","win32ole_variant#[]=()","yaml::dbm#[]=()","falseclass#^()","integer#^()","integer#^()","nilclass#^()","set#^()","trueclass#^()","rss::rss::channel::item::guid#_permalink?()","kernel#__callee__()","kernel#__dir__()","drb::drbobject#__drbref()","drb::drbobject#__drbref()","drb::drbobject#__drburi()","drb::drbobject#__drburi()","irb::workspace#__evaluate__()","irb::context#__exit__()","delegator#__getobj__()","simpledelegator#__getobj__()","basicobject#__id__()","kernel#__method__()","delegator#__raise__()","basicobject#__send__()","delegator#__setobj__()","simpledelegator#__setobj__()","rexml::element#__to_xpath_helper()","rss::element#__validate()","optionparser::ac#_ac_arg_enable()","rss::element#_attrs()","rss::rss#_attrs()","optionparser::ac#_check_ac_args()","ripper#_dispatch_0()","ripper#_dispatch_1()","ripper#_dispatch_2()","ripper#_dispatch_3()","ripper#_dispatch_4()","ripper#_dispatch_5()","ripper#_dispatch_6()","ripper#_dispatch_7()","fileutils::lowmethods#_do_nothing()","bigdecimal#_dump()","drb::drbobject#_dump()","drb::drbobject#_dump()","gem::specification#_dump()","singleton#_dump()","win32ole#_getproperty()","gem::streamui#_gets_noecho()","date::_httpdate()","objectspace::_id2ref()","win32ole#_invoke()","date::_iso8601()","date::_jisx0301()","bigdecimal::_load()","drb::drbobject::_load()","drb::drbobject::_load()","gem::specification::_load()","singleton::_load()","rss::listenermixin#_ns()","date::_parse()","rss::rexmlparser#_parse()","rss::xmlparserparser#_parse()","rss::xmlscanparser#_parse()","rss::maker::setupdefaultdate#_parse_date_if_needed()","racc::parser#_racc_do_parse_c()","racc::parser#_racc_do_parse_rb()","racc::parser#_racc_do_reduce()","racc::parser#_racc_evalact()","racc::parser#_racc_init_sysvars()","racc::parser#_racc_setup()","racc::parser#_racc_yyparse_c()","racc::parser#_racc_yyparse_rb()","ipaddr#_reverse()","date::_rfc2822()","date::_rfc3339()","date::_rfc822()","gem::version#_segments()","rss::maker::atom::entry::items::item#_set_default_values()","rss::maker::atom::feed::channel#_set_default_values()","rss::maker::atom::feed::items::item#_set_default_values()","rss::maker::base#_set_default_values()","rss::maker::setupdefaultdate#_set_default_values()","rss::maker::setupdefaultlanguage#_set_default_values()","irb::context#_set_last_value()","win32ole#_setproperty()","rss::rss::channel::item#_setup_maker_element()","date::_strptime()","datetime::_strptime()","rss::element#_tags()","ipaddr#_to_string()","rss::element#_validate()","gem::version#_version()","date::_xmlschema()","kernel#`()","cgi::htmlextension#a()","abbrev#abbrev()","abbrev::abbrev()","array#abbrev()","gem::specification#abbreviate()","rexml::parsers::xpathparser#abbreviate()","kernel#abort()","net::ftp#abort()","optionparser#abort()","pstore#abort()","process::abort()","thread::abort_on_exception()","thread#abort_on_exception()","thread#abort_on_exception=()","thread::abort_on_exception=()","bigdecimal#abs()","complex#abs()","float#abs()","integer#abs()","integer#abs()","numeric#abs()","rational#abs()","complex#abs2()","numeric#abs2()","uri::generic#absolute()","pathname#absolute?()","resolv::dns::name#absolute?()","uri::generic#absolute?()","file::absolute_path()","rubyvm::instructionsequence#absolute_path()","thread::backtrace::location#absolute_path()","optionparser::ac#ac_arg_disable()","optionparser::ac#ac_arg_enable()","optionparser::ac#ac_arg_with()","drb::drbsslsocket::sslconfig#accept()","openssl::ssl::sslserver#accept()","openssl::ssl::sslsocket#accept()","optionparser#accept()","optionparser::accept()","optionparser::list#accept()","psych::visitors::jsontree#accept()","psych::visitors::toruby#accept()","psych::visitors::visitor#accept()","psych::visitors::yamltree#accept()","socket#accept()","tcpserver#accept()","unixserver#accept()","cgi::accept_charset()","cgi::accept_charset=()","socket::accept_loop()","openssl::ssl::sslsocket#accept_nonblock()","socket#accept_nonblock()","tcpserver#accept_nonblock()","unixserver#accept_nonblock()","gem::localremoteoptions#accept_uri_http()","webrick::httpserver#access_log()","net::ftp#acct()","cmath#acos()","cmath::acos()","math::acos()","cmath#acosh()","cmath::acosh()","math::acosh()","gem::resolver::molinillo::dependencygraph::action::action_name()","gem::resolver::molinillo::dependencygraph::addedgenocircular::action_name()","gem::resolver::molinillo::dependencygraph::deleteedge::action_name()","gem::resolver::molinillo::dependencygraph::detachvertexnamed::action_name()","gem::resolver::molinillo::dependencygraph::tag::action_name()","gem::specification#activate()","shell::processcontroller::activate()","gem::specification#activate_dependencies()","gem::resolver::molinillo::resolver::resolution#activate_spec()","gem::resolver::molinillo::delegates::resolutionstate#activated()","gem::basicspecification#activated?()","net::http#active?()","net::pop3#active?()","shell::builtincommand#active?()","shell::systemcommand#active?()","gem::dependencylist#active_count()","shell::processcontroller#active_job?()","shell::processcontroller#active_jobs()","shell::processcontroller#active_jobs_exist?()","shell::processcontroller::active_process_controllers()","acl::acllist#add()","benchmark::tms#add()","bigdecimal#add()","gem::availableset#add()","gem::dependencylist#add()","gem::resolver::requirementlist#add()","gem::testcase::staticset#add()","logger#add()","psych::coder#add()","rdoc::context#add()","rexml::attributes#add()","rexml::doctype#add()","rexml::document#add()","rexml::elements#add()","rexml::parent#add()","rexml::parsers::sax2parser#add()","rinda::tuplebag::tuplebin#add()","set#add()","syslog::logger#add()","threadgroup#add()","webrick::httpauth::htgroup#add()","benchmark::tms#add!()","set#add?()","gem::requestset::lockfile#add_git()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","gem::resolver::installerset#add_always_install()","openssl::x509::request#add_attribute()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","rexml::element#add_attribute()","rexml::element#add_attributes()","net::imap::add_authenticator()","gem::specification#add_bindir()","gem::localremoteoptions#add_bulk_threshold_option()","rdoc::store#add_c_enclosure()","rdoc::store#add_c_variables()","openssl::x509::store#add_cert()","openssl::ocsp::request#add_certid()","openssl::pkcs7#add_certificate()","gem::package#add_checksums()","gem::resolver::molinillo::dependencygraph#add_child_vertex()","rdoc::context#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","gem::localremoteoptions#add_clear_sources_option()","rdoc::classmodule#add_comment()","gem::command::add_common_option()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","csv#add_converter()","openssl::pkcs7#add_crl()","openssl::x509::store#add_crl()","openssl::pkcs7#add_data()","gem::server#add_date()","gem::specification#add_dependency()","gem::specification#add_dependency_with_type()","gem::specification#add_development_dependency()","zlib::inflate#add_dictionary()","gem::resolver::molinillo::dependencygraph#add_edge()","gem::resolver::molinillo::dependencygraph#add_edge_no_circular()","gem::resolver::molinillo::dependencygraph::log#add_edge_no_circular()","rexml::document#add_element()","rexml::element#add_element()","openssl::x509::name#add_entry()","rexml::validation::choice#add_event_to_arry()","rexml::validation::state#add_event_to_arry()","rdoc::context#add_extend()","openssl::x509::crl#add_extension()","openssl::x509::certificate#add_extension()","openssl::x509::revoked#add_extension()","gem::command#add_extra_args()","net::httpheader#add_field()","gem::package::tarwriter#add_file()","openssl::x509::store#add_file()","rdoc::stats#add_file()","rdoc::store#add_file()","gem::package::tarwriter#add_file_digest()","gem::package::tarwriter#add_file_signed()","gem::package::tarwriter#add_file_simple()","tracer::add_filter()","rdoc::rdoc::add_generator()","webrick::httpservlet::filehandler::add_handler()","rss::element::add_have_children_element()","rdoc::markup#add_html()","rdoc::context#add_include()","rdoc::toplevel#add_include()","gem::installupdateoptions#add_install_update_options()","gem::gemcutterutilities#add_key_option()","rexml::parsers::baseparser#add_listener()","rexml::parsers::lightparser#add_listener()","rexml::parsers::pullparser#add_listener()","rexml::parsers::sax2parser#add_listener()","rexml::parsers::streamparser#add_listener()","rexml::parsers::treeparser#add_listener()","rexml::parsers::ultralightparser#add_listener()","gem::resolver::installerset#add_local()","gem::localremoteoptions#add_local_remote_options()","logger::logdevice#add_log_header()","rss::maker::add_maker()","rdoc::context#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","rexml::element#add_namespace()","rss::element::add_need_initialize_variable()","rss::maker::base::add_need_initialize_variable()","openssl::ocsp::basicresponse#add_nonce()","openssl::ocsp::request#add_nonce()","observable#add_observer()","gem::command#add_option()","rss::maker::base::add_other_element()","gem::commands::ownercommand#add_owners()","gem::command#add_parser_run_info()","gem::commands::environmentcommand#add_path()","openssl::x509::store#add_path()","gem::platformmismatch#add_platform()","gem::versionoption#add_platform_option()","rss::element::add_plural_form()","gem::versionoption#add_prerelease_option()","psych::add_private_type()","drb::drbprotocol::add_protocol()","drb::drbprotocol#add_protocol()","gem::localremoteoptions#add_proxy_option()","openssl::pkcs7#add_recipient()","rdoc::context#add_require()","net::imap#add_response_handler()","openssl::x509::crl#add_revoked()","csv#add_row()","psych::add_ruby_type()","gem::specification#add_runtime_dependency()","shell::processcontroller#add_schedule()","rdoc::context#add_section()","gem::specification#add_self_to_load_path()","openssl::pkcs7#add_signer()","gem::resolver::sourceset#add_source_gem()","gem::localremoteoptions#add_source_option()","gem::specification::add_spec()","rdoc::markup#add_special()","gem::command::add_specific_extra_args()","gem::specification::add_specs()","openssl::ocsp::basicresponse#add_status()","gc::add_stress_to_class()","gem::package::tarwriter#add_symlink()","rexml::element#add_text()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","rss::element::add_to_element_method()","gem::testcase#add_to_fetcher()","rdoc::tokenstream#add_token()","rdoc::tokenstream#add_tokens()","thread#add_trace_func()","csv#add_unconverted_fields()","gem::localremoteoptions#add_update_sources_option()","openssl::config#add_value()","gem::versionoption#add_version_option()","gem::resolver::molinillo::dependencygraph#add_vertex()","gem::resolver::molinillo::dependencygraph::log#add_vertex()","rdoc::markup#add_word_pair()","ipsocket#addr()","openssl::ssl::socketforwarder#addr()","socket::ifaddr#addr()","unixsocket#addr()","ipaddr#addr_mask()","net::http#addr_port()","matrix#adjugate()","zlib::zstream#adler()","zlib::adler32()","zlib::adler32_combine()","io#advise()","addrinfo#afamily()","gem::resolver::molinillo::ui#after_resolution()","date#ajd()","gem::streamui#alert()","gem::userinteraction#alert()","gem::streamui#alert_error()","gem::userinteraction#alert_error()","gem::streamui#alert_warning()","gem::userinteraction#alert_warning()","psych::handler#alias()","psych::treebuilder#alias()","shell::alias_command()","shell::commandprocessor::alias_command()","rdoc::parser::alias_extension()","shell::commandprocessor::alias_map()","module#alias_method()","encoding::aliases()","gem::validator#alien()","drb::drbserver#alive?()","drb::extserv#alive?()","fiber#alive?()","rinda::tupleentry#alive?()","thread#alive?()","gem::specification::all()","net::popmail#all()","gem::specification::all=()","enumerable#all?()","rdoc::store#all_classes()","rdoc::store#all_classes_and_modules()","rdoc::store#all_files()","rdoc::store#all_modules()","gem::specification::all_names()","gem::testcase#all_spec_names()","gem::availableset#all_specs()","symbol::all_symbols()","threadswait#all_waits()","threadswait#all_waits()","threadswait::all_waits()","threadswait::all_waits()","class#allocate()","objectspace::allocation_class_path()","objectspace::allocation_generation()","objectspace::allocation_method_id()","objectspace::allocation_sourcefile()","objectspace::allocation_sourceline()","acl#allow_addr?()","gem::resolver#allow_missing?()","gem::resolver::molinillo::delegates::specificationprovider#allow_missing?()","gem::resolver::molinillo::specificationprovider#allow_missing?()","acl#allow_socket?()","openssl::ssl::sslsocket#alpn_protocol()","gem::security::alt_name_or_x509_entry()","rss::xmlstylesheet#alternate=()","date#amjd()","gem::resolver#amount_constrained()","gem::resolver::molinillo::dependencygraph::vertex#ancestor?()","module#ancestors()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::singleclass#ancestors()","rdoc::store#ancestors()","complex#angle()","float#angle()","numeric#angle()","vector#angle_with()","array#any?()","enumerable#any?()","hash#any?()","rdoc::context#any_content()","drb::drbserver#any_to_s()","gem::fakefetcher#api_endpoint()","gem::remotefetcher#api_endpoint()","gem::gemcutterutilities#api_key()","gem::configfile#api_keys()","net::apop#apop?()","net::apop#apop?()","net::pop3#apop?()","gem::installer#app_script_text()","net::imap#append()","optionparser::list#append()","shell::commandprocessor#append()","webrick::httputils::formdata#append_data()","module#append_features()","rss::atom::commonmodel::append_features()","rss::atom::contentmodel::append_features()","rss::atom::dateconstruct::append_features()","rss::atom::personconstruct::append_features()","rss::atom::textconstruct::append_features()","rss::atom::uricontentmodel::append_features()","rss::basedublincoremodel#append_features()","rss::contentmodel::append_features()","rss::ituneschannelmodel::append_features()","rss::itunesitemmodel::append_features()","rss::imagefaviconmodel::append_features()","rss::imageitemmodel::append_features()","rss::maker::atompersonconstructbase::append_features()","rss::maker::atomtextconstructbase::append_features()","rss::maker::contentmodel::append_features()","rss::maker::dublincoremodel::append_features()","rss::maker::ituneschannelmodel::append_features()","rss::maker::itunesitemmodel::append_features()","rss::maker::imagefaviconmodel::append_features()","rss::maker::imageitemmodel::append_features()","rss::maker::slashmodel::append_features()","rss::maker::syndicationmodel::append_features()","rss::maker::taxonomytopicmodel::append_features()","rss::maker::taxonomytopicsmodel::append_features()","rss::maker::trackbackmodel::append_features()","rss::rss09::append_features()","rss::rss10::append_features()","rss::slashmodel::append_features()","rss::syndicationmodel::append_features()","rss::taxonomytopicmodel::append_features()","rss::taxonomytopicsmodel::append_features()","singleton::append_features()","sync_m::append_features()","sync_m::append_features()","net::ftp::mlsxentry#appendable?()","time::apply_offset()","gem::version#approximate_recommendation()","rdoc::alias#aref()","rdoc::classmodule#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","complex#arg()","float#arg()","numeric#arg()","rdoc::anymethod#arglists()","nomethoderror#args()","gem::command#arguments()","argf#argv()","process::argv0()","method#arity()","proc#arity()","unboundmethod#arity()","win32ole_variant::array()","gem::specification::array_attributes()","bigdecimal#as_json()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","json::genericobject#as_json()","openstruct#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","pathname#ascend()","encoding#ascii_compatible?()","string#ascii_only?()","encoding::converter::asciicompat_encoding()","date#asctime()","time#asctime()","cmath#asin()","cmath::asin()","math::asin()","cmath::asinh()","cmath#asinh()","math::asinh()","gem::mockgemui#ask()","gem::streamui#ask()","gem::userinteraction#ask()","gem::streamui#ask_for_password()","gem::userinteraction#ask_for_password()","gem::testcase#ask_if_ok()","gem::streamui#ask_yes_no()","gem::userinteraction#ask_yes_no()","openssl::pkey::ec::group#asn1_flag()","openssl::pkey::ec::group#asn1_flag=()","gem::testcase#assert_activate()","gem::testcase#assert_contains_make_command()","rdoc::testcase#assert_directory()","rdoc::testcase#assert_file()","gem::package::tartestcase#assert_headers_equal()","gem::testcase#assert_path_exists()","rdoc::servlet#asset()","fiddle::cstructentity#assign_names()","array#assoc()","env::assoc()","hash#assoc()","array#at()","gem::installer::at()","time::at()","kernel#at_exit()","bigmath#atan()","cmath#atan()","cmath::atan()","math::atan()","cmath#atan2()","cmath::atan2()","math::atan2()","cmath::atanh()","cmath#atanh()","math::atanh()","file::atime()","file#atime()","file::stat#atime()","pathname#atime()","rss::atom::dateconstruct#atom_validate()","rss::atom::entry#atom_validate()","rss::atom::feed#atom_validate()","rss::atom::feed::entry#atom_validate()","rss::atom::feed::entry::content#atom_validate()","rss::atom::textconstruct#atom_validate()","gem::resolver::molinillo::resolver::resolution#attempt_to_activate()","gem::resolver::molinillo::resolver::resolution#attempt_to_activate_existing_spec()","gem::resolver::molinillo::resolver::resolution#attempt_to_activate_new_spec()","gem::resolver::molinillo::resolver::resolution#attempt_to_swap_possibility()","rexml::sax2listener#attlistdecl()","rexml::streamlistener#attlistdecl()","rexml::parsers::pullevent#attlistdecl?()","module#attr()","module#attr_accessor()","module#attr_reader()","module#attr_writer()","rexml::element#attribute()","rexml::quickpath::attribute()","gem::specification::attribute_names()","rexml::doctype#attribute_of()","openssl::x509::request#attributes()","rdoc::store#attributes()","uri::ldap#attributes()","openssl::x509::request#attributes=()","uri::ldap#attributes=()","rexml::doctype#attributes_of()","net::smtp#auth_capable?()","net::smtp#auth_cram_md5()","openssl::cipher#auth_data=()","net::smtp#auth_login()","net::smtp#auth_method()","net::pop3#auth_only()","net::pop3::auth_only()","net::smtp#auth_plain()","openssl::cipher#auth_tag()","openssl::cipher#auth_tag=()","openssl::cipher#auth_tag_len=()","net::imap#authenticate()","net::smtp#authenticate()","webrick::httpauth::basicauth#authenticate()","webrick::httpauth::digestauth#authenticate()","openssl::cipher#authenticated?()","gem::specification#author()","gem::specification#author=()","gem::specification#authors()","gem::specification#authors=()","io#autoclose=()","io#autoclose?()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","zlib::zstream#avail_in()","zlib::zstream#avail_out()","zlib::zstream#avail_out=()","gem::specfetcher#available_specs()","rss::baselistener::available_tags()","rexml::quickpath::axe()","string#b()","exception#backtrace()","gem::configfile#backtrace()","gem::streamui#backtrace()","thread#backtrace()","exception#backtrace_locations()","thread#backtrace_locations()","gem::resolver::stats#backtracking!()","optionparser#banner()","cgi::htmlextension#base()","optionparser#base()","random::formatter#base64()","net::smtp#base64_encode()","digest::class::base64digest()","digest::instance#base64digest()","digest::instance#base64digest!()","gem::basicspecification#base_dir()","gem::specification#base_dir()","rubyvm::instructionsequence#base_label()","thread::backtrace::location#base_label()","rdoc::toplevel#base_name()","file::basename()","pathname#basename()","openssl::ocsp::response#basic()","webrick::httpauth#basic_auth()","readline::basic_quote_characters()","readline::basic_quote_characters=()","readline::basic_word_break_characters()","readline::basic_word_break_characters=()","vector::basis()","io#beep()","gem::resolver::molinillo::ui#before_resolution()","rdoc::task#before_running_rdoc()","rdoc::task#before_running_rdoc()","matchdata#begin()","range#begin()","rdoc::stats#begin_adding()","net::http#begin_transport()","stringscanner#beginning_of_line?()","gem::command#begins?()","benchmark#benchmark()","benchmark::benchmark()","comparable#between?()","gem::specification#bin_dir()","gem::specification#bin_file()","rinda::tuplebag#bin_for_find()","rinda::tuplebag#bin_key()","gem::bin_path()","net::ftp#binary=()","psych::visitors::yamltree#binary?()","rdoc::parser::binary?()","gem::binary_mode()","addrinfo#bind()","exception2messagemapper#bind()","fiddle::importer#bind()","socket#bind()","udpsocket#bind()","unboundmethod#bind()","fiddle::importer#bind_function()","kernel#binding()","proc#binding()","tracepoint#binding()","gem::bindir()","argf#binmode()","io#binmode()","stringio#binmode()","argf#binmode?()","io#binmode?()","io::binread()","pathname#binread()","io::binwrite()","pathname#binwrite()","file::birthtime()","file#birthtime()","file::stat#birthtime()","pathname#birthtime()","integer#bit_length()","integer#bit_length()","openssl::bn#bit_set?()","rdoc::testcase#blank_line()","openssl::pkey::rsa#blinding_off!()","openssl::pkey::rsa#blinding_on!()","file::stat#blksize()","rdoc::testcase#block()","kernel#block_given?()","digest::base#block_length()","digest::instance#block_length()","openssl::digest#block_length()","shell::processcontroller::block_output_synchronize()","rdoc::methodattr#block_params=()","io#block_scanf()","string#block_scanf()","openssl::cipher#block_size()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","pathname#blockdev?()","cgi::htmlextension#blockquote()","file::stat#blocks()","benchmark#bm()","benchmark::bm()","benchmark#bmbm()","benchmark::bmbm()","net::httpresponse#body()","webrick::httprequest#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpgenericrequest#body_exist?()","net::httpresponse::body_permitted?()","net::httpgenericrequest#body_stream=()","socket::option::bool()","socket::option#bool()","rexml::functions::boolean()","rss::basemodel#boolean_writer()","gem::localremoteoptions#both?()","irb::frame#bottom()","irb::frame::bottom()","rdoc::markdown#break_on_newline()","prettyprint#break_outmost_groups()","debugger__::break_points()","prettyprint#breakable()","prettyprint::singleline#breakable()","socket::ifaddr#broadaddr()","conditionvariable#broadcast()","monitormixin::conditionvariable#broadcast()","array#bsearch()","range#bsearch()","array#bsearch_index()","digest::bubblebabble()","digest::class::bubblebabble()","digest::instance#bubblebabble()","gem::commands::certcommand#build()","gem::ext::cmakebuilder::build()","gem::ext::configurebuilder::build()","gem::ext::extconfbuilder::build()","gem::ext::rakebuilder::build()","gem::package#build()","gem::package::build()","gem::requestset::lockfile::build()","matrix::build()","rexml::document#build()","uri::ftp::build()","uri::generic::build()","uri::http::build()","uri::ldap::build()","uri::mailto::build()","uri::generic::build2()","gem::command::build_args()","gem::specification#build_args()","gem::command::build_args=()","matrix::eigenvaluedecomposition#build_eigenvectors()","gem::ext::builder#build_extensions()","gem::installer#build_extensions()","rdoc::tomdoc#build_heading()","gem::indexer#build_indices()","gem::specification#build_info_dir()","gem::specification#build_info_file()","gem::indexer#build_marshal_gemspecs()","gem::missingspecerror#build_message()","gem::missingspecversionerror#build_message()","gem::indexer#build_modern_index()","gem::indexer#build_modern_indices()","rdoc::tomdoc#build_paragraph()","uri::ldap#build_path_query()","gem::testcase#build_rake_in()","rdoc::tomdoc#build_verbatim()","openssl::pkey::ec::builtin_curves()","gem::version#bump()","gem::specification#bundled_gem_in_old_ruby?()","csv::table#by_col()","csv::table#by_col!()","csv::table#by_col_or_row()","csv::table#by_col_or_row!()","openssl::engine::by_id()","csv::table#by_row()","csv::table#by_row!()","socket::option#byte()","socket::option::byte()","argf#bytes()","io#bytes()","rexml::child#bytes()","random#bytes()","securerandom::bytes()","string#bytes()","stringio#bytes()","zlib::gzipreader#bytes()","gem::package::tarreader::entry#bytes_read()","string#bytesize()","string#byteslice()","prime::trialdivision#cache()","gem::source#cache_dir()","gem::specification#cache_dir()","gem::specification#cache_file()","rdoc::store#cache_path()","gem::fakefetcher#cache_update_path()","gem::remotefetcher#cache_update_path()","gdbm#cachesize=()","gem::package::tartestcase#calc_checksum()","rss::element#calc_indent()","rdoc::stats#calculate()","gem::package::tarheader#calculate_checksum()","continuation#call()","fiddle::closure::blockcaller#call()","fiddle::function#call()","logger::formatter#call()","method#call()","proc#call()","syslog::logger::formatter#call()","rdoc::anymethod#call_seq=()","kernel#callcc()","tracepoint#callee_id()","kernel#caller()","kernel#caller_locations()","rdoc::parser::can_parse()","rdoc::parser::can_parse_by_name()","rinda::tupleentry#cancel()","rinda::waittemplateentry#cancel()","webrick#cancel()","webrick::utils::timeouthandler::cancel()","rinda::tupleentry#canceled?()","optionparser#candidate()","optionparser::completion#candidate()","optionparser::completion::candidate()","unicodenormalize::canonical_ordering_one()","addrinfo#canonname()","net::smtp::response#capabilities()","net::imap#capability()","net::smtp#capable?()","net::smtp#capable_auth_types()","net::smtp#capable_cram_md5_auth?()","net::smtp#capable_login_auth?()","net::smtp#capable_plain_auth?()","net::smtp#capable_starttls?()","string#capitalize()","symbol#capitalize()","string#capitalize!()","cgi::htmlextension#caption()","open3#capture2()","open3::capture2()","open3::capture2e()","open3#capture2e()","open3::capture3()","open3#capture3()","matchdata#captures()","string#casecmp()","symbol#casecmp()","string#casecmp?()","symbol#casecmp?()","regexp#casefold?()","shell::commandprocessor#cat()","kernel#catch()","timeout::error::catch()","timeout::error::catch()","timeout::error::catch()","exception#cause()","cmath#cbrt()","cmath::cbrt()","math::cbrt()","fileutils::cd()","fileutils#cd()","shell#cd()","shell::cd()","rexml::sax2listener#cdata()","rexml::streamlistener#cdata()","rexml::parsers::pullevent#cdata?()","rexml::element#cdatas()","matrix::eigenvaluedecomposition#cdiv()","bigdecimal#ceil()","float#ceil()","integer#ceil()","integer#ceil()","numeric#ceil()","rational#ceil()","rexml::functions::ceiling()","string#center()","openssl::ssl::sslsocket#cert()","gem::request#cert_files()","gem::security::trustdir#cert_path()","gem::testcase::cert_path()","openssl::ocsp::singleresponse#cert_status()","openssl::ocsp::request#certid()","openssl::ocsp::singleresponse#certid()","openssl::pkcs7#certificates()","openssl::pkcs7#certificates=()","gem::commands::certcommand#certificates_matching()","net::pop3::certs()","openssl::x509::storecontext#chain()","openssl::netscape::spki#challenge()","webrick::httpauth::basicauth#challenge()","webrick::httpauth::digestauth#challenge()","openssl::netscape::spki#challenge=()","process::gid::change_privilege()","process::uid::change_privilege()","irb::context#change_workspace()","observable#changed()","observable#changed?()","rss::rexmllikexmlparser#character()","rexml::sax2listener#characters()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","pathname#chardev?()","stringscanner#charpos()","argf#chars()","io#chars()","string#chars()","stringio#chars()","openuri::meta#charset()","dir::chdir()","fileutils::chdir()","fileutils#chdir()","net::ftp#chdir()","shell#chdir()","net::imap#check()","pty::check()","rexml::text::check()","stringscanner#check()","net::smtp#check_auth_args()","net::smtp#check_auth_continue()","net::smtp#check_auth_method()","net::smtp#check_auth_response()","gem::security::policy#check_cert()","gem::security::policy#check_chain()","gem::package::tarwriter#check_closed()","net::smtp#check_continue()","gem::configfile#check_credentials_permissions()","gem::security::policy#check_data()","rdoc::options#check_files()","gem::commands::checkcommand#check_gems()","rdoc::options#check_generator()","uri::mailto#check_headers()","uri::generic#check_host()","drb::drbserver#check_insecure_method()","pp::ppmethods#check_inspect_key()","gem::security::policy#check_key()","openssl::pkey::ec#check_key()","rdoc::parser::check_modeline()","openssl::config#check_modify()","rdoc::task#check_names()","rdoc::task#check_names()","openssl::ocsp::request#check_nonce()","rss::listenermixin#check_ns()","uri::generic#check_opaque()","uri::generic#check_password()","uri::generic#check_path()","uri::generic#check_port()","openssl::x509::certificate#check_private_key()","net::smtp#check_response()","gem::security::policy#check_root()","gem::commands::setupcommand#check_ruby_version()","uri::generic#check_scheme()","logger::logdevice#check_shift_log()","makemakefile#check_signedness()","makemakefile#check_sizeof()","uri::mailto#check_to()","gem::security::policy#check_trust()","uri::ftp#check_typecode()","stringscanner#check_until()","uri::generic#check_user()","uri::generic#check_userinfo()","openssl::ocsp::singleresponse#check_validity()","cgi::htmlextension#checkbox()","cgi::htmlextension#checkbox_group()","rdoc::context#child_name()","pathname#children()","rexml::light::node#children()","rexml::parent#children()","rss::element#children()","file::chmod()","file#chmod()","fileutils::chmod()","fileutils#chmod()","pathname#chmod()","fileutils#chmod_r()","fileutils::chmod_r()","kernel#chomp()","string#chomp()","string#chomp!()","gem::streamui#choose_from_list()","gem::userinteraction#choose_from_list()","kernel#chop()","string#chop()","string#chop!()","file::chown()","file#chown()","fileutils::chown()","fileutils#chown()","pathname#chown()","fileutils#chown_r()","fileutils::chown_r()","integer#chr()","integer#chr()","string#chr()","dir::chroot()","enumerable#chunk()","enumerator::lazy#chunk()","enumerable#chunk_while()","enumerator::lazy#chunk_while()","webrick::httpresponse#chunked=()","webrick::httpresponse#chunked?()","openssl::engine#cipher()","openssl::ssl::sslsocket#cipher()","openssl::pkcs7#cipher=()","openssl::cipher::ciphers()","openssl::ssl::sslcontext#ciphers()","openssl::ssl::sslcontext#ciphers=()","date::civil()","datetime::civil()","comparable#clamp()","object#class()","rdoc::context#class_attributes()","module#class_eval()","module#class_exec()","rdoc::store#class_file()","rdoc::context#class_method_list()","rdoc::store#class_methods()","gem::ext::builder::class_name()","rss::baselistener::class_name()","rdoc::store#class_path()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","rdoc::context#classes()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::store#classes_hash()","set#classify()","syslog::logger::formatter#clean()","gem::commands::cleanupcommand#clean_gems()","gem::text#clean_text()","pathname#cleanpath()","openssl::engine::cleanup()","openssl::x509::storecontext#cleanup()","array#clear()","dbm#clear()","env::clear()","gc::profiler::clear()","gdbm#clear()","gem::dependencylist#clear()","gem::sourcelist#clear()","hash#clear()","queue#clear()","sdbm#clear()","set#clear()","sizedqueue#clear()","string#clear()","stringscanner#clear()","openssl::bn#clear_bit!()","rexml::text#clear_cache()","rdoc::classmodule#clear_comment()","openssl::config::clear_comments()","gem::clear_default_specs()","gem::clear_paths()","openssl::ssl::sslsocket#client_ca()","openssl::ssl::sslsocket#client_cert_cb()","webrick::httpstatus::client_error?()","webrick::httpstatus#client_error?()","rdoc::task#clobber_task_description()","rdoc::task#clobber_task_description()","rdoc::task#clobber_task_name()","rdoc::task#clobber_task_name()","process::clock_getres()","process::clock_gettime()","matrix#clone()","method#clone()","object#clone()","rexml::attribute#clone()","rexml::cdata#clone()","rexml::comment#clone()","rexml::doctype#clone()","rexml::document#clone()","rexml::element#clone()","rexml::instruction#clone()","rexml::text#clone()","rexml::xmldecl#clone()","singleton#clone()","unboundmethod#clone()","vector#clone()","argf#close()","cgi::session#close()","cgi::session::filestore#close()","cgi::session::memorystore#close()","cgi::session::nullstore#close()","cgi::session::pstore#close()","dbm#close()","dir#close()","fiddle::handle#close()","gdbm#close()","gem::package::tarreader#close()","gem::package::tarreader::entry#close()","gem::package::tarwriter#close()","gem::silentui#close()","gem::streamui#close()","io#close()","logger#close()","logger::logdevice#close()","net::ftp#close()","net::imap#close()","openssl::buffering#close()","openssl::ssl::sslserver#close()","queue#close()","resolv::dns#close()","sdbm#close()","sockssocket#close()","sizedqueue#close()","stringio#close()","syslog::close()","tempfile#close()","webrick::basiclog#close()","zlib::gzipfile#close()","zlib::zstream#close()","tempfile#close!()","gem::remotefetcher#close_all()","fiddle::handle#close_enabled?()","io#close_on_exec=()","io#close_on_exec?()","basicsocket#close_read()","io#close_read()","stringio#close_read()","basicsocket#close_write()","io#close_write()","stringio#close_write()","argf#closed?()","dbm#closed?()","gdbm#closed?()","gem::package::tarreader::entry#closed?()","gem::package::tarwriter#closed?()","io#closed?()","net::ftp#closed?()","openssl::ssl::socketforwarder#closed?()","queue#closed?()","sdbm#closed?()","stringio#closed?()","zlib::gzipfile#closed?()","zlib::zstream#closed?()","stringio#closed_read?()","stringio#closed_write?()","openssl::engine#cmds()","fileutils#cmp()","fileutils::cmp()","openssl::bn#cmp()","openssl::ocsp::certificateid#cmp()","openssl::x509::name#cmp()","openssl::ocsp::certificateid#cmp_issuer()","socket::ancillarydata#cmsg_is?()","webrick::httpstatus::status#code()","win32ole::codepage()","win32ole::codepage=()","argf#codepoints()","io#codepoints()","string#codepoints()","stringio#codepoints()","bigdecimal#coerce()","float#coerce()","integer#coerce()","integer#coerce()","matrix#coerce()","numeric#coerce()","openssl::bn#coerce()","uri::generic#coerce()","vector#coerce()","ipaddr#coerce_other()","matrix#cofactor()","openssl::pkey::ec::group#cofactor()","matrix#cofactor_expansion()","array#collect()","enumerable#collect()","enumerator::lazy#collect()","matrix#collect()","rexml::elements#collect()","vector#collect()","array#collect!()","set#collect!()","vector#collect2()","rss::listenermixin#collect_attributes()","rss::element#collect_attrs()","enumerable#collect_concat()","enumerator::lazy#collect_concat()","fileutils::collect_method()","rdoc::tokenstream#collect_tokens()","matrix#column()","ripper#column()","ripper::filter#column()","matrix::column_vector()","matrix#column_vectors()","matrix::columns()","array#combination()","pp::ppmethods#comma_breakable()","drb::extservmanager::command()","drb::extservmanager::command=()","gem::commandmanager#command_names()","fileutils::commands()","rdoc::testcase#comment()","rexml::sax2listener#comment()","rexml::streamlistener#comment()","zlib::gzipfile#comment()","rdoc::codeobject#comment=()","zlib::gzipwriter#comment=()","rexml::parsers::pullevent#comment?()","rexml::element#comments()","date::commercial()","datetime::commercial()","pstore#commit()","gem::testcase#common_installer_setup()","gem::testcase#common_installer_teardown()","gem::command::common_options()","array#compact()","fiddle::cparser#compact()","hash#compact()","array#compact!()","hash#compact!()","gem::indexer#compact_specs()","rexml::xpathparser#compare()","hash#compare_by_identity()","set#compare_by_identity()","hash#compare_by_identity?()","set#compare_by_identity?()","fileutils#compare_file()","fileutils::compare_file()","rexml::functions::compare_language()","fileutils#compare_stream()","fileutils::compare_stream()","encoding::compatible?()","regexp::compile()","rubyvm::instructionsequence::compile()","ripper#compile_error()","rubyvm::instructionsequence::compile_file()","rubyvm::instructionsequence::compile_option()","rubyvm::instructionsequence::compile_option=()","gem::commands::lockcommand#complain()","optionparser#complete()","optionparser::completion#complete()","optionparser::list#complete()","rdoc::classmodule#complete()","rdoc::store#complete()","readline::completer_quote_characters()","readline::completer_quote_characters=()","readline::completer_word_break_characters()","readline::completer_word_break_characters=()","readline::completion_append_character()","readline::completion_append_character=()","readline::completion_case_fold()","readline::completion_case_fold=()","readline::completion_proc()","readline::completion_proc=()","matrix#component()","uri::generic#component()","uri::generic::component()","vector#component()","uri::generic#component_ary()","gem::resolver::compose_sets()","gem::indexer#compress()","gem::indexer#compress_indices()","openssl::pkey::dh#compute_key()","prime::eratosthenessieve#compute_primes()","array#concat()","gem::requirement#concat()","rexml::functions::concat()","shell::commandprocessor#concat()","string#concat()","stringscanner#concat()","irb::conf()","drb#config()","drb::config()","gem::config_file()","gem::configfile#config_file_name()","gem::configuration()","gem::configuration=()","gem::request::configure_connection_for_https()","gem::command#configure_options()","gem::dependencyresolutionerror#conflicting_dependencies()","gem::resolver::conflict#conflicting_dependencies()","gem::resolver::molinillo::delegates::resolutionstate#conflicts()","gem::specification#conflicts()","etc::confstr()","complex#conj()","matrix#conj()","numeric#conj()","complex#conjugate()","matrix#conjugate()","numeric#conjugate()","addrinfo#connect()","drb::drbsslsocket::sslconfig#connect()","net::ftp#connect()","net::http#connect()","openssl::ssl::sslsocket#connect()","socket#connect()","udpsocket#connect()","win32ole::connect()","basicsocket#connect_address()","addrinfo#connect_from()","addrinfo#connect_internal()","openssl::ssl::sslsocket#connect_nonblock()","socket#connect_nonblock()","addrinfo#connect_to()","gem::request#connection_for()","gem::dependencyinstaller#consider_local?()","gem::dependencyinstaller#consider_remote?()","io::console()","module#const_defined?()","module#const_get()","win32ole::const_load()","module#const_missing()","module#const_set()","module#constants()","module::constants()","rss::itunesitemmodel::itunesduration::construct()","rexml::iosource#consume()","rexml::source#consume()","openssl::buffering#consume_rbuff()","rexml::functions::contains()","gem::basicspecification#contains_requirable_file?()","rexml::xmldecl#content()","rss::itunesitemmodel::itunesduration#content=()","rss::maker::itunesitemmodel::itunesdurationbase#content=()","openuri::meta#content_encoding()","rss::element#content_is_set?()","webrick::httprequest#content_length()","webrick::httpresponse#content_length()","webrick::httpresponse#content_length=()","rss::element::content_setup()","openuri::meta#content_type()","rss::atom::contentmodel::classmethods#content_type()","webrick::httprequest#content_type()","webrick::httpresponse#content_type()","webrick::httpresponse#content_type=()","rss::basemodel#content_writer()","gem::package#contents()","gem::package::old#contents()","debugger__::context()","rexml::doctype#context()","rexml::parseexception#context()","rexml::functions::context=()","net::smtp::response#continue?()","net::http#continue_timeout=()","optionparser::switch#conv_arg()","csv#convert()","encoding::converter#convert()","optionparser::completion#convert()","rdoc::markup#convert()","rss::converter#convert()","rss::element#convert()","webrick::httpversion::convert()","rss::basemodel#convert_attr_reader()","csv#convert_fields()","uri::rfc2396_parser#convert_to_uri()","rss::element#converter=()","csv#converters()","makemakefile#convertible_int()","encoding::converter#convpath()","io#cooked()","io#cooked!()","fileutils#copy()","fileutils::copy()","net::http#copy()","net::imap#copy()","openssl::bn#copy()","fileutils#copy_entry()","fileutils::copy_entry()","fileutils::copy_file()","fileutils#copy_file()","net::imap#copy_internal()","openssl::ocsp::basicresponse#copy_nonce()","fileutils::copy_stream()","fileutils#copy_stream()","io::copy_stream()","gem::installer::fakepackage#copy_to()","gem::package#copy_to()","process::status#coredump?()","gem::version::correct?()","gem::remotefetcher#correct_for_windows_path()","bigmath#cos()","cmath::cos()","cmath#cos()","math::cos()","cmath::cosh()","cmath#cosh()","math::cosh()","array#count()","enumerable#count()","gc::count()","rexml::functions::count()","string#count()","objectspace::count_imemo_objects()","objectspace::count_nodes()","objectspace::count_objects()","objectspace::count_objects_size()","observable#count_observers()","objectspace::count_symbols()","objectspace::count_tdata_objects()","vector#covector()","range#cover?()","rdoc::stats#coverage_level=()","fileutils#cp()","fileutils::cp()","fileutils::cp_r()","fileutils#cp_r()","net::smtp::response#cram_md5_challenge()","net::smtp#cram_md5_response()","net::smtp#cram_secret()","zlib::gzipfile#crc()","zlib::crc32()","zlib::crc32_combine()","zlib::crc_table()","net::ftp::mlsxentry#creatable?()","fiddle::cstructbuilder#create()","fiddle::cstructbuilder::create()","gem::noaliasyamltree::create()","gem::requirement::create()","gem::version::create()","net::imap#create()","openssl::ocsp::response::create()","openssl::pkcs12::create()","psych::visitors::jsontree::create()","psych::visitors::toruby::create()","psych::visitors::yamltree::create()","resolv::dns::name::create()","resolv::ipv4::create()","resolv::ipv6::create()","resolv::loc::alt::create()","resolv::loc::coord::create()","resolv::loc::size::create()","tempfile::create()","gem::security::create_cert()","gem::security::create_cert_email()","gem::security::create_cert_self_signed()","gem::resolver::molinillo::resolver::resolution#create_conflict()","rinda::tuplespace#create_entry()","openssl::x509::extensionfactory#create_ext()","openssl::x509::extensionfactory#create_ext_from_array()","openssl::x509::extensionfactory#create_ext_from_hash()","openssl::x509::extensionfactory#create_ext_from_string()","openssl::x509::extensionfactory#create_extension()","rexml::sourcefactory::create_from()","win32ole::create_guid()","makemakefile#create_header()","gem::security::create_key()","webrick::utils::create_listeners()","webrick::utils#create_listeners()","logger::logdevice#create_logfile()","makemakefile#create_makefile()","cgi::session#create_new_id()","gem::command#create_option_parser()","webrick::utils::create_self_signed_cert()","webrick::utils#create_self_signed_cert()","net::imap#create_ssl_params()","net::pop3::create_ssl_params()","gem::testcase#create_tmpdir()","fiddle::importer#create_value()","gem::testcase::specfetchersetup#created_specs()","gem::configfile#credentials_path()","net::smtp#critical()","openssl::x509::extension#critical=()","openssl::x509::extension#critical?()","openssl::x509::extensionfactory#crl=()","openssl::pkcs7#crls()","openssl::pkcs7#crls=()","vector#cross()","vector#cross_product()","string#crypt()","rdoc::markdown#css()","rss::basemodel#csv_attr_reader()","rss::basemodel#csv_integer_writer()","rss::basemodel#csv_writer()","date#ctime()","file::ctime()","file#ctime()","file::stat#ctime()","pathname#ctime()","time#ctime()","openssl::engine#ctrl_cmd()","fiber::current()","rdoc::rdoc::current()","thread::current()","rdoc::rdoc::current=()","openssl::x509::storecontext#current_cert()","openssl::x509::storecontext#current_crl()","rss::maker::base#current_element()","prettyprint#current_group()","rexml::iosource#current_line()","rexml::source#current_line()","rdoc::context#current_section()","drb::current_server()","drb#current_server()","method#curry()","proc#curry()","io#cursor()","io#cursor=()","openssl::pkey::ec::group#curve_name()","date#cwday()","date#cweek()","date#cwyear()","array#cycle()","enumerable#cycle()","matrix::eigenvaluedecomposition#d()","rexml::xpathparser#d_o_s()","process::daemon()","net::smtp#data()","resolv::dns::resource::txt#data()","socket::ancillarydata#data()","socket::option#data()","openssl::pkcs7#data=()","zlib::zstream#data_type()","gem::datadir()","gem::basicspecification#datadir()","gem::specification#date()","gem::specification#date=()","rss::maker::channelbase#date=()","rss::maker::itemsbase::itembase#date=()","rss::maker::itemsbase::itembase::sourcebase#date=()","rss::basemodel#date_writer()","logger#datetime_format()","logger#datetime_format=()","date#day()","time#day()","date#day_fraction()","array#dclone()","float#dclone()","integer#dclone()","integer#dclone()","object#dclone()","symbol#dclone()","rexml::parsers::sax2parser#deafen()","gem::resolver::molinillo::resolver::resolution#debug()","gem::resolver::molinillo::ui#debug()","gem::streamui#debug()","logger#debug()","net::imap::debug()","openssl::debug()","syslog::logger#debug()","webrick::basiclog#debug()","net::imap::debug=()","openssl::debug=()","shell::debug=()","shell#debug=()","gem::resolver#debug?()","gem::resolver::molinillo::ui#debug?()","irb::context#debug?()","logger#debug?()","webrick::basiclog#debug?()","irb::context#debug_level=()","net::smtp#debug_output=()","debugger__::debug_thread_info()","gem::testcase::specfetchersetup::declare()","openssl::asn1::decode()","rexml::encoding#decode()","uri::escape#decode()","base64#decode64()","openssl::asn1::decode_all()","net::imap::decode_utf7()","uri::decode_www_form()","uri::decode_www_form_component()","openssl::cipher#decrypt()","openssl::pkcs7#decrypt()","ripper::dedent_string()","ripper#dedent_string()","rexml::parent#deep_clone()","rss::maker::base::def_array_element()","rss::maker::atompersons#def_atom_persons()","rss::maker::atomtextconstruct::def_atom_text_construct()","rss::basemodel#def_children_accessor()","erb#def_class()","rss::itunesmodelutils#def_class_accessor()","rss::maker::itunesbasemodel#def_class_accessor()","rss::maker::base::def_classed_element()","rss::maker::base::def_classed_element_without_accessor()","rss::maker::base::def_classed_elements()","rss::converter#def_convert()","rss::element::def_corresponded_attr_reader()","rss::element::def_corresponded_attr_writer()","rss::maker::itunesbasemodel#def_csv_accessor()","rss::maker::base::def_csv_element()","forwardable#def_delegator()","singleforwardable#def_delegator()","forwardable#def_delegators()","singleforwardable#def_delegators()","exception2messagemapper#def_e2message()","rss::itunesmodelutils#def_element_class_accessor()","rss::itunesmodelutils#def_elements_class_accessor()","rss::maker::itunesbasemodel#def_elements_class_accessor()","rss::converter#def_else_enc()","erb::defmethod#def_erb_method()","erb::defmethod::def_erb_method()","exception2messagemapper#def_exception()","irb::contextextender::def_extend_command()","irb::extendcommandbundle::def_extend_command()","rss::baselistener::def_get_text_element()","optionparser#def_head_option()","rss::converter#def_iconv_convert()","irb::inspector::def_inspector()","forwardable#def_instance_delegator()","forwardable#def_instance_delegators()","erb#def_method()","erb#def_module()","irb::notifier#def_notifier()","irb::notifier::def_notifier()","irb::notifier::compositenotifier#def_notifier()","optionparser#def_option()","rss::maker::base::def_other_element()","rss::maker::base::def_other_element_without_accessor()","irb::methodextender#def_post_proc()","irb::methodextender#def_pre_proc()","rss::converter#def_same_enc()","singleforwardable#def_single_delegator()","singleforwardable#def_single_delegators()","shell::def_system_command()","shell::commandprocessor::def_system_command()","optionparser#def_tail_option()","rss::converter#def_to_euc_jp_from_iso_2022_jp()","rss::converter#def_to_euc_jp_from_shift_jis()","rss::converter#def_to_euc_jp_from_utf_8()","rss::converter#def_to_iso_2022_jp_from_euc_jp()","rss::converter#def_to_iso_8859_1_from_utf_8()","rss::converter#def_to_shift_jis_from_euc_jp()","rss::converter#def_to_shift_jis_from_utf_8()","rss::converter#def_to_utf_8_from_euc_jp()","rss::converter#def_to_utf_8_from_iso_8859_1()","rss::converter#def_to_utf_8_from_shift_jis()","rss::converter#def_uconv_convert_if_can()","rss::maker::itunesbasemodel#def_yes_clean_other_accessor()","rss::maker::itunesbasemodel#def_yes_other_accessor()","gem::requirement::default()","hash#default()","rexml::xmldecl::default()","win32ole_param#default()","hash#default=()","drb::drbserver::default_acl()","drb::drbserver::default_argc_limit()","gem::default_bindir()","gem::default_cert_path()","gem::default_dir()","win32ole_type#default_event_sources()","gem::default_exec_format()","gem::default_ext_dir_for()","encoding::default_external()","encoding::default_external=()","gem::basicspecification#default_gem?()","gem::default_gems_use_full_paths?()","drb::drbserver::default_id_conv()","net::imap::default_imap_port()","net::imap::default_imaps_port()","encoding::default_internal()","encoding::default_internal=()","gem::default_key_path()","drb::drbserver::default_load_limit()","win32ole_type#default_ole_types()","rss::parser::default_parser()","rss::parser::default_parser=()","net::ftp::default_passive()","net::ftp::default_passive=()","gem::default_path()","gem::pathsupport#default_path()","net::pop3::default_pop3_port()","net::pop3::default_pop3s_port()","net::http::default_port()","net::imap::default_port()","net::pop3::default_port()","net::smtp::default_port()","uri::generic#default_port()","uri::generic::default_port()","hash#default_proc()","hash#default_proc=()","shell::default_record_separator()","shell::default_record_separator=()","gem::default_rubygems_dirs()","drb::drbserver::default_safe_level()","gem::default_sources()","gem::default_spec_cache_dir()","gem::installer#default_spec_file()","gem::basicspecification::default_specifications_dir()","object#default_src_encoding()","net::smtp::default_ssl_context()","net::imap::default_ssl_port()","net::smtp::default_ssl_port()","gem::specification::default_stubs()","net::smtp::default_submission_port()","shell::default_system_path()","shell::default_system_path=()","rdoc::options#default_title=()","net::imap::default_tls_port()","net::smtp::default_tls_port()","gem::specification#default_value()","rdoc::task#defaults()","rdoc::task#defaults()","gem::command#defaults_str()","gem::packagetask#define()","optionparser#define()","rdoc::task#define()","rdoc::task#define()","sync_m::define_aliases()","sync_m::define_aliases()","optionparser#define_by_keywords()","objectspace::define_finalizer()","optionparser#define_head()","module#define_method()","object#define_singleton_method()","optionparser#define_tail()","tracepoint#defined_class()","rdoc::context#defined_in?()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","rdoc::markdown#definition_lists()","gem::deflate()","zlib::deflate()","zlib::deflate::deflate()","zlib::deflate#deflate()","openssl::pkey::ec::group#degree()","forwardable#delegate()","singleforwardable#delegate()","net::ftp::mlsxentry#deletable?()","array#delete()","cgi::session#delete()","cgi::session::filestore#delete()","cgi::session::memorystore#delete()","cgi::session::nullstore#delete()","cgi::session::pstore#delete()","csv::row#delete()","csv::table#delete()","dbm#delete()","dir::delete()","env::delete()","file::delete()","gdbm#delete()","gem::sourcelist#delete()","hash#delete()","irb::jobmanager#delete()","net::ftp#delete()","net::http#delete()","net::imap#delete()","net::popmail#delete()","pstore#delete()","pathname#delete()","rexml::attributes#delete()","rexml::elements#delete()","rexml::parent#delete()","rinda::tuplebag#delete()","rinda::tuplebag::tuplebin#delete()","sdbm#delete()","set#delete()","string#delete()","tempfile#delete()","yaml::dbm#delete()","net::popmail#delete!()","string#delete!()","set#delete?()","net::pop3#delete_all()","net::pop3::delete_all()","rexml::attributes#delete_all()","rexml::elements#delete_all()","array#delete_at()","rexml::parent#delete_at()","rexml::element#delete_attribute()","gem::resolver::molinillo::dependencygraph#delete_edge()","gem::resolver::molinillo::dependencygraph::log#delete_edge()","rexml::element#delete_element()","openstruct#delete_field()","gem::resolver::molinillo::dependencygraph::addedgenocircular#delete_first()","array#delete_if()","csv::row#delete_if()","csv::table#delete_if()","dbm#delete_if()","env::delete_if()","gdbm#delete_if()","hash#delete_if()","rexml::parent#delete_if()","sdbm#delete_if()","set#delete_if()","yaml::dbm#delete_if()","rdoc::rubygemshook#delete_legacy_args()","rdoc::rubygemshook#delete_legacy_args()","rexml::element#delete_namespace()","observable#delete_observer()","observable#delete_observers()","webrick::httpauth::htdigest#delete_passwd()","webrick::httpauth::htpasswd#delete_passwd()","readline::delete_text()","rinda::tuplebag#delete_unless_alive()","net::popmail#deleted?()","complex#denominator()","float#denominator()","integer#denominator()","integer#denominator()","numeric#denominator()","rational#denominator()","gem::testcase#dep()","makemakefile#depend_rules()","gem::resolver::indexspecification#dependencies()","gem::resolver::specspecification#dependencies()","gem::specification#dependencies()","gem::resolver#dependencies_for()","gem::resolver::molinillo::delegates::specificationprovider#dependencies_for()","gem::resolver::molinillo::specificationprovider#dependencies_for()","gem::impossibledependencieserror#dependency()","gem::dependencylist#dependency_order()","gem::testcase#dependency_request()","gem::specification#dependent_gems()","gem::specification#dependent_specs()","gem::deprecate::deprecate()","gem::deprecate#deprecate()","module#deprecate_constant()","gem::resolver::molinillo::delegates::resolutionstate#depth()","queue#deq()","sizedqueue#deq()","webrick::httputils#dequote()","webrick::httputils::dequote()","pathname#descend()","rexml::xpathparser#descendant_or_self()","gem::resolver::molinillo::dependencygraph::vertex#descendent?()","gem::command#description()","gem::commands::unpackcommand#description()","gem::specification#description=()","psych::visitors::toruby#deserialize()","encoding::converter#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding()","encoding::undefinedconversionerror#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding_name()","encoding::undefinedconversionerror#destination_encoding_name()","matrix#det()","matrix::lupdecomposition#det()","matrix#det_e()","process::detach()","gem::resolver::molinillo::dependencygraph#detach_vertex_named()","gem::resolver::molinillo::dependencygraph::log#detach_vertex_named()","openssl::pkcs7#detached()","openssl::pkcs7#detached=()","openssl::pkcs7#detached?()","enumerable#detect()","gem::specfetcher#detect()","rexml::source#detect_encoding()","gem::detect_gemdeps()","psych::detect_implicit()","matrix#determinant()","matrix::lupdecomposition#determinant()","matrix#determinant_bareiss()","matrix#determinant_e()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","gem::resolver::activationrequest#development?()","gem::resolver::dependencyrequest#development?()","gem::specification#development_dependencies()","jacobian#dfdxi()","openssl::pkey::ec#dh_compute_key()","matrix::diagonal()","matrix#diagonal?()","matrix::eigenvaluedecomposition#diagonalize()","set#difference()","array#dig()","hash#dig()","openstruct#dig()","struct#dig()","digest::class::digest()","digest::instance#digest()","openssl::digest::digest()","openssl::engine#digest()","openssl::hmac::digest()","openssl::hmac#digest()","digest::instance#digest!()","digest::base#digest_length()","digest::instance#digest_length()","openssl::digest#digest_length()","integer#digits()","integer#digits()","gem::dir()","gem::installer#dir()","net::ftp#dir()","makemakefile#dir_config()","rdoc::classmodule#direct_ancestors()","rdoc::normalclass#direct_ancestors()","file::directory?()","file::stat#directory?()","filetest#directory?()","gem::package::tarreader::entry#directory?()","net::ftp::mlsxentry#directory?()","pathname#directory?()","net::ftp::mlsxentry#directory_makable?()","file::dirname()","pathname#dirname()","gem::specification::dirs()","gem::specification::dirs=()","gc::disable()","gc::profiler::disable()","tracepoint#disable()","fiddle::handle#disable_close()","net::pop3::disable_ssl()","net::pop3#disable_ssl()","net::smtp#disable_ssl()","net::smtp#disable_starttls()","net::smtp#disable_tls()","rubyvm::instructionsequence#disasm()","rubyvm::instructionsequence::disasm()","rubyvm::instructionsequence#disassemble()","rubyvm::instructionsequence::disassemble()","net::imap#disconnect()","net::imap#disconnected?()","set#disjoint?()","win32ole_method#dispid()","debugger__::display()","gem::resolver::stats#display()","object#display()","rdoc::codeobject#display?()","rdoc::toplevel#display?()","gem::commands::querycommand#display_header()","bigdecimal#div()","integer#div()","integer#div()","numeric#div()","set#divide()","bigdecimal#divmod()","float#divmod()","integer#divmod()","integer#divmod()","numeric#divmod()","fiddle::importer#dlload()","fiddle::dlopen()","fiddle#dlopen()","fiddle::dlunwrap()","fiddle::dlwrap()","uri::ldap#dn()","uri::ldap#dn=()","rdoc::servlet#do_get()","webrick::httpservlet::abstractservlet#do_get()","webrick::httpservlet::erbhandler#do_get()","webrick::httpservlet::abstractservlet#do_head()","webrick::httpserver#do_options()","webrick::httpservlet::abstractservlet#do_options()","webrick::httpservlet::erbhandler#do_post()","gem::gemrunner#do_configuration()","net::http#do_finish()","net::smtp#do_finish()","net::smtp#do_helo()","basicsocket::do_not_reverse_lookup()","basicsocket#do_not_reverse_lookup()","basicsocket::do_not_reverse_lookup=()","basicsocket#do_not_reverse_lookup=()","openssl::ssl::socketforwarder#do_not_reverse_lookup=()","racc::parser#do_parse()","rinda::ringserver#do_reply()","net::http#do_start()","net::smtp#do_start()","rss::baseparser#do_validate()","rss::baseparser#do_validate=()","openssl::buffering#do_write()","rinda::ringserver#do_write()","rdoc::testcase#doc()","gem::specification#doc_dir()","gem::server#doc_root()","rdoc::stats#doc_stats()","gem::commands::checkcommand#doctor()","gem::doctor#doctor()","rexml::attribute#doctype()","rexml::document#doctype()","rexml::sax2listener#doctype()","rexml::streamlistener#doctype()","rexml::text#doctype()","rexml::parsers::pullevent#doctype?()","rexml::streamlistener#doctype_end()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rdoc::rubygemshook#document()","rexml::child#document()","rexml::document#document()","rexml::element#document()","rdoc::codeobject#document_children=()","rexml::xpathparser#document_order()","rdoc::codeobject#document_self=()","rdoc::classmodule#document_self_or_methods()","rdoc::servlet#documentation_page()","rdoc::servlet#documentation_search()","rdoc::servlet#documentation_source()","rdoc::classmodule#documented?()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","gem::streamui::silentdownloadreporter#done()","gem::streamui::silentprogressreporter#done()","gem::streamui::simpleprogressreporter#done()","gem::streamui::verbosedownloadreporter#done()","gem::streamui::verboseprogressreporter#done()","rexml::validation::event#done?()","rdoc::stats#done_adding()","rdoc::codeobject#done_documenting=()","gem::done_installing()","vector#dot()","acl::aclentry#dot_pat()","acl::aclentry#dot_pat_str()","bigdecimal::double_fig()","gem::resolver::molinillo::dependencygraph::action#down()","gem::resolver::molinillo::dependencygraph::addedgenocircular#down()","gem::resolver::molinillo::dependencygraph::deleteedge#down()","gem::resolver::molinillo::dependencygraph::detachvertexnamed#down()","gem::resolver::molinillo::dependencygraph::tag#down()","string#downcase()","symbol#downcase()","string#downcase!()","gem::fakefetcher#download()","gem::remotefetcher#download()","gem::resolver::activationrequest#download()","gem::source#download()","gem::source::installed#download()","gem::testcase::specfetchersetup#download()","gem::streamui#download_reporter()","gem::fakefetcher#download_to_cache()","gem::remotefetcher#download_to_cache()","date#downto()","integer#downto()","integer#downto()","rexml::xmldecl#dowrite()","array#drop()","enumerable#drop()","enumerator::lazy#drop()","array#drop_while()","enumerable#drop_while()","enumerator::lazy#drop_while()","openssl::pkey::ec#dsa_sign_asn1()","openssl::pkey::ec#dsa_verify_asn1()","time#dst?()","socket::ifaddr#dstaddr()","encoding#dummy?()","makemakefile#dummy_makefile()","json#dump()","json::genericobject::dump()","marshal::dump()","objectspace::dump()","psych::dump()","rexml::validation::validator#dump()","string#dump()","objectspace::dump_all()","psych::visitors::yamltree#dump_coder()","psych::visitors::yamltree#dump_ivars()","psych::visitors::yamltree#dump_list()","psych::dump_stream()","object#dup()","singleton#dup()","exception2messagemapper::e2mm::e2mm_message()","argf#each()","array#each()","csv#each()","csv::row#each()","csv::table#each()","dbm#each()","dir#each()","env::each()","enumerator#each()","gdbm#each()","gem::availableset#each()","gem::configfile#each()","gem::dependencylist#each()","gem::list#each()","gem::package::tarreader#each()","gem::resolver::molinillo::dependencygraph#each()","gem::resolver::molinillo::dependencygraph::log#each()","gem::sourcelist#each()","gem::specification::each()","getoptlong#each()","hash#each()","io#each()","matrix#each()","net::pop3#each()","objectspace::weakmap#each()","openssl::asn1::constructive#each()","openssl::buffering#each()","openssl::config#each()","prime#each()","prime::pseudoprimegenerator#each()","psych::nodes::node#each()","rexml::attlistdecl#each()","rexml::attributes#each()","rexml::elements#each()","rexml::light::node#each()","rexml::parent#each()","rexml::parsers::pullparser#each()","rexml::quickpath::each()","rexml::syncenumerator#each()","rexml::xpath::each()","rss::xml::element#each()","range#each()","rinda::notifytemplateentry#each()","rinda::ringfinger#each()","rinda::tuple#each()","sdbm#each()","set#each()","shell::cat#each()","shell::concat#each()","shell::echo#each()","shell::filter#each()","shell::glob#each()","shell::systemcommand#each()","shell::tee#each()","shell::void#each()","stringio#each()","struct#each()","vector#each()","webrick::httpauth::htdigest#each()","webrick::httpauth::htpasswd#each()","webrick::httprequest#each()","webrick::httpresponse#each()","win32ole#each()","yaml::dbm#each()","zlib::gzipreader#each()","vector#each2()","shell::processcontroller::each_active_object()","resolv::each_address()","resolv#each_address()","resolv::dns#each_address()","resolv::hosts#each_address()","resolv::mdns#each_address()","rdoc::classmodule#each_ancestor()","rdoc::context#each_attribute()","rexml::attributes#each_attribute()","argf#each_byte()","io#each_byte()","openssl::buffering#each_byte()","string#each_byte()","stringio#each_byte()","zlib::gzipreader#each_byte()","gem::security::trustdir#each_certificate()","argf#each_char()","io#each_char()","string#each_char()","stringio#each_char()","zlib::gzipreader#each_char()","pathname#each_child()","rexml::parent#each_child()","rdoc::context#each_classmodule()","argf#each_codepoint()","io#each_codepoint()","string#each_codepoint()","stringio#each_codepoint()","enumerable#each_cons()","optionparser::each_const()","rdoc::context#each_constant()","webrick::httputils::formdata#each_data()","rexml::element#each_element()","rexml::element#each_element_with_attribute()","rexml::element#each_element_with_text()","enumerable#each_entry()","gem::package::tarreader#each_entry()","pathname#each_entry()","rinda::tuplebag#each_entry()","rdoc::context#each_extend()","pathname#each_filename()","rdoc::context#each_include()","array#each_index()","rexml::parent#each_index()","dbm#each_key()","env::each_key()","gdbm#each_key()","hash#each_key()","objectspace::weakmap#each_key()","sdbm#each_key()","argf#each_line()","io#each_line()","openssl::buffering#each_line()","pathname#each_line()","string#each_line()","stringio#each_line()","zlib::gzipreader#each_line()","irb::locale#each_localized_path()","net::pop3#each_mail()","rdoc::context#each_method()","resolv::each_name()","resolv#each_name()","resolv::dns#each_name()","resolv::hosts#each_name()","objectspace::each_object()","getoptlong#each_option()","optionparser::list#each_option()","dbm#each_pair()","env::each_pair()","gdbm#each_pair()","hash#each_pair()","objectspace::weakmap#each_pair()","openstruct#each_pair()","sdbm#each_pair()","struct#each_pair()","yaml::dbm#each_pair()","rdoc::codeobject#each_parent()","integer::each_prime()","integer::each_prime()","rexml::node#each_recursive()","resolv::dns#each_resource()","net::httpresponse::each_response_header()","rdoc::context#each_section()","enumerable#each_slice()","gem::sourcelist#each_source()","gem::availableset#each_spec()","tsort#each_strongly_connected_component()","tsort::each_strongly_connected_component()","tsort::each_strongly_connected_component_from()","tsort#each_strongly_connected_component_from()","irb::locale#each_sublocale()","dbm#each_value()","env::each_value()","gdbm#each_value()","hash#each_value()","objectspace::weakmap#each_value()","sdbm#each_value()","yaml::dbm#each_value()","enumerable#each_with_index()","enumerator#each_with_index()","matrix#each_with_index()","enumerable#each_with_object()","enumerator#each_with_object()","rexml::element#each_with_something()","openssl::ssl::sslcontext#ecdh_curves=()","shell::commandprocessor#echo()","io#echo=()","io#echo?()","net::http#edit_path()","openssl::random::egd()","openssl::random::egd_bytes()","process::egid()","process::egid=()","net::smtp#ehlo()","process::gid::eid()","process::uid::eid()","matrix#eigen()","matrix#eigensystem()","matrix::eigenvaluedecomposition#eigenvalue_matrix()","matrix::eigenvaluedecomposition#eigenvalues()","matrix::eigenvaluedecomposition#eigenvector_matrix()","matrix::eigenvaluedecomposition#eigenvector_matrix_inv()","matrix::eigenvaluedecomposition#eigenvectors()","matrix#element()","vector#element()","rexml::attribute#element=()","rss::utils#element_initialize_arguments?()","rexml::sax2listener#elementdecl()","rexml::streamlistener#elementdecl()","rexml::parsers::pullevent#elementdecl?()","vector::elements()","matrix#elements_to_f()","vector#elements_to_f()","matrix#elements_to_i()","vector#elements_to_i()","matrix#elements_to_r()","vector#elements_to_r()","readline::emacs_editing_mode()","readline::emacs_editing_mode?()","gem::security::email_to_name()","psych::visitors::yamltree#emit_coder()","rdoc::markdown#emphasis()","gem::resolver::molinillo::resolutionstate::empty()","matrix::empty()","psych::handler#empty()","array#empty?()","dbm#empty?()","dir::empty?()","env::empty?()","file::empty?()","filetest#empty?()","gdbm#empty?()","gem::availableset#empty?()","gem::package::tarheader#empty?()","gem::requestset::lockfile::tokenizer#empty?()","gem::resolver::requirementlist#empty?()","gem::sourcelist#empty?()","hash#empty?()","matrix#empty?()","pathname#empty?()","queue#empty?()","rdoc::comment#empty?()","rexml::elements#empty?()","rexml::iosource#empty?()","rexml::parsers::baseparser#empty?()","rexml::source#empty?()","rexml::text#empty?()","sdbm#empty?()","set#empty?()","string#empty?()","stringscanner#empty?()","symbol#empty?()","threadswait#empty?()","threadswait#empty?()","rss::atom::feed::entry::content#empty_content?()","rss::element#empty_content?()","pstore#empty_marshal_checksum()","pstore#empty_marshal_data()","gc::enable()","gc::profiler::enable()","tracepoint#enable()","fiddle::handle#enable_close()","makemakefile#enable_config()","gem::testcase#enable_shared()","net::pop3#enable_ssl()","net::pop3::enable_ssl()","net::smtp#enable_ssl()","net::smtp#enable_starttls()","net::smtp#enable_starttls_auto()","net::smtp#enable_tls()","gc::profiler::enabled?()","tracepoint#enabled?()","openssl::pkcs7::recipientinfo#enc_key()","threadgroup#enclose()","threadgroup#enclosed?()","rexml::encoding#encode()","string#encode()","uri::escape#encode()","string#encode!()","base64#encode64()","rdoc::text::encode_fallback()","net::httpgenericrequest#encode_multipart_form_data()","csv#encode_re()","csv#encode_str()","net::imap::encode_utf7()","uri::encode_www_form()","uri::encode_www_form_component()","irb::fileinputmethod#encoding()","irb::readlineinputmethod#encoding()","irb::stdioinputmethod#encoding()","rexml::document#encoding()","regexp#encoding()","ripper#encoding()","string#encoding()","symbol#encoding()","rexml::encoding#encoding=()","rexml::source#encoding=()","rexml::xmldecl#encoding=()","rexml::iosource#encoding_updated()","rexml::source#encoding_updated()","openssl::cipher#encrypt()","openssl::pkcs7::encrypt()","matchdata#end()","range#end()","zlib::zstream#end()","rss::rexmllikexmlparser#endelement()","psych::handler#end_document()","psych::treebuilder#end_document()","rexml::sax2listener#end_document()","rexml::sax2listener#end_element()","rexml::parsers::pullevent#end_element?()","psych::handler#end_mapping()","rexml::sax2listener#end_prefix_mapping()","gem::resolver::molinillo::resolver::resolution#end_resolution()","ripper#end_seen?()","psych::handler#end_sequence()","psych::handler#end_stream()","psych::treebuilder#end_stream()","net::http#end_transport()","string#end_with?()","zlib::zstream#ended?()","etc::endgrent()","etc::endpwent()","openssl::engine::engines()","date#england()","queue#enq()","sizedqueue#enq()","gem::ensure_default_gem_subdirectories()","gem::installer#ensure_dependency()","gem::ensure_gem_subdirectories()","gem::installer#ensure_loadable_spec()","net::imap::numvalidator::ensure_number()","net::imap::numvalidator::ensure_nz_number()","rss::maker::atomtextconstructbase::ensurexmlcontent#ensure_xml_content()","net::ftp::mlsxentry#enterable?()","net::httpresponse#entity()","rexml::doctype#entity()","rexml::parsers::baseparser#entity()","rexml::streamlistener#entity()","rss::xmlscanlistener#entity()","rexml::parsers::pullevent#entity?()","fiddle::cstruct::entity_class()","fiddle::cunion::entity_class()","rexml::document::entity_expansion_limit()","rexml::security::entity_expansion_limit()","rexml::document::entity_expansion_limit=()","rexml::security::entity_expansion_limit=()","rexml::document::entity_expansion_text_limit()","rexml::security::entity_expansion_text_limit()","rexml::document::entity_expansion_text_limit=()","rexml::security::entity_expansion_text_limit=()","rexml::sax2listener#entitydecl()","rexml::streamlistener#entitydecl()","rexml::parsers::pullevent#entitydecl?()","dir::entries()","enumerable#entries()","pathname#entries()","gem::commands::querycommand#entry_details()","gem::commands::querycommand#entry_versions()","enumerator::lazy#enum_for()","object#enum_for()","gem::env_requirement()","cgi#env_table()","optionparser#environment()","argf#eof()","io#eof()","openssl::buffering#eof()","stringio#eof()","zlib::gzipreader#eof()","argf#eof?()","gem::package::tarreader::entry#eof?()","io#eof?()","irb::fileinputmethod#eof?()","irb::readlineinputmethod#eof?()","irb::stdioinputmethod#eof?()","openssl::buffering#eof?()","stringio#eof?()","xmp::stringinputmethod#eof?()","zlib::gzipreader#eof?()","stringscanner#eos?()","array#eql?()","bigdecimal#eql?()","fiddle::pointer#eql?()","float#eql?()","gem::nametuple#eql?()","gem::platform#eql?()","gem::resolver::molinillo::dependencygraph::vertex#eql?()","gem::version#eql?()","hash#eql?()","ipaddr#eql?()","matchdata#eql?()","matrix#eql?()","method#eql?()","numeric#eql?()","object#eql?()","openssl::bn#eql?()","openssl::pkey::ec::group#eql?()","openssl::pkey::ec::point#eql?()","openssl::x509::name#eql?()","openstruct#eql?()","pathname#eql?()","rdoc::toplevel#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","uri::generic#eql?()","unboundmethod#eql?()","vector#eql?()","basicobject#equal?()","rexml::xpathparser#equality_relational_compare()","math::erf()","math::erfc()","systemcallerror#errno()","gem::mockgemui#error()","logger#error()","openssl::x509::storecontext#error()","rdoc::rdoc#error()","rdoc::servlet#error()","syslog::logger#error()","webrick::basiclog#error()","openssl::x509::storecontext#error=()","logger#error?()","rexml::parsers::pullevent#error?()","ripper#error?()","webrick::basiclog#error?()","webrick::httpstatus::error?()","webrick::httpstatus#error?()","encoding::invalidbytesequenceerror#error_bytes()","encoding::undefinedconversionerror#error_char()","openssl::x509::storecontext#error_depth()","getoptlong#error_message()","drb::drbserver#error_print()","openssl::x509::storecontext#error_string()","gem::resolver::composedset#errors()","gem::resolver::installerset#errors()","openssl::errors()","cgi::util#escape()","gem::uriformatter#escape()","regexp::escape()","shellwords::escape()","uri::escape#escape()","uri::rfc2396_parser#escape()","webrick::accesslog#escape()","webrick::htmlutils#escape()","webrick::htmlutils::escape()","webrick::httputils#escape()","webrick::httputils#escape8bit()","cgi::util#escapeelement()","cgi::util#escapehtml()","cgi::util#escape_element()","webrick::httputils#escape_form()","cgi::util#escape_html()","webrick::httputils#escape_path()","csv#escape_re()","uri::generic#escape_userpass()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","rubyvm::instructionsequence#eval()","irb::context#eval_history=()","irb::irb#eval_input()","irb::workspace#evaluate()","webrick::httpservlet::erbhandler#evaluate()","integer#even?()","integer#even?()","tracepoint#event()","win32ole_method#event?()","win32ole_method#event_interface()","rexml::parsers::pullevent#event_type()","gem::requirement#exact?()","net::imap#examine()","drb::drbunknown#exception()","exception#exception()","exception::exception()","timeout::error#exception()","timeout::error#exception()","timeout::error#exception()","net::smtp::response#exception_class()","range#exclude_end?()","thread::exclusive()","kernel#exec()","process::exec()","gem::installer::exec_format()","irb::notifier::abstractnotifier#exec_if()","gem::specification#executable()","gem::specification#executable=()","file::executable?()","file::stat#executable?()","filetest#executable?()","pathname#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","pathname#executable_real?()","gem::specification#executables()","gem::specification#executables=()","gem::command#execute()","gem::commands::buildcommand#execute()","gem::commands::certcommand#execute()","gem::commands::checkcommand#execute()","gem::commands::cleanupcommand#execute()","gem::commands::contentscommand#execute()","gem::commands::dependencycommand#execute()","gem::commands::environmentcommand#execute()","gem::commands::fetchcommand#execute()","gem::commands::generateindexcommand#execute()","gem::commands::helpcommand#execute()","gem::commands::installcommand#execute()","gem::commands::lockcommand#execute()","gem::commands::mirrorcommand#execute()","gem::commands::opencommand#execute()","gem::commands::outdatedcommand#execute()","gem::commands::ownercommand#execute()","gem::commands::pristinecommand#execute()","gem::commands::pushcommand#execute()","gem::commands::querycommand#execute()","gem::commands::rdoccommand#execute()","gem::commands::servercommand#execute()","gem::commands::setupcommand#execute()","gem::commands::sourcescommand#execute()","gem::commands::specificationcommand#execute()","gem::commands::stalecommand#execute()","gem::commands::uninstallcommand#execute()","gem::commands::unpackcommand#execute()","gem::commands::updatecommand#execute()","gem::commands::whichcommand#execute()","gem::commands::yankcommand#execute()","dir::exist?()","file::exist?()","filetest#exist?()","pathname#exist?()","stringscanner#exist?()","dir::exists?()","file::exists?()","filetest#exists?()","irb::context#exit()","kernel#exit()","process::exit()","thread::exit()","thread#exit()","kernel#exit!()","process::exit!()","localjumperror#exit_value()","process::status#exited?()","process::status#exitstatus()","bigmath::exp()","cmath#exp()","cmath::exp()","math::exp()","rexml::parsers::xpathparser#expand()","rexml::text::expand()","openssl::x509::name::rfc2253dn#expand_hexstring()","openssl::x509::name::rfc2253dn#expand_pair()","file::expand_path()","pathname#expand_path()","shell#expand_path()","shell::commandprocessor#expand_path()","rexml::validation::state#expand_ref_in()","rdoc::text#expand_tabs()","openssl::x509::name::rfc2253dn#expand_value()","rexml::document#expanded_name()","io#expect()","rexml::validation::choice#expected()","rexml::validation::interleave#expected()","rexml::validation::oneormore#expected()","rexml::validation::optional#expected()","rexml::validation::state#expected()","rexml::validation::zeroormore#expected()","rinda::tupleentry#expired?()","webrick::cookie#expires()","webrick::cookie#expires=()","gem::resolver::conflict#explain()","gem::resolver::conflict#explanation()","gem::resolver::dependencyrequest#explicit?()","bigdecimal#exponent()","openssl::pkey::dh#export()","openssl::pkey::dsa#export()","openssl::pkey::ec#export()","openssl::pkey::rsa#export()","rexml::xpathparser#expr()","net::imap#expunge()","object#extend()","irb::extendcommandbundle::extend_object()","module#extend_object()","monitormixin::extend_object()","optionparser::arguable::extend_object()","sync_m::extend_object()","sync_m::extend_object()","module#extended()","rdoc::markdown#extension()","rdoc::markdown::extension()","rdoc::markdown#extension?()","gem::basicspecification#extension_dir()","gem::specification#extensions()","openssl::ocsp::singleresponse#extensions()","openssl::x509::crl#extensions()","openssl::x509::certificate#extensions()","openssl::x509::revoked#extensions()","uri::ldap#extensions()","gem::specification#extensions=()","openssl::x509::crl#extensions=()","openssl::x509::certificate#extensions=()","openssl::x509::revoked#extensions=()","uri::ldap#extensions=()","gem::basicspecification#extensions_dir()","fiddle::importer#extern()","argf#external_encoding()","io#external_encoding()","stringio#external_encoding()","zlib::gzipreader#external_encoding()","file::extname()","pathname#extname()","gem::command::extra_args()","gem::command::extra_args=()","gem::specification#extra_rdoc_files()","gem::specification#extra_rdoc_files=()","uri::extract()","uri::rfc2396_parser#extract()","gem::installer#extract_bin()","rdoc::comment#extract_call_seq()","gem::installer#extract_files()","gem::installer::fakepackage#extract_files()","gem::package#extract_files()","gem::package::old#extract_files()","openssl::config::extract_reference()","syslog::facility()","exception2messagemapper#fail()","kernel#fail()","rexml::functions::false()","socket::ancillarydata#family()","socket::option#family()","addrinfo#family_addrinfo()","json#fast_generate()","gdbm#fastmode=()","logger#fatal()","syslog::logger#fatal()","webrick::basiclog#fatal()","logger#fatal?()","webrick::basiclog#fatal?()","io#fcntl()","openssl::ssl::socketforwarder#fcntl()","stringio#fcntl()","io#fdatasync()","complex#fdiv()","float#fdiv()","integer#fdiv()","integer#fdiv()","numeric#fdiv()","rational#fdiv()","enumerator#feed()","rss::rootelementmixin#feed_info()","array#fetch()","csv::row#fetch()","dbm#fetch()","env::fetch()","gdbm#fetch()","gem::request#fetch()","gem::streamui::silentdownloadreporter#fetch()","gem::streamui::verbosedownloadreporter#fetch()","hash#fetch()","net::imap#fetch()","pstore#fetch()","rinda::tuple#fetch()","rinda::tupleentry#fetch()","sdbm#fetch()","yaml::dbm#fetch()","gem::remotefetcher#fetch_file()","gem::remotefetcher#fetch_http()","gem::remotefetcher#fetch_https()","net::imap#fetch_internal()","gem::fakefetcher#fetch_path()","gem::remotefetcher#fetch_path()","resolv::dns#fetch_resource()","gem::remotefetcher#fetch_s3()","drb::fetch_server()","drb#fetch_server()","gem::fakefetcher#fetch_size()","gem::remotefetcher#fetch_size()","gem::source#fetch_spec()","gem::source::lock#fetch_spec()","hash#fetch_values()","gem::remotefetcher::fetcher()","gem::specfetcher::fetcher()","gem::remotefetcher::fetcher=()","csv::row#field()","csv::row#field?()","csv::row#field_row?()","csv::row#fields()","argf#file()","digest::class::file()","digest::instance#file()","file::file?()","file::stat#file?()","filetest#file?()","gem::package::tarreader::entry#file?()","net::ftp::mlsxentry#file?()","pathname#file?()","cgi::htmlextension#file_field()","irb::context#file_input?()","gem::specification#file_name()","rdoc::codeobject#file_name()","argf#filename()","ripper#filename()","ripper::filter#filename()","readline::filename_quote_characters()","readline::filename_quote_characters=()","argf#fileno()","dir#fileno()","io#fileno()","stringio#fileno()","gem::specification#files()","gem::specification#files=()","rdoc::store#files_hash()","gem::commands::contentscommand#files_in()","gem::commands::contentscommand#files_in_default_gem()","gem::commands::contentscommand#files_in_gem()","array#fill()","prettyprint#fill_breakable()","openssl::buffering#fill_rbuff()","csv::filter()","rexml::quickpath::filter()","uri::ldap#filter()","uri::ldap#filter=()","irb::workspace#filter_backtrace()","optionparser::parseerror::filter_backtrace()","openssl::cipher#final()","objectspace::weakmap#finalize()","encoding::find()","enumerable#find()","find#find()","find::find()","irb::locale#find()","pathname#find()","psych::classloader::restricted#find()","rinda::tuplebag#find()","rinda::tuplebag::tuplebin#find()","gem::specification::find_active_stub_by_path()","enumerable#find_all()","enumerator::lazy#find_all()","gem::availableset#find_all()","gem::resolver::apiset#find_all()","gem::resolver::composedset#find_all()","gem::resolver::currentset#find_all()","gem::resolver::gitset#find_all()","gem::resolver::indexset#find_all()","gem::resolver::installerset#find_all()","gem::resolver::lockset#find_all()","gem::resolver::set#find_all()","gem::resolver::vendorset#find_all()","gem::testcase::staticset#find_all()","rinda::tuplebag#find_all()","gem::specification::find_all_by_name()","gem::specification#find_all_satisfiers()","rinda::tuplebag#find_all_template()","rdoc::classmodule#find_ancestor_local_symbol()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","gem::specification::find_by_name()","gem::specification::find_by_path()","rdoc::store#find_c_enclosure()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::store#find_class_named()","rdoc::store#find_class_named_from()","rdoc::store#find_class_or_module()","rdoc::toplevel#find_class_or_module()","gem::commandmanager#find_command()","gem::commandmanager#find_command_possibilities()","rdoc::context#find_constant_named()","gem::fakefetcher#find_data()","rdoc::context#find_enclosing_module_named()","rexml::encoding#find_encoding()","makemakefile#find_executable()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::store#find_file_named()","gem::find_files()","gem::validator#find_files_for_gem()","rexml::node#find_first_recursive()","makemakefile#find_header()","gem::find_home()","gem::commands::unpackcommand#find_in_cache()","gem::specification::find_in_unresolved()","gem::specification::find_in_unresolved_tree()","gem::specification::find_inactive_by_path()","array#find_index()","enumerable#find_index()","matrix#find_index()","rdoc::context#find_instance_method_named()","psych::visitors::yamltree#find_ivars()","gem::find_latest_files()","makemakefile#find_library()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::context#find_module_named()","rdoc::store#find_module_named()","rdoc::toplevel#find_module_named()","gem::dependencylist#find_name()","gem::commands::whichcommand#find_paths()","uri::generic#find_proxy()","openssl::ocsp::basicresponse#find_response()","gem::testcase::staticset#find_spec()","gem::dependencyinstaller#find_spec_by_name_and_version()","gem::find_spec_for_exe()","gem::resolver::molinillo::resolver::resolution#find_state_for()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","shell::commandprocessor#find_system_command()","rdoc::store#find_text_page()","makemakefile#find_type()","rdoc::store#find_unique()","gem::find_unresolved_default_spec()","rinda::ringfinger::finger()","digest::instance#finish()","encoding::converter#finish()","net::http#finish()","net::pop3#finish()","net::smtp#finish()","openssl::digest#finish()","openssl::engine#finish()","psych::visitors::yamltree#finish()","rdoc::options#finish()","zlib::gzipfile#finish()","zlib::zstream#finish()","rdoc::options#finish_page_dir()","gem::finish_resolve()","threadswait#finished?()","threadswait#finished?()","zlib::zstream#finished?()","bigdecimal#finite?()","complex#finite?()","float#finite?()","numeric#finite?()","openssl::fips_mode=()","array#first()","enumerable#first()","gem::sourcelist#first()","rexml::quickpath::first()","rexml::xpath::first()","rexml::xpathparser#first()","range#first()","prettyprint::singleline#first?()","rubyvm::instructionsequence#first_lineno()","matrix#first_minor()","bigdecimal#fix()","rdoc::store#fix_basic_object_inheritance()","regexp#fixed_encoding?()","gem::resolver::molinillo::resolver::resolution#fixup_swapped_children()","socket::ifaddr#flags()","openssl::x509::store#flags=()","openssl::x509::storecontext#flags=()","enumerable#flat_map()","enumerator::lazy#flat_map()","array#flatten()","hash#flatten()","set#flatten()","array#flatten!()","set#flatten!()","file#flock()","bigdecimal#floor()","float#floor()","integer#floor()","integer#floor()","numeric#floor()","rexml::functions::floor()","rational#floor()","gem::package::tarwriter#flush()","io#flush()","openssl::buffering#flush()","prettyprint#flush()","shell::systemcommand#flush()","stringio#flush()","webrick::httpauth::htdigest#flush()","webrick::httpauth::htgroup#flush()","webrick::httpauth::htpasswd#flush()","zlib::deflate#flush()","zlib::gzipwriter#flush()","net::httpgenericrequest#flush_buffer()","rdoc::text#flush_left()","zlib::zstream#flush_next_in()","zlib::zstream#flush_next_out()","openssl::ssl::sslcontext#flush_sessions()","file::fnmatch()","pathname#fnmatch()","file::fnmatch?()","pathname#fnmatch?()","rexml::xpathparser#following()","rexml::xpathparser#following_node_of()","rdoc::parser::for()","gem::specification#for_cache()","gem::resolver::for_current_gems()","basicsocket::for_fd()","io::for_fd()","gem::installer::for_spec()","gem::resolver::conflict#for_spec?()","rdoc::codeobject#force_documentation=()","rdoc::comment#force_encoding()","string#force_encoding()","csv#force_quotes?()","time::force_zone!()","addrinfo::foreach()","csv::foreach()","dir::foreach()","io::foreach()","net::pop3::foreach()","shell::commandprocessor#foreach()","kernel#fork()","process::fork()","thread::fork()","cgi::htmlextension#form()","benchmark::tms#format()","irb::locale#format()","kernel#format()","prettyprint::format()","webrick::accesslog#format()","webrick::basiclog#format()","rdoc::comment#format=()","net::imap::format_date()","logger::formatter#format_datetime()","net::imap::format_datetime()","logger#format_message()","logger#format_severity()","gem::text#format_text()","gem::noaliasyamltree#format_time()","psych::visitors::yamltree#format_time()","gem::installer#formatted_program_filename()","bigdecimal#frac()","uri::generic#fragment=()","fiddle::free()","fiddle::pointer#free()","fiddle::pointer#free=()","delegator#freeze()","module#freeze()","object#freeze()","openssl::ssl::sslcontext#freeze()","openstruct#freeze()","pathname#freeze()","string#freeze()","math::frexp()","date#friday?()","time#friday?()","rdoc::store#friendly_path()","gem::package::tarheader::from()","gem::sourcelist::from()","gem::requestset::lockfile::tokenizer::from_file()","json::genericobject::from_hash()","gem::nametuple::from_list()","rdoc::classmodule::from_module()","process::gid::from_name()","process::uid::from_name()","integer::from_prime_division()","integer::from_prime_division()","gem::dependencylist::from_specs()","gem::specification::from_yaml()","drb#front()","drb::front()","drb::extserv#front()","array#frozen?()","object#frozen?()","io#fsync()","stringio#fsync()","file::ftype()","file::stat#ftype()","pathname#ftype()","fileutils::streamutils_#fu_blksize()","fileutils::streamutils_#fu_default_blksize()","fileutils::streamutils_#fu_stream_blksize()","fileutils::streamutils_#fu_windows?()","gem::basicspecification#full_gem_path()","gem::basicspecification#full_name()","gem::nametuple#full_name()","gem::package::tarreader::entry#full_name()","gem::resolver::activationrequest#full_name()","gem::resolver::specspecification#full_name()","gem::resolver::specification#full_name()","gem::specification#full_name()","rdoc::classmodule#full_name()","rdoc::constant#full_name()","rdoc::context#full_name()","rdoc::methodattr#full_name()","rdoc::mixin#full_name()","rdoc::toplevel#full_name()","rss::element#full_name()","rss::ituneschannelmodel::itunescategory#full_name()","rss::ituneschannelmodel::itunesimage#full_name()","rss::ituneschannelmodel::itunesowner#full_name()","rss::itunesitemmodel::itunesduration#full_name()","rss::imagefaviconmodel::imagefavicon#full_name()","rss::imageitemmodel::imageitem#full_name()","rss::rdf#full_name()","rss::rdf::bag#full_name()","rss::rdf::bag#full_name()","rss::rdf::li#full_name()","rss::rdf::li#full_name()","rss::rdf::li#full_name()","rss::rdf::seq#full_name()","rss::rdf::seq#full_name()","rss::taxonomytopicmodel::taxonomytopic#full_name()","rss::taxonomytopicsmodel::taxonomytopics#full_name()","rss::xml::element#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","gem::basicspecification#full_require_paths()","gem::resolver::activationrequest#full_spec()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","rexml::namespace#fully_expanded_name()","rexml::quickpath::function()","math::gamma()","gc#garbage_collect()","objectspace::garbage_collect()","rdoc::rdoc#gather_files()","integer#gcd()","integer#gcd()","openssl::bn#gcd()","integer#gcdlcm()","integer#gcdlcm()","gem::requestset#gem()","gem::requestset::gemdependencyapi#gem()","gem::testcase::specfetchersetup#gem()","kernel#gem()","gem::commands::contentscommand#gem_contents()","gem::basicspecification#gem_dir()","gem::installer#gem_dir()","gem::indexer#gem_file_list()","gem::commands::contentscommand#gem_install_dir()","kernel#gem_original_require()","gem::doctor#gem_repository?()","gem::basicspecification#gems_dir()","gem::specification#gems_dir()","gem::requestset::gemdependencyapi#gemspec()","gem::specification::gemspec_stubs_in()","random::formatter#gen_random()","securerandom::gen_random()","csv::generate()","json#generate()","openssl::pkey::dh::generate()","openssl::pkey::dsa::generate()","openssl::pkey::ec::generate()","openssl::pkey::rsa::generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","rdoc::rubygemshook#generate()","gem::installer#generate_bin_script()","gem::installer#generate_bin_symlink()","gem::commands::setupcommand#generate_default_dirs()","rexml::validation::state#generate_event()","gem::indexer#generate_index()","openssl::pkey::ec#generate_key()","openssl::pkey::dh#generate_key!()","openssl::pkey::ec#generate_key!()","csv::generate_line()","openssl::bn::generate_prime()","net::imap#generate_tag()","gem::installer#generate_windows_script()","rdoc::rubygemshook::generation_hook()","rdoc::rubygemshook::generation_hook()","openssl::pkey::ec::group#generator()","rdoc::options#generator_descriptions()","rdoc::servlet#generator_for()","getoptlong#get()","net::ftp#get()","net::http#get()","net::http::get()","net::http#get2()","gem::command#get_all_gem_names()","gem::command#get_all_gem_names_and_versions()","rexml::attributes#get_attribute()","rexml::attributes#get_attribute_ns()","rss::element::get_attributes()","stringscanner#get_byte()","gem::commands::cleanupcommand#get_candidate_gems()","gem::request::get_cert_files()","openssl::config::get_definition()","rexml::element#get_elements()","gem::commands::opencommand#get_env_editor()","rss::utils#get_file_and_line_from_caller()","rexml::xpathparser#get_first()","gem::commands::cleanupcommand#get_gems_to_cleanup()","rexml::parsers::xpathparser#get_group()","webrick::httpservlet::abstractservlet::get_instance()","openssl::config#get_key_string()","openssl::config::get_line()","rexml::parsers::sax2parser#get_listeners()","gem::commands::unpackcommand#get_metadata()","rexml::functions::get_namespace()","rexml::parsers::sax2parser#get_namespace()","rexml::xpathparser#get_namespace()","prime::eratosthenessieve#get_nth_prime()","gem::command#get_one_gem_name()","gem::command#get_one_optional_argument()","getoptlong#get_option()","webrick::httpauth::htdigest#get_passwd()","webrick::httpauth::htpasswd#get_passwd()","webrick::httpauth::userdb#get_passwd()","gem::commands::unpackcommand#get_path()","gem::commands::yankcommand#get_platform_from_requirements()","gem::commands::cleanupcommand#get_primary_gems()","net::http::get_print()","rexml::parsers::sax2parser#get_procs()","gem::request::get_proxy_from_env()","gem::ext::extconfbuilder::get_relative_path()","rinda::tupleentry#get_renewer()","net::http::get_response()","net::imap#get_response()","net::smtp#get_response()","readline::get_screen_size()","gem::resolver::sourceset#get_set()","net::imap#get_tagged_response()","rexml::element#get_text()","debugger__::get_thread()","openssl::config#get_value()","gem::commands::yankcommand#get_version_from_requirements()","net::imap#getacl()","ipsocket::getaddress()","resolv#getaddress()","resolv::getaddress()","resolv::dns#getaddress()","resolv::hosts#getaddress()","ipsocket::getaddress_orig()","resolv::getaddresses()","resolv#getaddresses()","resolv::dns#getaddresses()","resolv::hosts#getaddresses()","addrinfo::getaddrinfo()","socket::getaddrinfo()","net::ftp#getbinaryfile()","argf#getbyte()","io#getbyte()","string#getbyte()","stringio#getbyte()","stringscanner#getbyte()","zlib::gzipreader#getbyte()","argf#getc()","gem::package::tarreader::entry#getc()","io#getc()","openssl::buffering#getc()","stringio#getc()","zlib::gzipreader#getc()","io#getch()","io::generic_readable#getch()","stringscanner#getch()","net::ftp#getdir()","process::sys::getegid()","process::sys::geteuid()","process::sys::getgid()","time#getgm()","etc::getgrent()","etc::getgrgid()","etc::getgrnam()","socket::gethostbyaddr()","socket::gethostbyname()","tcpsocket::gethostbyname()","socket::gethostname()","socket::getifaddrs()","time#getlocal()","etc::getlogin()","resolv::getname()","resolv#getname()","resolv::dns#getname()","resolv::hosts#getname()","addrinfo#getnameinfo()","socket::getnameinfo()","resolv#getnames()","resolv::getnames()","resolv::dns#getnames()","resolv::hosts#getnames()","net::smtp#getok()","optionparser#getopts()","optionparser::getopts()","optionparser::arguable#getopts()","io#getpass()","io::generic_readable#getpass()","basicsocket#getpeereid()","basicsocket#getpeername()","process::getpgid()","process::getpgrp()","process::getpriority()","pty::getpty()","etc::getpwent()","etc::getpwnam()","etc::getpwuid()","net::imap#getquota()","net::imap#getquotaroot()","resolv::dns#getresource()","resolv::dns#getresources()","process::getrlimit()","argf#gets()","csv#gets()","io#gets()","irb::fileinputmethod#gets()","irb::inputmethod#gets()","irb::locale#gets()","irb::readlineinputmethod#gets()","irb::stdioinputmethod#gets()","kernel#gets()","openssl::buffering#gets()","stringio#gets()","xmp::stringinputmethod#gets()","zlib::gzipreader#gets()","socket::getservbyname()","socket::getservbyport()","webrick::utils::getservername()","webrick::utils#getservername()","process::getsid()","basicsocket#getsockname()","basicsocket#getsockopt()","openssl::ssl::socketforwarder#getsockopt()","rss::baselistener::getter()","net::ftp#gettextfile()","process::sys::getuid()","time#getutc()","dir::getwd()","fileutils#getwd()","fileutils::getwd()","pathname::getwd()","file::stat#gid()","process::gid()","process::gid=()","gem::requestset::gemdependencyapi#git()","gem::testcase#git_gem()","gem::requestset::gemdependencyapi#git_source()","rdoc::markdown#github()","dir::glob()","pathname::glob()","shell::commandprocessor#glob()","kernel#global_variables()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","io#goto()","process::gid::grant_privilege()","process::uid::grant_privilege()","rdoc::stats#great_job()","date#gregorian()","date#gregorian?()","date::gregorian_leap?()","enumerable#grep()","enumerator::lazy#grep()","enumerable#grep_v()","enumerator::lazy#grep_v()","etc::group()","gem::requestset::gemdependencyapi#group()","openssl::pkey::ec#group()","prettyprint#group()","prettyprint::singleline#group()","thread#group()","openssl::pkey::ec#group=()","enumerable#group_by()","prettyprint#group_sub()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","pathname#grpowned?()","kernel#gsub()","string#gsub()","string#gsub!()","pp::ppmethods#guard_inspect_key()","kconv::guess()","kconv#guess()","nkf::guess()","optionparser::switch::guess()","rss::xmlstylesheet#guess_type()","rss::maker::xmlstylesheets::xmlstylesheet#guess_type_if_need()","win32ole_type#guid()","win32ole_typelib#guid()","gem::gunzip()","gem::util::gunzip()","zlib::gunzip()","gem::gzip()","gem::indexer#gzip()","gem::util::gzip()","zlib::gzip()","gem::package#gzip_to()","cgi::util#h()","erb::util#h()","erb::util::h()","rss::utils#h()","rexml::parsers::sax2parser#handle()","gem::configfile#handle_arguments()","rexml::parsers::sax2parser#handle_entitydecl()","thread::handle_interrupt()","gem::resolver::molinillo::resolver::resolution#handle_missing_or_push_dependency_state()","gem::command#handle_options()","rdoc::rdoc#handle_pipe()","fiddle::importer#handler()","win32ole_event#handler()","win32ole_event#handler=()","fiddle::compositehandler#handlers()","gem::command#handles?()","unicodenormalize::hangul_comp_one()","unicodenormalize::hangul_decomp_one()","rdoc::testcase#hard_break()","rexml::element#has_attributes?()","gem::specification#has_conflicts?()","rexml::element#has_elements?()","rinda::tuplebag#has_expires?()","cgi::queryextension#has_key?()","csv::row#has_key?()","dbm#has_key?()","env::has_key?()","gdbm#has_key?()","hash#has_key?()","sdbm#has_key?()","rexml::light::node#has_name?()","rexml::namespace#has_name?()","rexml::parsers::baseparser#has_next?()","rexml::element#has_text?()","dbm#has_value?()","env::has_value?()","gdbm#has_value?()","hash#has_value?()","sdbm#has_value?()","yaml::dbm#has_value?()","array#hash()","bigdecimal#hash()","float#hash()","gem::nametuple#hash()","gem::resolver::molinillo::dependencygraph::vertex#hash()","hash#hash()","ipaddr#hash()","matchdata#hash()","matrix#hash()","method#hash()","object#hash()","openssl::bn#hash()","openssl::x509::name#hash()","openstruct#hash()","proc#hash()","rdoc::toplevel#hash()","rexml::attribute#hash()","range#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","uri::generic#hash()","unboundmethod#hash()","vector#hash()","rinda::tuple#hash?()","openssl::ocsp::certificateid#hash_algorithm()","openssl::x509::name#hash_old()","rss::atom::entry#have_author?()","rss::atom::feed#have_author?()","rss::atom::feed::entry#have_author?()","rss::atom::feed::entry::source#have_author?()","rss::element::have_children_elements()","makemakefile#have_const()","rss::element::have_content?()","gem::basicspecification#have_extensions?()","gem::basicspecification#have_file?()","makemakefile#have_framework()","makemakefile#have_func()","gem::testcase#have_git?()","makemakefile#have_header()","makemakefile#have_library()","makemakefile#have_macro()","fileutils::have_option?()","gem::server#have_rdoc_4_plus?()","rss::atom::entry#have_required_elements?()","rss::atom::feed#have_required_elements?()","rss::atom::feed::entry#have_required_elements?()","rss::element#have_required_elements?()","rss::maker::atom::feed::channel#have_required_values?()","rss::maker::atom::feed::items::item#have_required_values?()","rss::maker::base#have_required_values?()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#have_required_values?()","rss::maker::imagefaviconmodel::imagefaviconbase#have_required_values?()","rss::maker::imageitemmodel::imageitembase#have_required_values?()","rss::maker::rss10::image#have_required_values?()","rss::maker::rss10::textinput#have_required_values?()","rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase#have_required_values?()","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#have_required_values?()","makemakefile#have_struct_member()","makemakefile#have_type()","makemakefile#have_var()","rss::atom::feed::entry::content#have_xml_content?()","rss::atom::textconstruct#have_xml_content?()","rss::element#have_xml_content?()","net::http#head()","rdoc::testcase#head()","net::http#head2()","cgi#header()","gem::package::tarheader#header()","gem::package::tartestcase#header()","net::popmail#header()","csv::row#header?()","csv#header_convert()","csv#header_converters()","csv#header_row?()","csv::row#header_row?()","csv#headers()","csv::row#headers()","csv::table#headers()","uri::mailto#headers=()","net::smtp#helo()","net::ftp#help()","optionparser#help()","win32ole_method#helpcontext()","win32ole_type#helpcontext()","win32ole_method#helpfile()","win32ole_type#helpfile()","win32ole_method#helpstring()","win32ole_type#helpstring()","drb#here?()","drb::here?()","drb::drbserver#here?()","matrix#hermitian?()","matrix::eigenvaluedecomposition#hessenberg_to_real_schur()","random::formatter#hex()","string#hex()","digest::class::hexdigest()","digest::instance#hexdigest()","openssl::hmac::hexdigest()","openssl::hmac#hexdigest()","digest::instance#hexdigest!()","digest::hexencode()","cgi::htmlextension#hidden()","uri::generic#hierarchical?()","uri::ldap#hierarchical?()","irb::context#history_file()","irb::context#history_file=()","net::imap::crammd5authenticator#hmac_md5()","dir::home()","irb::context#home_workspace()","gem::host()","gem::gemcutterutilities#host()","webrick::httprequest#host()","gem::host=()","uri::generic#host=()","uri::generic#hostname()","openssl::ssl::sslsocket#hostname=()","uri::generic#hostname=()","date#hour()","time#hour()","rss::itunesitemmodel::itunesduration#hour=()","rss::maker::itunesitemmodel::itunesdurationbase#hour=()","rss::xmlstylesheet#href=()","matrix#hstack()","matrix::hstack()","cgi::htmlextension#html()","rdoc::markdown#html()","erb::util::html_escape()","erb::util#html_escape()","rss::utils#html_escape()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","ipaddr#hton()","net::http::http_default_port()","cgi#http_header()","rdoc::context#http_url()","rdoc::toplevel#http_url()","date#httpdate()","date::httpdate()","datetime::httpdate()","time#httpdate()","time::httpdate()","cgi::cookie#httponly=()","gem::remotefetcher#https?()","net::http::https_default_port()","math::hypot()","numeric#i()","rss::maker::channelbase#icon()","rss::maker::channelbase#icon=()","json::iconv()","openssl::engine#id()","openssl::ssl::session#id()","rexml::functions::id()","symbol#id2name()","syslog::ident()","file::identical?()","filetest#identical?()","fileutils#identical?()","fileutils::identical?()","matrix::identity()","net::imap#idle()","net::imap#idle_done()","rdoc::servlet#if_modified_since()","socket::ifaddr#ifindex()","io#iflush()","rdoc::codeobject#ignore()","rss::baseparser#ignore_unknown_element()","rss::baseparser#ignore_unknown_element=()","rexml::element#ignore_whitespace_nodes()","rdoc::codeobject#ignored?()","complex#imag()","matrix#imag()","numeric#imag()","rss::rss#image()","cgi::htmlextension#image_button()","rss::imagefaviconmodel::imagefavicon#image_size=()","complex#imaginary()","matrix#imaginary()","numeric#imaginary()","cgi::htmlextension#img()","win32ole_type#implemented_ole_types()","gem::resolver::dependencyrequest#implicit?()","gem::requestset#import()","fiddle::importer#import_function()","fiddle::importer#import_symbol()","fiddle::importer#import_value()","ipaddr#in6_addr()","ipaddr#in_addr()","pstore#in_transaction()","pstore#in_transaction_wr()","shell::processcontroller::inactivate()","optionparser#inc()","optionparser::inc()","module#include()","array#include?()","cgi::queryextension#include?()","csv::row#include?()","dbm#include?()","env::include?()","enumerable#include?()","gdbm#include?()","gem::sourcelist#include?()","hash#include?()","ipaddr#include?()","module#include?()","objectspace::weakmap#include?()","rexml::attlistdecl#include?()","range#include?()","sdbm#include?()","set#include?()","string#include?()","exception2messagemapper::included()","module#included()","rss::maker::atomtextconstructbase::ensurexmlcontent::included()","singleton::included()","syslog::constants::included()","syslog::macros::included()","module#included_modules()","optionparser::switch::incompatible_argument_styles()","optionparser::switch::noargument::incompatible_argument_styles()","encoding::invalidbytesequenceerror#incomplete_input?()","rexml::node#indent()","rexml::formatters::pretty#indent_text()","rexml::text#indent_text()","vector::independent?()","vector#independent?()","array#index()","csv::row#index()","env::index()","matrix#index()","rexml::elements#index()","rexml::parent#index()","string#index()","yaml::dbm#index()","rexml::node#index_in_parent()","gem::resolver::molinillo::resolver::resolution#indicate_progress()","gem::resolver::molinillo::ui#indicate_progress()","bigdecimal#infinite?()","complex#infinite?()","float#infinite?()","numeric#infinite?()","openssl::pkey::ec::point#infinity?()","gem::inflate()","gem::util::inflate()","zlib::inflate()","zlib::inflate::inflate()","zlib::inflate#inflate()","logger#info()","syslog::logger#info()","webrick::basiclog#info()","logger#info?()","webrick::basiclog#info?()","webrick::httpstatus#info?()","webrick::httpstatus::info?()","rss::basemodel#inherit_convert_attr_reader()","class#inherited()","rss::element::inherited()","rss::maker::base::inherited()","rss::utils::inheritedreader#inherited_array_reader()","rss::element::inherited_base()","rss::maker::base::inherited_base()","rss::utils::inheritedreader#inherited_hash_reader()","rss::utils::inheritedreader#inherited_reader()","gem::packagetask#init()","irb::inspector#init()","csv#init_comments()","csv#init_converters()","csv#init_headers()","csv#init_parsers()","csv#init_separators()","psych::visitors::toruby#init_with()","rinda::tuple#init_with_ary()","rinda::tuple#init_with_hash()","process::initgroups()","rss::listenermixin#initial_start_rdf()","rss::listenermixin#initial_start_entry()","rss::listenermixin#initial_start_feed()","rss::listenermixin#initial_start_rss()","gem::resolver::molinillo::resolver::resolution#initial_state()","gem::package#initialize()","shell::commandprocessor::initialize()","set#initialize_clone()","array#initialize_copy()","gem::resolver::molinillo::dependencygraph#initialize_copy()","gem::specification#initialize_copy()","numeric#initialize_copy()","openssl::config#initialize_copy()","openstruct#initialize_copy()","string#initialize_copy()","stringscanner#initialize_copy()","zlib::deflate#initialize_copy()","set#initialize_dup()","rss::element#initialize_have_children_elements()","net::httpheader#initialize_http_header()","rdoc::context#initialize_methods_etc()","uri::rfc2396_parser#initialize_pattern()","cgi::queryextension#initialize_query()","uri::rfc2396_parser#initialize_regexp()","irb::initialize_tracer()","rss::element#initialize_variables()","rss::maker::base#initialize_variables()","enumerable#inject()","rexml::elements#inject()","gem::availableset#inject_into_list()","rss::atom::feed::entry::content#inline_html?()","rss::maker::itemsbase::itembase::contentbase#inline_html?()","rss::atom::feed::entry::content#inline_other?()","rss::maker::itemsbase::itembase::contentbase#inline_other?()","rss::atom::feed::entry::content#inline_other_base64?()","rss::maker::itemsbase::itembase::contentbase#inline_other_base64?()","rss::atom::feed::entry::content#inline_other_text?()","rss::maker::itemsbase::itembase::contentbase#inline_other_text?()","rss::atom::feed::entry::content#inline_other_xml?()","rss::maker::itemsbase::itembase::contentbase#inline_other_xml?()","rss::atom::feed::entry::content#inline_text?()","rss::maker::itemsbase::itembase::contentbase#inline_text?()","rss::atom::feed::entry::content#inline_xhtml?()","rss::maker::itemsbase::itembase::contentbase#inline_xhtml?()","vector#inner_product()","file::stat#ino()","argf#inplace_mode()","argf#inplace_mode=()","gem::mockgemui#input()","readline::input=()","shell::appendfile#input=()","shell::appendio#input=()","shell::filter#input=()","shell::systemcommand#input=()","win32ole_param#input?()","drb::drbserver#insecure_method?()","array#insert()","irb::jobmanager#insert()","string#insert()","rexml::parent#insert_after()","rexml::parent#insert_before()","encoding::converter#insert_output()","readline::insert_text()","argf#inspect()","addrinfo#inspect()","array#inspect()","bigdecimal#inspect()","cgi::cookie#inspect()","csv#inspect()","csv::row#inspect()","csv::table#inspect()","complex#inspect()","date#inspect()","digest::instance#inspect()","dir#inspect()","env::inspect()","encoding#inspect()","encoding::converter#inspect()","enumerator#inspect()","exception#inspect()","falseclass#inspect()","fiddle::pointer#inspect()","file::stat#inspect()","float#inspect()","gem::platform#inspect()","gem::resolver::molinillo::dependencygraph#inspect()","gem::resolver::molinillo::dependencygraph::vertex#inspect()","hash#inspect()","io#inspect()","ipaddr#inspect()","irb::irb#inspect()","irb::jobmanager#inspect()","integer#inspect()","integer#inspect()","matchdata#inspect()","matrix#inspect()","method#inspect()","module#inspect()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::internetmessageio::writeadapter#inspect()","net::pop3#inspect()","net::popmail#inspect()","net::smtp#inspect()","nilclass#inspect()","object#inspect()","objectspace::internalobjectwrapper#inspect()","objectspace::weakmap#inspect()","openssl::config#inspect()","openssl::engine#inspect()","openssl::hmac#inspect()","openssl::x509::certificate#inspect()","openstruct#inspect()","optionparser::parseerror#inspect()","proc#inspect()","process::status#inspect()","rexml::attribute#inspect()","rexml::element#inspect()","rexml::instruction#inspect()","rexml::parsers::pullevent#inspect()","rexml::text#inspect()","rexml::validation::choice#inspect()","rexml::validation::event#inspect()","rexml::validation::interleave#inspect()","rexml::validation::ref#inspect()","rexml::validation::state#inspect()","rexml::xmldecl#inspect()","range#inspect()","rational#inspect()","regexp#inspect()","rubyvm::instructionsequence#inspect()","set#inspect()","shell#inspect()","shell::filter#inspect()","socket::ancillarydata#inspect()","socket::ifaddr#inspect()","socket::option#inspect()","string#inspect()","stringscanner#inspect()","struct#inspect()","symbol#inspect()","syslog::inspect()","thread#inspect()","thread::backtrace::location#inspect()","time#inspect()","tracepoint#inspect()","trueclass#inspect()","uri::generic#inspect()","uri::rfc2396_parser#inspect()","unboundmethod#inspect()","vector#inspect()","win32ole_method#inspect()","win32ole_param#inspect()","win32ole_record#inspect()","win32ole_type#inspect()","win32ole_typelib#inspect()","win32ole_variable#inspect()","zlib::gzipfile::error#inspect()","irb::context#inspect?()","irb::context#inspect_mode=()","addrinfo#inspect_sockaddr()","irb::inspector#inspect_value()","fileutils::install()","fileutils#install()","gem::install()","gem::dependencyinstaller#install()","gem::installer#install()","gem::requestset#install()","gem::resolver::gitspecification#install()","gem::resolver::installedspecification#install()","gem::resolver::lockspecification#install()","gem::resolver::specification#install()","gem::resolver::vendorspecification#install()","rss::baselistener::install_accessor_base()","drb::install_acl()","drb#install_acl()","irb::extendcommandbundle#install_alias_method()","rss::baselistener::install_class_name()","rss::basemodel#install_date_element()","gem::testcase#install_default_gems()","gem::testcase#install_default_specs()","rss::maker::dublincoremodel::install_dublin_core()","rss::basemodel#install_element()","gem::commands::setupcommand#install_executables()","irb::contextextender::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","gem::commands::setupcommand#install_file()","gem::requestset#install_from_gemdeps()","gem::testcase#install_gem()","gem::testcase#install_gem_user()","rss::element::install_get_attribute()","rss::baselistener::install_get_text_element()","rss::basemodel#install_have_attribute_element()","rss::basemodel#install_have_child_element()","rss::basemodel#install_have_children_element()","drb#install_id_conv()","drb::install_id_conv()","rss::maker::imagefaviconmodel::install_image_favicon()","rss::maker::imageitemmodel::install_image_item()","gem::indexer#install_indices()","gem::requestset#install_into()","gem::commands::setupcommand#install_lib()","acl#install_list()","rss::element::install_model()","rss::element::install_must_call_validator()","rss::element::install_ns()","gem::commands::setupcommand#install_rdoc()","rdoc::rdoc#install_siginfo_handler()","gem::testcase#install_specs()","shell::install_system_commands()","rss::maker::taxonomytopicmodel::install_taxo_topic()","rss::maker::taxonomytopicsmodel::install_taxo_topics()","rss::basemodel#install_text_element()","gem::installupdateoptions#install_update_defaults_str()","gem::platform::installable?()","gem::resolver::installedspecification#installable_platform?()","gem::resolver::localspecification#installable_platform?()","gem::resolver::specification#installable_platform?()","gem::installer#installation_satisfies_dependency?()","gem::commands::querycommand#installed?()","gem::resolver::activationrequest#installed?()","rdoc::servlet#installed_docs()","gem::installer#installed_specs()","gem::specification::installed_stubs()","csv::instance()","gem::commandmanager::instance()","gem::commandmanager#instance()","syslog::instance()","rdoc::context#instance_attributes()","forwardable#instance_delegate()","basicobject#instance_eval()","basicobject#instance_exec()","module#instance_method()","rdoc::context#instance_method_list()","module#instance_methods()","rdoc::store#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","object#instance_variable_set()","object#instance_variables()","rexml::streamlistener#instruction()","rss::listenermixin#instruction()","rexml::parsers::pullevent#instruction?()","rexml::element#instructions()","socket::ancillarydata::int()","socket::ancillarydata#int()","socket::option#int()","socket::option::int()","prime#int_from_prime_division()","integer#integer?()","integer#integer?()","numeric#integer?()","rss::basemodel#integer_writer()","string#intern()","symbol#intern()","objectspace::internal_class_of()","argf#internal_encoding()","io#internal_encoding()","stringio#internal_encoding()","objectspace::internalobjectwrapper#internal_object_id()","objectspace::internal_super_of()","debugger__::interrupt()","webrick#interrupt()","set#intersect?()","set#intersection()","matrix#inv()","gem::specification#invalidate_memoized_attributes()","matrix#inverse()","dbm#invert()","env::invert()","gdbm#invert()","hash#invert()","sdbm#invert()","yaml::dbm#invert()","openssl::pkey::ec::point#invert!()","win32ole_method#invkind()","gem::command#invoke()","win32ole#invoke()","win32ole_method#invoke_kind()","drb::extservmanager#invoke_service()","drb::extservmanager#invoke_service_command()","drb::extservmanager#invoke_thread()","gem::command#invoke_with_build_args()","io#ioctl()","io#ioflush()","addrinfo::ip()","ipaddr#ip6_arpa()","ipaddr#ip6_int()","addrinfo#ip?()","addrinfo#ip_address()","socket::ip_address_list()","socket::ancillarydata::ip_pktinfo()","socket::ancillarydata#ip_pktinfo()","addrinfo#ip_port()","addrinfo#ip_unpack()","addrinfo#ipv4?()","ipaddr#ipv4?()","ipaddr#ipv4_compat()","ipaddr#ipv4_compat?()","addrinfo#ipv4_loopback?()","ipaddr#ipv4_mapped()","ipaddr#ipv4_mapped?()","addrinfo#ipv4_multicast?()","socket::option#ipv4_multicast_loop()","socket::option::ipv4_multicast_loop()","socket::option::ipv4_multicast_ttl()","socket::option#ipv4_multicast_ttl()","addrinfo#ipv4_private?()","addrinfo#ipv6?()","ipaddr#ipv6?()","addrinfo#ipv6_linklocal?()","addrinfo#ipv6_loopback?()","addrinfo#ipv6_mc_global?()","addrinfo#ipv6_mc_linklocal?()","addrinfo#ipv6_mc_nodelocal?()","addrinfo#ipv6_mc_orglocal?()","addrinfo#ipv6_mc_sitelocal?()","addrinfo#ipv6_multicast?()","socket::ancillarydata#ipv6_pktinfo()","socket::ancillarydata::ipv6_pktinfo()","socket::ancillarydata#ipv6_pktinfo_addr()","socket::ancillarydata#ipv6_pktinfo_ifindex()","addrinfo#ipv6_sitelocal?()","addrinfo#ipv6_to_ipv4()","addrinfo#ipv6_unique_local?()","addrinfo#ipv6_unspecified?()","addrinfo#ipv6_v4compat?()","addrinfo#ipv6_v4mapped?()","socket#ipv6only!()","irb::irb()","irb::jobmanager#irb()","irb::irb_abort()","irb::irb_at_exit()","irb::extendcommandbundle#irb_context()","irb::irb_exit()","irb::extendcommandbundle#irb_exit()","irb::context#irb_level()","irb::extendcommandbundle#irb_load()","irb::irbloader#irb_load()","irb::extendcommandbundle#irb_require()","jacobian#isequal()","object#is_a?()","rdoc::constant#is_alias_for()","gem::resolver::molinillo::dependencygraph::vertex#is_reachable_from?()","net::http::is_version_1_2?()","io#isatty()","stringio#isatty()","time#isdst()","kconv#iseuc()","kconv::iseuc()","string#iseuc()","kconv#isjis()","kconv::isjis()","string#isjis()","date#iso8601()","date::iso8601()","datetime#iso8601()","datetime::iso8601()","time#iso8601()","time::iso8601()","process::sys::issetugid()","kconv#issjis()","kconv::issjis()","string#issjis()","openssl::pkcs7::recipientinfo#issuer()","openssl::pkcs7::signerinfo#issuer()","openssl::x509::crl#issuer()","openssl::x509::certificate#issuer()","openssl::x509::crl#issuer=()","openssl::x509::certificate#issuer=()","openssl::x509::extensionfactory#issuer_certificate=()","openssl::ocsp::certificateid#issuer_key_hash()","openssl::ocsp::certificateid#issuer_name_hash()","gem::security::trustdir#issuer_of()","kconv#isutf8()","kconv::isutf8()","string#isutf8()","date#italy()","rdoc::testcase#item()","rss::atom::entry#items()","rss::rss#items()","gem::resolver::stats#iteration!()","kernel#iterator?()","object#itself()","openssl::cipher#iv=()","openssl::cipher#iv_len()","openssl::cipher#iv_len=()","kernel#j()","jacobian#jacobian()","date#jd()","date::jd()","datetime::jd()","date#jisx0301()","date::jisx0301()","datetime::jisx0301()","datetime#jisx0301()","kernel#jj()","shell#jobs()","shell::processcontroller#jobs()","shell::processcontroller#jobs_exist?()","array#join()","file::join()","pathname#join()","shellwords::join()","thread#join()","threadswait#join()","threadswait#join()","uri::join()","uri::rfc2396_parser#join()","threadswait#join_nowait()","threadswait#join_nowait()","class#json_creatable?()","json::genericobject::json_creatable?()","bigdecimal::json_create()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::genericobject::json_create()","openstruct::json_create()","range::json_create()","rational::json_create()","regexp::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","date#julian()","date#julian?()","date::julian_leap?()","kconv#kconv()","kconv::kconv()","string#kconv()","net::http#keep_alive?()","webrick::httprequest#keep_alive?()","webrick::httpresponse#keep_alive?()","rinda::tuplespace#keep_clean()","array#keep_if()","env::keep_if()","hash#keep_if()","set#keep_if()","dbm#key()","env::key()","gdbm#key()","hash#key()","sdbm#key()","yaml::dbm#key()","openssl::cipher#key=()","cgi::queryextension#key?()","csv::row#key?()","dbm#key?()","env::key?()","gdbm#key?()","hash#key?()","objectspace::weakmap#key?()","sdbm#key?()","thread#key?()","openssl::cipher#key_len()","openssl::cipher#key_len=()","gem::testcase::key_path()","cgi::queryextension#keys()","dbm#keys()","env::keys()","gdbm#keys()","hash#keys()","objectspace::weakmap#keys()","sdbm#keys()","thread#keys()","irb::inspector::keys_with_inspector()","irb::jobmanager#kill()","process::kill()","shell#kill()","shell::systemcommand#kill()","thread::kill()","thread#kill()","shell::processcontroller#kill_job()","object#kind_of?()","rss::listenermixin#known_class?()","matrix::lupdecomposition#l()","rubyvm::instructionsequence#label()","thread::backtrace::location#label()","kernel#lambda()","proc#lambda?()","rexml::functions::lang()","matrix#laplace_expansion()","array#last()","rexml::functions::last()","range#last()","rss::maker::channelbase#lastbuilddate=()","encoding::converter#last_error()","fiddle::last_error()","fiddle::last_error=()","regexp::last_match()","openuri::meta#last_modified()","rdoc::toplevel#last_modified()","openssl::x509::crl#last_update()","openssl::x509::crl#last_update=()","gc::latest_gc_info()","gem::latest_rubygems_version()","gem::latest_spec_for()","gem::server#latest_specs()","gem::specification::latest_specs()","gem::dependency#latest_version?()","gem::latest_version_for()","gem::server#launch()","enumerable#lazy()","enumerator::lazy#lazy()","file::lchmod()","pathname#lchmod()","file::lchown()","pathname#lchown()","integer#lcm()","integer#lcm()","date#ld()","math::ldexp()","date::leap?()","date#leap?()","gem::testcase::specfetchersetup#legacy_platform()","array#length()","dbm#length()","digest::instance#length()","env::length()","gdbm#length()","hash#length()","matchdata#length()","objectspace::weakmap#length()","queue#length()","rexml::attributes#length()","rexml::parent#length()","rexml::syncenumerator#length()","sdbm#length()","set#length()","string#length()","stringio#length()","struct#length()","symbol#length()","tempfile#length()","socket::ancillarydata#level()","socket::option#level()","zlib::gzipfile#level()","irb::notifier::compositenotifier#level=()","logger#level=()","irb::notifier::compositenotifier#level_notifier=()","gem::text#levenshtein_distance()","ripper::lex()","math::lgamma()","gem::basicspecification#lib_dirs_glob()","gem::specification#lib_files()","csv#liberal_parsing?()","win32ole_typelib#library_name()","psych::libyaml_version()","gem::specification#license()","gem::specification#license=()","gem::specification#licenses()","gem::specification#licenses=()","bigdecimal::limit()","irb::readlineinputmethod#line()","irb::stdioinputmethod#line()","rexml::parseexception#line()","readline::line_buffer()","rubyvm::instructionsequence#line_trace_all()","rubyvm::instructionsequence#line_trace_specify()","argf#lineno()","io#lineno()","ripper#lineno()","ripper::filter#lineno()","stringio#lineno()","thread::backtrace::location#lineno()","tracepoint#lineno()","zlib::gzipreader#lineno()","argf#lineno=()","io#lineno=()","stringio#lineno=()","zlib::gzipreader#lineno=()","argf#lines()","io#lines()","string#lines()","stringio#lines()","zlib::gzipreader#lines()","socket::option#linger()","socket::option::linger()","file::link()","fileutils#link()","fileutils::link()","rss::maker::imagebase#link()","rdoc::markdown#link_to()","encoding::list()","net::ftp#list()","net::imap#list()","rdoc::testcase#list()","signal::list()","thread::list()","threadgroup#list()","webrick::httputils::formdata#list()","rdoc::rdoc#list_files_in_directory()","rdoc::markdown#list_item_from()","net::ftp::mlsxentry#listable?()","addrinfo#listen()","gem::server#listen()","openssl::ssl::sslserver#listen()","rexml::parsers::sax2parser#listen()","socket#listen()","tcpserver#listen()","unixserver#listen()","webrick::genericserver#listen()","rss::rexmlparser::listener()","rss::xmlparserparser::listener()","rss::xmlscanparser::listener()","rss::rexmllikexmlparser#listener=()","rexml::elements#literalize()","string#ljust()","fileutils::ln()","fileutils#ln()","openssl::asn1::objectid#ln()","fileutils::ln_s()","fileutils#ln_s()","fileutils#ln_sf()","fileutils::ln_sf()","gem::requestset::gemdependencyapi#load()","gem::specification::load()","irb::locale#load()","json#load()","json::genericobject::load()","kernel#load()","marshal::load()","openssl::engine::load()","optionparser#load()","psych::load()","rdoc::store#load_all()","gem::commandmanager#load_and_instantiate()","gem::configfile#load_api_keys()","rdoc::store#load_cache()","gem::testcase::load_cert()","gem::security::trustdir#load_certificate()","rdoc::store#load_class()","rdoc::store#load_class_data()","pstore#load_data()","gem::commands::certcommand#load_default_cert()","gem::commands::certcommand#load_default_key()","gem::specification::load_defaults()","psych::load_documents()","gem::load_env_plugins()","gem::configfile#load_file()","irb::irbloader#load_file()","psych::load_file()","rubyvm::instructionsequence::load_from_binary()","rubyvm::instructionsequence::load_from_binary_extra_data()","gem::requestset#load_gemdeps()","gem::testcase::load_key()","rdoc::store#load_method()","webrick::httputils::load_mime_types()","webrick::httputils#load_mime_types()","rdoc::rdoc#load_options()","rdoc::store#load_page()","gem::load_path_insert_index()","gem::load_plugins()","openssl::engine#load_private_key()","openssl::engine#load_public_key()","openssl::random::load_random_file()","rdoc::rubygemshook::load_rdoc()","rdoc::rubygemshook::load_rdoc()","gem::testcase::staticset#load_spec()","gem::source#load_specs()","psych::load_stream()","gem::load_yaml()","rdoc::load_yaml()","gem::testcase#loaded_spec_names()","gem::platform::local()","time::local()","gem::localremoteoptions#local?()","basicsocket#local_address()","rexml::functions::local_name()","rexml::light::node#local_name()","rexml::light::node#local_name=()","binding#local_variable_defined?()","binding#local_variable_get()","binding#local_variable_set()","binding#local_variables()","kernel#local_variables()","nameerror#local_variables()","win32ole::locale()","win32ole::locale=()","encoding::locale_charmap()","time#localtime()","erb#location=()","gem::location_of_caller()","net::http#lock()","thread::mutex#lock()","logger::logdevice#lock_shift_log()","thread::mutex#locked?()","gem::resolver::molinillo::resolver::resolution#locked_requirement_named()","bigmath::log()","cmath::log()","cmath#log()","logger#log()","math::log()","syslog::log()","webrick::basiclog#log()","webrick::log#log()","cmath::log10()","cmath#log10()","math::log10()","cmath::log2()","cmath#log2()","math::log2()","net::pop3#logging()","net::smtp#logging()","net::ftp#login()","net::imap#login()","rss::maker::channelbase#logo()","rss::maker::channelbase#logo=()","net::imap#logout()","openssl::asn1::objectid#long_name()","rinda::ringfinger#lookup_ring()","rinda::ringfinger#lookup_ring_any()","webrick::httpserver#lookup_server()","kernel#loop()","matrix#lower_triangular?()","net::ftp#ls()","openssl::bn#lshift!()","file#lstat()","file::lstat()","pathname#lstat()","string#lstrip()","string#lstrip!()","net::imap#lsub()","lusolve#ludecomp()","matrix#lup()","matrix#lup_decomposition()","lusolve#lusolve()","complex#magnitude()","float#magnitude()","integer#magnitude()","integer#magnitude()","numeric#magnitude()","rational#magnitude()","vector#magnitude()","net::popmail#mail()","net::smtp#mailfrom()","net::pop3#mails()","irb::context#main()","rdoc::store#main()","thread::main()","rdoc::store#main=()","irb::jobmanager#main_irb()","drb::drbserver#main_loop()","irb::jobmanager#main_thread()","win32ole_type#major_version()","win32ole_typelib#major_version()","gem::ext::builder::make()","rss::maker::make()","rss::maker::rssbase::make()","rss::maker::rssbase#make()","openssl::pkey::ec::point#make_affine!()","gem::testcase::make_command()","gem::testcase#make_command()","erb#make_compiler()","gem::commands::setupcommand#make_destination_dirs()","gem::resolver::molinillo::dependencygraph::addedgenocircular#make_edge()","gem::resolver::molinillo::dependencygraph::deleteedge#make_edge()","gem::commands::querycommand#make_entry()","rinda::tupleentry#make_expires()","rss::maker::atom::entry#make_feed()","rss::maker::atom::feed#make_feed()","rss::maker::rss09#make_feed()","rss::maker::rss10#make_feed()","pathname#make_link()","syslog::logger::make_methods()","gem::requestset::lockfile::tokenizer#make_parser()","webrick::httpauth::basicauth::make_passwd()","webrick::httpauth::digestauth::make_passwd()","webrick::httpauth::userdb#make_passwd()","uri::rfc2396_parser#make_regexp()","rinda::ringserver#make_socket()","rss::element#make_start_tag()","optionparser#make_switch()","pathname#make_symlink()","gem::indexer#make_temp_directories()","debugger__::make_thread_list()","time::make_time()","rinda::tupleentry#make_tuple()","rdoc::store#make_variable_map()","rss::maker::rssbase#make_xml_stylesheets()","fileutils::makedirs()","fileutils#makedirs()","rss::maker::maker()","rss::atom::contentmodel#maker_target()","rss::atom::entry#maker_target()","rss::atom::feed#maker_target()","rss::atom::feed::category#maker_target()","rss::atom::feed::entry#maker_target()","rss::atom::feed::link#maker_target()","rss::atom::feed::logo#maker_target()","rss::atom::personconstruct#maker_target()","rss::atom::textconstruct#maker_target()","rss::ituneschannelmodel::itunescategory#maker_target()","rss::ituneschannelmodel::itunesimage#maker_target()","rss::ituneschannelmodel::itunesowner#maker_target()","rss::itunesitemmodel::itunesduration#maker_target()","rss::imagefaviconmodel::imagefavicon#maker_target()","rss::imageitemmodel::imageitem#maker_target()","rss::rdf::channel#maker_target()","rss::rdf::image#maker_target()","rss::rdf::item#maker_target()","rss::rdf::textinput#maker_target()","rss::rootelementmixin#maker_target()","rss::rss::channel#maker_target()","rss::rss::channel::image#maker_target()","rss::rss::channel::item#maker_target()","rss::rss::channel::item::category#maker_target()","rss::rss::channel::item::enclosure#maker_target()","rss::rss::channel::item::guid#maker_target()","rss::rss::channel::item::source#maker_target()","rss::rss::channel::textinput#maker_target()","rss::setupmaker#maker_target()","rss::taxonomytopicmodel::taxonomytopic#maker_target()","rss::taxonomytopicsmodel::taxonomytopics#maker_target()","rss::maker::makers()","fiddle::malloc()","fiddle::cstructentity::malloc()","fiddle::cunionentity::malloc()","fiddle::pointer::malloc()","gc::malloc_allocated_size()","gc::malloc_allocations()","gem::commands::ownercommand#manage_owners()","array#map()","enumerable#map()","enumerator::lazy#map()","matrix#map()","psych::coder#map()","vector#map()","array#map!()","set#map!()","vector#map2()","psych::coder#map=()","gem::indexer#map_gems_to_specs()","gem::specification#mark_version()","rdoc::text#markup()","delegator#marshal_dump()","gem::version#marshal_dump()","openstruct#marshal_dump()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","rdoc::constant#marshal_dump()","rdoc::toplevel#marshal_dump()","delegator#marshal_load()","gem::version#marshal_load()","openstruct#marshal_load()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","rdoc::constant#marshal_load()","gem::marshal_version()","ipaddr#mask()","syslog::mask()","ipaddr#mask!()","syslog::mask=()","acl::aclentry#match()","acl::acllist#match()","gem::platform::match()","optionparser::completinghash#match()","rexml::iosource#match()","rexml::quickpath::match()","rexml::source#match()","rexml::xpath::match()","rexml::xpathparser#match()","regexp#match()","rinda::template#match()","rinda::templateentry#match()","string#match()","symbol#match()","gem::dependency#match?()","gem::licenses::match?()","gem::resolver::dependencyrequest#match?()","regexp#match?()","string#match?()","stringscanner#match?()","symbol#match?()","gem::availableset#match_platform!()","gem::nametuple#match_platform?()","rexml::source#match_to()","rexml::source#match_to_consume()","stringscanner#matched()","stringscanner#matched?()","stringscanner#matched_size()","rexml::entity::matches?()","rexml::validation::choice#matches?()","rexml::validation::event#matches?()","rexml::validation::interleave#matches?()","rexml::validation::oneormore#matches?()","rexml::validation::optional#matches?()","rexml::validation::sequence#matches?()","gem::basicspecification#matches_for_glob()","gem::dependency#matches_spec?()","gem::resolver::dependencyrequest#matches_spec?()","gem::dependency#matching_specs()","irb::context#math_mode=()","array#max()","enumerable#max()","range#max()","sizedqueue#max()","sizedqueue#max=()","enumerable#max_by()","net::imap::max_flag_count()","net::imap::max_flag_count=()","process::maxgroups()","process::maxgroups=()","rss::parser#maybe_xml?()","date#mday()","time#mday()","net::ftp#mdtm()","benchmark#measure()","benchmark::measure()","net::imap::bodytypebasic#media_subtype()","net::imap::bodytypemessage#media_subtype()","net::imap::bodytypemultipart#media_subtype()","net::imap::bodytypetext#media_subtype()","csv::row#member?()","dbm#member?()","env::member?()","enumerable#member?()","gdbm#member?()","hash#member?()","objectspace::weakmap#member?()","range#member?()","sdbm#member?()","set#member?()","struct#members()","webrick::httpauth::htgroup#members()","benchmark::tms#memberwise()","objectspace::memsize_of()","objectspace::memsize_of_all()","gem::dependency#merge()","hash#merge()","rdoc::classmodule#merge()","set#merge()","uri::generic#merge()","hash#merge!()","uri::generic#merge!()","psych::visitors::toruby#merge_key()","gem::command#merge_options()","uri::generic#merge_path()","exception#message()","gem::resolver::molinillo::nosuchdependencyerror#message()","net::smtp::response#message()","optionparser::parseerror#message()","win32ole_event::message_loop()","webrick::httprequest#meta_vars()","object#method()","module#method_added()","shell::commandprocessor::method_added()","module#method_defined?()","rdoc::store#method_file()","tracepoint#method_id()","basicobject#method_missing()","drb::drbobject#method_missing()","drb::drbobject#method_missing()","delegator#method_missing()","rexml::quickpath::method_missing()","win32ole#method_missing()","win32ole_record#method_missing()","module#method_removed()","module#method_undefined()","delegator#methods()","object#methods()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","rss::atom::feed::entry::content#mime_split()","webrick::httputils#mime_type()","webrick::httputils::mime_type()","array#min()","date#min()","enumerable#min()","range#min()","time#min()","enumerable#min_by()","enumerable#minmax()","enumerable#minmax_by()","matrix#minor()","win32ole_type#minor_version()","win32ole_typelib#minor_version()","date#minute()","rss::itunesitemmodel::itunesduration#minute=()","rss::maker::itunesitemmodel::itunesdurationbase#minute=()","gem::specification#missing_extensions?()","date#mjd()","net::http#mkcol()","dir::mkdir()","fileutils::mkdir()","fileutils#mkdir()","gem::package::tarwriter#mkdir()","net::ftp#mkdir()","pathname#mkdir()","shell::commandprocessor#mkdir()","fileutils#mkdir_p()","fileutils::mkdir_p()","file::mkfifo()","fileutils::mkpath()","fileutils#mkpath()","pathname#mkpath()","time::mktime()","dir::mktmpdir()","net::ftp#mlsd()","net::ftp#mlst()","openssl::bn#mod_add()","openssl::bn#mod_exp()","openssl::bn#mod_inverse()","openssl::bn#mod_mul()","openssl::bn#mod_sqr()","openssl::bn#mod_sub()","bigdecimal::mode()","file::stat#mode()","rss::element::models()","rdoc::mixin#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","module#module_eval()","module#module_exec()","module#module_function()","rdoc::store#module_names()","rdoc::context#modules()","rdoc::context#modules_hash()","rdoc::store#modules_hash()","bigdecimal#modulo()","float#modulo()","integer#modulo()","integer#modulo()","numeric#modulo()","date#mon()","time#mon()","monitormixin#mon_check_owner()","monitormixin#mon_enter()","monitormixin#mon_enter_for_cond()","monitormixin#mon_exit()","monitormixin#mon_exit_for_cond()","monitormixin#mon_initialize()","monitormixin#mon_synchronize()","monitormixin#mon_try_enter()","date#monday?()","time#monday?()","date#month()","time#month()","time::month_days()","webrick::httpserver#mount()","webrick::httpserver#mount_proc()","pathname#mountpoint?()","fileutils::move()","fileutils#move()","net::http#move()","net::imap#move()","rinda::tuplespace#move()","logger::formatter#msg2str()","file#mtime()","file::mtime()","file::stat#mtime()","net::ftp#mtime()","pathname#mtime()","zlib::gzipfile#mtime()","zlib::gzipwriter#mtime=()","mutex_m#mu_lock()","mutex_m#mu_locked?()","gem::testcase#mu_pp()","mutex_m#mu_synchronize()","mutex_m#mu_try_lock()","mutex_m#mu_unlock()","openssl::pkey::ec::point#mul()","bigdecimal#mult()","cgi::queryextension#multipart?()","net::imap::bodytypeattachment#multipart?()","net::imap::bodytypebasic#multipart?()","net::imap::bodytypeextension#multipart?()","net::imap::bodytypemessage#multipart?()","net::imap::bodytypemultipart#multipart?()","net::imap::bodytypetext#multipart?()","cgi::htmlextension#multipart_form()","stringscanner::must_c_version()","rss::element::must_call_validators()","fileutils::mv()","fileutils#mv()","net::pop3#n_bytes()","irb::jobmanager#n_jobs()","net::pop3#n_mails()","encoding#name()","fileutils::lowmethods#name()","gem::basicspecification#name()","gem::resolver::activationrequest#name()","gem::resolver::dependencyrequest#name()","gem::resolver::molinillo::delegates::resolutionstate#name()","gem::resolver::specspecification#name()","gem::unsatisfiabledependencyerror#name()","method#name()","module#name()","nameerror#name()","openssl::cipher#name()","openssl::digest#name()","openssl::engine#name()","openssl::pkcs7::signerinfo#name()","rdoc::anymethod#name()","rdoc::toplevel#name()","rexml::document#name()","rexml::functions::name()","rexml::light::node#name()","rexml::notationdecl#name()","rexml::quickpath::name()","socket::ifaddr#name()","thread#name()","unboundmethod#name()","win32ole_method#name()","win32ole_param#name()","win32ole_type#name()","win32ole_typelib#name()","win32ole_variable#name()","rdoc::classmodule#name=()","rexml::light::node#name=()","rexml::namespace#name=()","thread#name=()","gem::resolver#name_for()","gem::resolver::molinillo::delegates::specificationprovider#name_for()","gem::resolver::molinillo::specificationprovider#name_for()","gem::resolver::molinillo::delegates::specificationprovider#name_for_explicit_dependency_source()","gem::resolver::molinillo::specificationprovider#name_for_explicit_dependency_source()","gem::resolver::molinillo::delegates::specificationprovider#name_for_locking_dependency_source()","gem::resolver::molinillo::specificationprovider#name_for_locking_dependency_source()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","encoding::name_list()","gem::security::trustdir#name_path()","gem::commands::dependencycommand#name_pattern()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","gem::specification#name_tuple()","matchdata#named_captures()","regexp#named_captures()","encoding#names()","matchdata#names()","regexp#names()","rexml::attribute#namespace()","rexml::element#namespace()","rexml::light::node#namespace()","rexml::light::node#namespace=()","rexml::functions::namespace_context()","rexml::functions::namespace_context=()","rexml::light::node#namespace_of()","rexml::functions::namespace_uri()","rexml::attributes#namespaces()","rexml::element#namespaces()","rexml::parsers::xpathparser#namespaces=()","rexml::xpathparser#namespaces=()","rexml::light::node#namesplit()","bigdecimal#nan?()","float#nan?()","psych::visitors::depthfirst#nary()","ipaddr#native()","net::imap::digestmd5authenticator#nc()","rss::atom::feed::entry::content#need_base64_encode?()","rss::element#need_base64_encode?()","rss::element::need_initialize_variables()","rss::maker::base::need_initialize_variables()","rinda::tuplespace#need_keeper?()","rss::atom::commonmodel::need_parent?()","rss::element::need_parent?()","rexml::parsers::baseparser#need_source_encoding_update?()","gem::needs()","float#negative?()","numeric#negative?()","rational#negative?()","prettyprint#nest()","module::nesting()","socket::ifaddr#netmask()","acl::new()","acl::aclentry::new()","acl::acllist::new()","addrinfo::new()","array::new()","basicobject::new()","benchmark::tms::new()","bigdecimal::new()","cgi::new()","cgi::cookie::new()","cgi::session::new()","cgi::session::filestore::new()","cgi::session::memorystore::new()","cgi::session::nullstore::new()","cgi::session::pstore::new()","csv::new()","csv::row::new()","csv::table::new()","class::new()","class#new()","conditionvariable::new()","dbm::new()","drb::drbarray::new()","drb::drbobject::new()","drb::drbobject::new()","drb::drbremoteerror::new()","drb::drbsslsocket::new()","drb::drbsslsocket::sslconfig::new()","drb::drbserver::new()","drb::drbunknown::new()","drb::drbunknownerror::new()","drb::extserv::new()","drb::extservmanager::new()","drb::gw::new()","drb::timeridconv::new()","date::new()","datetime::new()","delegator::new()","digest::instance#new()","dir::new()","erb::new()","encoding::converter::new()","enumerator::new()","enumerator::lazy::new()","exception::new()","fiddle::cstructentity::new()","fiddle::closure::new()","fiddle::closure::blockcaller::new()","fiddle::compositehandler::new()","fiddle::function::new()","fiddle::handle::new()","fiddle::pointer::new()","file::new()","file::stat::new()","gdbm::new()","gem::availableset::new()","gem::basicspecification::new()","gem::command::new()","gem::commandmanager::new()","gem::commands::buildcommand::new()","gem::commands::certcommand::new()","gem::commands::checkcommand::new()","gem::commands::cleanupcommand::new()","gem::commands::contentscommand::new()","gem::commands::dependencycommand::new()","gem::commands::environmentcommand::new()","gem::commands::fetchcommand::new()","gem::commands::generateindexcommand::new()","gem::commands::helpcommand::new()","gem::commands::installcommand::new()","gem::commands::listcommand::new()","gem::commands::lockcommand::new()","gem::commands::mirrorcommand::new()","gem::commands::opencommand::new()","gem::commands::outdatedcommand::new()","gem::commands::ownercommand::new()","gem::commands::pristinecommand::new()","gem::commands::pushcommand::new()","gem::commands::querycommand::new()","gem::commands::rdoccommand::new()","gem::commands::searchcommand::new()","gem::commands::servercommand::new()","gem::commands::setupcommand::new()","gem::commands::sourcescommand::new()","gem::commands::specificationcommand::new()","gem::commands::stalecommand::new()","gem::commands::uninstallcommand::new()","gem::commands::unpackcommand::new()","gem::commands::updatecommand::new()","gem::commands::whichcommand::new()","gem::commands::yankcommand::new()","gem::configfile::new()","gem::conflicterror::new()","gem::consoleui::new()","gem::dependency::new()","gem::dependencyinstaller::new()","gem::dependencylist::new()","gem::dependencyresolutionerror::new()","gem::doctor::new()","gem::ext::builder::new()","gem::fakefetcher::new()","gem::filepermissionerror::new()","gem::gemrunner::new()","gem::impossibledependencieserror::new()","gem::indexer::new()","gem::installer::new()","gem::installer::fakepackage::new()","gem::list::new()","gem::missingspecerror::new()","gem::missingspecversionerror::new()","gem::mockgemui::new()","gem::mockgemui::inputeoferror::new()","gem::mockgemui::termerror::new()","gem::nametuple::new()","gem::package::new()","gem::package::digestio::new()","gem::package::formaterror::new()","gem::package::old::new()","gem::package::patherror::new()","gem::package::tarheader::new()","gem::package::tarreader::new()","gem::package::tarreader::new()","gem::package::tarreader::entry::new()","gem::package::tarwriter::new()","gem::package::tarwriter::new()","gem::package::tarwriter::boundedstream::new()","gem::package::tarwriter::restrictedstream::new()","gem::packagetask::new()","gem::pathsupport::new()","gem::platform::new()","gem::platformmismatch::new()","gem::remotefetcher::new()","gem::remotefetcher::fetcherror::new()","gem::request::new()","gem::requestset::new()","gem::requestset::gemdependencyapi::new()","gem::requestset::lockfile::new()","gem::requestset::lockfile::parseerror::new()","gem::requestset::lockfile::parser::new()","gem::requestset::lockfile::tokenizer::new()","gem::requirement::new()","gem::resolver::new()","gem::resolver::apiset::new()","gem::resolver::apispecification::new()","gem::resolver::activationrequest::new()","gem::resolver::bestset::new()","gem::resolver::composedset::new()","gem::resolver::conflict::new()","gem::resolver::dependencyrequest::new()","gem::resolver::indexspecification::new()","gem::resolver::installerset::new()","gem::resolver::lockset::new()","gem::resolver::lockspecification::new()","gem::resolver::molinillo::circulardependencyerror::new()","gem::resolver::molinillo::dependencygraph::new()","gem::resolver::molinillo::dependencygraph::addedgenocircular::new()","gem::resolver::molinillo::dependencygraph::deleteedge::new()","gem::resolver::molinillo::dependencygraph::detachvertexnamed::new()","gem::resolver::molinillo::dependencygraph::log::new()","gem::resolver::molinillo::dependencygraph::tag::new()","gem::resolver::molinillo::dependencygraph::vertex::new()","gem::resolver::molinillo::nosuchdependencyerror::new()","gem::resolver::molinillo::resolver::new()","gem::resolver::molinillo::resolver::resolution::new()","gem::resolver::molinillo::versionconflict::new()","gem::resolver::requirementlist::new()","gem::resolver::sourceset::new()","gem::resolver::specspecification::new()","gem::resolver::specification::new()","gem::resolver::stats::new()","gem::security::policy::new()","gem::security::signer::new()","gem::security::trustdir::new()","gem::server::new()","gem::silentui::new()","gem::source::new()","gem::source::git::new()","gem::source::lock::new()","gem::source::specificfile::new()","gem::source::vendor::new()","gem::sourcefetchproblem::new()","gem::sourcelist::new()","gem::specfetcher::new()","gem::specificgemnotfoundexception::new()","gem::specification::new()","gem::streamui::new()","gem::streamui::silentdownloadreporter::new()","gem::streamui::silentprogressreporter::new()","gem::streamui::simpleprogressreporter::new()","gem::streamui::verbosedownloadreporter::new()","gem::streamui::verboseprogressreporter::new()","gem::systemexitexception::new()","gem::testcase::staticset::new()","gem::uninstaller::new()","gem::unsatisfiabledependencyerror::new()","gem::uriformatter::new()","gem::version::new()","getoptlong::new()","hash::new()","io::new()","ipaddr::new()","irb::context::new()","irb::fileinputmethod::new()","irb::frame::new()","irb::inputmethod::new()","irb::inspector::new()","irb::irb::new()","irb::jobmanager::new()","irb::locale::new()","irb::notifier::abstractnotifier::new()","irb::notifier::compositenotifier::new()","irb::notifier::levelednotifier::new()","irb::notifier::nomsgnotifier::new()","irb::readlineinputmethod::new()","irb::stdioinputmethod::new()","irb::workspace::new()","logger::new()","logger::formatter::new()","logger::logdevice::new()","matrix::new()","matrix::eigenvaluedecomposition::new()","matrix::lupdecomposition::new()","module::new()","monitormixin::new()","monitormixin::conditionvariable::new()","nameerror::new()","net::ftp::new()","net::ftp::mlsxentry::new()","net::http::new()","net::http::new()","net::httpgenericrequest::new()","net::httprequest::new()","net::imap::new()","net::imap::crammd5authenticator::new()","net::imap::digestmd5authenticator::new()","net::imap::loginauthenticator::new()","net::imap::plainauthenticator::new()","net::imap::responseerror::new()","net::internetmessageio::writeadapter::new()","net::pop3::new()","net::smtp::new()","net::smtp::response::new()","nomethoderror::new()","oleproperty::new()","openssl::asn1::asn1data::new()","openssl::asn1::constructive::new()","openssl::asn1::primitive::new()","openssl::bn::new()","openssl::buffering::new()","openssl::cipher::new()","openssl::config::new()","openssl::digest::new()","openssl::hmac::new()","openssl::netscape::spki::new()","openssl::ocsp::basicresponse::new()","openssl::ocsp::certificateid::new()","openssl::ocsp::request::new()","openssl::ocsp::response::new()","openssl::ocsp::singleresponse::new()","openssl::pkcs12::new()","openssl::pkcs7::new()","openssl::pkcs7::recipientinfo::new()","openssl::pkcs7::signerinfo::new()","openssl::pkey::dh::new()","openssl::pkey::dsa::new()","openssl::pkey::ec::new()","openssl::pkey::ec::group::new()","openssl::pkey::ec::point::new()","openssl::pkey::pkey::new()","openssl::pkey::rsa::new()","openssl::ssl::sslcontext::new()","openssl::ssl::sslserver::new()","openssl::ssl::sslsocket::new()","openssl::ssl::session::new()","openssl::x509::attribute::new()","openssl::x509::crl::new()","openssl::x509::certificate::new()","openssl::x509::extension::new()","openssl::x509::extensionfactory::new()","openssl::x509::name::new()","openssl::x509::request::new()","openssl::x509::revoked::new()","openssl::x509::store::new()","openssl::x509::storecontext::new()","openstruct::new()","openuri::httperror::new()","openuri::httpredirect::new()","optionparser#new()","optionparser::new()","optionparser::arguable::new()","optionparser::list::new()","optionparser::parseerror::new()","optionparser::switch::new()","pstore::new()","pathname::new()","prettyprint::new()","prettyprint::singleline::new()","prime::eratosthenesgenerator::new()","prime::eratosthenessieve::new()","prime::generator23::new()","prime::pseudoprimegenerator::new()","prime::trialdivisiongenerator::new()","proc::new()","psych::classloader::restricted::new()","psych::coder::new()","psych::disallowedclass::new()","psych::handler::dumperoptions::new()","psych::handlers::recorder::new()","psych::nodes::alias::new()","psych::nodes::document::new()","psych::nodes::mapping::new()","psych::nodes::node::new()","psych::nodes::scalar::new()","psych::nodes::sequence::new()","psych::nodes::stream::new()","psych::parser::new()","psych::scalarscanner::new()","psych::streaming::classmethods#new()","psych::syntaxerror::new()","psych::treebuilder::new()","psych::visitors::depthfirst::new()","psych::visitors::emitter::new()","psych::visitors::toruby::new()","psych::visitors::yamltree::new()","psych::visitors::yamltree::new()","queue::new()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::comment::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::markdown::new()","rdoc::markup::new()","rdoc::methodattr::new()","rdoc::mixin::new()","rdoc::parser::new()","rdoc::rdoc::new()","rdoc::require::new()","rdoc::rubylex::new()","rdoc::rubygemshook::new()","rdoc::rubygemshook::new()","rdoc::servlet::new()","rdoc::stats::new()","rdoc::store::new()","rdoc::store::missingfileerror::new()","rdoc::task::new()","rdoc::task::new()","rdoc::tomdoc::new()","rdoc::toplevel::new()","rexml::attlistdecl::new()","rexml::attribute::new()","rexml::attributes::new()","rexml::cdata::new()","rexml::child::new()","rexml::comment::new()","rexml::dtd::elementdecl::new()","rexml::dtd::entitydecl::new()","rexml::dtd::notationdecl::new()","rexml::declaration::new()","rexml::doctype::new()","rexml::document::new()","rexml::element::new()","rexml::elementdecl::new()","rexml::elements::new()","rexml::entity::new()","rexml::externalentity::new()","rexml::formatters::default::new()","rexml::formatters::pretty::new()","rexml::formatters::transitive::new()","rexml::iosource::new()","rexml::instruction::new()","rexml::light::node::new()","rexml::notationdecl::new()","rexml::output::new()","rexml::parent::new()","rexml::parseexception::new()","rexml::parsers::baseparser::new()","rexml::parsers::lightparser::new()","rexml::parsers::pullevent::new()","rexml::parsers::pullparser::new()","rexml::parsers::sax2parser::new()","rexml::parsers::streamparser::new()","rexml::parsers::treeparser::new()","rexml::parsers::ultralightparser::new()","rexml::source::new()","rexml::syncenumerator::new()","rexml::text::new()","rexml::undefinednamespaceexception::new()","rexml::validation::choice::new()","rexml::validation::event::new()","rexml::validation::interleave::new()","rexml::validation::oneormore::new()","rexml::validation::ref::new()","rexml::validation::relaxng::new()","rexml::validation::state::new()","rexml::validation::validationexception::new()","rexml::xmldecl::new()","rexml::xpathparser::new()","rss::atom::entry::new()","rss::atom::feed::new()","rss::baseparser::new()","rss::conversionerror::new()","rss::converter::new()","rss::element::new()","rss::ituneschannelmodel::itunescategory::new()","rss::ituneschannelmodel::itunesimage::new()","rss::ituneschannelmodel::itunesowner::new()","rss::itunesitemmodel::itunesduration::new()","rss::imagefaviconmodel::imagefavicon::new()","rss::imageitemmodel::imageitem::new()","rss::listenermixin::new()","rss::maker::atom::entry::new()","rss::maker::atom::feed::new()","rss::maker::base::new()","rss::maker::itemsbase::new()","rss::maker::rss09::new()","rss::maker::rss091::new()","rss::maker::rss092::new()","rss::maker::rss10::new()","rss::maker::rss20::new()","rss::maker::rssbase::new()","rss::missingattributeerror::new()","rss::missingtagerror::new()","rss::nserror::new()","rss::notavailablevalueerror::new()","rss::notexpectedtagerror::new()","rss::notseterror::new()","rss::notvalidxmlparser::new()","rss::notwellformederror::new()","rss::overlappedprefixerror::new()","rss::parser::new()","rss::rdf::new()","rss::rdf::bag::new()","rss::rdf::bag::new()","rss::rdf::channel::new()","rss::rdf::channel::image::new()","rss::rdf::channel::items::new()","rss::rdf::channel::textinput::new()","rss::rdf::image::new()","rss::rdf::item::new()","rss::rdf::li::new()","rss::rdf::li::new()","rss::rdf::li::new()","rss::rdf::seq::new()","rss::rdf::seq::new()","rss::rdf::textinput::new()","rss::rootelementmixin::new()","rss::rss::new()","rss::rss::channel::cloud::new()","rss::rss::channel::image::new()","rss::rss::channel::item::category::new()","rss::rss::channel::item::enclosure::new()","rss::rss::channel::item::guid::new()","rss::rss::channel::item::source::new()","rss::rss::channel::skipdays::day::new()","rss::rss::channel::skiphours::hour::new()","rss::rss::channel::textinput::new()","rss::taxonomytopicmodel::taxonomytopic::new()","rss::taxonomytopicsmodel::taxonomytopics::new()","rss::toomuchtagerror::new()","rss::unknownconversionmethoderror::new()","rss::unknowntagerror::new()","rss::unsupportedmakerversionerror::new()","rss::xml::element::new()","rss::xmlparsernotfound::new()","rss::xmlstylesheet::new()","rss::xmlstylesheetmixin::new()","random::new()","range::new()","regexp::new()","resolv::new()","resolv::dns::new()","resolv::dns::resource::domainname::new()","resolv::dns::resource::generic::new()","resolv::dns::resource::hinfo::new()","resolv::dns::resource::in::a::new()","resolv::dns::resource::in::aaaa::new()","resolv::dns::resource::in::srv::new()","resolv::dns::resource::in::wks::new()","resolv::dns::resource::loc::new()","resolv::dns::resource::minfo::new()","resolv::dns::resource::mx::new()","resolv::dns::resource::soa::new()","resolv::dns::resource::txt::new()","resolv::hosts::new()","resolv::loc::alt::new()","resolv::loc::coord::new()","resolv::loc::size::new()","resolv::mdns::new()","rinda::drbobjecttemplate::new()","rinda::notifytemplateentry::new()","rinda::ringfinger::new()","rinda::ringprovider::new()","rinda::ringserver::new()","rinda::simplerenewer::new()","rinda::tuple::new()","rinda::tuplebag::tuplebin::new()","rinda::tupleentry::new()","rinda::tuplespace::new()","rinda::tuplespaceproxy::new()","rinda::waittemplateentry::new()","ripper::new()","ripper::filter::new()","rubyvm::instructionsequence::new()","sdbm::new()","sockssocket::new()","sockssocket::new()","set::new()","shell::new()","shell::appendfile::new()","shell::appendio::new()","shell::cat::new()","shell::commandprocessor::new()","shell::concat::new()","shell::echo::new()","shell::filter::new()","shell::glob::new()","shell::processcontroller::new()","shell::systemcommand::new()","shell::tee::new()","shell::void::new()","signalexception::new()","sizedqueue::new()","socket::new()","socket::ancillarydata::new()","socket::option::new()","socket::udpsource::new()","string::new()","stringio::new()","stringscanner::new()","struct::new()","sync_m::new()","sync_m::new()","syntaxerror::new()","syslog::logger::new()","systemcallerror::new()","systemexit::new()","tcpserver::new()","tcpsocket::new()","tcpsocket::new()","tempio::new()","tempfile::new()","thread::new()","thread::mutex::new()","threadswait::new()","threadswait::new()","time::new()","tracepoint::new()","udpsocket::new()","unixserver::new()","unixsocket::new()","uri::ftp::new()","uri::generic::new()","uri::ldap::new()","uri::mailto::new()","uri::rfc2396_parser::new()","uncaughtthrowerror::new()","vector::new()","webrick::basiclog::new()","webrick::cgi::new()","webrick::cookie::new()","webrick::genericserver::new()","webrick::httpauth::basicauth::new()","webrick::httpauth::digestauth::new()","webrick::httpauth::htdigest::new()","webrick::httpauth::htgroup::new()","webrick::httpauth::htpasswd::new()","webrick::httpproxyserver::new()","webrick::httprequest::new()","webrick::httpresponse::new()","webrick::httpserver::new()","webrick::httpservlet::abstractservlet::new()","webrick::httpservlet::cgihandler::new()","webrick::httpservlet::defaultfilehandler::new()","webrick::httpservlet::erbhandler::new()","webrick::httpservlet::filehandler::new()","webrick::httputils::formdata::new()","webrick::httpversion::new()","webrick::log::new()","webrick::utils::timeouthandler::new()","win32ole::new()","win32ole_event::new()","win32ole_method::new()","win32ole_param::new()","win32ole_record::new()","win32ole_type::new()","win32ole_typelib::new()","win32ole_variant::new()","weakref::new()","xmp::new()","xmp::stringinputmethod::new()","yaml::store::new()","zlib::deflate::new()","zlib::gzipreader::new()","zlib::gzipwriter::new()","zlib::inflate::new()","irb::methodextender#new_alias_name()","monitormixin#new_cond()","gem::testcase#new_default_spec()","net::smtp#new_internet_message_io()","ipaddr::new_ntoh()","date#new_offset()","random::new_seed()","gem::resolver::molinillo::resolver::resolution#new_spec_satisfied?()","date#new_start()","erb#new_toplevel()","drb::drbobject::new_with()","drb::drbobject::new_with()","drb::drbobject::new_with_uri()","drb::drbobject::new_with_uri()","rss::utils#new_with_value_if_need()","net::http::newobj()","date#next()","enumerator#next()","integer#next()","integer#next()","prime::eratosthenesgenerator#next()","prime::generator23#next()","prime::pseudoprimegenerator#next()","prime::trialdivisiongenerator#next()","rexml::validation::choice#next()","rexml::validation::interleave#next()","rexml::validation::oneormore#next()","rexml::validation::optional#next()","rexml::validation::state#next()","rexml::validation::zeroormore#next()","string#next()","symbol#next()","string#next!()","gem::resolver::requirementlist#next5()","rexml::validation::interleave#next_current()","date#next_day()","rexml::element#next_element()","float#next_float()","date#next_month()","logger::period#next_rotate_time()","rexml::child#next_sibling=()","rexml::node#next_sibling_node()","rexml::xpathparser#next_sibling_node()","gem::requestset::lockfile::tokenizer#next_token()","racc::parser#next_token()","openssl::ocsp::singleresponse#next_update()","openssl::x509::crl#next_update()","openssl::x509::crl#next_update=()","enumerator#next_values()","threadswait#next_wait()","threadswait#next_wait()","date#next_year()","unicodenormalize::nfc_one()","unicodenormalize::nfd_one()","nilclass#nil?()","object#nil?()","nkf::nkf()","file::stat#nlink()","newton#nlsolve()","net::ftp#nlst()","gem::testcase#nmake_found?()","rexml::attlistdecl#node_type()","rexml::attribute#node_type()","rexml::comment#node_type()","rexml::doctype#node_type()","rexml::document#node_type()","rexml::element#node_type()","rexml::instruction#node_type()","rexml::light::node#node_type()","rexml::text#node_type()","rexml::xmldecl#node_type()","gem::mockgemui::tty#noecho()","io#noecho()","rdoc::classmodule#non_aliases()","gem::specification::non_nil_attributes()","io#nonblock()","io#nonblock=()","io#nonblock?()","enumerable#none?()","gem::requirement#none?()","bigdecimal#nonzero?()","numeric#nonzero?()","net::ftp#noop()","net::imap#noop()","rexml::xpathparser#norm()","vector#norm()","matrix#normal?()","gem::specification#normalize()","gem::uriformatter#normalize()","rdoc::comment#normalize()","rexml::parsers::baseparser#normalize()","rexml::text::normalize()","rss::maker::itemsbase#normalize()","uri::generic#normalize()","unicodenormalize::normalize()","vector#normalize()","uri::generic#normalize!()","rdoc::text#normalize_comment()","webrick::httputils::normalize_path()","webrick::httputils#normalize_path()","rss::parser#normalize_rss()","net::imap#normalize_searching_criteria()","rexml::functions::normalize_space()","gem::specification::normalize_yaml_input()","rexml::entity#normalized()","unicodenormalize::normalized?()","rdoc::rdoc#normalized_file_list()","rexml::functions::not()","openssl::x509::certificate#not_after()","openssl::x509::certificate#not_after=()","openssl::x509::certificate#not_before()","openssl::x509::certificate#not_before=()","rdoc::servlet#not_found()","rss::rss::channel#not_need_to_call_setup_maker_variables()","rss::setupmaker#not_need_to_call_setup_maker_variables()","rss::maker::atom::entry::channel::generator::not_set_name()","rss::maker::atom::feed::channel::categories::category::not_set_name()","rss::maker::atom::feed::channel::generator::not_set_name()","rss::maker::atom::feed::channel::links::link::not_set_name()","rss::maker::atom::feed::items::item::categories::category::not_set_name()","rss::maker::atom::feed::items::item::links::link::not_set_name()","rss::maker::atom::feed::items::item::source::categories::category::not_set_name()","rss::maker::atom::feed::items::item::source::generator::not_set_name()","rss::maker::atom::feed::items::item::source::links::link::not_set_name()","rss::maker::atom::feed::items::item::source::logo::not_set_name()","rss::maker::atom::entry::items::item#not_set_required_variables()","rss::maker::atom::feed::channel#not_set_required_variables()","rss::maker::atom::feed::items::item#not_set_required_variables()","rss::maker::base#not_set_required_variables()","rss::maker::rss09::channel#not_set_required_variables()","rss::maker::rss09::items::item#not_set_required_variables()","rss::maker::rss10::channel#not_set_required_variables()","rss::maker::rss10::items::item#not_set_required_variables()","rss::maker::rss20::items::item#not_set_required_variables()","rexml::doctype#notation()","rexml::sax2listener#notationdecl()","rexml::streamlistener#notationdecl()","rexml::parsers::pullevent#notationdecl?()","rexml::doctype#notations()","rdoc::markdown#note()","rdoc::markdown#note_for()","rdoc::markdown#notes()","rinda::notifytemplateentry#notify()","rinda::tuplespace#notify()","rinda::tuplespaceproxy#notify()","shell::notify()","shell::commandprocessor#notify()","shell::systemcommand#notify()","irb::notifier::abstractnotifier#notify?()","irb::notifier::levelednotifier#notify?()","irb::notifier::nomsgnotifier#notify?()","rinda::tuplespace#notify_event()","drb::drbobservable#notify_observers()","observable#notify_observers()","optionparser#notwice()","datetime::now()","time::now()","rexml::xmldecl#nowrite()","openssl::ssl::sslsocket#npn_protocol()","etc::nprocessors()","io#nread()","rss::rootelementmixin#ns_declarations()","time#nsec()","ipaddr::ntop()","gem::nametuple::null()","fiddle::pointer#null?()","openssl::bn#num_bits()","openssl::bn#num_bytes()","queue#num_waiting()","sizedqueue#num_waiting()","rexml::functions::number()","complex#numerator()","float#numerator()","integer#numerator()","integer#numerator()","numeric#numerator()","rational#numerator()","pp::ppmethods#object_address_group()","rdoc::toplevel#object_class()","pp::ppmethods#object_group()","object#object_id()","psych::object_maker()","gem::package::tarheader#oct()","string#oct()","integer#odd?()","integer#odd?()","openssl::bn#odd?()","rubyvm::instructionsequence::of()","tracer::off()","win32ole_event#off_event()","date#offset()","matchdata#offset()","win32ole_method#offset_vtbl()","io#oflush()","openssl::asn1::objectid#oid()","openssl::x509::attribute#oid()","openssl::x509::extension#oid()","openssl::x509::attribute#oid=()","openssl::x509::extension#oid=()","gem::dependencylist#ok?()","gem::dependencylist#ok_to_remove?()","rexml::xmldecl#old_enc=()","win32ole#ole_activex_initialize()","win32ole_type::ole_classes()","win32ole_typelib#ole_classes()","win32ole#ole_free()","win32ole::ole_free()","win32ole#ole_func_methods()","win32ole#ole_get_methods()","win32ole_record#ole_instance_variable_get()","win32ole_record#ole_instance_variable_set()","win32ole#ole_method()","win32ole#ole_method_help()","win32ole#ole_methods()","win32ole_type#ole_methods()","win32ole#ole_obj_help()","win32ole#ole_put_methods()","win32ole#ole_query_interface()","win32ole::ole_reference_count()","win32ole#ole_respond_to?()","win32ole::ole_show_help()","win32ole#ole_type()","win32ole_param#ole_type()","win32ole_type#ole_type()","win32ole_variable#ole_type()","win32ole_param#ole_type_detail()","win32ole_variable#ole_type_detail()","win32ole#ole_typelib()","win32ole_type#ole_typelib()","win32ole_typelib#ole_types()","optionparser#on()","tracer::on()","rss::xmlscanlistener#on_attr_charref()","rss::xmlscanlistener#on_attr_charref_hex()","rss::xmlscanlistener#on_attr_entityref()","rss::xmlscanlistener#on_attr_value()","rss::xmlscanlistener#on_attribute()","rss::xmlscanlistener#on_charref()","rss::xmlscanlistener#on_charref_hex()","net::http#on_connect()","openssl::pkey::ec::point#on_curve?()","ripper::filter#on_default()","rss::xmlscanlistener#on_entityref()","racc::parser#on_error()","rss::xmlscanlistener#on_etag()","win32ole_event#on_event()","win32ole_event#on_event_with_outargs()","optionparser#on_head()","rss::xmlscanlistener#on_stag()","rss::xmlscanlistener#on_stag_end()","rss::xmlscanlistener#on_stag_end_empty()","optionparser#on_tail()","pstore#on_windows?()","rss::xmlscanlistener#on_xmldecl_encoding()","rss::xmlscanlistener#on_xmldecl_end()","rss::xmlscanlistener#on_xmldecl_standalone()","rss::xmlscanlistener#on_xmldecl_version()","enumerable#one?()","openssl::bn#one?()","rdoc::context#ongoing_visibility=()","uri::generic#opaque=()","csv::open()","dbm::open()","drb::drbprotocol::open()","drb::drbprotocol#open()","drb::drbsslsocket::open()","dir::open()","file::open()","gdbm::open()","io::open()","kernel::open()","kernel#open()","net::ftp::open()","openuri::openread#open()","pty::open()","pathname#open()","resolv::dns::open()","sdbm::open()","shell::commandprocessor#open()","stringio::open()","syslog::open()","tempfile::open()","tempfile#open()","zlib::gzipreader::open()","zlib::gzipwriter::open()","syslog::open!()","pstore#open_and_lock_file()","gem::commands::opencommand#open_editor()","gem::commands::opencommand#open_gem()","logger::logdevice#open_logfile()","net::smtp#open_message_stream()","drb::drbprotocol#open_server()","drb::drbprotocol::open_server()","drb::drbsslsocket::open_server()","gem::fakefetcher#open_uri_or_path()","kernel::open_uri_original_open()","kernel#open_uri_original_open()","pathname#opendir()","syslog::opened?()","rdoc::task#option_list()","rdoc::task#option_list()","win32ole_param#optional?()","fileutils::options()","net::http#options()","openssl::ssl::sslcontext#options()","optionparser::arguable#options()","rdoc::codeobject#options()","regexp#options()","syslog::options()","openssl::ssl::sslcontext#options=()","optionparser::arguable#options=()","fileutils::options_of()","socket::option#optname()","integer#ord()","integer#ord()","string#ord()","openssl::pkey::ec::group#order()","optionparser#order()","optionparser#order!()","optionparser::arguable#order!()","getoptlong#ordering=()","date::ordinal()","datetime::ordinal()","rdoc::markdown#orig_initialize()","zlib::gzipfile#orig_name()","zlib::gzipwriter#orig_name=()","method#original_name()","unboundmethod#original_name()","matrix#orthogonal?()","zlib::gzipfile#os_code()","rss::maker::base::other_elements()","gem::resolver::activationrequest#others_possible?()","cgi#out()","shell::commandprocessor#out()","rss::atom::feed::entry::content#out_of_line?()","rss::maker::itemsbase::itembase::contentbase#out_of_line?()","gem::specification::outdated()","gem::specification::outdated_and_latest_version()","gem::mockgemui#output()","gem::resolver#output()","gem::resolver::molinillo::ui#output()","readline::output=()","win32ole_param#output?()","rss::rootelementmixin#output_encoding=()","rdoc::rdoc#output_flag_file()","rdoc::methodattr#output_name()","gem::commands::querycommand#output_query_results()","gem::commands::querycommand#output_versions()","file::owned?()","file::stat#owned?()","filetest#owned?()","pathname#owned?()","thread::mutex#owned?()","method#owner()","unboundmethod#owner()","kernel#p()","matrix::lupdecomposition#p()","array#pack()","socket::pack_sockaddr_in()","socket::pack_sockaddr_un()","openssl::cipher#padding=()","rdoc::store#page()","rdoc::store#page_file()","rdoc::toplevel#page_name()","socket::pair()","unixsocket::pair()","rdoc::testcase#para()","rdoc::markdown#paragraph()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","method#parameters()","proc#parameters()","unboundmethod#parameters()","openssl::pkey::dh#params()","openssl::pkey::dsa#params()","openssl::pkey::rsa#params()","win32ole_method#params()","zlib::deflate#params()","cgi::queryextension#params=()","openssl::pkey::dh#params_ok?()","gem::indexer#paranoid()","gem::resolver::activationrequest#parent()","pathname#parent()","rdoc::codeobject#parent()","rexml::light::node#parent()","rexml::child#parent=()","rexml::light::node#parent=()","rexml::text#parent=()","rexml::node#parent?()","rexml::parent#parent?()","rdoc::codeobject#parent_file_name()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","gem::resolver::molinillo::resolver::resolution#parent_of()","cgi::parse()","cgi::cookie::parse()","csv::parse()","date::parse()","datetime::parse()","gem::requestset::lockfile::parser#parse()","gem::requirement::parse()","json#parse()","net::smtp::response::parse()","openssl::config::parse()","openssl::x509::name::parse()","optionparser#parse()","optionparser::switch::noargument#parse()","optionparser::switch::optionalargument#parse()","optionparser::switch::placedargument#parse()","optionparser::switch::requiredargument#parse()","psych::parse()","rdoc::classmodule#parse()","rdoc::comment#parse()","rdoc::markdown::parse()","rdoc::markdown#parse()","rdoc::markup::parse()","rdoc::options#parse()","rdoc::rd::parse()","rdoc::text#parse()","rdoc::tomdoc::parse()","rexml::dtd::parser::parse()","rexml::parsers::lightparser#parse()","rexml::parsers::sax2parser#parse()","rexml::parsers::streamparser#parse()","rexml::parsers::treeparser#parse()","rexml::parsers::ultralightparser#parse()","rexml::parsers::xpathparser#parse()","rexml::xpathparser#parse()","rss::baseparser#parse()","rss::itunesitemmodel::itunesduration::parse()","rss::parser::parse()","rss::utils::csv#parse()","rss::utils::yescleanother#parse()","rss::utils::yesother#parse()","ripper#parse()","ripper::parse()","ripper::filter#parse()","time::parse()","uri::parse()","uri::rfc2396_parser#parse()","webrick::cookie::parse()","webrick::httprequest#parse()","json#parse!()","optionparser#parse!()","optionparser::arguable#parse!()","optionparser::switch#parse_arg()","rexml::parsers::xpathparser#parse_args()","rexml::quickpath::parse_args()","fiddle::importer#parse_bind_options()","openssl::config::parse_config()","openssl::config::parse_config_lines()","fiddle::cparser#parse_ctype()","uri::ldap#parse_dn()","rdoc::rdoc#parse_dot_doc_file()","psych::parse_file()","rdoc::rdoc#parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","webrick::httputils::parse_form_data()","webrick::httputils#parse_form_data()","webrick::httputils::parse_header()","webrick::httputils#parse_header()","csv#parse_headers()","rexml::dtd::parser::parse_helper()","psych::scalarscanner#parse_int()","csv::parse_line()","gem::testcase#parse_make_command_line()","net::ftp#parse_mlsx_entry()","openssl::x509::name::parse_openssl()","net::ftp#parse_pasv_ipv4_host()","net::ftp#parse_pasv_ipv6_host()","net::ftp#parse_pasv_port()","rss::listenermixin#parse_pi_content()","irb::outputmethod#parse_printf_format()","uri::ldap#parse_query()","webrick::httputils#parse_query()","webrick::httputils::parse_query()","webrick::httputils::parse_qvalues()","webrick::httputils#parse_qvalues()","webrick::httputils::parse_range_header()","webrick::httputils#parse_range_header()","openssl::x509::name::parse_rfc2253()","webrick::cookie::parse_set_cookie()","webrick::cookie::parse_set_cookies()","fiddle::cparser#parse_signature()","rexml::dtd::entitydecl::parse_source()","rexml::dtd::notationdecl::parse_source()","psych::parse_stream()","rexml::document::parse_stream()","fiddle::cparser#parse_struct_signature()","psych::scalarscanner#parse_time()","gem::command#parser()","psych::parser()","uri::generic#parser()","enumerable#partition()","string#partition()","thread::pass()","etc::passwd()","uri::generic#password()","uri::generic#password=()","cgi::htmlextension#password_field()","net::http#patch()","argf#path()","dir#path()","file::path()","file#path()","gem::path()","pstore#path()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::toplevel#path()","rubyvm::instructionsequence#path()","tempfile#path()","thread::backtrace::location#path()","tracepoint#path()","unixsocket#path()","uri::ftp#path()","win32ole_typelib#path()","uri::generic#path=()","gem::uninstaller#path_ok?()","gem::path_separator()","gem::resolver::molinillo::dependencygraph::vertex#path_to?()","io#pathconf()","gem::paths()","gem::paths=()","optionparser::switch::pattern()","optionparser::switch::noargument::pattern()","openssl::pkcs5::pbkdf2_hmac()","openssl::pkcs5::pbkdf2_hmac_sha1()","enumerator#peek()","gem::requestset::lockfile::tokenizer#peek()","rexml::parsers::baseparser#peek()","rexml::parsers::pullparser#peek()","stringscanner#peek()","coverage::peek_result()","enumerator#peek_values()","stringscanner#peep()","net::http#peer_cert()","openssl::ssl::sslsocket#peer_cert()","openssl::ssl::sslsocket#peer_cert_chain()","ipsocket#peeraddr()","openssl::ssl::socketforwarder#peeraddr()","unixsocket#peeraddr()","rdoc::markdown#peg_parse()","gem::commands::setupcommand#pem_files_in()","openssl::ssl::sslsocket#pending()","thread::pending_interrupt?()","thread#pending_interrupt?()","rdoc::stats#percent_doc()","rss::maker::itemsbase::itembase::guidbase#permanent_link=()","rss::maker::itemsbase::itembase::guidbase#permanent_link?()","array#permutation()","matrix#permutation?()","optionparser#permute()","optionparser#permute!()","optionparser::arguable#permute!()","addrinfo#pfamily()","complex#phase()","float#phase()","numeric#phase()","gem::availableset#pick_best!()","io#pid()","process::pid()","process::status#pid()","process::waiter#pid()","stringio#pid()","gem::requestset::gemdependencyapi#pin_gem_source()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","pathname#pipe?()","open3#pipeline()","open3::pipeline()","open3#pipeline_r()","open3::pipeline_r()","open3#pipeline_rw()","open3::pipeline_rw()","open3#pipeline_start()","open3::pipeline_start()","open3::pipeline_w()","open3#pipeline_w()","openssl::cipher#pkcs5_keyivgen()","makemakefile#pkg_config()","gem::basicspecification#platform()","gem::requestset::gemdependencyapi#platform()","gem::resolver::specspecification#platform()","gem::specification#platform()","gem::specification#platform=()","gem::platform_defaults()","gem::platforms()","gem::requestset::gemdependencyapi#platforms()","gem::platforms=()","rss::element::plural_forms()","readline::point()","readline::point=()","openssl::pkey::ec::group#point_conversion_form()","openssl::pkey::ec::group#point_conversion_form=()","stringscanner#pointer()","stringscanner#pointer=()","complex::polar()","complex#polar()","numeric#polar()","gem::remotefetcher#pools_for()","array#pop()","net::popmail#pop()","psych::treebuilder#pop()","queue#pop()","rinda::notifytemplateentry#pop()","sizedqueue#pop()","gem::resolver::molinillo::dependencygraph::log#pop!()","pp::ppmethods#pop_inspect_key()","gem::resolver::molinillo::dependencystate#pop_possibility_state()","rdoc::tokenstream#pop_token()","irb::context#pop_workspace()","shell#popd()","shell#popdir()","gem::util::popen()","io::popen()","open3::popen2()","open3#popen2()","open3#popen2e()","open3::popen2e()","open3#popen3()","open3::popen3()","cgi::htmlextension#popup_menu()","net::pop3#port()","webrick::httprequest#port()","uri::generic#port=()","argf#pos()","dir#pos()","gem::package::tarreader::entry#pos()","io#pos()","stringio#pos()","stringscanner#pos()","zlib::gzipreader#pos()","zlib::gzipwriter#pos()","argf#pos=()","dir#pos=()","io#pos=()","stringio#pos=()","stringscanner#pos=()","rexml::functions::position()","rexml::iosource#position()","rexml::parseexception#position()","rexml::parsers::baseparser#position()","rexml::source#position()","float#positive?()","numeric#positive?()","rational#positive?()","rss::basemodel#positive_integer_writer()","gem::resolver::molinillo::delegates::resolutionstate#possibilities()","gem::resolver::molinillo::resolver::resolution#possibility()","net::http#post()","net::http::post()","net::http#post2()","gem::post_build()","openssl::ssl::sslsocket#post_connection_check()","net::http::post_form()","gem::post_install()","matchdata#post_match()","stringscanner#post_match()","gem::post_reset()","gem::post_uninstall()","bigdecimal#power()","irb::notifier::abstractnotifier#pp()","irb::outputmethod#pp()","kernel::pp()","kernel#pp()","pp::pp()","pp::ppmethods#pp()","pp::ppmethods#pp_hash()","pp::ppmethods#pp_object()","process::ppid()","irb::notifier::abstractnotifier#ppx()","irb::outputmethod#ppx()","readline::pre_input_hook()","readline::pre_input_hook=()","gem::pre_install()","gem::installer#pre_install_checks()","matchdata#pre_match()","stringscanner#pre_match()","gem::pre_reset()","gem::pre_uninstall()","rexml::xpathparser#preceding()","rexml::xpathparser#preceding_node_of()","bigdecimal#precs()","integer#pred()","integer#pred()","gem::resolver::molinillo::dependencygraph::vertex#predecessors()","rexml::parsers::xpathparser#predicate()","rexml::quickpath::predicate()","rexml::xpathparser#predicate()","rexml::parsers::xpathparser#predicate_to_string()","gem::availableset#prefetch()","gem::resolver::apiset#prefetch()","gem::resolver::composedset#prefetch()","gem::resolver::gitset#prefetch()","gem::resolver::installerset#prefetch()","gem::resolver::set#prefetch()","gem::prefix()","rexml::attribute#prefix()","rexml::light::node#prefix()","rexml::light::node#prefix_of()","rexml::attributes#prefixes()","rexml::element#prefixes()","gem::list::prepend()","gem::list#prepend()","module#prepend()","optionparser::list#prepend()","string#prepend()","module#prepend_features()","module#prepended()","gem::resolver::composedset#prerelease=()","gem::resolver::installerset#prerelease=()","gem::dependency#prerelease?()","gem::nametuple#prerelease?()","gem::requirement#prerelease?()","gem::version#prerelease?()","gem::server#prerelease_specs()","io#pressed?()","cgi::util#pretty()","json#pretty_generate()","kernel#pretty_inspect()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","openssl::bn#pretty_print()","openssl::x509::certificate#pretty_print()","openssl::x509::name#pretty_print()","date#prev_day()","float#prev_float()","date#prev_month()","date#prev_year()","rexml::validation::state#previous=()","rexml::element#previous_element()","logger::period#previous_period_end()","rexml::child#previous_sibling=()","rexml::node#previous_sibling_node()","rinda::ringfinger::primary()","integer#prime?()","integer#prime?()","openssl::bn#prime?()","prime#prime?()","integer#prime_division()","integer#prime_division()","prime#prime_division()","openssl::bn#prime_fasttest?()","prime::trialdivision#primes()","prime::trialdivision#primes_so_far()","encoding::converter#primitive_convert()","encoding::converter#primitive_errinfo()","argf#print()","cgi#print()","io#print()","io::generic_writable#print()","irb::locale#print()","irb::notifier::abstractnotifier#print()","irb::outputmethod#print()","irb::stdiooutputmethod#print()","kernel#print()","net::internetmessageio::writeadapter#print()","openssl::buffering#print()","zlib::gzipwriter#print()","profiler__#print_profile()","irb::print_usage()","argf#printf()","io#printf()","io::generic_writable#printf()","irb::locale#printf()","irb::notifier::abstractnotifier#printf()","irb::outputmethod#printf()","kernel#printf()","net::internetmessageio::writeadapter#printf()","openssl::buffering#printf()","zlib::gzipwriter#printf()","irb::notifier::abstractnotifier#printn()","irb::outputmethod#printn()","thread#priority()","thread#priority=()","module#private()","openssl::pkey::dh#private?()","openssl::pkey::dsa#private?()","openssl::pkey::ec#private?()","openssl::pkey::rsa#private?()","nomethoderror#private_call?()","module#private_class_method()","module#private_constant()","openssl::pkey::rsa#private_decrypt()","openssl::pkey::rsa#private_encrypt()","module#private_instance_methods()","openssl::pkey::ec#private_key()","openssl::pkey::ec#private_key=()","openssl::pkey::ec#private_key?()","module#private_method_defined?()","object#private_methods()","kernel#proc()","net::httpresponse#procdest()","net::imap::crammd5authenticator#process()","net::imap::digestmd5authenticator#process()","net::imap::loginauthenticator#process()","net::imap::plainauthenticator#process()","gem::commandmanager#process_args()","gem::testcase::process_based_port()","gem::testcase#process_based_port()","rdoc::parser::process_directive()","gem::resolver::molinillo::resolver::resolution#process_topmost_state()","rss::rexmllikexmlparser#processinginstruction()","rexml::functions::processing_instruction()","rexml::sax2listener#processing_instruction()","array#product()","win32ole_type#progid()","win32ole_type::progids()","optionparser#program_name()","rexml::sax2listener#progress()","gem::resolver::molinillo::ui#progress_rate()","gem::streamui#progress_reporter()","irb::context#prompt_mode=()","irb::context#prompting?()","set#proper_subset?()","set#proper_superset?()","net::http#propfind()","net::http#proppatch()","module#protected()","module#protected_instance_methods()","module#protected_method_defined?()","delegator#protected_methods()","object#protected_methods()","addrinfo#protocol()","rinda::ringprovider#provide()","net::http#proxy?()","net::http#proxy_address()","webrick::httpauth#proxy_basic_auth()","net::http::proxy_class?()","gem::remotefetcher#proxy_for()","net::http#proxy_from_env?()","net::http#proxy_pass()","net::http#proxy_port()","gem::request#proxy_uri()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyport()","find#prune()","find::prune()","openssl::random::pseudo_bytes()","object#psych_to_yaml()","module#psych_yaml_as()","fiddle::pointer#ptr()","rss::maker::channelbase#pubdate()","rss::maker::itemsbase::itembase#pubdate()","rss::maker::channelbase#pubdate=()","rss::maker::itemsbase::itembase#pubdate=()","module#public()","rexml::doctype#public()","openssl::pkey::dh#public?()","openssl::pkey::dsa#public?()","openssl::pkey::ec#public?()","openssl::pkey::rsa#public?()","module#public_class_method()","module#public_constant()","openssl::pkey::rsa#public_decrypt()","openssl::pkey::rsa#public_encrypt()","module#public_instance_method()","module#public_instance_methods()","openssl::netscape::spki#public_key()","openssl::pkey::dh#public_key()","openssl::pkey::dsa#public_key()","openssl::pkey::ec#public_key()","openssl::pkey::rsa#public_key()","openssl::x509::certificate#public_key()","openssl::x509::request#public_key()","openssl::netscape::spki#public_key=()","openssl::pkey::ec#public_key=()","openssl::x509::certificate#public_key=()","openssl::x509::request#public_key=()","openssl::pkey::ec#public_key?()","object#public_method()","module#public_method_defined?()","delegator#public_methods()","object#public_methods()","object#public_send()","rexml::parsers::baseparser#pull()","rexml::parsers::pullparser#pull()","rexml::parsers::baseparser#pull_event()","net::ftp::mlsxentry#purgeable?()","openssl::x509::store#purpose=()","openssl::x509::storecontext#purpose=()","array#push()","csv::row#push()","csv::table#push()","psych::treebuilder#push()","psych::visitors::yamltree#push()","queue#push()","rexml::parent#push()","rinda::tuplebag#push()","sizedqueue#push()","gem::resolver::molinillo::dependencygraph::log#push_action()","pp::ppmethods#push_inspect_key()","gem::resolver::molinillo::resolver::resolution#push_state_for_requirements()","irb::context#push_workspace()","shell#pushd()","shell#pushdir()","net::ftp#put()","net::imap#put_string()","encoding::converter#putback()","net::ftp#putbinaryfile()","argf#putc()","io#putc()","kernel#putc()","stringio#putc()","zlib::gzipwriter#putc()","argf#puts()","csv#puts()","io#puts()","io::generic_writable#puts()","irb::locale#puts()","irb::notifier::abstractnotifier#puts()","irb::outputmethod#puts()","kernel#puts()","net::internetmessageio::writeadapter#puts()","openssl::buffering#puts()","xmp#puts()","xmp::stringinputmethod#puts()","zlib::gzipwriter#puts()","net::ftp#puttextfile()","dir::pwd()","fileutils#pwd()","fileutils::pwd()","net::ftp#pwd()","pathname::pwd()","net::imap::digestmd5authenticator#qdval()","webrick::httprequest#query()","uri::generic#query=()","gem::server#quick()","gem::testcase#quick_gem()","rdoc::options#quiet()","rdoc::options#quiet=()","net::ftp#quit()","net::smtp#quit()","bigdecimal#quo()","complex#quo()","float#quo()","numeric#quo()","rational#quo()","regexp::quote()","webrick::httputils::quote()","webrick::httputils#quote()","net::httpgenericrequest#quote_string()","readline::quoting_detection_proc()","readline::quoting_detection_proc=()","vector#r()","racc::parser#racc_accept()","racc::parser#racc_e_pop()","racc::parser#racc_next_state()","racc::parser#racc_print_stacks()","racc::parser#racc_print_states()","racc::parser#racc_read_token()","racc::parser#racc_reduce()","racc::parser#racc_shift()","racc::parser#racc_token2str()","cgi::htmlextension#radio_button()","cgi::htmlextension#radio_group()","delegator#raise()","kernel#raise()","thread#raise()","rss::baselistener::raise_for_undefined_entity?()","rss::baseparser::raise_for_undefined_entity?()","rss::rexmllistener::raise_for_undefined_entity?()","tracepoint#raised_exception()","kernel#rand()","random::rand()","random#rand()","random::formatter#rand()","openssl::random::random_add()","openssl::random::random_bytes()","random::formatter#random_bytes()","openssl::cipher#random_iv()","openssl::cipher#random_key()","random::formatter#random_number()","webrick::utils#random_string()","webrick::utils::random_string()","matrix#rank()","matrix#rank_e()","array#rassoc()","env::rassoc()","hash#rassoc()","complex#rationalize()","float#rationalize()","integer#rationalize()","integer#rationalize()","nilclass#rationalize()","rational#rationalize()","io#raw()","rdoc::testcase#raw()","rexml::element#raw()","io#raw!()","cgi::queryextension#raw_cookie()","cgi::queryextension#raw_cookie2()","gc::profiler::raw_data()","csv#raw_encoding()","random::raw_seed()","gem::commands::setupcommand#rb_files_in()","net::smtp#rcptto()","net::smtp#rcptto_list()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","gem::server#rdoc()","rdoc::rubygemshook#rdoc_installed?()","rdoc::rubygemshook#rdoc_installed?()","gem::specification#rdoc_options()","gem::specification#rdoc_options=()","rdoc::task#rdoc_target()","rdoc::task#rdoc_target()","rdoc::task#rdoc_task_description()","rdoc::task#rdoc_task_description()","rdoc::task#rdoc_task_name()","rdoc::task#rdoc_task_name()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","gem::security::re_sign()","objectspace::reachable_objects_from()","objectspace::reachable_objects_from_root()","argf#read()","csv::read()","csv#read()","dir#read()","gem::package::tarreader::entry#read()","io::read()","io#read()","openssl::buffering#read()","openssl::pkey::read()","openuri::openread#read()","pathname#read()","rexml::iosource#read()","rexml::source#read()","rinda::tuplespace#read()","rinda::tuplespaceproxy#read()","rinda::waittemplateentry#read()","stringio#read()","zlib::gzipreader#read()","rinda::tuplespace#read_all()","rinda::tuplespaceproxy#read_all()","gem::read_binary()","gem::testcase#read_binary()","net::httpresponse#read_body()","net::httpresponse#read_body_0()","gem::testcase#read_cache()","gem::package#read_checksums()","rdoc::encoding::read_file()","cgi::queryextension#read_from_cmdline()","cgi::queryextension#read_multipart()","argf#read_nonblock()","io#read_nonblock()","io::generic_readable#read_nonblock()","openssl::buffering#read_nonblock()","openssl::pkcs7::read_smime()","net::httpresponse::read_status_line()","net::ftp#read_timeout=()","net::http#read_timeout=()","net::pop3#read_timeout=()","net::smtp#read_timeout=()","psych::read_type_class()","rexml::text::read_with_substitution()","file::readable?()","file::stat#readable?()","filetest#readable?()","net::ftp::mlsxentry#readable?()","pathname#readable?()","irb::inputmethod#readable_after_eof?()","irb::readlineinputmethod#readable_after_eof?()","irb::stdioinputmethod#readable_after_eof?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","pathname#readable_real?()","encoding::invalidbytesequenceerror#readagain_bytes()","argf#readbyte()","io#readbyte()","io::generic_readable#readbyte()","zlib::gzipreader#readbyte()","argf#readchar()","io#readchar()","io::generic_readable#readchar()","openssl::buffering#readchar()","zlib::gzipreader#readchar()","argf#readline()","csv#readline()","io#readline()","io::generic_readable#readline()","irb::locale#readline()","kernel#readline()","openssl::buffering#readline()","rexml::iosource#readline()","readline::readline()","zlib::gzipreader#readline()","argf#readlines()","csv#readlines()","csv::readlines()","io#readlines()","io::readlines()","kernel#readlines()","openssl::buffering#readlines()","pathname#readlines()","stringio#readlines()","zlib::gzipreader#readlines()","file::readlink()","pathname#readlink()","argf#readpartial()","gem::package::tarreader::entry#readpartial()","io#readpartial()","io::generic_readable#readpartial()","openssl::buffering#readpartial()","zlib::gzipreader#readpartial()","net::smtp#ready()","io#ready?()","complex#real()","matrix#real()","numeric#real()","complex#real?()","matrix#real?()","numeric#real?()","irb::locale#real_load()","file::realdirpath()","pathname#realdirpath()","fiddle::realloc()","gem::configfile#really_verbose()","file::realpath()","pathname#realpath()","benchmark#realtime()","benchmark::realtime()","localjumperror#reason()","optionparser::parseerror#reason()","webrick::httpstatus#reason_phrase()","webrick::httpstatus::reason_phrase()","webrick::httpstatus::status#reason_phrase()","rexml::validation::relaxng#receive()","net::imap#receive_responses()","binding#receiver()","method#receiver()","nameerror#receiver()","openssl::pkcs7#recipients()","gem::resolver::stats#record_depth()","rexml::document#record_entity_expansion()","rdoc::codeobject#record_location()","rdoc::context#record_location()","gem::resolver::stats#record_requirements()","net::imap#record_response()","optionparser::parseerror#recover()","complex#rect()","complex::rect()","matrix#rect()","numeric#rect()","complex#rectangular()","complex::rectangular()","matrix#rectangular()","numeric#rectangular()","rexml::xpathparser#recurse()","json#recurse_proc()","gem::resolver::molinillo::dependencygraph::vertex#recursive_predecessors()","gem::resolver::molinillo::dependencygraph::vertex#recursive_successors()","basicsocket#recv()","unixsocket#recv_io()","basicsocket#recv_nonblock()","net::smtp#recv_response()","ipsocket#recvfrom()","socket#recvfrom()","unixsocket#recvfrom()","socket#recvfrom_nonblock()","udpsocket#recvfrom_nonblock()","basicsocket#recvmsg()","basicsocket#recvmsg_nonblock()","webrick::httpstatus::redirect?()","webrick::httpstatus#redirect?()","webrick::httpservlet::abstractservlet#redirect_to_directory_uri()","gem::ext::builder::redirector()","readline::redisplay()","enumerable#reduce()","matrix::eigenvaluedecomposition#reduce_to_hessenberg()","fiddle::pointer#ref()","rdoc::markdown#reference()","module#refine()","gem::refresh()","readline::refresh_line()","rdoc::testcase#refute_file()","gem::testcase#refute_path_exists()","matchdata#regexp()","optionparser::completion::regexp()","uri::regexp()","drb::extservmanager#regist()","drb#regist_server()","drb::regist_server()","gem::noaliasyamltree#register()","openssl::asn1::objectid::register()","psych::streaming#register()","psych::visitors::toruby#register()","psych::visitors::yamltree#register()","webrick#register()","webrick::utils::timeouthandler::register()","gem::commandmanager#register_command()","gem::register_default_spec()","psych::visitors::toruby#register_empty()","rss::baselistener::register_uri()","uri::generic#registry=()","matrix#regular?()","env::rehash()","hash#rehash()","shell::commandprocessor#rehash()","array#reject()","dbm#reject()","env::reject()","enumerable#reject()","enumerator::lazy#reject()","gdbm#reject()","hash#reject()","optionparser#reject()","optionparser::reject()","optionparser::list#reject()","sdbm#reject()","yaml::dbm#reject()","array#reject!()","dbm#reject!()","env::reject!()","gdbm#reject!()","hash#reject!()","sdbm#reject!()","set#reject!()","pathname#relative?()","uri::generic#relative?()","pathname#relative_path_from()","gem::version#release()","optionparser#release()","drb::drbunknown#reload()","webrick::httpauth::htdigest#reload()","webrick::httpauth::htgroup#reload()","webrick::httpauth::htpasswd#reload()","bigdecimal#remainder()","integer#remainder()","integer#remainder()","numeric#remainder()","gem::resolver::composedset#remote=()","gem::localremoteoptions#remote?()","basicsocket#remote_address()","webrick::httprequest#remote_ip()","fileutils::remove()","fileutils#remove()","gem::resolver::requirementlist#remove()","gem::uninstaller#remove()","optionparser#remove()","rdoc::rubygemshook#remove()","rdoc::rubygemshook#remove()","rexml::attribute#remove()","rexml::child#remove()","gem::uninstaller#remove_all()","gem::dependencylist#remove_by_name()","module#remove_class_variable()","module#remove_const()","fileutils#remove_dir()","fileutils::remove_dir()","fileutils#remove_entry()","fileutils::remove_entry()","fileutils::remove_entry_secure()","fileutils#remove_entry_secure()","gem::uninstaller#remove_executables()","fileutils::remove_file()","fileutils#remove_file()","rdoc::context#remove_from_documentation?()","rdoc::encoding::remove_frozen_string_literal()","webrick::httpservlet::filehandler::remove_handler()","gem::availableset#remove_installed!()","object#remove_instance_variable()","rdoc::context#remove_invisible()","module#remove_method()","rdoc::parser::remove_modeline()","rdoc::store#remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","gem::commands::setupcommand#remove_old_bin_files()","gem::commands::setupcommand#remove_old_lib_files()","gem::command#remove_option()","gem::commands::ownercommand#remove_owners()","rdoc::comment#remove_private()","net::imap#remove_response_handler()","drb::remove_server()","drb#remove_server()","rdoc::rdoc#remove_siginfo_handler()","gem::specification::remove_spec()","gem::dependencylist#remove_specs_unsatisfied_by()","gc::remove_stress_to_class()","rdoc::rdoc#remove_unparseable()","gem::remove_unresolved_default_spec()","net::ftp::mlsxentry#renamable?()","file::rename()","net::ftp#rename()","net::imap#rename()","pathname#rename()","rinda::simplerenewer#renew()","rinda::tupleentry#renew()","io#reopen()","logger#reopen()","logger::logdevice#reopen()","stringio#reopen()","syslog::reopen()","gdbm#reorganize()","array#repeated_combination()","array#repeated_permutation()","array#replace()","dbm#replace()","env::replace()","gdbm#replace()","gem::sourcelist#replace()","hash#replace()","sdbm#replace()","set#replace()","string#replace()","yaml::dbm#replace()","uri::generic#replace!()","rexml::parent#replace_child()","rexml::child#replace_with()","encoding::converter#replacement()","encoding::converter#replacement=()","encoding#replicate()","socket::udpsource#reply()","rinda::ringserver#reply_service()","gc::profiler::report()","rdoc::stats#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rdoc::stats#report_methods()","thread#report_on_exception()","thread::report_on_exception()","thread::report_on_exception=()","thread#report_on_exception=()","psych::coder#represent_map()","psych::coder#represent_object()","psych::coder#represent_scalar()","psych::coder#represent_seq()","gem::testcase#req()","gem::fakefetcher#request()","gem::remotefetcher#request()","net::http#request()","net::httpgenericrequest#request_body_permitted?()","gem::resolver::dependencyrequest#request_context()","net::http#request_get()","net::http#request_head()","gem::resolver::conflict#request_path()","net::http#request_post()","uri::http#request_uri()","gem::resolver::conflict#requester()","gem::requestset::lockfile#requests()","irb::locale#require()","kernel#require()","gem::resolver::molinillo::resolver::resolution#require_nested_dependencies_for()","gem::specification#require_path()","gem::specification#require_path=()","gem::basicspecification#require_paths()","gem::specification#require_paths=()","kernel#require_relative()","gem::specification::required_attribute?()","gem::specification::required_attributes()","rss::maker::rss09::image#required_element?()","rss::maker::rss20::image#required_element?()","rss::element::required_prefix()","rss::ituneschannelmodel::itunescategory::required_prefix()","rss::ituneschannelmodel::itunesimage::required_prefix()","rss::ituneschannelmodel::itunesowner::required_prefix()","rss::itunesitemmodel::itunesduration::required_prefix()","rss::imagefaviconmodel::imagefavicon::required_prefix()","rss::imageitemmodel::imageitem::required_prefix()","rss::taxonomytopicmodel::taxonomytopic::required_prefix()","rss::taxonomytopicsmodel::taxonomytopics::required_prefix()","gem::specification#required_ruby_version=()","gem::specification#required_rubygems_version=()","rss::atom::commonmodel::required_uri()","rss::element::required_uri()","rss::ituneschannelmodel::itunescategory::required_uri()","rss::ituneschannelmodel::itunesimage::required_uri()","rss::ituneschannelmodel::itunesowner::required_uri()","rss::itunesitemmodel::itunesduration::required_uri()","rss::imagefaviconmodel::imagefavicon::required_uri()","rss::imageitemmodel::imageitem::required_uri()","rss::rdf::required_uri()","rss::rdf::bag::required_uri()","rss::rdf::bag::required_uri()","rss::rdf::channel::required_uri()","rss::rdf::channel::image::required_uri()","rss::rdf::channel::items::required_uri()","rss::rdf::channel::textinput::required_uri()","rss::rdf::image::required_uri()","rss::rdf::item::required_uri()","rss::rdf::li::required_uri()","rss::rdf::li::required_uri()","rss::rdf::li::required_uri()","rss::rdf::seq::required_uri()","rss::rdf::seq::required_uri()","rss::rdf::textinput::required_uri()","rss::taxonomytopicmodel::taxonomytopic::required_uri()","rss::taxonomytopicsmodel::taxonomytopics::required_uri()","rss::maker::atom::entry::items::item#required_variable_names()","rss::maker::atom::feed::channel#required_variable_names()","rss::maker::atom::feed::image#required_variable_names()","rss::maker::atom::feed::items::item#required_variable_names()","rss::maker::atom::feed::items::item::content#required_variable_names()","rss::maker::atom::feed::items::item::source#required_variable_names()","rss::maker::atom::feed::items::item::source::icon#required_variable_names()","rss::maker::atomcategory#required_variable_names()","rss::maker::atomgenerator#required_variable_names()","rss::maker::atomlink#required_variable_names()","rss::maker::atomlogo#required_variable_names()","rss::maker::atomtextconstruct#required_variable_names()","rss::maker::ituneschannelmodel::itunesownerbase#required_variable_names()","rss::maker::rss09::channel#required_variable_names()","rss::maker::rss09::channel::copyright#required_variable_names()","rss::maker::rss09::channel::description#required_variable_names()","rss::maker::rss09::channel::links::link#required_variable_names()","rss::maker::rss09::channel::skipdays::day#required_variable_names()","rss::maker::rss09::channel::skiphours::hour#required_variable_names()","rss::maker::rss09::channel::title#required_variable_names()","rss::maker::rss09::image#required_variable_names()","rss::maker::rss09::items::item#required_variable_names()","rss::maker::rss09::items::item::description#required_variable_names()","rss::maker::rss09::items::item::links::link#required_variable_names()","rss::maker::rss09::items::item::title#required_variable_names()","rss::maker::rss09::textinput#required_variable_names()","rss::maker::rss10::channel#required_variable_names()","rss::maker::rss10::channel::description#required_variable_names()","rss::maker::rss10::channel::links::link#required_variable_names()","rss::maker::rss10::channel::title#required_variable_names()","rss::maker::rss10::image#required_variable_names()","rss::maker::rss10::items::item#required_variable_names()","rss::maker::rss10::items::item::description#required_variable_names()","rss::maker::rss10::items::item::title#required_variable_names()","rss::maker::rss10::textinput#required_variable_names()","rss::maker::rss20::channel#required_variable_names()","rss::maker::rss20::channel::categories::category#required_variable_names()","rss::maker::rss20::channel::cloud#required_variable_names()","rss::maker::rss20::channel::generator#required_variable_names()","rss::maker::rss20::items::item#required_variable_names()","rss::maker::rss20::items::item::categories::category#required_variable_names()","rss::maker::rss20::items::item::enclosure#required_variable_names()","rss::maker::rss20::items::item::guid#required_variable_names()","rss::maker::rss20::items::item::source#required_variable_names()","rss::maker::xmlstylesheets::xmlstylesheet#required_variable_names()","rss::maker::base#required_variables_are_set?()","gem::dependency#requirement()","gem::resolver::dependencyrequest#requirement()","gem::resolver::molinillo::delegates::resolutionstate#requirement()","gem::resolver::stats#requirement!()","gem::resolver::molinillo::resolver::resolution#requirement_for_existing_name()","gem::resolver#requirement_satisfied_by?()","gem::resolver::molinillo::delegates::specificationprovider#requirement_satisfied_by?()","gem::resolver::molinillo::specificationprovider#requirement_satisfied_by?()","gem::resolver::molinillo::resolver::resolution#requirement_tree_for()","gem::resolver::molinillo::resolver::resolution#requirement_trees()","gem::resolver::molinillo::delegates::resolutionstate#requirements()","gem::resolver::molinillo::dependencygraph::vertex#requirements()","gem::specification#requirements()","gem::specification#requirements=()","gem::dependency#requirements_list()","rdoc::task#rerdoc_task_description()","rdoc::task#rerdoc_task_description()","rdoc::task#rerdoc_task_name()","rdoc::task#rerdoc_task_name()","cgi::htmlextension#reset()","digest::base#reset()","digest::instance#reset()","gem::commandmanager::reset()","gem::request#reset()","gem::security::reset()","gem::specification::reset()","net::pop3#reset()","openssl::cipher#reset()","openssl::digest#reset()","openssl::hmac#reset()","rexml::validation::choice#reset()","rexml::validation::interleave#reset()","rexml::validation::oneormore#reset()","rexml::validation::state#reset()","rexml::validation::validator#reset()","stringscanner#reset()","zlib::zstream#reset()","gem::specification#reset_nil_attributes_to_default()","gem::requestset#resolve()","gem::resolver#resolve()","gem::resolver::molinillo::resolver#resolve()","gem::resolver::molinillo::resolver::resolution#resolve()","rdoc::crossreference#resolve()","rdoc::context#resolve_aliases()","psych::visitors::toruby#resolve_class()","gem::requestset#resolve_current()","rss::rdf::channel::items#resources()","rss::taxonomytopicsmodel::taxonomytopics#resources()","drb::drbobject#respond_to?()","drb::drbobject#respond_to?()","object#respond_to?()","delegator#respond_to_missing?()","object#respond_to_missing?()","openstruct#respond_to_missing?()","net::httpgenericrequest#response_body_permitted?()","net::httpresponse::response_class()","openssl::ocsp::basicresponse#responses()","stringscanner#rest()","stringscanner#rest?()","stringscanner#rest_size()","cgi::session::filestore#restore()","cgi::session::memorystore#restore()","cgi::session::nullstore#restore()","cgi::session::pstore#restore()","json#restore()","json::restore()","marshal::restore()","stringscanner#restsize()","coverage::result()","erb#result()","gc::profiler::result()","stopiteration#result()","debugger__::resume()","fiber#resume()","net::ftp#retrbinary()","net::ftp#retrlines()","csv#return_headers?()","win32ole_method#return_type()","win32ole_method#return_type_detail()","tracepoint#return_value()","win32ole_method#return_vtype()","win32ole_param#retval?()","array#reverse()","ipaddr#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","enumerable#reverse_each()","gem::resolver::molinillo::dependencygraph::log#reverse_each()","psych::visitors::toruby#revive()","psych::visitors::toruby#revive_hash()","openssl::ocsp::singleresponse#revocation_reason()","openssl::ocsp::singleresponse#revocation_time()","openssl::x509::crl#revoked()","openssl::x509::crl#revoked=()","argf#rewind()","csv#rewind()","dir#rewind()","enumerator#rewind()","gem::package::tarreader#rewind()","gem::package::tarreader::entry#rewind()","io#rewind()","prime::eratosthenesgenerator#rewind()","prime::generator23#rewind()","prime::pseudoprimegenerator#rewind()","prime::trialdivisiongenerator#rewind()","rexml::parsers::lightparser#rewind()","rexml::parsers::ultralightparser#rewind()","stringio#rewind()","zlib::gzipreader#rewind()","gem::resolver::molinillo::dependencygraph#rewind_to()","gem::resolver::molinillo::dependencygraph::log#rewind_to()","cgi::util#rfc1123_date()","date::rfc2822()","date#rfc2822()","datetime::rfc2822()","time::rfc2822()","time#rfc2822()","date#rfc3339()","date::rfc3339()","datetime#rfc3339()","datetime::rfc3339()","date::rfc822()","date#rfc822()","datetime::rfc822()","time#rfc822()","time::rfc822()","gem::specification#ri_dir()","rdoc::rubygemshook#ri_installed?()","rdoc::rubygemshook#ri_installed?()","rdoc::servlet#ri_paths()","process::gid::rid()","process::uid::rid()","array#rindex()","string#rindex()","string#rjust()","fileutils::rm()","fileutils#rm()","fileutils#rm_f()","fileutils::rm_f()","fileutils#rm_r()","fileutils::rm_r()","fileutils::rm_rf()","fileutils#rm_rf()","dir::rmdir()","fileutils::rmdir()","fileutils#rmdir()","net::ftp#rmdir()","pathname#rmdir()","shell::commandprocessor#rmdir()","fileutils#rmtree()","fileutils::rmtree()","pathname#rmtree()","gem::server#root()","psych::nodes::document#root()","rdoc::servlet#root()","rexml::document#root()","rexml::element#root()","rexml::light::node#root()","pstore#root?()","pathname#root?()","rexml::element#root_node()","rdoc::servlet#root_search()","gem::resolver::molinillo::dependencygraph#root_vertex_named()","pstore#roots()","array#rotate()","array#rotate!()","bigdecimal#round()","float#round()","integer#round()","integer#round()","matrix#round()","numeric#round()","rexml::functions::round()","rational#round()","time#round()","vector#round()","uri::generic#route_from()","uri::generic#route_to()","matrix#row()","matrix#row_count()","matrix#row_size()","matrix::row_vector()","matrix#row_vectors()","matrix::rows()","string#rpartition()","net::smtp#rset()","openssl::bn#rshift!()","math::rsqrt()","math#rsqrt()","rss::baseparser#rss()","string#rstrip()","string#rstrip!()","gem::ruby()","gem::requestset::gemdependencyapi#ruby()","gem::ruby=()","gem::ruby_api_version()","gem::specification#ruby_code()","gem::ruby_engine()","gem::ruby_version()","gem::testcase::rubybin()","gem::configfile#rubygems_api_key()","gem::configfile#rubygems_api_key=()","gem::gemcutterutilities#rubygems_api_request()","gem::commands::updatecommand#rubygems_target_version()","gem::rubygems_version()","rdoc::testcase#rule()","drb::drbserver#run()","erb#run()","gem::commandmanager#run()","gem::ext::builder::run()","gem::gemrunner#run()","gem::server#run()","gem::server::run()","irb::irb#run()","thread#run()","webrick::genericserver#run()","webrick::httpserver#run()","shell::commandprocessor::run_config()","gem::dependency#runtime?()","gem::specification#runtime_dependencies()","gem::remotefetcher#s3_expiration()","thread#safe_level()","psych::safe_load()","fileutils::safe_unlink()","fileutils#safe_unlink()","gem::specification#same_attributes?()","rss::rootelementmixin#same_feed_type?()","array#sample()","gem::specification#sanitize()","rdoc::options#sanitize_path()","gem::specification#sanitize_string()","gem::requirement#satisfied_by?()","gem::specification#satisfies_requirement?()","date#saturday?()","time#saturday?()","rdoc::store#save()","rdoc::store#save_cache()","rdoc::store#save_class()","pstore#save_data()","pstore#save_data_with_atomic_file_rename_strategy()","pstore#save_data_with_fast_strategy()","bigdecimal::save_exception_mode()","gem::testcase#save_gemspec()","irb::context#save_history()","irb::context#save_history=()","bigdecimal::save_limit()","gem::testcase#save_loaded_features()","rdoc::store#save_method()","rdoc::store#save_page()","bigdecimal::save_rounding_mode()","gem::streamui#say()","gem::userinteraction#say()","matrix::scalar()","psych::coder#scalar()","psych::handler#scalar()","psych::treebuilder#scalar()","psych::coder#scalar=()","openssl::x509::name::rfc2253dn#scan()","rexml::iosource#scan()","rexml::source#scan()","string#scan()","stringscanner#scan()","stringscanner#scan_full()","gem::testcase#scan_make_command_lines()","stringscanner#scan_until()","io#scanf()","kernel#scanf()","string#scanf()","uri::generic#scheme=()","uri::scheme_list()","uri::ldap#scope()","uri::ldap#scope=()","cgi::htmlextension#scrolling_list()","string#scrub()","string#scrub!()","irb::jobmanager#search()","net::imap#search()","optionparser#search()","optionparser::list#search()","optionparser::search_const()","encoding::converter::search_convpath()","irb::locale#search_file()","gem::resolver#search_for()","gem::resolver::molinillo::delegates::specificationprovider#search_for()","gem::resolver::molinillo::specificationprovider#search_for()","gem::specfetcher#search_for_dependency()","stringscanner#search_full()","net::imap#search_internal()","rdoc::classmodule#search_record()","rdoc::methodattr#search_record()","rdoc::toplevel#search_record()","webrick::httpserver#search_servlet()","gem::searcher=()","date#sec()","time#sec()","date#sec_fraction()","date#second()","rss::itunesitemmodel::itunesduration#second=()","rss::maker::itunesitemmodel::itunesdurationbase#second=()","date#second_fraction()","rdoc::codeobject#section()","rdoc::context#section_contents()","openssl::config#sections()","rdoc::context#sections()","cgi::cookie#secure=()","openssl::ssl::sslcontext#security_level()","openssl::ssl::sslcontext#security_level=()","rdoc::methodattr#see()","openssl::pkey::ec::group#seed()","openssl::random::seed()","random#seed()","openssl::pkey::ec::group#seed=()","argf#seek()","dir#seek()","gem::package::tarreader#seek()","io#seek()","stringio#seek()","array#select()","dbm#select()","env::select()","enumerable#select()","enumerator::lazy#select()","gdbm#select()","hash#select()","io::select()","kernel#select()","net::imap#select()","sdbm#select()","struct#select()","uri::generic#select()","yaml::dbm#select()","array#select!()","env::select!()","hash#select!()","set#select!()","tracepoint#self()","basicsocket#send()","object#send()","rexml::functions::send()","udpsocket#send()","net::imap#send_command()","net::imap#send_data()","net::http#send_entity()","gem::commands::pushcommand#send_gem()","unixsocket#send_io()","net::imap#send_list_data()","net::imap#send_literal()","net::smtp#send_mail()","net::smtp#send_message()","net::imap#send_number_data()","net::imap#send_quoted_string()","net::http#send_request()","net::httpgenericrequest#send_request_with_body()","net::httpgenericrequest#send_request_with_body_data()","net::httpgenericrequest#send_request_with_body_stream()","net::imap#send_string_data()","net::imap#send_symbol_data()","net::imap#send_time_data()","net::ftp#sendcmd()","irb::frame::sender()","net::smtp#sendmail()","basicsocket#sendmsg()","basicsocket#sendmsg_nonblock()","optionparser#separator()","pp::ppmethods#seplist()","psych::coder#seq=()","openssl::ocsp::certificateid#serial()","openssl::pkcs7::recipientinfo#serial()","openssl::pkcs7::signerinfo#serial()","openssl::x509::certificate#serial()","openssl::x509::revoked#serial()","openssl::x509::certificate#serial=()","openssl::x509::revoked#serial=()","webrick::httpstatus#server_error?()","webrick::httpstatus::server_error?()","webrick::httprequest#server_name()","drb::extservmanager#service()","webrick::cgi#service()","webrick::httpserver#service()","webrick::httpservlet::abstractservlet#service()","openssl::ssl::sslsocket#session()","openssl::ssl::sslsocket#session=()","openssl::ssl::sslcontext#session_add()","openssl::ssl::sslcontext#session_cache_mode()","openssl::ssl::sslcontext#session_cache_mode=()","openssl::ssl::sslcontext#session_cache_size()","openssl::ssl::sslcontext#session_cache_size=()","openssl::ssl::sslcontext#session_cache_stats()","openssl::ssl::sslsocket#session_get_cb()","openssl::ssl::sslsocket#session_new_cb()","openssl::ssl::sslcontext#session_remove()","openssl::ssl::sslsocket#session_reused?()","ipaddr#set()","gem::configfile#set_api_key()","gem::gemcutterutilities#set_api_key()","uri::ldap#set_attributes()","exception#set_backtrace()","optionparser::parseerror#set_backtrace()","openssl::bn#set_bit!()","webrick::utils::set_close_on_exec()","webrick::utils#set_close_on_exec()","matrix#set_component()","vector#set_component()","openssl::pkey::rsa#set_crt_params()","fiddle::cstructentity#set_ctypes()","fiddle::cunionentity#set_ctypes()","rdoc::context#set_current_section()","net::http#set_debug_output()","net::pop3#set_debug_output()","net::smtp#set_debug_output()","openssl::engine#set_default()","openssl::x509::store#set_default_paths()","rss::maker::base#set_default_values()","logger::logdevice#set_dev()","zlib::deflate#set_dictionary()","zlib::inflate#set_dictionary()","uri::ldap#set_dn()","matrix#set_element()","vector#set_element()","argf#set_encoding()","io#set_encoding()","rdoc::encoding::set_encoding()","stringio#set_encoding()","erb#set_eoutvar()","rdoc::erbio#set_eoutvar()","rdoc::erbpartial#set_eoutvar()","getoptlong#set_error()","webrick::httpresponse#set_error()","uri::ldap#set_extensions()","openssl::pkey::rsa#set_factors()","uri::ldap#set_filter()","openssl::pkey::ec::group#set_generator()","tracer::set_get_line_procs()","uri::mailto#set_headers()","uri::generic#set_host()","openssl::pkey::dh#set_key()","openssl::pkey::dsa#set_key()","openssl::pkey::rsa#set_key()","debugger__::set_last_thread()","irb::context#set_last_value()","rss::element#set_next_element()","webrick::utils#set_non_blocking()","webrick::utils::set_non_blocking()","uri::generic#set_opaque()","optionparser::parseerror#set_option()","getoptlong#set_options()","openssl::ssl::sslcontext#set_params()","rss::maker::base#set_parent()","webrick::httpauth::htdigest#set_passwd()","webrick::httpauth::htpasswd#set_passwd()","webrick::httpauth::userdb#set_passwd()","uri::generic#set_password()","uri::ftp#set_path()","uri::generic#set_path()","gem::resolver::molinillo::dependencygraph#set_payload()","gem::resolver::molinillo::dependencygraph::log#set_payload()","uri::generic#set_port()","openssl::pkey::dh#set_pqg()","openssl::pkey::dsa#set_pqg()","webrick::httpresponse#set_redirect()","uri::generic#set_scheme()","uri::ldap#set_scope()","readline::set_screen_size()","rss::imagefaviconmodel::imagefavicon#set_size()","net::ftp#set_socket()","uri::mailto#set_to()","openssl::pkey::ec::point#set_to_infinity!()","debugger__::set_trace()","kernel#set_trace_func()","thread#set_trace_func()","uri::ftp#set_typecode()","uri::generic#set_user()","uri::generic#set_userinfo()","rdoc::context#set_visibility_for()","rss::maker::atomtextconstructbase::ensurexmlcontent#set_xhtml_uri_as_default_uri()","net::imap#setacl()","string#setbyte()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","pathname#setgid?()","etc::setgrent()","process::setpgid()","process::setpgrp()","process::setpriority()","process::setproctitle()","win32ole#setproperty()","etc::setpwent()","net::imap#setquota()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","process::setsid()","basicsocket#setsockopt()","openssl::ssl::socketforwarder#setsockopt()","rss::baselistener::setter()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","pathname#setuid?()","gem::installertestcase#setup()","gem::testcase#setup()","openssl::ssl::sslcontext#setup()","rdoc::rubygemshook#setup()","rdoc::rubygemshook#setup()","rdoc::testcase#setup()","drb::drbsslsocket::sslconfig#setup_certificate()","rss::maker::atom::entry#setup_elements()","rss::maker::atom::feed#setup_elements()","rss::maker::rss09#setup_elements()","rss::maker::rss10#setup_elements()","rdoc::options#setup_generator()","rss::maker::rss09::channel#setup_image()","rss::maker::rss10::channel#setup_image()","rss::maker::rss09::channel#setup_items()","rss::maker::rss10::channel#setup_items()","rss::atom::entry#setup_maker()","rss::rdf::bag#setup_maker()","rss::rdf::bag#setup_maker()","rss::rdf::seq#setup_maker()","rss::rdf::seq#setup_maker()","rss::rootelementmixin#setup_maker()","rss::setupmaker#setup_maker()","rss::xmlstylesheet#setup_maker()","rss::atom::feed::generator#setup_maker_attributes()","rss::atom::textconstruct#setup_maker_attributes()","rss::ituneschannelmodel::itunescategory#setup_maker_attributes()","rss::ituneschannelmodel::itunesimage#setup_maker_attributes()","rss::imagefaviconmodel::imagefavicon#setup_maker_attributes()","rss::imageitemmodel::imageitem#setup_maker_attributes()","rss::rdf::channel#setup_maker_attributes()","rss::rss::channel::item::category#setup_maker_attributes()","rss::rss::channel::item::enclosure#setup_maker_attributes()","rss::rss::channel::item::guid#setup_maker_attributes()","rss::rss::channel::item::source#setup_maker_attributes()","rss::setupmaker#setup_maker_attributes()","rss::atom::contentmodel#setup_maker_element()","rss::atom::feed#setup_maker_element()","rss::ituneschannelmodel::itunesowner#setup_maker_element()","rss::itunesitemmodel::itunesduration#setup_maker_element()","rss::rss::channel::item#setup_maker_element()","rss::setupmaker#setup_maker_element()","rss::atom::contentmodel#setup_maker_element_writer()","rss::atom::feed::logo#setup_maker_element_writer()","rss::atom::feed#setup_maker_elements()","rss::ituneschannelmodel::itunescategory#setup_maker_elements()","rss::rss#setup_maker_elements()","rss::rss::channel#setup_maker_elements()","rss::setupmaker#setup_maker_elements()","rss::listenermixin#setup_next_element()","rss::listenermixin#setup_next_element_in_unknown_element()","rss::maker::base#setup_other_elements()","rdoc::rdoc#setup_output_dir()","webrick::accesslog#setup_params()","gem::package#setup_signer()","drb::drbsslsocket::sslconfig#setup_ssl_context()","rss::maker::rss09::channel#setup_textinput()","rss::maker::rss10::channel#setup_textinput()","rss::maker::base#setup_values()","logger#sev_threshold=()","ripper::sexp()","ripper::sexp_raw()","shell::processcontroller#sfork()","gem::resolver::molinillo::dependencygraph::vertex#shallow_eql?()","gem::installer#shebang()","shellwords#shellescape()","shellwords::shellescape()","string#shellescape()","array#shelljoin()","shellwords::shelljoin()","shellwords#shelljoin()","shellwords::shellsplit()","shellwords#shellsplit()","string#shellsplit()","shellwords::shellwords()","shellwords#shellwords()","array#shift()","csv#shift()","dbm#shift()","env::shift()","gdbm#shift()","gem::requestset::lockfile::tokenizer#shift()","hash#shift()","queue#shift()","sdbm#shift()","sizedqueue#shift()","yaml::dbm#shift()","logger::logdevice#shift_log_age()","logger::logdevice#shift_log_period()","openssl::asn1::objectid#short_name()","rdoc::servlet#show_documentation()","gem::commands::contentscommand#show_files()","gem::commands::querycommand#show_gems()","gem::command#show_help()","gem::command#show_lookup_failure()","gem::commands::ownercommand#show_owners()","gem::server#show_rdoc_for_pattern()","gem::commands::setupcommand#show_release_notes()","optionparser::show_version()","array#shuffle()","array#shuffle!()","basicsocket#shutdown()","openssl::ssl::sslserver#shutdown()","rinda::ringserver#shutdown()","webrick::genericserver#shutdown()","process::gid::sid_available?()","process::uid::sid_available?()","bigdecimal#sign()","gem::commands::certcommand#sign()","gem::security::sign()","gem::security::signer#sign()","openssl::netscape::spki#sign()","openssl::ocsp::basicresponse#sign()","openssl::ocsp::request#sign()","openssl::pkcs7::sign()","openssl::pkey::pkey#sign()","openssl::x509::crl#sign()","openssl::x509::certificate#sign()","openssl::x509::request#sign()","gem::gemcutterutilities#sign_in()","gem::remotefetcher#sign_s3_url()","conditionvariable#signal()","monitormixin::conditionvariable#signal()","rinda::waittemplateentry#signal()","irb::irb#signal_handle()","irb::irb#signal_status()","process::status#signaled?()","signal::signame()","rdoc::tomdoc::signature()","openssl::x509::crl#signature_algorithm()","openssl::x509::certificate#signature_algorithm()","openssl::x509::request#signature_algorithm()","openssl::pkcs7::signerinfo#signed_time()","openssl::pkcs7#signers()","signalexception#signo()","gem::util::silent_system()","bigmath#sin()","cmath#sin()","cmath::sin()","math::sin()","rexml::validation::event#single?()","singleforwardable#single_delegate()","prettyprint::singleline_format()","pp::singleline_pp()","object#singleton_class()","module#singleton_class?()","object#singleton_method()","basicobject#singleton_method_added()","numeric#singleton_method_added()","rexml::functions::singleton_method_added()","basicobject#singleton_method_removed()","basicobject#singleton_method_undefined()","object#singleton_methods()","matrix#singular?()","matrix::lupdecomposition#singular?()","cmath#sinh()","cmath::sinh()","math::sinh()","net::ftp#site()","array#size()","dbm#size()","digest::instance#size()","env::size()","enumerator#size()","fiddle::cstructentity::size()","fiddle::cunionentity::size()","fiddle::pointer#size()","file#size()","file::size()","file::stat#size()","filetest#size()","gdbm#size()","gem::availableset#size()","gem::resolver::requirementlist#size()","hash#size()","integer#size()","integer#size()","matchdata#size()","net::ftp#size()","objectspace::weakmap#size()","pathname#size()","prime::pseudoprimegenerator#size()","queue#size()","rexml::attributes#size()","rexml::elements#size()","rexml::light::node#size()","rexml::parent#size()","rexml::syncenumerator#size()","range#size()","rinda::tuple#size()","rinda::tupleentry#size()","sdbm#size()","set#size()","string#size()","stringio#size()","struct#size()","symbol#size()","tempfile#size()","vector#size()","fiddle::pointer#size=()","rss::imagefaviconmodel::imagefavicon#size=()","file::size?()","file::stat#size?()","filetest#size?()","pathname#size?()","win32ole_method#size_opt_params()","win32ole_method#size_params()","fiddle::importer#sizeof()","argf#skip()","gem::requestset::lockfile::tokenizer#skip()","stringscanner#skip()","csv#skip_blanks?()","gem::deprecate#skip_during()","gem::deprecate::skip_during()","stringscanner#skip_until()","kernel#sleep()","mutex_m#sleep()","thread::mutex#sleep()","array#slice()","ripper::slice()","string#slice()","symbol#slice()","array#slice!()","string#slice!()","enumerable#slice_after()","enumerator::lazy#slice_after()","enumerable#slice_before()","enumerator::lazy#slice_before()","enumerable#slice_when()","enumerator::lazy#slice_when()","openssl::asn1::objectid#sn()","rdoc::text#snippet()","io#soak_up_spaces()","socket::sockaddr_in()","socket::sockaddr_un()","file::socket?()","file::stat#socket?()","filetest#socket?()","pathname#socket?()","socket::socketpair()","unixsocket::socketpair()","addrinfo#socktype()","matrix::lupdecomposition#solve()","array#sort()","enumerable#sort()","net::imap#sort()","array#sort!()","enumerable#sort_by()","array#sort_by!()","gem::specification::sort_by!()","gem::resolver#sort_dependencies()","gem::resolver::molinillo::delegates::specificationprovider#sort_dependencies()","gem::resolver::molinillo::specificationprovider#sort_dependencies()","rss::maker::itemsbase#sort_if_need()","net::imap#sort_internal()","gem::specification#sort_obj()","rdoc::context#sort_sections()","gem::availableset#sorted()","gem::requestset#sorted_requests()","gem::requestset::gemdependencyapi#source()","gem::resolver::installedspecification#source()","rdoc::store#source()","rexml::parsers::sax2parser#source()","regexp#source()","encoding::converter#source_encoding()","encoding::invalidbytesequenceerror#source_encoding()","encoding::undefinedconversionerror#source_encoding()","encoding::invalidbytesequenceerror#source_encoding_name()","encoding::undefinedconversionerror#source_encoding_name()","irb::irbloader#source_file()","gem::availableset#source_for()","method#source_location()","proc#source_location()","unboundmethod#source_location()","win32ole_type#source_ole_types()","gem::basicspecification#source_paths()","gem::sources()","gem::sources=()","kernel#spawn()","pty::spawn()","process::spawn()","gem::installer#spec()","gem::package#spec()","gem::package::old#spec()","gem::resolver::lockspecification#spec()","gem::testcase#spec()","gem::testcase::specfetchersetup#spec()","gem::commands::querycommand#spec_authors()","gem::spec_cache_dir()","gem::specification#spec_dir()","gem::testcase#spec_fetcher()","gem::installer#spec_file()","gem::specification#spec_file()","gem::commands::contentscommand#spec_for()","gem::commands::opencommand#spec_for()","gem::specfetcher#spec_for_dependency()","gem::requestset::lockfile#spec_groups()","gem::commands::querycommand#spec_homepage()","gem::commands::querycommand#spec_license()","gem::commands::querycommand#spec_loaded_from()","gem::nametuple#spec_name()","gem::specification#spec_name()","gem::commands::lockcommand#spec_path()","gem::commands::querycommand#spec_platforms()","gem::dependencylist#spec_predecessors()","gem::commands::querycommand#spec_summary()","readline::special_prefixes()","readline::special_prefixes=()","gem::dependency#specific?()","gem::requirement#specific?()","gem::command::specific_extra_args()","gem::command::specific_extra_args_hash()","gem::requestset#specs()","gem::server#specs()","gem::source::git#specs()","gem::requestset#specs_in()","bigdecimal#split()","file::split()","pathname#split()","shellwords::split()","string#split()","uri::split()","uri::rfc2396_parser#split()","fiddle::cparser#split_arguments()","gem::pathsupport#split_gem_path()","webrick::httputils#split_header_value()","webrick::httputils::split_header_value()","rss::listenermixin#split_name()","uri::generic#split_path()","uri::generic#split_userinfo()","kernel#sprintf()","openssl::bn#sqr()","bigdecimal#sqrt()","bigmath#sqrt()","cmath#sqrt()","cmath::sqrt()","math#sqrt()","math::sqrt()","matrix#square?()","string#squeeze()","string#squeeze!()","kernel#srand()","random::srand()","win32ole_type#src_type()","net::smtp#ssl?()","webrick::httprequest#ssl?()","net::pop3::ssl_params()","net::smtp#ssl_socket()","openssl::ssl::sslsocket#ssl_version()","openssl::ssl::sslcontext#ssl_version=()","net::http#sspi_auth()","net::http#sspi_auth?()","rexml::document#stand_alone?()","coverage::start()","date#start()","gc::start()","irb::start()","net::http#start()","net::http::start()","net::pop3#start()","net::pop3::start()","net::smtp::start()","net::smtp#start()","psych::streaming#start()","psych::visitors::yamltree#start()","shell::systemcommand#start()","thread::start()","webrick::cgi#start()","webrick::daemon::start()","webrick::genericserver#start()","webrick::simpleserver::start()","rss::rexmllikexmlparser#startelement()","rdoc::tokenstream#start_collecting_tokens()","rdoc::codeobject#start_doc()","psych::handler#start_document()","psych::treebuilder#start_document()","rexml::sax2listener#start_document()","rexml::sax2listener#start_element()","rexml::parsers::pullevent#start_element?()","rss::listenermixin#start_else_element()","shell::systemcommand#start_export()","rss::listenermixin#start_get_text_element()","rss::listenermixin#start_have_something_element()","shell::systemcommand#start_import()","shell::processcontroller#start_job()","rinda::tuplespace#start_keeper()","psych::handler#start_mapping()","rexml::sax2listener#start_prefix_mapping()","profiler__#start_profile()","gem::resolver::molinillo::resolver::resolution#start_resolution()","psych::handler#start_sequence()","drb#start_service()","drb::start_service()","psych::handler#start_stream()","psych::treebuilder#start_stream()","net::ftp#start_tls_session()","net::imap#start_tls_session()","string#start_with?()","net::http#started?()","net::pop3#started?()","net::smtp#started?()","rexml::functions::starts_with()","net::imap#starttls()","net::smtp#starttls()","net::smtp#starttls?()","net::smtp#starttls_always?()","net::smtp#starttls_auto?()","file::stat()","gc::stat()","io#stat()","pathname#stat()","rubyvm::stat()","tracepoint::stat()","gem::resolver::molinillo::resolver::resolution#state()","openssl::ssl::sslsocket#state()","gem::resolver::molinillo::resolver::resolution#state_any?()","gem::resolver::molinillo::resolver::resolution#state_index_for_unwind()","net::ftp#status()","net::imap#status()","openssl::ocsp::basicresponse#status()","openssl::ocsp::response#status()","pty::childexited#status()","systemexit#status()","thread#status()","webrick::httpresponse#status=()","openssl::random::status?()","webrick::httpresponse#status_line()","openssl::ocsp::response#status_string()","net::smtp::response#status_type_char()","cgi#stdinput()","debugger__::stdout()","debugger__::stdout=()","cgi#stdoutput()","date#step()","numeric#step()","range#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","pathname#sticky?()","openssl::ssl::sslsocket#stop()","thread::stop()","webrick::genericserver#stop()","thread#stop?()","rdoc::codeobject#stop_doc()","profiler__#stop_profile()","drb::stop_service()","drb#stop_service()","drb::drbserver#stop_service()","drb::extserv#stop_service()","process::status#stopped?()","process::status#stopsig()","net::ftp#storbinary()","dbm#store()","env::store()","gdbm#store()","hash#store()","net::imap#store()","sdbm#store()","yaml::dbm#store()","rdoc::anymethod#store=()","rdoc::classmodule#store=()","rdoc::codeobject#store=()","rdoc::constant#store=()","rdoc::methodattr#store=()","rdoc::mixin#store=()","rdoc::rdoc#store=()","rdoc::servlet#store_for()","net::imap#store_internal()","net::ftp#storlines()","rexml::parsers::baseparser#stream=()","net::httpresponse#stream_check()","zlib::zstream#stream_end?()","psych::handler#streaming?()","gc::stress()","gc::stress=()","date#strftime()","datetime#strftime()","time#strftime()","base64#strict_decode64()","base64#strict_encode64()","matchdata#string()","rexml::functions::string()","stringio#string()","stringscanner#string()","tempio#string()","stringio#string=()","stringscanner#string=()","rexml::functions::string_length()","rexml::functions::string_value()","string#strip()","string#strip!()","rdoc::text#strip_hashes()","rdoc::text#strip_newlines()","rexml::doctype#strip_quotes()","rdoc::text#strip_stars()","rdoc::markdown#strong()","tsort::strongly_connected_components()","tsort#strongly_connected_components()","date::strptime()","datetime::strptime()","time::strptime()","fiddle::importer#struct()","gem::basicspecification#stubbed?()","gem::specification#stubbed?()","gem::specification::stubs()","gem::specification::stubs_for()","webrick::utils#su()","webrick::utils::su()","bigdecimal#sub()","kernel#sub()","pathname#sub()","string#sub()","string#sub!()","pathname#sub_ext()","resolv::dns::name#subdomain_of?()","openssl::x509::certificate#subject()","openssl::x509::request#subject()","openssl::x509::certificate#subject=()","openssl::x509::request#subject=()","openssl::x509::extensionfactory#subject_certificate=()","openssl::x509::extensionfactory#subject_request=()","cgi::htmlextension#submit()","net::imap#subscribe()","time#subsec()","set#subset?()","rexml::functions::substring()","rexml::functions::substring_after()","rexml::functions::substring_before()","set#subtract()","date#succ()","ipaddr#succ()","integer#succ()","integer#succ()","prime::eratosthenesgenerator#succ()","prime::generator23#succ()","prime::pseudoprimegenerator#succ()","prime::trialdivisiongenerator#succ()","string#succ()","symbol#succ()","time#succ()","string#succ!()","net::smtp::response#success?()","process::status#success?()","systemexit#success?()","webrick::httpstatus::success?()","webrick::httpstatus#success?()","gem::resolver::molinillo::dependencygraph::vertex#successors()","gem::suffix_pattern()","gem::suffixes()","gem::specfetcher#suggest_gems_from_name()","gem::licenses::suggestions()","array#sum()","enumerable#sum()","rexml::functions::sum()","string#sum()","optionparser#summarize()","optionparser::list#summarize()","optionparser::switch#summarize()","rdoc::stats#summary()","gem::specification#summary=()","date#sunday?()","time#sunday?()","shell::systemcommand#super_each()","method#super_method()","unboundmethod#super_method()","class#superclass()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","rdoc::anymethod#superclass_method()","set#superset?()","net::httpgenericrequest#supply_default_content_type()","rss::maker::supported?()","rdoc::codeobject#suppress()","rdoc::codeobject#suppressed?()","debugger__::suspend()","irb::irb#suspend_context()","irb::irb#suspend_input_method()","irb::irb#suspend_name()","irb::irb#suspend_workspace()","string#swapcase()","symbol#swapcase()","string#swapcase!()","irb::jobmanager#switch()","process::gid::switch()","process::uid::switch()","optionparser::switch#switch_name()","fiddle::compositehandler#sym()","fiddle::handle::sym()","fiddle::handle#sym()","psych::classloader::restricted#symbolize()","file::symlink()","fileutils#symlink()","fileutils::symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","gem::package::tarreader::entry#symlink?()","pathname#symlink?()","matrix#symmetric?()","gdbm#sync()","io#sync()","stringio#sync()","zlib::gzipfile#sync()","zlib::inflate#sync()","io#sync=()","stringio#sync=()","zlib::gzipfile#sync=()","sync_m#sync_exclusive?()","sync_m#sync_exclusive?()","sync_m#sync_extend()","sync_m#sync_extend()","sync_m#sync_initialize()","sync_m#sync_initialize()","sync_m#sync_inspect()","sync_m#sync_inspect()","sync_m#sync_lock()","sync_m#sync_lock()","sync_m#sync_locked?()","sync_m#sync_locked?()","zlib::inflate#sync_point?()","sync_m#sync_shared?()","sync_m#sync_shared?()","sync_m#sync_synchronize()","sync_m#sync_synchronize()","sync_m#sync_try_lock()","sync_m#sync_try_lock()","sync_m#sync_try_lock_sub()","sync_m#sync_try_lock_sub()","sync_m#sync_unlock()","sync_m#sync_unlock()","monitormixin#synchronize()","thread::mutex#synchronize()","gdbm#syncmode=()","socket#sysaccept()","tcpserver#sysaccept()","unixserver#sysaccept()","kernel#syscall()","openssl::ssl::sslsocket#sysclose()","etc::sysconf()","etc::sysconfdir()","syslog::logger::syslog()","syslog::logger::syslog=()","io::sysopen()","pathname#sysopen()","io#sysread()","io::generic_readable#sysread()","object#sysread()","openssl::ssl::sslsocket#sysread()","openssl::ssl::sslsocket#sysread_nonblock()","io#sysseek()","openssl::pkey::dsa#syssign()","kernel#system()","net::ftp#system()","rexml::doctype#system()","shell::commandprocessor#system()","shell#system_path=()","etc::systmpdir()","openssl::pkey::dsa#sysverify()","io#syswrite()","openssl::ssl::sslsocket#syswrite()","openssl::ssl::sslsocket#syswrite_nonblock()","matrix#t()","csv::table()","gem::resolver::molinillo::dependencygraph#tag()","gem::resolver::molinillo::dependencygraph::log#tag()","rss::element#tag()","rss::rootelementmixin#tag()","uncaughtthrowerror#tag()","rexml::streamlistener#tag_end()","rss::listenermixin#tag_end()","rss::element#tag_filter()","rss::element#tag_name()","rss::element::tag_name()","rss::element#tag_name_with_prefix()","rexml::streamlistener#tag_start()","rss::listenermixin#tag_start()","psych::tagurize()","delegator#taint()","object#taint()","pathname#taint()","object#tainted?()","array#take()","enumerable#take()","enumerator::lazy#take()","rinda::tuplespace#take()","rinda::tuplespaceproxy#take()","array#take_while()","enumerable#take_while()","enumerator::lazy#take_while()","cmath::tan()","cmath#tan()","math::tan()","cmath#tanh()","cmath::tanh()","math::tanh()","object#tap()","gem::package::tartestcase#tar_dir_header()","gem::package::tartestcase#tar_file_header()","gem::package::tartestcase#tar_symlink_header()","addrinfo::tcp()","socket::tcp()","socket::tcp_server_loop()","socket::tcp_server_sockets()","net::smtp#tcp_socket()","gem::testcase#teardown()","shell::commandprocessor#tee()","argf#tell()","dir#tell()","io#tell()","stringio#tell()","zlib::gzipreader#tell()","zlib::gzipwriter#tell()","rdoc::testcase#temp_dir()","rdoc::options#template_dir_for()","psych::visitors::depthfirst#terminal()","getoptlong#terminate()","optionparser::terminate()","optionparser#terminate()","shell::systemcommand#terminate()","stringscanner#terminate()","thread#terminate()","webrick#terminate()","webrick::utils::timeouthandler::terminate()","gem::mockgemui#terminate_interaction()","gem::streamui#terminate_interaction()","gem::userinteraction#terminate_interaction()","shell::processcontroller#terminate_job()","gem::mockgemui#terminated?()","getoptlong#terminated?()","process::status#termsig()","kernel#test()","shell::commandprocessor#test()","prettyprint#text()","prettyprint::singleline#text()","rexml::element#text()","rexml::functions::text()","rexml::streamlistener#text()","rss::listenermixin#text()","rdoc::comment#text=()","rexml::element#text=()","rexml::light::node#text=()","rdoc::toplevel#text?()","rexml::parsers::pullevent#text?()","cgi::htmlextension#text_field()","rss::basemodel#text_type_writer()","cgi::htmlextension#textarea()","rss::rss#textinput()","rexml::element#texts()","gem::basicspecification#this()","openssl::ocsp::singleresponse#this_update()","drb::thread()","drb#thread()","irb::jobmanager#thread()","net::imap#thread()","net::imap#thread_internal()","debugger__::thread_list()","debugger__::thread_list_all()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","kernel#throw()","date#thursday?()","time#thursday?()","gem::time()","openssl::ssl::session#time()","openssl::x509::revoked#time()","openssl::ssl::session#time=()","openssl::x509::revoked#time=()","openssl::x509::store#time=()","openssl::x509::storecontext#time=()","object#timeout()","openssl::ssl::session#timeout()","timeout::timeout()","timeout#timeout()","openssl::ssl::session#timeout=()","resolv::dns#timeouts=()","integer#times()","integer#times()","process::times()","socket::ancillarydata#timestamp()","rdoc::store#title()","rdoc::store#title=()","net::smtp#tls?()","net::smtp#tlsconnect()","openssl::ssl::sslsocket#tmp_dh_callback()","openssl::ssl::sslsocket#tmp_ecdh_callback()","openssl::ssl::sslsocket#tmp_key()","dir::tmpdir()","uri::mailto#to=()","argf#to_a()","array#to_a()","benchmark::tms#to_a()","csv::table#to_a()","dbm#to_a()","env::to_a()","enumerable#to_a()","gdbm#to_a()","gem::list#to_a()","gem::nametuple#to_a()","gem::platform#to_a()","gem::requestset::lockfile::tokenizer#to_a()","gem::sourcelist#to_a()","hash#to_a()","matchdata#to_a()","matrix#to_a()","matrix::eigenvaluedecomposition#to_a()","matrix::lupdecomposition#to_a()","nilclass#to_a()","openssl::x509::extension#to_a()","openssl::x509::name#to_a()","optionparser#to_a()","rexml::attributes#to_a()","rexml::elements#to_a()","rexml::parent#to_a()","rinda::ringfinger#to_a()","rinda::ringfinger::to_a()","rubyvm::instructionsequence#to_a()","sdbm#to_a()","set#to_a()","shell::filter#to_a()","struct#to_a()","time#to_a()","vector#to_a()","yaml::dbm#to_a()","array#to_ary()","gem::sourcelist#to_ary()","matrix::eigenvaluedecomposition#to_ary()","matrix::lupdecomposition#to_ary()","webrick::httputils::formdata#to_ary()","rss::rootelementmixin#to_atom()","gem::nametuple::to_basic()","rubyvm::instructionsequence#to_binary()","integer#to_bn()","integer#to_bn()","openssl::bn#to_bn()","openssl::pkey::ec::point#to_bn()","complex#to_c()","nilclass#to_c()","numeric#to_c()","string#to_c()","rss::utils#to_class_name()","csv::row#to_csv()","csv::table#to_csv()","bigdecimal#to_d()","float#to_d()","integer#to_d()","integer#to_d()","rational#to_d()","string#to_d()","date#to_date()","datetime#to_date()","time#to_date()","date#to_datetime()","datetime#to_datetime()","time#to_datetime()","openssl::asn1::asn1data#to_der()","openssl::asn1::constructive#to_der()","openssl::asn1::primitive#to_der()","openssl::netscape::spki#to_der()","openssl::ocsp::basicresponse#to_der()","openssl::ocsp::certificateid#to_der()","openssl::ocsp::request#to_der()","openssl::ocsp::response#to_der()","openssl::ocsp::singleresponse#to_der()","openssl::pkcs12#to_der()","openssl::pkcs7#to_der()","openssl::pkey::dh#to_der()","openssl::pkey::dsa#to_der()","openssl::pkey::ec#to_der()","openssl::pkey::ec::group#to_der()","openssl::pkey::rsa#to_der()","openssl::ssl::session#to_der()","openssl::x509::attribute#to_der()","openssl::x509::crl#to_der()","openssl::x509::certificate#to_der()","openssl::x509::extension#to_der()","openssl::x509::name#to_der()","openssl::x509::request#to_der()","bigdecimal#to_digits()","gem::resolver::molinillo::dependencygraph#to_dot()","rss::element::to_element_methods()","enumerator::lazy#to_enum()","object#to_enum()","bigdecimal#to_f()","complex#to_f()","float#to_f()","integer#to_f()","integer#to_f()","nilclass#to_f()","rational#to_f()","string#to_f()","time#to_f()","rss::maker::atom::entry::items#to_feed()","rss::maker::atom::entry::items::item#to_feed()","rss::maker::atom::feed::channel#to_feed()","rss::maker::atom::feed::channel::cloud#to_feed()","rss::maker::atom::feed::channel::skipdays#to_feed()","rss::maker::atom::feed::channel::skiphours#to_feed()","rss::maker::atom::feed::image#to_feed()","rss::maker::atom::feed::items#to_feed()","rss::maker::atom::feed::items::item#to_feed()","rss::maker::atom::feed::items::item::content#to_feed()","rss::maker::atom::feed::items::item::enclosure#to_feed()","rss::maker::atom::feed::items::item::guid#to_feed()","rss::maker::atom::feed::items::item::source#to_feed()","rss::maker::atom::feed::items::item::source::icon#to_feed()","rss::maker::atomcategory#to_feed()","rss::maker::atomgenerator#to_feed()","rss::maker::atomlink#to_feed()","rss::maker::atomlogo#to_feed()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed()","rss::maker::ituneschannelmodel::itunesimagebase#to_feed()","rss::maker::ituneschannelmodel::itunesownerbase#to_feed()","rss::maker::itunesitemmodel::itunesdurationbase#to_feed()","rss::maker::imagefaviconmodel::imagefaviconbase#to_feed()","rss::maker::imageitemmodel::imageitembase#to_feed()","rss::maker::rss09::channel#to_feed()","rss::maker::rss09::channel::authors#to_feed()","rss::maker::rss09::channel::authors::author#to_feed()","rss::maker::rss09::channel::categories#to_feed()","rss::maker::rss09::channel::cloud#to_feed()","rss::maker::rss09::channel::contributors#to_feed()","rss::maker::rss09::channel::copyright#to_feed()","rss::maker::rss09::channel::description#to_feed()","rss::maker::rss09::channel::generator#to_feed()","rss::maker::rss09::channel::links#to_feed()","rss::maker::rss09::channel::links::link#to_feed()","rss::maker::rss09::channel::skipdays#to_feed()","rss::maker::rss09::channel::skipdays::day#to_feed()","rss::maker::rss09::channel::skiphours#to_feed()","rss::maker::rss09::channel::skiphours::hour#to_feed()","rss::maker::rss09::channel::title#to_feed()","rss::maker::rss09::image#to_feed()","rss::maker::rss09::items#to_feed()","rss::maker::rss09::items::item#to_feed()","rss::maker::rss09::items::item::authors#to_feed()","rss::maker::rss09::items::item::categories#to_feed()","rss::maker::rss09::items::item::content#to_feed()","rss::maker::rss09::items::item::contributors#to_feed()","rss::maker::rss09::items::item::description#to_feed()","rss::maker::rss09::items::item::enclosure#to_feed()","rss::maker::rss09::items::item::guid#to_feed()","rss::maker::rss09::items::item::links#to_feed()","rss::maker::rss09::items::item::links::link#to_feed()","rss::maker::rss09::items::item::rights#to_feed()","rss::maker::rss09::items::item::source#to_feed()","rss::maker::rss09::items::item::source::authors#to_feed()","rss::maker::rss09::items::item::source::categories#to_feed()","rss::maker::rss09::items::item::source::contributors#to_feed()","rss::maker::rss09::items::item::source::generator#to_feed()","rss::maker::rss09::items::item::source::icon#to_feed()","rss::maker::rss09::items::item::source::links#to_feed()","rss::maker::rss09::items::item::source::logo#to_feed()","rss::maker::rss09::items::item::source::rights#to_feed()","rss::maker::rss09::items::item::source::subtitle#to_feed()","rss::maker::rss09::items::item::source::title#to_feed()","rss::maker::rss09::items::item::title#to_feed()","rss::maker::rss09::textinput#to_feed()","rss::maker::rss10::channel#to_feed()","rss::maker::rss10::channel::authors#to_feed()","rss::maker::rss10::channel::authors::author#to_feed()","rss::maker::rss10::channel::categories#to_feed()","rss::maker::rss10::channel::cloud#to_feed()","rss::maker::rss10::channel::contributors#to_feed()","rss::maker::rss10::channel::copyright#to_feed()","rss::maker::rss10::channel::description#to_feed()","rss::maker::rss10::channel::generator#to_feed()","rss::maker::rss10::channel::links#to_feed()","rss::maker::rss10::channel::links::link#to_feed()","rss::maker::rss10::channel::skipdays#to_feed()","rss::maker::rss10::channel::skiphours#to_feed()","rss::maker::rss10::channel::title#to_feed()","rss::maker::rss10::image#to_feed()","rss::maker::rss10::items#to_feed()","rss::maker::rss10::items::item#to_feed()","rss::maker::rss10::items::item::authors#to_feed()","rss::maker::rss10::items::item::categories#to_feed()","rss::maker::rss10::items::item::content#to_feed()","rss::maker::rss10::items::item::contributors#to_feed()","rss::maker::rss10::items::item::description#to_feed()","rss::maker::rss10::items::item::enclosure#to_feed()","rss::maker::rss10::items::item::guid#to_feed()","rss::maker::rss10::items::item::links#to_feed()","rss::maker::rss10::items::item::rights#to_feed()","rss::maker::rss10::items::item::source#to_feed()","rss::maker::rss10::items::item::source::authors#to_feed()","rss::maker::rss10::items::item::source::categories#to_feed()","rss::maker::rss10::items::item::source::contributors#to_feed()","rss::maker::rss10::items::item::source::generator#to_feed()","rss::maker::rss10::items::item::source::icon#to_feed()","rss::maker::rss10::items::item::source::links#to_feed()","rss::maker::rss10::items::item::source::logo#to_feed()","rss::maker::rss10::items::item::source::rights#to_feed()","rss::maker::rss10::items::item::source::subtitle#to_feed()","rss::maker::rss10::items::item::source::title#to_feed()","rss::maker::rss10::items::item::title#to_feed()","rss::maker::rss10::textinput#to_feed()","rss::maker::rss20::channel::categories#to_feed()","rss::maker::rss20::channel::categories::category#to_feed()","rss::maker::rss20::channel::cloud#to_feed()","rss::maker::rss20::channel::generator#to_feed()","rss::maker::rss20::items::item::authors#to_feed()","rss::maker::rss20::items::item::authors::author#to_feed()","rss::maker::rss20::items::item::categories#to_feed()","rss::maker::rss20::items::item::categories::category#to_feed()","rss::maker::rss20::items::item::enclosure#to_feed()","rss::maker::rss20::items::item::guid#to_feed()","rss::maker::rss20::items::item::source#to_feed()","rss::maker::rss20::items::item::source::links#to_feed()","rss::maker::rss20::items::item::source::links::link#to_feed()","rss::maker::rssbase#to_feed()","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#to_feed()","rss::maker::xmlstylesheets::xmlstylesheet#to_feed()","rss::rootelementmixin#to_feed()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed_for_categories()","gem::basicspecification#to_fullpath()","array#to_h()","env::to_h()","enumerable#to_h()","hash#to_h()","nilclass#to_h()","openssl::x509::extension#to_h()","openstruct#to_h()","struct#to_h()","win32ole_record#to_h()","csv::row#to_hash()","dbm#to_hash()","env::to_hash()","gdbm#to_hash()","hash#to_hash()","json::genericobject#to_hash()","sdbm#to_hash()","yaml::dbm#to_hash()","rdoc::text#to_html()","rdoc::tokenstream::to_html()","argf#to_i()","bigdecimal#to_i()","complex#to_i()","fiddle::closure#to_i()","fiddle::function#to_i()","fiddle::handle#to_i()","fiddle::pointer#to_i()","float#to_i()","io#to_i()","ipaddr#to_i()","integer#to_i()","integer#to_i()","nilclass#to_i()","openssl::bn#to_i()","process::status#to_i()","rational#to_i()","string#to_i()","time#to_i()","webrick::httpstatus::status#to_i()","drb#to_id()","drb::to_id()","drb::drbidconv#to_id()","drb::drbidconv#to_id()","drb::drbserver#to_id()","bigdecimal#to_int()","fiddle::pointer#to_int()","float#to_int()","integer#to_int()","integer#to_int()","numeric#to_int()","openssl::bn#to_int()","argf#to_io()","io#to_io()","openssl::ssl::sslserver#to_io()","zlib::gzipfile#to_io()","bigdecimal#to_json()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::genericobject#to_json()","openstruct#to_json()","psych::to_json()","range#to_json()","rational#to_json()","regexp#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","uri::mailto#to_mailtext()","resolv::ipv4#to_name()","resolv::ipv6#to_name()","drb::to_obj()","drb#to_obj()","drb::drbidconv#to_obj()","drb::drbidconv#to_obj()","drb::drbserver#to_obj()","gem::package::tartestcase#to_oct()","dir#to_path()","file#to_path()","pathname#to_path()","openssl::netscape::spki#to_pem()","openssl::pkcs7#to_pem()","openssl::pkey::dh#to_pem()","openssl::pkey::dsa#to_pem()","openssl::pkey::ec#to_pem()","openssl::pkey::ec::group#to_pem()","openssl::pkey::rsa#to_pem()","openssl::ssl::session#to_pem()","openssl::x509::crl#to_pem()","openssl::x509::certificate#to_pem()","openssl::x509::request#to_pem()","hash#to_proc()","method#to_proc()","proc#to_proc()","symbol#to_proc()","fiddle::pointer::to_ptr()","bigdecimal#to_r()","complex#to_r()","float#to_r()","integer#to_r()","integer#to_r()","nilclass#to_r()","rational#to_r()","string#to_r()","time#to_r()","ipaddr#to_range()","gem::availableset#to_request_set()","uri::mailto#to_rfc822text()","rss::rootelementmixin#to_rss()","gem::specification#to_ruby()","psych::nodes::node#to_ruby()","gem::specification#to_ruby_for_cache()","argf#to_s()","addrinfo#to_s()","array#to_s()","benchmark::tms#to_s()","bigdecimal#to_s()","cgi::cookie#to_s()","csv::row#to_s()","csv::table#to_s()","complex#to_s()","date#to_s()","datetime#to_s()","digest::instance#to_s()","env::to_s()","encoding#to_s()","exception#to_s()","falseclass#to_s()","fiddle::pointer#to_s()","float#to_s()","gem::platform#to_s()","gem::requestset::lockfile#to_s()","gem::resolver::activationrequest#to_s()","gem::version#to_s()","hash#to_s()","ipaddr#to_s()","integer#to_s()","integer#to_s()","matchdata#to_s()","matrix#to_s()","method#to_s()","module#to_s()","nilclass#to_s()","object#to_s()","openssl::bn#to_s()","openssl::config#to_s()","openssl::hmac#to_s()","openssl::netscape::spki#to_s()","openssl::pkcs7#to_s()","openssl::pkey::dh#to_s()","openssl::pkey::dsa#to_s()","openssl::pkey::rsa#to_s()","openssl::x509::crl#to_s()","openssl::x509::certificate#to_s()","openssl::x509::extension#to_s()","openssl::x509::name#to_s()","openssl::x509::request#to_s()","openstruct#to_s()","optionparser#to_s()","optionparser::parseerror#to_s()","pathname#to_s()","proc#to_s()","process::status#to_s()","rexml::attribute#to_s()","rexml::cdata#to_s()","rexml::dtd::entitydecl#to_s()","rexml::dtd::notationdecl#to_s()","rexml::declaration#to_s()","rexml::entity#to_s()","rexml::externalentity#to_s()","rexml::light::node#to_s()","rexml::node#to_s()","rexml::notationdecl#to_s()","rexml::output#to_s()","rexml::parseexception#to_s()","rexml::text#to_s()","rexml::validation::event#to_s()","rexml::validation::ref#to_s()","rexml::validation::state#to_s()","rss::element#to_s()","rss::xml::element#to_s()","rss::xmlstylesheet#to_s()","range#to_s()","rational#to_s()","regexp#to_s()","resolv::dns::name#to_s()","shell::filter#to_s()","socket::option#to_s()","string#to_s()","struct#to_s()","symbol#to_s()","thread::backtrace::location#to_s()","time#to_s()","trueclass#to_s()","uri::ftp#to_s()","uri::generic#to_s()","uri::mailto#to_s()","unboundmethod#to_s()","uncaughtthrowerror#to_s()","vector#to_s()","webrick::cookie#to_s()","webrick::httputils::formdata#to_s()","webrick::httpversion#to_s()","win32ole_method#to_s()","win32ole_param#to_s()","win32ole_type#to_s()","win32ole_typelib#to_s()","win32ole_variable#to_s()","enumerable#to_set()","set#to_set()","addrinfo#to_sockaddr()","gem::basicspecification#to_spec()","gem::dependency#to_spec()","gem::specification#to_spec()","gem::dependency#to_specs()","fiddle::pointer#to_str()","string#to_str()","ipaddr#to_string()","rexml::attribute#to_string()","string#to_sym()","symbol#to_sym()","openssl::netscape::spki#to_text()","openssl::pkey::dh#to_text()","openssl::pkey::dsa#to_text()","openssl::pkey::ec#to_text()","openssl::pkey::ec::group#to_text()","openssl::pkey::rsa#to_text()","openssl::ssl::session#to_text()","openssl::x509::crl#to_text()","openssl::x509::certificate#to_text()","openssl::x509::request#to_text()","date#to_time()","datetime#to_time()","time#to_time()","rss::parser#to_uri()","fiddle::pointer#to_value()","argf#to_write_io()","rss::rootelementmixin#to_xml()","object#to_yaml()","psych::nodes::node#to_yaml()","date::today()","kconv#toeuc()","kconv::toeuc()","string#toeuc()","kconv#tojis()","kconv::tojis()","string#tojis()","rdoc::tokenstream#token_stream()","racc::parser#token_to_str()","gem::requestset::lockfile::tokenizer#tokenize()","psych::scalarscanner#tokenize()","rdoc::rubylex::tokenize()","rdoc::tomdoc#tokenize()","ripper::tokenize()","rdoc::tokenstream#tokens_to_s()","kconv#tolocale()","kconv::tolocale()","string#tolocale()","rdoc::comment#tomdoc?()","irb::frame#top()","irb::frame::top()","net::popmail#top()","optionparser::top()","optionparser#top()","rdoc::context#top_level()","rdoc::require#top_level()","shell::commandprocessor#top_level_test()","irb::locale#toplevel_load()","kconv#tosjis()","kconv::tosjis()","string#tosjis()","zlib::zstream#total_in()","zlib::zstream#total_out()","gc::profiler::total_time()","fileutils#touch()","fileutils::touch()","kconv#toutf16()","kconv::toutf16()","string#toutf16()","kconv#toutf32()","kconv::toutf32()","string#toutf32()","kconv::toutf8()","kconv#toutf8()","string#toutf8()","matrix#tr()","string#tr()","string#tr!()","string#tr_s()","string#tr_s!()","matrix#trace()","net::http#trace()","tracepoint::trace()","irb::frame#trace_func()","objectspace::trace_object_allocations()","objectspace::trace_object_allocations_clear()","objectspace::trace_object_allocations_debug_start()","objectspace::trace_object_allocations_start()","objectspace::trace_object_allocations_stop()","kernel#trace_var()","shell::commandprocessor#transact()","pstore#transaction()","fiber#transfer()","psych::nodes::node#transform()","hash#transform_values()","hash#transform_values!()","rexml::functions::translate()","net::http#transport_request()","array#transpose()","matrix#transpose()","kernel#trap()","signal::trap()","gem::specification#traverse()","openssl::asn1::traverse()","gem::util::traverse_parents()","psych::visitors::yamltree#tree()","matrix::eigenvaluedecomposition#tridiagonalize()","rexml::functions::true()","bigdecimal#truncate()","file::truncate()","file#truncate()","float#truncate()","integer#truncate()","integer#truncate()","numeric#truncate()","pathname#truncate()","rational#truncate()","stringio#truncate()","gem::text#truncate_text()","delegator#trust()","object#trust()","openssl::x509::store#trust=()","openssl::x509::storecontext#trust=()","gem::security::trustdir#trust_cert()","gem::security::trust_dir()","gem::security::trusted_certificates()","gem::try_activate()","makemakefile#try_const()","array::try_convert()","hash::try_convert()","io::try_convert()","regexp::try_convert()","string::try_convert()","thread::mutex#try_lock()","monitormixin#try_mon_enter()","makemakefile#try_type()","gem::resolver::molinillo::dependencygraph::tsort()","tsort#tsort()","tsort::tsort()","tsort#tsort_each()","tsort::tsort_each()","gem::dependencylist#tsort_each_child()","gem::resolver::molinillo::dependencygraph#tsort_each_child()","tsort#tsort_each_child()","gem::dependencylist#tsort_each_node()","gem::resolver::molinillo::dependencygraph#tsort_each_node()","tsort#tsort_each_node()","gem::mockgemui::tty#tty?()","gem::streamui#tty?()","io#tty?()","stringio#tty?()","date#tuesday?()","time#tuesday?()","time#tv_nsec()","time#tv_sec()","time#tv_usec()","gem::dependency#type()","gem::resolver::dependencyrequest#type()","objectspace::internalobjectwrapper#type()","openssl::pkcs7#type()","rdoc::classmodule#type()","rdoc::methodattr#type()","socket::ancillarydata#type()","openssl::pkcs7#type=()","fiddle::importer#typealias()","uri::ftp#typecode=()","win32ole_type#typekind()","win32ole_type::typelibs()","win32ole_typelib::typelibs()","win32ole_record#typename()","erb::util#u()","erb::util::u()","matrix::lupdecomposition#u()","openssl::bn#ucmp()","addrinfo::udp()","socket::udp_server_loop()","socket::udp_server_loop_on()","socket::udp_server_recv()","socket::udp_server_sockets()","gem::ui()","gem::defaultuserinteraction#ui()","gem::defaultuserinteraction::ui()","gem::defaultuserinteraction::ui=()","gem::defaultuserinteraction#ui=()","file::stat#uid()","process::uid()","process::uid=()","net::imap#uid_copy()","net::imap#uid_fetch()","net::imap#uid_move()","net::imap#uid_search()","net::imap#uid_sort()","net::imap#uid_store()","net::imap#uid_thread()","net::popmail#uidl()","file::umask()","webrick::httpserver#umount()","win32ole_event#unadvise()","shell::unalias_command()","shell::commandprocessor::unalias_command()","etc::uname()","method#unbind()","csv#unconverted_fields?()","module#undef_method()","shell::undef_system_command()","shell::commandprocessor::undef_system_command()","objectspace::undefine_finalizer()","rdoc::stats#undoc_params()","cgi::util#unescape()","gem::uriformatter#unescape()","uri::escape#unescape()","uri::rfc2396_parser#unescape()","webrick::httputils#unescape()","cgi::util#unescapeelement()","cgi::util#unescapehtml()","cgi::util#unescape_element()","webrick::httputils#unescape_form()","cgi::util#unescape_html()","openssl::config::unescape_value()","io#ungetbyte()","stringio#ungetbyte()","zlib::gzipreader#ungetbyte()","io#ungetc()","openssl::buffering#ungetc()","stringio#ungetc()","zlib::gzipreader#ungetc()","string#unicode_normalize()","string#unicode_normalize!()","string#unicode_normalized?()","gem::uninstaller#uninstall()","gem::commands::uninstallcommand#uninstall_all()","gem::commands::cleanupcommand#uninstall_dep()","gem::testcase#uninstall_gem()","gem::uninstaller#uninstall_gem()","gem::commands::setupcommand#uninstall_old_gemcutter()","gem::commands::uninstallcommand#uninstall_specific()","fiddle::importer#union()","regexp::union()","set#union()","array#uniq()","enumerable#uniq()","enumerator::lazy#uniq()","array#uniq!()","rdoc::store#unique_classes()","rdoc::store#unique_classes_and_modules()","net::popmail#unique_id()","rdoc::store#unique_modules()","matrix::unit()","matrix#unitary?()","addrinfo::unix()","socket::unix()","addrinfo#unix?()","addrinfo#unix_path()","socket::ancillarydata::unix_rights()","socket::ancillarydata#unix_rights()","socket::unix_server_loop()","socket::unix_server_socket()","socket::unix_socket_abstract_name?()","logger#unknown()","object#unknown()","syslog::logger#unknown()","dir::unlink()","file::unlink()","pathname#unlink()","shell::commandprocessor#unlink()","tempfile#unlink()","net::http#unlock()","thread::mutex#unlock()","webrick::httpserver#unmount()","rexml::parsers::baseparser#unnormalize()","rexml::text::unnormalize()","rexml::entity#unnormalized()","gem::installer#unpack()","socket::option#unpack()","string#unpack()","string#unpack1()","socket::unpack_sockaddr_in()","socket::unpack_sockaddr_un()","drb::extservmanager#unregist()","gem::commandmanager#unregister_command()","gem::specification::unresolved_deps()","gem::testcase#unresolved_names()","stringscanner#unscan()","array#unshift()","gem::requestset::lockfile::tokenizer#unshift()","rexml::parent#unshift()","rexml::parsers::baseparser#unshift()","rexml::parsers::pullparser#unshift()","net::imap#unsubscribe()","delegator#untaint()","object#untaint()","pathname#untaint()","kernel#untrace_var()","delegator#untrust()","object#untrust()","object#untrusted?()","zlib::gzipreader#unused()","gem::resolver::molinillo::resolver::resolution#unwind_for_conflict()","gem::resolver::molinillo::dependencygraph::action#up()","gem::resolver::molinillo::dependencygraph::addedgenocircular#up()","gem::resolver::molinillo::dependencygraph::deleteedge#up()","gem::resolver::molinillo::dependencygraph::detachvertexnamed#up()","gem::resolver::molinillo::dependencygraph::tag#up()","string#upcase()","symbol#upcase()","string#upcase!()","cgi::session#update()","cgi::session::filestore#update()","cgi::session::memorystore#update()","cgi::session::nullstore#update()","cgi::session::pstore#update()","dbm#update()","digest::base#update()","digest::instance#update()","env::update()","gdbm#update()","gem::streamui::silentdownloadreporter#update()","gem::streamui::verbosedownloadreporter#update()","hash#update()","openssl::cipher#update()","openssl::digest#update()","openssl::hmac#update()","optionparser::list#update()","sdbm#update()","yaml::dbm#update()","rdoc::classmodule#update_aliases()","gem::source#update_cache?()","gem::package::tarheader#update_checksum()","rss::itunesitemmodel::itunesduration#update_content()","rss::maker::itunesitemmodel::itunesdurationbase#update_content()","rdoc::classmodule#update_extends()","gem::commands::updatecommand#update_gem()","gem::commands::updatecommand#update_gems()","rdoc::classmodule#update_includes()","gem::indexer#update_index()","rdoc::rdoc#update_output_dir()","gem::commands::updatecommand#update_rubygems()","gem::indexer#update_specs_index()","gem::streamui::silentprogressreporter#updated()","gem::streamui::simpleprogressreporter#updated()","gem::streamui::verboseprogressreporter#updated()","rss::maker::channelbase#updated()","rss::maker::itemsbase::itembase#updated()","rss::maker::itemsbase::itembase::sourcebase#updated()","rss::maker::channelbase#updated=()","rss::maker::itemsbase::itembase#updated=()","rss::maker::itemsbase::itembase::sourcebase#updated=()","rdoc::context#upgrade_to_class()","prime::pseudoprimegenerator#upper_bound()","prime::pseudoprimegenerator#upper_bound=()","matrix#upper_triangular?()","date#upto()","integer#upto()","integer#upto()","string#upto()","fileutils::uptodate?()","fileutils#uptodate?()","drb#uri()","drb::uri()","rss::basemodel#uri_convert_attr_reader()","gem::server#uri_encode()","drb::drbprotocol#uri_option()","drb::drbprotocol::uri_option()","rss::baselistener::uri_registered?()","erb::util#url_encode()","erb::util::url_encode()","random::formatter#urlsafe_base64()","base64#urlsafe_decode64()","base64#urlsafe_encode64()","gem::command#usage()","gem::use_gemdeps()","irb::context#use_loader()","irb::context#use_loader=()","irb::context#use_loader?()","rdoc::parser::use_markup()","gem::use_paths()","irb::context#use_readline=()","net::http#use_ssl=()","net::http#use_ssl?()","net::pop3#use_ssl?()","net::pop3::use_ssl?()","irb::context#use_tracer=()","gem::defaultuserinteraction::use_ui()","gem::defaultuserinteraction#use_ui()","time#usec()","module::used_modules()","uri::generic#user()","uri::generic#user=()","gem::request#user_agent()","gem::user_dir()","gem::user_home()","uri::generic#userinfo()","uri::generic#userinfo=()","module#using()","openssl::ssl::sslsocket#using_anon_cipher?()","time::utc()","time#utc()","time#utc?()","time#utc_offset()","gem::testcase#util_build_gem()","gem::testcase#util_clear_gems()","gem::package::tartestcase#util_dir_entry()","gem::package::tartestcase#util_entry()","gem::testcase#util_gem()","gem::testcase#util_gzip()","gem::installertestcase#util_inst_bindir()","gem::installertestcase#util_installer()","gem::installertestcase#util_make_exec()","gem::testcase#util_make_gems()","gem::testcase#util_remove_gem()","gem::testcase#util_restore_ruby_version()","gem::testcase#util_set_ruby_version()","gem::testcase#util_set_arch()","gem::testcase#util_setup_fake_fetcher()","gem::installertestcase#util_setup_gem()","gem::testcase#util_setup_spec_fetcher()","gem::testcase#util_spec()","gem::package::tartestcase#util_symlink_entry()","gem::testcase#util_zip()","file::utime()","pathname#utime()","random::formatter#uuid()","gem::testcase#v()","matrix::eigenvaluedecomposition#v()","matrix::eigenvaluedecomposition#v_inv()","rss::element#valid?()","date::valid_civil?()","date::valid_commercial?()","date::valid_date?()","string#valid_encoding?()","date::valid_jd?()","net::imap::numvalidator::valid_number?()","net::imap::numvalidator::valid_nz_number?()","date::valid_ordinal?()","ipsocket::valid_v6?()","gem::specification#validate()","rexml::validation::validator#validate()","rss::element#validate()","rss::element#validate_attribute()","net::imap#validate_data()","rss::atom::duplicatelinkchecker#validate_duplicate_links()","rss::element#validate_for_stream()","net::smtp#validate_line()","rss::imagemodelutils#validate_one_tag_name()","gem::specification#validate_permissions()","cgi::cookie#value()","fiddle::importer#value()","net::httpresponse#value()","openssl::x509::attribute#value()","openssl::x509::extension#value()","rexml::attribute#value()","rexml::cdata#value()","rexml::entity#value()","rexml::text#value()","rinda::tuple#value()","rinda::tupleentry#value()","thread#value()","uncaughtthrowerror#value()","win32ole_variable#value()","win32ole_variant#value()","cgi::cookie#value=()","openssl::x509::attribute#value=()","openssl::x509::extension#value=()","rexml::text#value=()","rss::itunesitemmodel::itunesduration#value=()","win32ole_variant#value=()","dbm#value?()","env::value?()","gdbm#value?()","hash#value?()","sdbm#value?()","dbm#values()","env::values()","gdbm#values()","hash#values()","objectspace::weakmap#values()","sdbm#values()","struct#values()","yaml::dbm#values()","array#values_at()","csv::row#values_at()","csv::table#values_at()","dbm#values_at()","env::values_at()","gdbm#values_at()","hash#values_at()","matchdata#values_at()","sdbm#values_at()","struct#values_at()","yaml::dbm#values_at()","rss::maker::atom::entry::items::item#variable_is_set?()","rss::maker::atom::feed::channel#variable_is_set?()","rss::maker::base#variable_is_set?()","win32ole_variable#variable_kind()","rexml::functions::variables()","rss::maker::atom::entry::items::item#variables()","rss::maker::atom::feed::channel#variables()","rss::maker::atom::feed::items::item#variables()","rss::maker::atom::feed::items::item::content#variables()","rss::maker::atom::feed::items::item::source#variables()","rss::maker::atomcategory#variables()","rss::maker::atomtextconstruct#variables()","rss::maker::base#variables()","rss::maker::rss09::channel#variables()","rss::maker::rss10::image#variables()","rss::maker::rss10::items::item#variables()","rss::maker::rss20::items::item#variables()","win32ole_type#variables()","rexml::functions::variables=()","rexml::xpathparser#variables=()","win32ole_variable#varkind()","win32ole_variant#vartype()","gem::testcase#vc_windows?()","gem::testcase::vc_windows?()","gem::testcase#vendor_gem()","bigdecimal::ver()","optionparser#ver()","rdoc::testcase#verb()","drb::drbserver::verbose()","drb::drbserver#verbose()","gem::userinteraction#verbose()","drb::drbserver#verbose=()","drb::drbserver::verbose=()","irb::context#verbose?()","rdoc::testcase#verbose_capture_io()","gem::package#verify()","gem::package::old#verify()","gem::security::policy#verify()","gem::security::trustdir#verify()","net::pop3::verify()","openssl::netscape::spki#verify()","openssl::ocsp::basicresponse#verify()","openssl::ocsp::request#verify()","openssl::pkcs7#verify()","openssl::pkey::pkey#verify()","openssl::x509::crl#verify()","openssl::x509::certificate#verify()","openssl::x509::request#verify()","openssl::x509::store#verify()","openssl::x509::storecontext#verify()","gem::gemcutterutilities#verify_api_key()","openssl::x509::store#verify_callback=()","gem::request::verify_certificate()","openssl::ssl::verify_certificate_identity()","openssl::ssl#verify_certificate_identity()","gem::request::verify_certificate_message()","gem::package#verify_entry()","gem::package#verify_files()","gem::validator#verify_gem()","gem::validator#verify_gem_file()","gc::verify_internal_consistency()","openssl::ssl::sslsocket#verify_result()","gem::security::policy#verify_signatures()","gem::installer#verify_spec_name()","erb::version()","gem::basicspecification#version()","gem::resolver::activationrequest#version()","gem::resolver::specspecification#version()","gem::unsatisfiabledependencyerror#version()","gem::version#version()","irb::version()","openssl::x509::crl#version()","openssl::x509::certificate#version()","openssl::x509::request#version()","optionparser#version()","rexml::document#version()","win32ole_typelib#version()","gem::specification#version=()","openssl::x509::crl#version=()","openssl::x509::certificate#version=()","openssl::x509::request#version=()","net::http::version_1_2()","net::http::version_1_2?()","rss::maker::versions()","gem::resolver::molinillo::dependencygraph#vertex_named()","readline::vi_editing_mode()","readline::vi_editing_mode?()","webrick::httpserver#virtual_host()","rdoc::options#visibility=()","win32ole_method#visible?()","win32ole_type#visible?()","win32ole_typelib#visible?()","win32ole_variable#visible?()","optionparser#visit()","psych::visitors::visitor#visit()","psych::visitors::yamltree#visit_array()","psych::visitors::yamltree#visit_basicobject()","psych::visitors::yamltree#visit_bigdecimal()","psych::visitors::yamltree#visit_class()","psych::visitors::yamltree#visit_complex()","psych::visitors::yamltree#visit_date()","psych::visitors::yamltree#visit_datetime()","psych::visitors::yamltree#visit_encoding()","psych::visitors::yamltree#visit_exception()","psych::visitors::yamltree#visit_falseclass()","psych::visitors::yamltree#visit_float()","psych::visitors::yamltree#visit_hash()","psych::visitors::yamltree#visit_integer()","psych::visitors::yamltree#visit_module()","psych::visitors::yamltree#visit_nameerror()","psych::visitors::yamltree#visit_nilclass()","psych::visitors::yamltree#visit_object()","psych::visitors::depthfirst#visit_psych_nodes_alias()","psych::visitors::emitter#visit_psych_nodes_alias()","psych::visitors::noaliasruby#visit_psych_nodes_alias()","psych::visitors::toruby#visit_psych_nodes_alias()","psych::visitors::depthfirst#visit_psych_nodes_document()","psych::visitors::emitter#visit_psych_nodes_document()","psych::visitors::toruby#visit_psych_nodes_document()","psych::visitors::depthfirst#visit_psych_nodes_mapping()","psych::visitors::emitter#visit_psych_nodes_mapping()","psych::visitors::toruby#visit_psych_nodes_mapping()","psych::visitors::depthfirst#visit_psych_nodes_scalar()","psych::visitors::emitter#visit_psych_nodes_scalar()","psych::visitors::toruby#visit_psych_nodes_scalar()","psych::visitors::depthfirst#visit_psych_nodes_sequence()","psych::visitors::emitter#visit_psych_nodes_sequence()","psych::visitors::toruby#visit_psych_nodes_sequence()","psych::visitors::depthfirst#visit_psych_nodes_stream()","psych::visitors::emitter#visit_psych_nodes_stream()","psych::visitors::toruby#visit_psych_nodes_stream()","psych::visitors::yamltree#visit_psych_omap()","psych::visitors::yamltree#visit_psych_set()","psych::visitors::yamltree#visit_range()","psych::visitors::yamltree#visit_rational()","psych::visitors::yamltree#visit_regexp()","gem::noaliasyamltree#visit_string()","psych::visitors::yamltree#visit_string()","psych::visitors::yamltree#visit_struct()","psych::visitors::yamltree#visit_symbol()","psych::visitors::yamltree#visit_time()","psych::visitors::yamltree#visit_trueclass()","psych::visitors::yamltree#visit_array_subclass()","psych::visitors::yamltree#visit_hash_subclass()","net::ftp#voidcmd()","matrix::vstack()","matrix#vstack()","time::w3cdtf()","time#w3cdtf()","conditionvariable#wait()","io#wait()","monitormixin::conditionvariable#wait()","process::wait()","rinda::waittemplateentry#wait()","process::wait2()","shell::builtincommand#wait?()","shell::systemcommand#wait?()","shell::processcontroller#wait_all_jobs_execution()","gem::testcase#wait_for_child_process_to_exit()","net::httpgenericrequest#wait_for_continue()","io#wait_readable()","shell::processcontroller::wait_to_finish_all_process_controllers()","monitormixin::conditionvariable#wait_until()","monitormixin::conditionvariable#wait_while()","io#wait_writable()","process::waitall()","debugger__::waiting()","shell::processcontroller#waiting_job?()","shell::processcontroller#waiting_jobs()","shell::processcontroller#waiting_jobs_exist?()","process::waitpid()","process::waitpid2()","thread#wakeup()","kernel#warn()","logger#warn()","optionparser#warn()","rdoc::options#warn()","ripper#warn()","syslog::logger#warn()","webrick::basiclog#warn()","warning#warn()","logger#warn?()","webrick::basiclog#warn?()","ripper#warning()","date#wday()","time#wday()","weakref#weakref_alive?()","date#wednesday?()","time#wednesday?()","gem::command#when_invoked()","gem::commands::updatecommand#which_to_update()","rexml::element#whitespace()","gem::dependencylist#why_not_ok?()","fiddle::win32_last_error()","fiddle::win32_last_error=()","gem::win_platform=()","gem::win_platform?()","gem::testcase::win_platform?()","gem::testcase#win_platform?()","gem::installer#windows_stub_script()","io#winsize()","io#winsize=()","optionparser::with()","makemakefile#with_config()","enumerator#with_index()","prime::pseudoprimegenerator#with_index()","gem::resolver::molinillo::delegates::specificationprovider#with_no_such_dependency_error_handling()","enumerator#with_object()","prime::pseudoprimegenerator#with_object()","gem::gemcutterutilities#with_response()","gem::platformmismatch#wordy()","gem::sourcefetchproblem#wordy()","irb::context#workspaces()","file::world_readable?()","file::stat#world_readable?()","filetest#world_readable?()","pathname#world_readable?()","file::world_writable?()","file::stat#world_writable?()","filetest#world_writable?()","pathname#world_writable?()","gem::command#wrap()","gem::package::digestio::wrap()","json::jsonerror::wrap()","rdoc::text#wrap()","rexml::formatters::pretty#wrap()","rexml::text#wrap()","zlib::gzipfile::wrap()","file::writable?()","file::stat#writable?()","filetest#writable?()","net::ftp::mlsxentry#writable?()","pathname#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","pathname#writable_real?()","argf#write()","gem::configfile#write()","gem::package::digestio#write()","gem::package::tarwriter::boundedstream#write()","gem::package::tarwriter::restrictedstream#write()","gem::requestset::lockfile#write()","gem::security::write()","io::write()","io#write()","logger::logdevice#write()","net::internetmessageio::writeadapter#write()","openssl::buffering#write()","pathname#write()","rexml::attlistdecl#write()","rexml::attribute#write()","rexml::cdata#write()","rexml::comment#write()","rexml::dtd::entitydecl#write()","rexml::dtd::notationdecl#write()","rexml::declaration#write()","rexml::doctype#write()","rexml::document#write()","rexml::element#write()","rexml::entity#write()","rexml::externalentity#write()","rexml::formatters::default#write()","rexml::instruction#write()","rexml::notationdecl#write()","rexml::text#write()","rexml::xmldecl#write()","rinda::tuplespace#write()","rinda::tuplespaceproxy#write()","stringio#write()","zlib::gzipwriter#write()","gem::write_binary()","gem::installer#write_build_info_file()","gem::installer#write_cache_file()","rexml::formatters::default#write_cdata()","rexml::formatters::pretty#write_cdata()","rexml::formatters::default#write_comment()","rexml::formatters::pretty#write_comment()","gem::installer#write_default_spec()","rexml::formatters::default#write_document()","rexml::formatters::pretty#write_document()","rexml::formatters::default#write_element()","rexml::formatters::pretty#write_element()","rexml::formatters::transitive#write_element()","gem::testcase#write_file()","net::httpgenericrequest#write_header()","csv#write_headers?()","rexml::formatters::default#write_instruction()","io#write_nonblock()","io::generic_writable#write_nonblock()","openssl::buffering#write_nonblock()","rdoc::options#write_options()","openssl::random::write_random_file()","rinda::ringserver#write_services()","openssl::pkcs7::write_smime()","gem::installer#write_spec()","rexml::formatters::default#write_text()","rexml::formatters::pretty#write_text()","rexml::formatters::transitive#write_text()","rexml::text#write_with_substitution()","rss::atom::feed::entry::content#xhtml()","rss::atom::textconstruct#xhtml()","rss::maker::atomtextconstructbase::ensurexmlcontent#xhtml=()","net::imap#xlist()","rss::atom::feed::entry::content#xml()","rss::maker::itemsbase::itembase::contentbase#xml=()","rss::rexmllikexmlparser#xmldecl()","rss::maker::atomtextconstructbase::ensurexmlcontent#xml_content=()","rss::maker::itemsbase::itembase::contentbase#xml_content=()","rexml::document#xml_decl()","rss::atom::feed::entry::content::xml_getter()","rss::atom::textconstruct::xml_getter()","rss::atom::feed::entry::content::xml_setter()","rss::atom::textconstruct::xml_setter()","rss::xmlstylesheetmixin#xml_stylesheet_pi()","rss::maker::atom::feed::items::item::content#xml_type?()","rexml::sax2listener#xmldecl()","rexml::streamlistener#xmldecl()","rexml::xmldecl#xmldecl()","rss::listenermixin#xmldecl()","rss::rexmllistener#xmldecl()","rss::rootelementmixin#xmldecl()","rss::xmlparserlistener#xmldecl()","rexml::parsers::pullevent#xmldecl?()","rss::element#xmled_content()","date#xmlschema()","date::xmlschema()","datetime::xmlschema()","datetime#xmlschema()","time::xmlschema()","time#xmlschema()","object#xmp()","rexml::attribute#xpath()","rexml::element#xpath()","rexml::text#xpath()","kernel#y()","psych::nodes::node#yaml()","module#yaml_as()","object::yaml_tag()","gem::commands::yankcommand#yank_api_request()","gem::commands::yankcommand#yank_gem()","date#yday()","time#yday()","date#year()","time#year()","rss::basemodel#yes_clean_other_attr_reader()","rss::basemodel#yes_clean_other_writer()","rss::basemodel#yes_other_attr_reader()","rss::basemodel#yes_other_writer()","fiber::yield()","proc#yield()","racc::parser#yyaccept()","ripper#yydebug()","ripper#yydebug=()","racc::parser#yyerrok()","racc::parser#yyerror()","racc::parser#yyparse()","matrix::zero()","bigdecimal#zero?()","file::zero?()","file::stat#zero?()","filetest#zero?()","float#zero?()","matrix#zero?()","numeric#zero?()","openssl::bn#zero?()","pathname#zero?()","array#zip()","enumerable#zip()","enumerator::lazy#zip()","rdoc::parser::zip?()","zlib::zlib_version()","date#zone()","time#zone()","time::zone_offset()","time::zone_utc?()","array#|()","falseclass#|()","ipaddr#|()","integer#|()","integer#|()","json::genericobject#|()","nilclass#|()","set#|()","shell::filter#|()","trueclass#|()","complex#~()","ipaddr#~()","integer#~()","integer#~()","regexp#~()","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["ACL","","ACL.html","","<p>Simple Access Control Lists.\n<p>Access control lists are composed of “allow” and “deny” …\n"],["ACL::ACLEntry","","ACL/ACLEntry.html","","<p>An entry in an ACL\n"],["ACL::ACLList","","ACL/ACLList.html","","<p>A list of ACLEntry objects.  Used to implement the allow and deny halves of\nan ACL\n"],["ARGF","","ARGF.html","","<p><code>ARGF</code> is a stream designed for use in scripts that process\nfiles given as command-line arguments or passed …\n"],["Abbrev","","Abbrev.html","","<p>Calculates the set of unambiguous abbreviations for a given set of strings.\n\n<pre>require &#39;abbrev&#39;\nrequire &#39;pp&#39; ...</pre>\n"],["Addrinfo","","Addrinfo.html","","<p>The Addrinfo class maps <code>struct addrinfo</code> to ruby.  This\nstructure identifies an Internet host and a service. …\n"],["ArgumentError","","ArgumentError.html","","<p>Raised when the arguments are wrong and there isn&#39;t a more specific\nException class.\n<p>Ex: passing the …\n"],["Array","","Array.html","","<p>Arrays are ordered, integer-indexed collections of any object.\n<p>Array indexing starts at 0, as in C or …\n"],["Base64","","Base64.html","","<p>The Base64 module provides for the encoding (#encode64, #strict_encode64,\n#urlsafe_encode64) and decoding …\n"],["BasicObject","","BasicObject.html","","<p>BasicObject is the parent class of all classes in Ruby.  It&#39;s an\nexplicit blank class.\n<p>BasicObject …\n"],["BasicSocket","","BasicSocket.html","","<p>BasicSocket is the super class for all the Socket classes.\n"],["Benchmark","","Benchmark.html","","<p>The Benchmark module provides methods to measure and report the time used\nto execute Ruby code.\n<p>Measure …\n"],["Benchmark::Tms","","Benchmark/Tms.html","","<p>A data object, representing the times associated with a benchmark\nmeasurement.\n"],["BigDecimal","","BigDecimal.html","","<p>BigDecimal provides arbitrary-precision floating point decimal arithmetic.\n<p>Introduction\n<p>Ruby provides built-in …\n"],["BigMath","","BigMath.html","","<p>Provides mathematical functions.\n<p>Example:\n\n<pre>require &quot;bigdecimal/math&quot;\n\ninclude BigMath\n\na = BigDecimal((PI(100)/2).to_s) ...</pre>\n"],["Binding","","Binding.html","","<p>Objects of class <code>Binding</code> encapsulate the execution context at\nsome particular place in the code and retain …\n"],["CGI","","CGI.html","","<p>Overview\n<p>The Common Gateway Interface (CGI) is a simple protocol for passing an HTTP\nrequest from a web …\n"],["CGI::Cookie","","CGI/Cookie.html","","<p>Class representing an HTTP cookie.\n<p>In addition to its specific fields and methods, a Cookie instance is …\n"],["CGI::HTML3","","CGI/HTML3.html","",""],["CGI::HTML4","","CGI/HTML4.html","",""],["CGI::HTML4Fr","","CGI/HTML4Fr.html","",""],["CGI::HTML4Tr","","CGI/HTML4Tr.html","",""],["CGI::HTML5","","CGI/HTML5.html","",""],["CGI::HtmlExtension","","CGI/HtmlExtension.html","","<p>Mixin module providing HTML generation methods.\n<p>For example,\n\n<pre>cgi.a(&quot;http://www.example.com&quot;) { &quot;Example&quot; ...</pre>\n"],["CGI::InvalidEncoding","","CGI/InvalidEncoding.html","","<p>Exception raised when there is an invalid encoding detected\n"],["CGI::QueryExtension","","CGI/QueryExtension.html","","<p>Mixin module that provides the following:\n<p>Access to the CGI environment variables as methods.  See documentation …\n"],["CGI::Session","","CGI/Session.html","","<p>Overview\n<p>This file provides the CGI::Session class, which provides session support\nfor CGI scripts.   …\n"],["CGI::Session::FileStore","","CGI/Session/FileStore.html","","<p>File-based session storage class.\n<p>Implements session storage as a flat file of &#39;key=value&#39; values. …\n"],["CGI::Session::MemoryStore","","CGI/Session/MemoryStore.html","","<p>In-memory session storage class.\n<p>Implements session storage as a global in-memory hash.  Session data …\n"],["CGI::Session::NullStore","","CGI/Session/NullStore.html","","<p>Dummy session storage class.\n<p>Implements session storage place holder.  No actual storage will be done. …\n"],["CGI::Session::PStore","","CGI/Session/PStore.html","","<p>PStore-based session storage class.\n<p>This builds upon the top-level PStore class provided by the library …\n"],["CGI::Util","","CGI/Util.html","",""],["CMath","","CMath.html","","<p>Trigonometric and transcendental functions for complex numbers.\n<p>CMath is a library that provides trigonometric …\n"],["CSV","","CSV.html","","<p>This class provides a complete interface to CSV files and data.  It offers\ntools to enable you to read …\n"],["CSV::MalformedCSVError","","CSV/MalformedCSVError.html","","<p>The error thrown when the parser encounters illegal CSV formatting.\n"],["CSV::Row","","CSV/Row.html","","<p>A CSV::Row is part Array and part Hash.  It retains an order for the fields\nand allows duplicates just …\n"],["CSV::Table","","CSV/Table.html","","<p>A CSV::Table is a two-dimensional data structure for representing CSV\ndocuments.  Tables allow you to …\n"],["Class","","Class.html","","<p>Extends any Class to include <em>json_creatable?</em> method.\n<p>Classes in Ruby are first-class objects—each is …\n"],["ClosedQueueError","","ClosedQueueError.html","",""],["Comparable","","Comparable.html","","<p>The <code>Comparable</code> mixin is used by classes whose objects may be\nordered. The class must define the <code>&lt;=&gt;</code> …\n"],["Complex","","Complex.html","","<p>A complex number can be represented as a paired real number with imaginary\nunit; a+bi.  Where a is real …\n"],["Complex::compatible","","Complex/compatible.html","",""],["ConditionVariable","","ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables,\nit is possible to suspend while …\n"],["Continuation","","Continuation.html","","<p>Continuation objects are generated by Kernel#callcc, after having\n+require+d <em>continuation</em>. They hold …\n"],["Coverage","","Coverage.html","","<p>Coverage provides coverage measurement feature for Ruby. This feature is\nexperimental, so these APIs …\n"],["DBM","","DBM.html","","<p>Introduction\n<p>The DBM class provides a wrapper to a Unix-style dbm or Database Manager\nlibrary.\n<p>Dbm databases …\n"],["DBMError","","DBMError.html","","<p>Exception class used to return errors from the dbm library.\n"],["DEBUGGER__","","DEBUGGER__.html","","<p>This library provides debugging functionality to Ruby.\n<p>To add a debugger to your code, start by requiring …\n"],["DEBUGGER__::Thread","","DEBUGGER__/Thread.html","",""],["DRb","","DRb.html","","<p>Overview\n<p>dRuby is a distributed object system for Ruby.  It is written in pure Ruby\nand uses its own protocol. …\n"],["DRb::DRbArray","","DRb/DRbArray.html","","<p>An Array wrapper that can be sent to another server via DRb.\n<p>All entries in the array will be dumped or …\n"],["DRb::DRbBadScheme","","DRb/DRbBadScheme.html","","<p>Error raised by a dRuby protocol when it doesn&#39;t support the scheme\nspecified in a URI.  See DRb::DRbProtocol …\n"],["DRb::DRbBadURI","","DRb/DRbBadURI.html","","<p>Error raised by the DRbProtocol module when it cannot find any protocol\nimplementation support the scheme …\n"],["DRb::DRbConn","","DRb/DRbConn.html","","<p>Class handling the connection between a DRbObject and the server the real\nobject lives on.\n<p>This class …\n"],["DRb::DRbConn::Thread","","DRb/DRbConn/Thread.html","",""],["DRb::DRbConnError","","DRb/DRbConnError.html","","<p>Error raised when an error occurs on the underlying communication protocol.\n"],["DRb::DRbError","","DRb/DRbError.html","","<p>Superclass of all errors raised in the DRb module.\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbIdConv","","DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbMessage","","DRb/DRbMessage.html","","<p>Handler for sending and receiving drb messages.\n<p>This takes care of the low-level marshalling and unmarshalling …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObject","","DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObservable","","DRb/DRbObservable.html","","<p>The Observable module extended to DRb.  See Observable for details.\n"],["DRb::DRbProtocol","","DRb/DRbProtocol.html","",""],["DRb::DRbRemoteError","","DRb/DRbRemoteError.html","","<p>An exception wrapping an error object\n"],["DRb::DRbSSLSocket","","DRb/DRbSSLSocket.html","","<p>The protocol for DRb over an SSL socket\n<p>The URI for a DRb socket over SSL is:\n<code>drbssl://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbSSLSocket::SSLConfig","","DRb/DRbSSLSocket/SSLConfig.html","","<p>SSLConfig handles the needed SSL information for establishing a\nDRbSSLSocket connection, including generating …\n"],["DRb::DRbServer","","DRb/DRbServer.html","","<p>Class representing a drb server instance.\n<p>A DRbServer must be running in the local process before any …\n"],["DRb::DRbServer::InvokeMethod18Mixin","","DRb/DRbServer/InvokeMethod18Mixin.html","",""],["DRb::DRbServerNotFound","","DRb/DRbServerNotFound.html","","<p>Error raised by the DRb module when an attempt is made to refer to the\ncontext&#39;s current drb server …\n"],["DRb::DRbTCPSocket","","DRb/DRbTCPSocket.html","","<p>The default drb protocol which communicates over a TCP socket.\n<p>The DRb TCP protocol URI looks like:\n<code>druby://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbUNIXSocket","","DRb/DRbUNIXSocket.html","","<p>Implements DRb over a UNIX socket\n<p>DRb UNIX socket URIs look like\n<code>drbunix:&lt;path&gt;?&lt;option&gt;</code>. …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUndumped","","DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUnknown","","DRb/DRbUnknown.html","","<p>Class wrapping a marshalled object whose type is unknown locally.\n<p>If an object is returned by a method …\n"],["DRb::DRbUnknownError","","DRb/DRbUnknownError.html","","<p>An exception wrapping a DRb::DRbUnknown object\n"],["DRb::ExtServ","","DRb/ExtServ.html","",""],["DRb::ExtServManager","","DRb/ExtServManager.html","",""],["DRb::GW","","DRb/GW.html","","<p>The GW provides a synchronized store for participants in the gateway to\ncommunicate.\n"],["DRb::GWIdConv","","DRb/GWIdConv.html","","<p>Gateway id conversion forms a gateway between different DRb protocols or\nnetworks.\n<p>The gateway needs to …\n"],["DRb::Thread","","DRb/Thread.html","",""],["DRb::TimerIdConv","","DRb/TimerIdConv.html","","<p>Timer id conversion keeps objects alive for a certain amount of time after\ntheir last access.  The default …\n"],["DRb::TimerIdConv::TimerHolder2","","DRb/TimerIdConv/TimerHolder2.html","",""],["DRb::TimerIdConv::TimerHolder2::InvalidIndexError","","DRb/TimerIdConv/TimerHolder2/InvalidIndexError.html","",""],["Data","","Data.html","","<p>This is a recommended base class for C extensions using Data_Make_Struct or\nData_Wrap_Struct, see doc/extension.rdoc …\n"],["Date","","Date.html","","<p>date and datetime class - Tadayoshi Funaba 1998-2011\n<p>&#39;date&#39; provides two classes: Date and DateTime …\n"],["DateTime","","DateTime.html","","<p>DateTime\n<p>A subclass of Date that easily handles date, hour, minute, second, and\noffset.\n<p>DateTime does not …\n"],["Delegator","","Delegator.html","","<p>This library provides three different ways to delegate method calls to an\nobject.  The easiest to use …\n"],["Digest","","Digest.html","","<p>This module provides a framework for message digest libraries.\n<p>You may want to look at OpenSSL::Digest …\n"],["Digest::Base","","Digest/Base.html","","<p>This abstract class provides a common interface to message digest\nimplementation classes written in  …\n"],["Digest::Class","","Digest/Class.html","","<p>This module stands as a base class for digest implementation classes.\n"],["Digest::Instance","","Digest/Instance.html","","<p>This module provides instance methods for a digest implementation object to\ncalculate message digest …\n"],["Digest::MD5","","Digest/MD5.html","","<p>A class for calculating message digests using the MD5 Message-Digest\nAlgorithm by RSA Data Security, …\n"],["Digest::RMD160","","Digest/RMD160.html","","<p>A class for calculating message digests using RIPEMD-160 cryptographic hash\nfunction, designed by Hans …\n"],["Digest::SHA1","","Digest/SHA1.html","","<p>A class for calculating message digests using the SHA-1 Secure Hash\nAlgorithm by NIST (the US&#39; National …\n"],["Dir","","Dir.html","","<p>Objects of class <code>Dir</code> are directory streams representing\ndirectories in the underlying file system. They …\n"],["ENV","","ENV.html","","<p>ENV is a hash-like accessor for environment variables.\n"],["EOFError","","EOFError.html","","<p>Raised by some IO operations when reaching the end of file. Many IO methods\nexist in two forms,\n<p>one that …\n"],["ERB","","ERB.html","",""],["ERB::DefMethod","","ERB/DefMethod.html","","<p>Utility module to define eRuby script as instance method.\n<p>Example\n<p>example.rhtml:\n"],["ERB::Util","","ERB/Util.html","","<p>A utility module for conversion routines, often handy in HTML generation.\n"],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["Encoding","","Encoding.html","","<p>An Encoding instance represents a character encoding usable in Ruby. It is\ndefined as a constant under …\n"],["Encoding::CompatibilityError","","Encoding/CompatibilityError.html","","<p>Raised by Encoding and String methods when the source encoding is\nincompatible with the target encoding. …\n"],["Encoding::Converter","","Encoding/Converter.html","",""],["Encoding::ConverterNotFoundError","","Encoding/ConverterNotFoundError.html","","<p>Raised by transcoding methods when a named encoding does not correspond\nwith a known converter.\n"],["Encoding::InvalidByteSequenceError","","Encoding/InvalidByteSequenceError.html","","<p>Raised by Encoding and String methods when the string being transcoded\ncontains a byte invalid for the …\n"],["Encoding::UndefinedConversionError","","Encoding/UndefinedConversionError.html","","<p>Raised by Encoding and String methods when a transcoding operation fails.\n"],["EncodingError","","EncodingError.html","","<p>EncodingError is the base class for encoding errors.\n"],["English","","English.html","","<p>Include the English library file in a Ruby script, and you can reference\nthe global variables such as …\n"],["Enumerable","","Enumerable.html","","<p>The <code>Enumerable</code> mixin provides collection classes with several\ntraversal and searching methods, and with …\n"],["Enumerator","","Enumerator.html","","<p>A class which allows both internal and external iteration.\n<p>An Enumerator can be created by the following …\n"],["Enumerator::Generator","","Enumerator/Generator.html","","<p>Generator\n"],["Enumerator::Lazy","","Enumerator/Lazy.html","","<p>Lazy\n"],["Enumerator::Yielder","","Enumerator/Yielder.html","","<p>Yielder\n"],["Errno","","Errno.html","","<p>Ruby exception objects are subclasses of <code>Exception</code>. However,\noperating systems typically report errors …\n"],["Errno::ECONNABORTED","","Errno/ECONNABORTED.html","","<p>Client sent TCP reset (RST) before server has accepted the connection\nrequested by client.\n"],["Errno::ECONNRESET","","Errno/ECONNRESET.html","","<p>Remote host reset the connection request.\n"],["Errno::EPROTO","","Errno/EPROTO.html","","<p>Protocol error.\n"],["Etc","","Etc.html","","<p>The Etc module provides access to information typically stored in files in\nthe /etc directory on Unix …\n"],["Exception","","Exception.html","","<p>Descendants of class Exception are used to communicate between Kernel#raise\nand <code>rescue</code> statements in …\n"],["Exception2MessageMapper","","Exception2MessageMapper.html","","<p>Helper module for easily defining exceptions with predefined messages.\n<p>Usage\n<p>1.\n"],["Exception2MessageMapper::E2MM","","Exception2MessageMapper/E2MM.html","",""],["FalseClass","","FalseClass.html","","<p>The global value <code>false</code> is the only instance of class\n<code>FalseClass</code> and represents a logically false value …\n"],["Fcntl","","Fcntl.html","","<p>Fcntl loads the constants defined in the system&#39;s &lt;fcntl.h&gt; C\nheader file, and used with both …\n"],["Fiber","","Fiber.html","","<p>Fibers are primitives for implementing light weight cooperative concurrency\nin Ruby. Basically they are …\n"],["FiberError","","FiberError.html","","<p>Raised when an invalid operation is attempted on a Fiber, in particular\nwhen attempting to call/resume …\n"],["Fiddle","","Fiddle.html","","<p>A libffi wrapper for Ruby.\n<p>Description\n<p>Fiddle is an extension to translate a foreign function interface …\n"],["Fiddle::BasicTypes","","Fiddle/BasicTypes.html","","<p>Adds basic type aliases to the including class for use with\nFiddle::Importer.\n<p>The aliases added are <code>uint</code> …\n"],["Fiddle::CParser","","Fiddle/CParser.html","","<p>A mixin that provides methods for parsing C struct and prototype\nsignatures.\n<p>Example\n\n<pre>require &#39;fiddle/import&#39; ...</pre>\n"],["Fiddle::CStruct","","Fiddle/CStruct.html","","<p>C struct shell\n"],["Fiddle::CStructBuilder","","Fiddle/CStructBuilder.html","","<p>Used to construct C classes (CUnion, CStruct, etc)\n<p>Fiddle::Importer#struct and Fiddle::Importer#union …\n"],["Fiddle::CStructEntity","","Fiddle/CStructEntity.html","","<p>A C struct wrapper\n"],["Fiddle::CUnion","","Fiddle/CUnion.html","","<p>C union shell\n"],["Fiddle::CUnionEntity","","Fiddle/CUnionEntity.html","","<p>A C union wrapper\n"],["Fiddle::Closure","","Fiddle/Closure.html","","<p>Description\n<p>An FFI closure wrapper, for handling callbacks.\n<p>Example\n"],["Fiddle::Closure::BlockCaller","","Fiddle/Closure/BlockCaller.html","","<p>Extends Fiddle::Closure to allow for building the closure in a block\n"],["Fiddle::CompositeHandler","","Fiddle/CompositeHandler.html","","<p>Used internally by Fiddle::Importer\n"],["Fiddle::DLError","","Fiddle/DLError.html","","<p>standard dynamic load exception\n"],["Fiddle::Function","","Fiddle/Function.html","","<p>Description\n<p>A representation of a C function\n<p>Examples\n"],["Fiddle::Handle","","Fiddle/Handle.html","","<p>The Fiddle::Handle is the manner to access the dynamic library\n<p>Example\n<p>Setup\n"],["Fiddle::Importer","","Fiddle/Importer.html","","<p>A DSL that provides the means to dynamically load libraries and build\nmodules around them including calling …\n"],["Fiddle::Pointer","","Fiddle/Pointer.html","","<p>Fiddle::Pointer is a class to handle C pointers\n"],["Fiddle::Win32Types","","Fiddle/Win32Types.html","","<p>Adds Windows type aliases to the including class for use with\nFiddle::Importer.\n<p>The aliases added are: …\n"],["File","","File.html","","<p>A <code>File</code> is an abstraction of any file object accessible by the\nprogram and is closely associated with …\n"],["File::Constants","","File/Constants.html","","<p>File::Constants provides file-related constants.  All possible file\nconstants are listed in the documentation …\n"],["File::Stat","","File/Stat.html","","<p>Objects of class <code>File::Stat</code> encapsulate common status\ninformation for <code>File</code> objects. The information is …\n"],["FileTest","","FileTest.html","","<p><code>FileTest</code> implements file test operations similar to those used\nin <code>File::Stat</code>. It exists as a standalone …\n"],["FileUtils","","FileUtils.html","","<p>fileutils.rb\n<p>Copyright © 2000-2007 Minero Aoki\n<p>This program is free software. You can distribute/modify …\n"],["FileUtils::DryRun","","FileUtils/DryRun.html","","<p>This module has all methods of FileUtils module, but never changes\nfiles/directories, with printing message …\n"],["FileUtils::LowMethods","","FileUtils/LowMethods.html","",""],["FileUtils::NoWrite","","FileUtils/NoWrite.html","","<p>This module has all methods of FileUtils module, but never changes\nfiles/directories.  This equates to …\n"],["FileUtils::StreamUtils_","","FileUtils/StreamUtils_.html","",""],["FileUtils::Verbose","","FileUtils/Verbose.html","","<p>This module has all methods of FileUtils module, but it outputs messages\nbefore acting.  This equates …\n"],["Find","","Find.html","","<p>The <code>Find</code> module supports the top-down traversal of a set of\nfile paths.\n<p>For example, to total the size …\n"],["Float","","Float.html","","<p>BigDecimal extends the native Float class to provide the #to_d method.\n<p>When you require BigDecimal in …\n"],["FloatDomainError","","FloatDomainError.html","","<p>Raised when attempting to convert special float values (in particular\n<code>infinite</code> or <code>NaN</code>) to numerical classes …\n"],["Forwardable","","Forwardable.html","","<p>The Forwardable module provides delegation of specified methods to a\ndesignated object, using the methods …\n"],["GC","","GC.html","","<p>The GC module provides an interface to Ruby&#39;s mark and sweep garbage\ncollection mechanism.\n<p>Some of …\n"],["GC::Profiler","","GC/Profiler.html","","<p>The GC profiler provides access to information on GC runs including time,\nlength and object space size. …\n"],["GDBM","","GDBM.html","","<p>Summary\n<p>Ruby extension for GNU dbm (gdbm) – a simple database engine for storing\nkey-value pairs on disk. …\n"],["GDBMError","","GDBMError.html","",""],["GDBMFatalError","","GDBMFatalError.html","",""],["Gem","","Gem.html","","<p>RubyGems is the Ruby standard for publishing and managing third party\nlibraries.\n<p>For user documentation, …\n"],["Gem::AvailableSet","","Gem/AvailableSet.html","",""],["Gem::BasicSpecification","","Gem/BasicSpecification.html","","<p>BasicSpecification is an abstract class which implements some common code\nused by both Specification …\n"],["Gem::Command","","Gem/Command.html","","<p>Base class for all Gem commands.  When creating a new gem command, define\n#initialize, #execute, #arguments …\n"],["Gem::CommandLineError","","Gem/CommandLineError.html","",""],["Gem::CommandManager","","Gem/CommandManager.html","","<p>The command manager registers and installs all the individual sub-commands\nsupported by the gem command. …\n"],["Gem::Commands","","Gem/Commands.html","","<p>Commands will be placed in this namespace\n"],["Gem::Commands::BuildCommand","","Gem/Commands/BuildCommand.html","",""],["Gem::Commands::CertCommand","","Gem/Commands/CertCommand.html","",""],["Gem::Commands::CheckCommand","","Gem/Commands/CheckCommand.html","",""],["Gem::Commands::CleanupCommand","","Gem/Commands/CleanupCommand.html","",""],["Gem::Commands::ContentsCommand","","Gem/Commands/ContentsCommand.html","",""],["Gem::Commands::DependencyCommand","","Gem/Commands/DependencyCommand.html","",""],["Gem::Commands::EnvironmentCommand","","Gem/Commands/EnvironmentCommand.html","",""],["Gem::Commands::FetchCommand","","Gem/Commands/FetchCommand.html","",""],["Gem::Commands::GenerateIndexCommand","","Gem/Commands/GenerateIndexCommand.html","","<p>Generates a index files for use as a gem server.\n<p>See `gem help generate_index`\n"],["Gem::Commands::HelpCommand","","Gem/Commands/HelpCommand.html","",""],["Gem::Commands::InstallCommand","","Gem/Commands/InstallCommand.html","","<p>Gem installer command line tool\n<p>See `gem help install`\n"],["Gem::Commands::ListCommand","","Gem/Commands/ListCommand.html","","<p>An alternate to Gem::Commands::QueryCommand that searches for gems starting\nwith the supplied argument. …\n"],["Gem::Commands::LockCommand","","Gem/Commands/LockCommand.html","",""],["Gem::Commands::MirrorCommand","","Gem/Commands/MirrorCommand.html","",""],["Gem::Commands::OpenCommand","","Gem/Commands/OpenCommand.html","",""],["Gem::Commands::OutdatedCommand","","Gem/Commands/OutdatedCommand.html","",""],["Gem::Commands::OwnerCommand","","Gem/Commands/OwnerCommand.html","",""],["Gem::Commands::PristineCommand","","Gem/Commands/PristineCommand.html","",""],["Gem::Commands::PushCommand","","Gem/Commands/PushCommand.html","",""],["Gem::Commands::QueryCommand","","Gem/Commands/QueryCommand.html","",""],["Gem::Commands::RdocCommand","","Gem/Commands/RdocCommand.html","",""],["Gem::Commands::SearchCommand","","Gem/Commands/SearchCommand.html","",""],["Gem::Commands::ServerCommand","","Gem/Commands/ServerCommand.html","",""],["Gem::Commands::SetupCommand","","Gem/Commands/SetupCommand.html","","<p>Installs RubyGems itself.  This command is ordinarily only available from a\nRubyGems checkout or tarball. …\n"],["Gem::Commands::SourcesCommand","","Gem/Commands/SourcesCommand.html","",""],["Gem::Commands::SpecificationCommand","","Gem/Commands/SpecificationCommand.html","",""],["Gem::Commands::StaleCommand","","Gem/Commands/StaleCommand.html","",""],["Gem::Commands::UninstallCommand","","Gem/Commands/UninstallCommand.html","","<p>Gem uninstaller command line tool\n<p>See `gem help uninstall`\n"],["Gem::Commands::UnpackCommand","","Gem/Commands/UnpackCommand.html","",""],["Gem::Commands::UpdateCommand","","Gem/Commands/UpdateCommand.html","",""],["Gem::Commands::WhichCommand","","Gem/Commands/WhichCommand.html","",""],["Gem::Commands::YankCommand","","Gem/Commands/YankCommand.html","",""],["Gem::ConfigFile","","Gem/ConfigFile.html","","<p>Gem::ConfigFile RubyGems options and gem command options from gemrc.\n<p>gemrc is a YAML file that uses strings …\n"],["Gem::ConflictError","","Gem/ConflictError.html","","<p>Raised when there are conflicting gem specs loaded\n"],["Gem::ConsoleUI","","Gem/ConsoleUI.html","","<p>Subclass of StreamUI that instantiates the user interaction using STDIN,\nSTDOUT, and STDERR.\n"],["Gem::DefaultUserInteraction","","Gem/DefaultUserInteraction.html","","<p>When rubygems/test_case is required the default user interaction is a\nMockGemUi.\n<p>Module that defines the …\n"],["Gem::Dependency","","Gem/Dependency.html","",""],["Gem::DependencyError","","Gem/DependencyError.html","",""],["Gem::DependencyInstaller","","Gem/DependencyInstaller.html","","<p>Installs a gem along with all its dependencies from local and remote gems.\n"],["Gem::DependencyList","","Gem/DependencyList.html","","<p>Gem::DependencyList is used for installing and uninstalling gems in the\ncorrect order to avoid conflicts. …\n"],["Gem::DependencyRemovalException","","Gem/DependencyRemovalException.html","",""],["Gem::DependencyResolutionError","","Gem/DependencyResolutionError.html","","<p>Raised by Gem::Resolver when a Gem::Dependency::Conflict reaches the\ntoplevel.  Indicates which dependencies …\n"],["Gem::Deprecate","","Gem/Deprecate.html","","<p>Provides a single method <code>deprecate</code> to be used to declare when\nsomething is going away.\n\n<pre>class Legacy\n  ...</pre>\n"],["Gem::Doctor","","Gem/Doctor.html","","<p>Cleans up after a partially-failed uninstall or for an invalid\nGem::Specification.\n<p>If a specification …\n"],["Gem::DocumentError","","Gem/DocumentError.html","",""],["Gem::EndOfYAMLException","","Gem/EndOfYAMLException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::ErrorReason","","Gem/ErrorReason.html","",""],["Gem::Exception","","Gem/Exception.html","","<p>Base exception class for RubyGems.  All exception raised by RubyGems are a\nsubclass of this one.\n"],["Gem::Ext","","Gem/Ext.html","","<p>Classes for building C extensions live here.\n"],["Gem::Ext::BuildError","","Gem/Ext/BuildError.html","","<p>Raised when there is an error while building extensions.\n"],["Gem::Ext::Builder","","Gem/Ext/Builder.html","",""],["Gem::Ext::CmakeBuilder","","Gem/Ext/CmakeBuilder.html","",""],["Gem::Ext::ConfigureBuilder","","Gem/Ext/ConfigureBuilder.html","",""],["Gem::Ext::ExtConfBuilder","","Gem/Ext/ExtConfBuilder.html","",""],["Gem::Ext::RakeBuilder","","Gem/Ext/RakeBuilder.html","",""],["Gem::FakeFetcher","","Gem/FakeFetcher.html","","<p>A fake Gem::RemoteFetcher for use in tests or to avoid real live HTTP\nrequests when testing code that …\n"],["Gem::FilePermissionError","","Gem/FilePermissionError.html","","<p>Signals that a file permission error is preventing the user from operating\non the given directory.\n"],["Gem::FormatException","","Gem/FormatException.html","","<p>Used to raise parsing and loading errors\n"],["Gem::GemNotFoundException","","Gem/GemNotFoundException.html","",""],["Gem::GemNotInHomeException","","Gem/GemNotInHomeException.html","","<p>Raised when attempting to uninstall a gem that isn&#39;t in GEM_HOME.\n"],["Gem::GemRunner","","Gem/GemRunner.html","","<p>Run an instance of the gem program.\n<p>Gem::GemRunner is only intended for internal use by RubyGems itself. …\n"],["Gem::GemcutterUtilities","","Gem/GemcutterUtilities.html","","<p>Utility methods for using the RubyGems API.\n"],["Gem::ImpossibleDependenciesError","","Gem/ImpossibleDependenciesError.html","","<p>Raised by Gem::Resolver when dependencies conflict and create the inability\nto find a valid possible …\n"],["Gem::Indexer","","Gem/Indexer.html","","<p>Top level class for building the gem repository index.\n"],["Gem::InstallError","","Gem/InstallError.html","",""],["Gem::InstallUpdateOptions","","Gem/InstallUpdateOptions.html","","<p>Mixin methods for install and update options for Gem::Commands\n"],["Gem::Installer","","Gem/Installer.html","","<p>The installer installs the files contained in the .gem into the Gem.home.\n<p>Gem::Installer does the work …\n"],["Gem::Installer::FakePackage","","Gem/Installer/FakePackage.html","",""],["Gem::InstallerTestCase","","Gem/InstallerTestCase.html","","<p>A test case for Gem::Installer.\n"],["Gem::InvalidSpecificationException","","Gem/InvalidSpecificationException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::Licenses","","Gem/Licenses.html","",""],["Gem::List","","Gem/List.html","",""],["Gem::LoadError","","Gem/LoadError.html","","<p>Raised when RubyGems is unable to load or activate a gem.  Contains the\nname and version requirements …\n"],["Gem::LocalRemoteOptions","","Gem/LocalRemoteOptions.html","","<p>Mixin methods for local and remote Gem::Command options.\n"],["Gem::MissingSpecError","","Gem/MissingSpecError.html","","<p>Raised when trying to activate a gem, and that gem does not exist on the\nsystem.  Instead of rescuing …\n"],["Gem::MissingSpecVersionError","","Gem/MissingSpecVersionError.html","","<p>Raised when trying to activate a gem, and the gem exists on the system, but\nnot the requested version. …\n"],["Gem::MockGemUi","","Gem/MockGemUi.html","","<p>This Gem::StreamUI subclass records input and output to StringIO for\nretrieval during tests.\n"],["Gem::MockGemUi::InputEOFError","","Gem/MockGemUi/InputEOFError.html","","<p>Raised when you haven&#39;t provided enough input to your MockGemUi\n"],["Gem::MockGemUi::SystemExitException","","Gem/MockGemUi/SystemExitException.html","",""],["Gem::MockGemUi::TTY","","Gem/MockGemUi/TTY.html","",""],["Gem::MockGemUi::TermError","","Gem/MockGemUi/TermError.html","",""],["Gem::NameTuple","","Gem/NameTuple.html","",""],["Gem::NoAliasYAMLTree","","Gem/NoAliasYAMLTree.html","",""],["Gem::OperationNotSupportedError","","Gem/OperationNotSupportedError.html","",""],["Gem::Package","","Gem/Package.html","",""],["Gem::Package::DigestIO","","Gem/Package/DigestIO.html","","<p>IO wrapper that creates digests of contents written to the IO it wraps.\n"],["Gem::Package::Error","","Gem/Package/Error.html","",""],["Gem::Package::FormatError","","Gem/Package/FormatError.html","",""],["Gem::Package::NonSeekableIO","","Gem/Package/NonSeekableIO.html","",""],["Gem::Package::Old","","Gem/Package/Old.html","","<p>The format class knows the guts of the ancient .gem file format and\nprovides the capability to read such …\n"],["Gem::Package::PathError","","Gem/Package/PathError.html","",""],["Gem::Package::TarHeader","","Gem/Package/TarHeader.html","","<p>A header for a tar file\n"],["Gem::Package::TarInvalidError","","Gem/Package/TarInvalidError.html","","<p>Raised when a tar file is corrupt\n"],["Gem::Package::TarReader","","Gem/Package/TarReader.html","","<p>TarReader reads tar files and allows iteration over their items\n"],["Gem::Package::TarReader::Entry","","Gem/Package/TarReader/Entry.html","","<p>Class for reading entries out of a tar file\n"],["Gem::Package::TarReader::UnexpectedEOF","","Gem/Package/TarReader/UnexpectedEOF.html","","<p>Raised if the tar IO is not seekable\n"],["Gem::Package::TarTestCase","","Gem/Package/TarTestCase.html","","<p>A test case for Gem::Package::Tar* classes\n"],["Gem::Package::TarWriter","","Gem/Package/TarWriter.html","","<p>Allows writing of tar files\n"],["Gem::Package::TarWriter::BoundedStream","","Gem/Package/TarWriter/BoundedStream.html","","<p>IO wrapper that allows writing a limited amount of data\n"],["Gem::Package::TarWriter::FileOverflow","","Gem/Package/TarWriter/FileOverflow.html","",""],["Gem::Package::TarWriter::RestrictedStream","","Gem/Package/TarWriter/RestrictedStream.html","","<p>IO wrapper that provides only #write\n"],["Gem::Package::TooLongFileName","","Gem/Package/TooLongFileName.html","",""],["Gem::PackageTask","","Gem/PackageTask.html","","<p>Create a package based upon a Gem::Specification.  Gem packages, as well as\nzip files and tar/gzipped …\n"],["Gem::PathSupport","","Gem/PathSupport.html","","<p>Gem::PathSupport facilitates the GEM_HOME and GEM_PATH environment settings\nto the rest of RubyGems. …\n"],["Gem::Platform","","Gem/Platform.html","","<p>Available list of platforms for targeting Gem installations.\n<p>See `gem help platform` for information on …\n"],["Gem::PlatformMismatch","","Gem/PlatformMismatch.html","","<p>Generated when trying to lookup a gem to indicate that the gem was found,\nbut that it isn&#39;t usable …\n"],["Gem::RbConfig","","Gem/RbConfig.html","",""],["Gem::RemoteError","","Gem/RemoteError.html","","<p>Signals that a remote operation cannot be conducted, probably due to not\nbeing connected (or just not …\n"],["Gem::RemoteFetcher","","Gem/RemoteFetcher.html","","<p>RemoteFetcher handles the details of fetching gems and gem information from\na remote source.\n"],["Gem::RemoteFetcher::FetchError","","Gem/RemoteFetcher/FetchError.html","","<p>A FetchError exception wraps up the various possible IO and HTTP failures\nthat could happen while downloading …\n"],["Gem::RemoteFetcher::UnknownHostError","","Gem/RemoteFetcher/UnknownHostError.html","","<p>A FetchError that indicates that the reason for not being able to fetch\ndata was that the host could …\n"],["Gem::RemoteInstallationCancelled","","Gem/RemoteInstallationCancelled.html","",""],["Gem::RemoteInstallationSkipped","","Gem/RemoteInstallationSkipped.html","",""],["Gem::RemoteSourceException","","Gem/RemoteSourceException.html","","<p>Represents an error communicating via HTTP.\n"],["Gem::Request","","Gem/Request.html","",""],["Gem::RequestSet","","Gem/RequestSet.html","","<p>A RequestSet groups a request to activate a set of dependencies.\n\n<pre>nokogiri = Gem::Dependency.new &#39;nokogiri&#39;, ...</pre>\n"],["Gem::RequestSet::GemDependencyAPI","","Gem/RequestSet/GemDependencyAPI.html","","<p>A semi-compatible DSL for the Bundler Gemfile and Isolate gem dependencies\nfiles.\n<p>To work with both the …\n"],["Gem::RequestSet::Lockfile","","Gem/RequestSet/Lockfile.html","","<p>Parses a gem.deps.rb.lock file and constructs a LockSet containing the\ndependencies found inside.  If …\n"],["Gem::RequestSet::Lockfile::ParseError","","Gem/RequestSet/Lockfile/ParseError.html","","<p>Raised when a lockfile cannot be parsed\n"],["Gem::RequestSet::Lockfile::Parser","","Gem/RequestSet/Lockfile/Parser.html","",""],["Gem::RequestSet::Lockfile::Tokenizer","","Gem/RequestSet/Lockfile/Tokenizer.html","",""],["Gem::Requirement","","Gem/Requirement.html","","<p>A Requirement is a set of one or more version restrictions. It supports a\nfew (<code>=, !=, &gt;, &lt;, &gt;=,</code> …\n"],["Gem::Requirement::BadRequirementError","","Gem/Requirement/BadRequirementError.html","","<p>Raised when a bad requirement is encountered\n"],["Gem::Resolver","","Gem/Resolver.html","","<p>Given a set of Gem::Dependency objects as <code>needed</code> and a way to\nquery the set of available specs via <code>set</code> …\n"],["Gem::Resolver::APISet","","Gem/Resolver/APISet.html","","<p>The global rubygems pool, available via the rubygems.org API. Returns\ninstances of APISpecification. …\n"],["Gem::Resolver::APISpecification","","Gem/Resolver/APISpecification.html","","<p>Represents a specification retrieved via the rubygems.org API.\n<p>This is used to avoid loading the full …\n"],["Gem::Resolver::ActivationRequest","","Gem/Resolver/ActivationRequest.html","","<p>Specifies a Specification object that should be activated.  Also contains a\ndependency that was used …\n"],["Gem::Resolver::BestSet","","Gem/Resolver/BestSet.html","","<p>The BestSet chooses the best available method to query a remote index.\n<p>It combines IndexSet and APISet …\n"],["Gem::Resolver::ComposedSet","","Gem/Resolver/ComposedSet.html","","<p>A ComposedSet allows multiple sets to be queried like a single set.\n<p>To create a composed set with any …\n"],["Gem::Resolver::Conflict","","Gem/Resolver/Conflict.html","","<p>Used internally to indicate that a dependency conflicted with a spec that\nwould be activated.\n"],["Gem::Resolver::CurrentSet","","Gem/Resolver/CurrentSet.html","","<p>A set which represents the installed gems. Respects all the normal settings\nthat control where to look …\n"],["Gem::Resolver::DependencyRequest","","Gem/Resolver/DependencyRequest.html","","<p>Used Internally. Wraps a Dependency object to also track which spec\ncontained the Dependency.\n"],["Gem::Resolver::GitSet","","Gem/Resolver/GitSet.html","","<p>A GitSet represents gems that are sourced from git repositories.\n<p>This is used for gem dependency file …\n"],["Gem::Resolver::GitSpecification","","Gem/Resolver/GitSpecification.html","","<p>A GitSpecification represents a gem that is sourced from a git repository\nand is being loaded through …\n"],["Gem::Resolver::IndexSet","","Gem/Resolver/IndexSet.html","","<p>The global rubygems pool represented via the traditional source index.\n"],["Gem::Resolver::IndexSpecification","","Gem/Resolver/IndexSpecification.html","","<p>Represents a possible Specification object returned from IndexSet.  Used to\ndelay needed to download …\n"],["Gem::Resolver::InstalledSpecification","","Gem/Resolver/InstalledSpecification.html","","<p>An InstalledSpecification represents a gem that is already installed\nlocally.\n"],["Gem::Resolver::InstallerSet","","Gem/Resolver/InstallerSet.html","","<p>A set of gems for installation sourced from remote sources and local .gem\nfiles\n"],["Gem::Resolver::LocalSpecification","","Gem/Resolver/LocalSpecification.html","","<p>A LocalSpecification comes from a .gem file on the local filesystem.\n"],["Gem::Resolver::LockSet","","Gem/Resolver/LockSet.html","","<p>A set of gems from a gem dependencies lockfile.\n"],["Gem::Resolver::LockSpecification","","Gem/Resolver/LockSpecification.html","","<p>The LockSpecification comes from a lockfile (Gem::RequestSet::Lockfile).\n<p>A LockSpecification&#39;s dependency …\n"],["Gem::Resolver::Molinillo","","Gem/Resolver/Molinillo.html","","<p>Gem::Resolver::Molinillo is a generic dependency resolution algorithm.\n"],["Gem::Resolver::Molinillo::CircularDependencyError","","Gem/Resolver/Molinillo/CircularDependencyError.html","","<p>An error caused by attempting to fulfil a dependency that was circular\n<p>@note This exception will be thrown …\n"],["Gem::Resolver::Molinillo::Delegates","","Gem/Resolver/Molinillo/Delegates.html","","<p>@!visibility private\n"],["Gem::Resolver::Molinillo::Delegates::ResolutionState","","Gem/Resolver/Molinillo/Delegates/ResolutionState.html","","<p>Delegates all {Gem::Resolver::Molinillo::ResolutionState} methods to a\n`#state` property.\n"],["Gem::Resolver::Molinillo::Delegates::SpecificationProvider","","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html","","<p>Delegates all {Gem::Resolver::Molinillo::SpecificationProvider} methods to\na `#specification_provider` …\n"],["Gem::Resolver::Molinillo::DependencyGraph","","Gem/Resolver/Molinillo/DependencyGraph.html","","<p>A directed acyclic graph that is tuned to hold named dependencies\n"],["Gem::Resolver::Molinillo::DependencyGraph::Action","","Gem/Resolver/Molinillo/DependencyGraph/Action.html","","<p>An action that modifies a {DependencyGraph} that is reversible. @abstract\n"],["Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html","","<p>@!visibility private (see DependencyGraph#add_edge_no_circular)\n"],["Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html","","<p>@!visibility private (see DependencyGraph#delete_edge)\n"],["Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html","","<p>@!visibility private @see DependencyGraph#detach_vertex_named\n"],["Gem::Resolver::Molinillo::DependencyGraph::Log","","Gem/Resolver/Molinillo/DependencyGraph/Log.html","","<p>A log for dependency graph actions\n"],["Gem::Resolver::Molinillo::DependencyGraph::Tag","","Gem/Resolver/Molinillo/DependencyGraph/Tag.html","","<p>@!visibility private @see DependencyGraph#tag\n"],["Gem::Resolver::Molinillo::DependencyGraph::Vertex","","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html","","<p>A vertex in a {DependencyGraph} that encapsulates a {#name} and a\n{#payload}\n"],["Gem::Resolver::Molinillo::DependencyState","","Gem/Resolver/Molinillo/DependencyState.html","","<p>A state that encapsulates a set of {#requirements} with an {Array} of\npossibilities\n"],["Gem::Resolver::Molinillo::NoSuchDependencyError","","Gem/Resolver/Molinillo/NoSuchDependencyError.html","","<p>An error caused by searching for a dependency that is completely unknown,\ni.e. has no versions available …\n"],["Gem::Resolver::Molinillo::PossibilityState","","Gem/Resolver/Molinillo/PossibilityState.html","","<p>A state that encapsulates a single possibility to fulfill the given\n{#requirement}\n"],["Gem::Resolver::Molinillo::ResolutionState","","Gem/Resolver/Molinillo/ResolutionState.html","",""],["Gem::Resolver::Molinillo::Resolver","","Gem/Resolver/Molinillo/Resolver.html","","<p>This class encapsulates a dependency resolver. The resolver is responsible\nfor determining which set …\n"],["Gem::Resolver::Molinillo::Resolver::Resolution","","Gem/Resolver/Molinillo/Resolver/Resolution.html","","<p>A specific resolution from a given {Resolver}\n"],["Gem::Resolver::Molinillo::ResolverError","","Gem/Resolver/Molinillo/ResolverError.html","","<p>An error that occurred during the resolution process\n"],["Gem::Resolver::Molinillo::SpecificationProvider","","Gem/Resolver/Molinillo/SpecificationProvider.html","","<p>Provides information about specifcations and dependencies to the resolver,\nallowing the {Resolver} class …\n"],["Gem::Resolver::Molinillo::UI","","Gem/Resolver/Molinillo/UI.html","","<p>Conveys information about the resolution process to a user.\n"],["Gem::Resolver::Molinillo::VersionConflict","","Gem/Resolver/Molinillo/VersionConflict.html","","<p>An error caused by conflicts in version\n"],["Gem::Resolver::RequirementList","","Gem/Resolver/RequirementList.html","","<p>The RequirementList is used to hold the requirements being considered while\nresolving a set of gems. …\n"],["Gem::Resolver::Set","","Gem/Resolver/Set.html","","<p>Resolver sets are used to look up specifications (and their dependencies)\nused in resolution.  This set …\n"],["Gem::Resolver::SourceSet","","Gem/Resolver/SourceSet.html","","<p>The SourceSet chooses the best available method to query a remote index.\n<p>Kind off like BestSet but filters …\n"],["Gem::Resolver::SpecSpecification","","Gem/Resolver/SpecSpecification.html","","<p>The Resolver::SpecSpecification contains common functionality for Resolver\nspecifications that are backed …\n"],["Gem::Resolver::Specification","","Gem/Resolver/Specification.html","","<p>A Resolver::Specification contains a subset of the information contained in\na Gem::Specification.  Only …\n"],["Gem::Resolver::Stats","","Gem/Resolver/Stats.html","",""],["Gem::Resolver::VendorSet","","Gem/Resolver/VendorSet.html","","<p>A VendorSet represents gems that have been unpacked into a specific\ndirectory that contains a gemspec. …\n"],["Gem::Resolver::VendorSpecification","","Gem/Resolver/VendorSpecification.html","","<p>A VendorSpecification represents a gem that has been unpacked into a\nproject and is being loaded through …\n"],["Gem::RubyVersionMismatch","","Gem/RubyVersionMismatch.html","","<p>Raised when a gem dependencies file specifies a ruby version that does not\nmatch the current version. …\n"],["Gem::Security","","Gem/Security.html","","<p>Signing gems\n<p>The Gem::Security implements cryptographic signatures for gems.  The\nsection below is a step-by-step …\n"],["Gem::Security::Exception","","Gem/Security/Exception.html","","<p>Gem::Security default exception type\n"],["Gem::Security::Policy","","Gem/Security/Policy.html","","<p>A Gem::Security::Policy object encapsulates the settings for verifying\nsigned gem files.  This is the …\n"],["Gem::Security::Signer","","Gem/Security/Signer.html","","<p>Basic OpenSSL-based package signing class.\n"],["Gem::Security::TrustDir","","Gem/Security/TrustDir.html","","<p>The TrustDir manages the trusted certificates for gem signature\nverification.\n"],["Gem::Server","","Gem/Server.html","","<p>Gem::Server and allows users to serve gems for consumption by `gem\n–remote-install`.\n<p>gem_server starts …\n"],["Gem::SilentUI","","Gem/SilentUI.html","","<p>SilentUI is a UI choice that is absolutely silent.\n"],["Gem::Source","","Gem/Source.html","","<p>A Source knows how to list and fetch gems from a RubyGems marshal index.\n<p>There are other Source subclasses …\n"],["Gem::Source::Git","","Gem/Source/Git.html","","<p>A git gem for use in a gem dependencies file.\n<p>Example:\n\n<pre>source =\n  Gem::Source::Git.new &#39;rake&#39;, &#39;git@example:rake.git&#39;, ...</pre>\n"],["Gem::Source::Installed","","Gem/Source/Installed.html","","<p>Represents an installed gem.  This is used for dependency resolution.\n"],["Gem::Source::Local","","Gem/Source/Local.html","","<p>The local source finds gems in the current directory for fulfilling\ndependencies.\n"],["Gem::Source::Lock","","Gem/Source/Lock.html","","<p>A Lock source wraps an installed gem&#39;s source and sorts before other\nsources during dependency resolution. …\n"],["Gem::Source::SpecificFile","","Gem/Source/SpecificFile.html","","<p>A source representing a single .gem file.  This is used for installation of\nlocal gems.\n"],["Gem::Source::Vendor","","Gem/Source/Vendor.html","","<p>This represents a vendored source that is similar to an installed gem.\n"],["Gem::SourceFetchProblem","","Gem/SourceFetchProblem.html","","<p>An error that indicates we weren&#39;t able to fetch some data from a\nsource\n"],["Gem::SourceList","","Gem/SourceList.html","","<p>The SourceList represents the sources rubygems has been configured to use.\nA source may be created from …\n"],["Gem::SpecFetcher","","Gem/SpecFetcher.html","","<p>SpecFetcher handles metadata updates from remote gem repositories.\n"],["Gem::SpecificGemNotFoundException","","Gem/SpecificGemNotFoundException.html","","<p>Raised by the DependencyInstaller when a specific gem cannot be found\n"],["Gem::Specification","","Gem/Specification.html","","<p>The Specification class contains the information for a Gem.  Typically\ndefined in a .gemspec file or …\n"],["Gem::StreamUI","","Gem/StreamUI.html","","<p>Gem::StreamUI implements a simple stream based user interface.\n"],["Gem::StreamUI::SilentDownloadReporter","","Gem/StreamUI/SilentDownloadReporter.html","","<p>An absolutely silent download reporter.\n"],["Gem::StreamUI::SilentProgressReporter","","Gem/StreamUI/SilentProgressReporter.html","","<p>An absolutely silent progress reporter.\n"],["Gem::StreamUI::SimpleProgressReporter","","Gem/StreamUI/SimpleProgressReporter.html","","<p>A basic dotted progress reporter.\n"],["Gem::StreamUI::VerboseDownloadReporter","","Gem/StreamUI/VerboseDownloadReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StreamUI::VerboseProgressReporter","","Gem/StreamUI/VerboseProgressReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StubSpecification","","Gem/StubSpecification.html","","<p>Gem::StubSpecification reads the stub: line from the gemspec.  This\nprevents us having to eval the entire …\n"],["Gem::SystemExitException","","Gem/SystemExitException.html","","<p>Raised to indicate that a system exit should occur with the specified\nexit_code\n"],["Gem::TestCase","","Gem/TestCase.html","","<p>RubyGemTestCase provides a variety of methods for testing rubygems and\ngem-related behavior in a sandbox. …\n"],["Gem::TestCase::SpecFetcherSetup","","Gem/TestCase/SpecFetcherSetup.html","","<p>The SpecFetcherSetup allows easy setup of a remote source in RubyGems\ntests:\n\n<pre>spec_fetcher do |f|\n  f.gem ...</pre>\n"],["Gem::TestCase::StaticSet","","Gem/TestCase/StaticSet.html","","<p>The StaticSet is a static set of gem specifications used for testing only.\nIt is available by requiring …\n"],["Gem::Text","","Gem/Text.html","","<p>A collection of text-wrangling methods\n"],["Gem::Uninstaller","","Gem/Uninstaller.html","","<p>An Uninstaller.\n<p>The uninstaller fires pre and post uninstall hooks.  Hooks can be added\neither through …\n"],["Gem::UnsatisfiableDependencyError","","Gem/UnsatisfiableDependencyError.html","","<p>Raised by Resolver when a dependency requests a gem for which there is no\nspec.\n"],["Gem::UriFormatter","","Gem/UriFormatter.html","","<p>The UriFormatter handles URIs from user-input and escaping.\n\n<pre>uf = Gem::UriFormatter.new &#39;example.com&#39;\n ...</pre>\n"],["Gem::UserInteraction","","Gem/UserInteraction.html","","<p>UserInteraction allows RubyGems to interact with the user through standard\nmethods that can be replaced …\n"],["Gem::Util","","Gem/Util.html","","<p>This module contains various utility methods as module methods.\n"],["Gem::Validator","","Gem/Validator.html","","<p>Validator performs various gem file and gem database validation\n"],["Gem::VerificationError","","Gem/VerificationError.html","","<p>Raised by Gem::Validator when something is not right in a gem.\n"],["Gem::Version","","Gem/Version.html","","<p>The Version class processes string versions into comparable values. A\nversion string should normally …\n"],["Gem::VersionOption","","Gem/VersionOption.html","","<p>Mixin methods for –version and –platform Gem::Command options.\n"],["GetoptLong","","GetoptLong.html","","<p>The GetoptLong class allows you to parse command line options similarly to\nthe GNU getopt_long() C library …\n"],["GetoptLong::AmbiguousOption","","GetoptLong/AmbiguousOption.html","",""],["GetoptLong::Error","","GetoptLong/Error.html","","<p>Error types.\n"],["GetoptLong::InvalidOption","","GetoptLong/InvalidOption.html","",""],["GetoptLong::MissingArgument","","GetoptLong/MissingArgument.html","",""],["GetoptLong::NeedlessArgument","","GetoptLong/NeedlessArgument.html","",""],["HTTPMovedTemporarily","","HTTPMovedTemporarily.html","",""],["HTTPMultipleChoice","","HTTPMultipleChoice.html","",""],["HTTPRequestURITooLarge","","HTTPRequestURITooLarge.html","",""],["Hash","","Hash.html","","<p>A Hash is a dictionary-like collection of unique keys and their values.\nAlso called associative arrays, …\n"],["IO","","IO.html","","<p>Expect library adds the IO instance method #expect, which does similar act\nto tcl&#39;s expect extension. …\n"],["IO::EAGAINWaitReadable","","IO/EAGAINWaitReadable.html","",""],["IO::EAGAINWaitWritable","","IO/EAGAINWaitWritable.html","",""],["IO::EINPROGRESSWaitReadable","","IO/EINPROGRESSWaitReadable.html","",""],["IO::EINPROGRESSWaitWritable","","IO/EINPROGRESSWaitWritable.html","",""],["IO::EWOULDBLOCKWaitReadable","","IO/EWOULDBLOCKWaitReadable.html","",""],["IO::EWOULDBLOCKWaitWritable","","IO/EWOULDBLOCKWaitWritable.html","",""],["IO::WaitReadable","","IO/WaitReadable.html","",""],["IO::WaitWritable","","IO/WaitWritable.html","",""],["IO::generic_readable","","IO/generic_readable.html","",""],["IO::generic_writable","","IO/generic_writable.html","",""],["IOError","","IOError.html","","<p>Raised when an IO operation fails.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/etc/hosts&quot;</span>) {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">f</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&quot;example&quot;</span>}\n  <span class=\"ruby-comment\">#=&gt; IOError: not opened ...</span>\n</pre>\n"],["IPAddr","","IPAddr.html","","<p>IPAddr provides a set of methods to manipulate an IP address.  Both IPv4\nand IPv6 are supported.\n<p>Example …\n"],["IPAddr::AddressFamilyError","","IPAddr/AddressFamilyError.html","","<p>Raised when the address family is invalid such as an address with an\nunsupported family, an address with …\n"],["IPAddr::Error","","IPAddr/Error.html","","<p>Generic IPAddr related error. Exceptions raised in this class should\ninherit from Error.\n"],["IPAddr::InvalidAddressError","","IPAddr/InvalidAddressError.html","","<p>Raised when the provided IP address is an invalid address.\n"],["IPAddr::InvalidPrefixError","","IPAddr/InvalidPrefixError.html","","<p>Raised when the address is an invalid length.\n"],["IPSocket","","IPSocket.html","","<p>IPSocket is the super class of TCPSocket and UDPSocket.\n"],["IRB","","IRB.html","","<p>IRB stands for “interactive Ruby” and is a tool to interactively execute\nRuby expressions read …\n"],["IRB::Abort","","IRB/Abort.html","","<p>An exception raised by IRB.irb_abort\n"],["IRB::Context","","IRB/Context.html","","<p>A class that wraps the current state of the irb session, including the\nconfiguration of IRB.conf.\n"],["IRB::ContextExtender","","IRB/ContextExtender.html","","<p>Extends methods for the Context module\n"],["IRB::ExtendCommand","","IRB/ExtendCommand.html","",""],["IRB::ExtendCommand::ChangeWorkspace","","IRB/ExtendCommand/ChangeWorkspace.html","",""],["IRB::ExtendCommand::CurrentWorkingWorkspace","","IRB/ExtendCommand/CurrentWorkingWorkspace.html","",""],["IRB::ExtendCommand::Foreground","","IRB/ExtendCommand/Foreground.html","",""],["IRB::ExtendCommand::Fork","","IRB/ExtendCommand/Fork.html","",""],["IRB::ExtendCommand::Help","","IRB/ExtendCommand/Help.html","",""],["IRB::ExtendCommand::IrbCommand","","IRB/ExtendCommand/IrbCommand.html","",""],["IRB::ExtendCommand::Jobs","","IRB/ExtendCommand/Jobs.html","",""],["IRB::ExtendCommand::Kill","","IRB/ExtendCommand/Kill.html","",""],["IRB::ExtendCommand::Load","","IRB/ExtendCommand/Load.html","",""],["IRB::ExtendCommand::Nop","","IRB/ExtendCommand/Nop.html","",""],["IRB::ExtendCommand::PopWorkspace","","IRB/ExtendCommand/PopWorkspace.html","",""],["IRB::ExtendCommand::PushWorkspace","","IRB/ExtendCommand/PushWorkspace.html","",""],["IRB::ExtendCommand::Require","","IRB/ExtendCommand/Require.html","",""],["IRB::ExtendCommand::Source","","IRB/ExtendCommand/Source.html","",""],["IRB::ExtendCommand::Workspaces","","IRB/ExtendCommand/Workspaces.html","",""],["IRB::ExtendCommandBundle","","IRB/ExtendCommandBundle.html","","<p>Installs the default irb extensions command bundle.\n"],["IRB::FileInputMethod","","IRB/FileInputMethod.html","","<p>Use a File for IO with irb, see InputMethod\n"],["IRB::Frame","","IRB/Frame.html","",""],["IRB::InputMethod","","IRB/InputMethod.html","",""],["IRB::Inspector","","IRB/Inspector.html","","<p>An irb inspector\n<p>In order to create your own custom inspector there are two things you\nshould be aware …\n"],["IRB::Irb","","IRB/Irb.html","",""],["IRB::IrbLoader","","IRB/IrbLoader.html","","<p>Provides a few commands for loading files within an irb session.\n<p>See ExtendCommandBundle for more information. …\n"],["IRB::JobManager","","IRB/JobManager.html","",""],["IRB::LoadAbort","","IRB/LoadAbort.html","","<p>Raised in the event of an exception in a file loaded from an Irb session\n"],["IRB::Locale","","IRB/Locale.html","",""],["IRB::MethodExtender","","IRB/MethodExtender.html","","<p>A convenience module for extending Ruby methods.\n"],["IRB::Notifier","","IRB/Notifier.html","","<p>An output formatter used internally by the lexer.\n"],["IRB::Notifier::AbstractNotifier","","IRB/Notifier/AbstractNotifier.html","","<p>An abstract class, or superclass, for CompositeNotifier and LeveledNotifier\nto inherit. It provides several …\n"],["IRB::Notifier::CompositeNotifier","","IRB/Notifier/CompositeNotifier.html","","<p>A class that can be used to create a group of notifier objects with the\nintent of representing a leveled …\n"],["IRB::Notifier::LeveledNotifier","","IRB/Notifier/LeveledNotifier.html","","<p>A leveled notifier is comparable to the composite group from\nCompositeNotifier#notifiers.\n"],["IRB::Notifier::NoMsgNotifier","","IRB/Notifier/NoMsgNotifier.html","","<p>NoMsgNotifier is a LeveledNotifier that&#39;s used as the default notifier\nwhen creating a new CompositeNotifier …\n"],["IRB::OutputMethod","","IRB/OutputMethod.html","","<p>An abstract output class for IO in irb. This is mainly used internally by\nIRB::Notifier. You can define …\n"],["IRB::ReadlineInputMethod","","IRB/ReadlineInputMethod.html","",""],["IRB::SLex","","IRB/SLex.html","",""],["IRB::SLex::Node","","IRB/SLex/Node.html","",""],["IRB::StdioInputMethod","","IRB/StdioInputMethod.html","",""],["IRB::StdioOutputMethod","","IRB/StdioOutputMethod.html","","<p>A standard output printer\n"],["IRB::WorkSpace","","IRB/WorkSpace.html","",""],["IndexError","","IndexError.html","","<p>Raised when the given index is invalid.\n\n<pre>a = [:foo, :bar]\na.fetch(0)   #=&gt; :foo\na[4]         #=&gt; nil\na.fetch(4) ...</pre>\n"],["Integer","","Integer.html","","<p>BigDecimal extends the native Integer class to provide the #to_d method.\n<p>When you require the BigDecimal …\n"],["Interrupt","","Interrupt.html","","<p>Raised with the interrupt signal is received, typically because the user\npressed on Control-C (on most …\n"],["JSON","","JSON.html","","<p>JavaScript Object Notation (JSON)\n<p>JSON is a lightweight data-interchange format. It is easy for us humans …\n"],["JSON::CircularDatastructure","","JSON/CircularDatastructure.html","",""],["JSON::Ext","","JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON&#39;s\nfunctionality as C extensions.\n"],["JSON::GeneratorError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::GenericObject","","JSON/GenericObject.html","",""],["JSON::JSONError","","JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the\nsystem. Usually this means …\n"],["JSON::NestingError","","JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too\ndeep.\n"],["JSON::ParserError","","JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["JSON::UnparserError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["Jacobian","","Jacobian.html","","<p>require &#39;bigdecimal/jacobian&#39;\n<p>Provides methods to compute the Jacobian matrix of a set of equations …\n"],["Kconv","","Kconv.html","","<p>Kanji Converter for Ruby.\n"],["Kernel","","Kernel.html","","<p>RubyGems adds the #gem method to allow activation of specific gem versions\nand overrides the #require …\n"],["KeyError","","KeyError.html","","<p>Raised when the specified key is not found. It is a subclass of IndexError.\n\n<pre>h = {&quot;foo&quot; =&gt; :bar}\nh.fetch(&quot;foo&quot;) ...</pre>\n"],["LUSolve","","LUSolve.html","","<p>Solves a*x = b for x, using LU decomposition.\n"],["LoadError","","LoadError.html","","<p>Raised when a file required (a Ruby script, extension library, …) fails to\nload.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;this/file/does/not/exist&#39;</span>\n</pre>\n"],["LocalJumpError","","LocalJumpError.html","","<p>Raised when Ruby can&#39;t yield as requested.\n<p>A typical scenario is attempting to yield when no block …\n"],["Logger","","Logger.html","","<p>Description\n<p>The Logger class provides a simple but sophisticated logging utility that\nyou can use to output …\n"],["Logger::Formatter","","Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Logger::LogDevice","","Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::Period","","Logger/Period.html","",""],["Logger::Severity","","Logger/Severity.html","","<p>Logging severity.\n"],["MakeMakefile","","MakeMakefile.html","","<p>mkmf.rb is used by Ruby C extensions to generate a Makefile which will\ncorrectly compile and link the …\n"],["MakeMakefile::Logging","","MakeMakefile/Logging.html","",""],["MakeMakefile::RbConfig","","MakeMakefile/RbConfig.html","",""],["MakeMakefile::STRING_OR_FAILED_FORMAT","","MakeMakefile/STRING_OR_FAILED_FORMAT.html","",""],["Marshal","","Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte\nstream, allowing them to be stored …\n"],["MatchData","","MatchData.html","","<p><code>MatchData</code> is the type of the special variable <code>$~</code>,\nand is the type of the object returned by <code>Regexp#match</code> …\n"],["Math","","Math.html","","<p>When mathn is required, the Math module changes as follows:\n<p>Standard Math module behaviour:\n\n<pre>Math.sqrt(4/9) ...</pre>\n"],["Math::DomainError","","Math/DomainError.html","","<p>Raised when a mathematical function is evaluated outside of its domain of\ndefinition.\n<p>For example, since …\n"],["Matrix","","Matrix.html","","<p>The <code>Matrix</code> class represents a mathematical matrix. It provides\nmethods for creating matrices, operating …\n"],["Matrix::EigenvalueDecomposition","","Matrix/EigenvalueDecomposition.html","","<p>Eigenvalues and eigenvectors of a real matrix.\n<p>Computes the eigenvalues and eigenvectors of a matrix  …\n"],["Matrix::LUPDecomposition","","Matrix/LUPDecomposition.html","","<p>For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n\nunit lower triangular matrix …\n"],["Method","","Method.html","","<p>Method\n"],["Module","","Module.html","","<p>A <code>Module</code> is a collection of methods and constants. The methods\nin a module may be instance methods or …\n"],["Monitor","","Monitor.html","","<p>Use the Monitor class when you want to have a lock object for blocks with\nmutual exclusion.\n\n<pre>require &#39;monitor&#39; ...</pre>\n"],["MonitorMixin","","MonitorMixin.html","","<p>In concurrent programming, a monitor is an object or module intended to be\nused safely by more than one …\n"],["MonitorMixin::ConditionVariable","","MonitorMixin/ConditionVariable.html","","<p>FIXME: This isn&#39;t documented in Nutshell.\n<p>Since MonitorMixin.new_cond returns a ConditionVariable …\n"],["MonitorMixin::ConditionVariable::Timeout","","MonitorMixin/ConditionVariable/Timeout.html","",""],["Mutex_m","","Mutex_m.html","","<p>mutex_m.rb\n<p>When &#39;mutex_m&#39; is required, any object that extends or includes\nMutex_m will be treated …\n"],["NKF","","NKF.html","","<p>NKF - Ruby extension for Network Kanji Filter\n<p>Description\n<p>This is a Ruby Extension version of nkf (Network …\n"],["NameError","","NameError.html","","<p>Raised when a given name is invalid or undefined.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">foo</span>\n</pre>\n<p><em>raises the exception:</em>\n"],["Net","","Net.html","",""],["Net::APOP","","Net/APOP.html","","<p>This class is equivalent to POP3, except that it uses APOP authentication.\n"],["Net::APOPSession","","Net/APOP.html","","<p>This class is equivalent to POP3, except that it uses APOP authentication.\n"],["Net::FTP","","Net/FTP.html","","<p>This class implements the File Transfer Protocol.  If you have used a\ncommand-line FTP program, and are …\n"],["Net::FTP::BufferedSSLSocket","","Net/FTP/BufferedSSLSocket.html","",""],["Net::FTP::BufferedSocket","","Net/FTP/BufferedSocket.html","",""],["Net::FTP::MLSxEntry","","Net/FTP/MLSxEntry.html","","<p>MLSxEntry represents an entry in responses of MLST/MLSD. Each entry has the\nfacts (e.g., size, last modification …\n"],["Net::FTP::NullSocket","","Net/FTP/NullSocket.html","",""],["Net::FTPConnectionError","","Net/FTPConnectionError.html","",""],["Net::FTPError","","Net/FTPError.html","",""],["Net::FTPPermError","","Net/FTPPermError.html","",""],["Net::FTPProtoError","","Net/FTPProtoError.html","",""],["Net::FTPReplyError","","Net/FTPReplyError.html","",""],["Net::FTPTempError","","Net/FTPTempError.html","",""],["Net::HTTP","","Net/HTTP.html","","<p>An HTTP client API for Ruby.\n<p>Net::HTTP provides a rich library which can be used to build HTTP\nuser-agents. …\n"],["Net::HTTP::Copy","","Net/HTTP/Copy.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Delete","","Net/HTTP/Delete.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Get","","Net/HTTP/Get.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Head","","Net/HTTP/Head.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Lock","","Net/HTTP/Lock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Mkcol","","Net/HTTP/Mkcol.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Move","","Net/HTTP/Move.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Options","","Net/HTTP/Options.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Patch","","Net/HTTP/Patch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Post","","Net/HTTP/Post.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Propfind","","Net/HTTP/Propfind.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Proppatch","","Net/HTTP/Proppatch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Put","","Net/HTTP/Put.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Trace","","Net/HTTP/Trace.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Unlock","","Net/HTTP/Unlock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTPAccepted","","Net/HTTPAccepted.html","",""],["Net::HTTPBadGateway","","Net/HTTPBadGateway.html","",""],["Net::HTTPBadRequest","","Net/HTTPBadRequest.html","",""],["Net::HTTPBadResponse","","Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","Net/HTTPClientError.html","",""],["Net::HTTPConflict","","Net/HTTPConflict.html","",""],["Net::HTTPContinue","","Net/HTTPContinue.html","",""],["Net::HTTPCreated","","Net/HTTPCreated.html","",""],["Net::HTTPError","","Net/HTTPError.html","",""],["Net::HTTPExceptions","","Net/HTTPExceptions.html","","<p>Net::HTTP exception class. You cannot use Net::HTTPExceptions directly;\ninstead, you must use its subclasses. …\n"],["Net::HTTPExpectationFailed","","Net/HTTPExpectationFailed.html","",""],["Net::HTTPFailedDependency","","Net/HTTPFailedDependency.html","",""],["Net::HTTPFatalError","","Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","Net/HTTPForbidden.html","",""],["Net::HTTPFound","","Net/HTTPFound.html","",""],["Net::HTTPGatewayTimeOut","","Net/HTTPGatewayTimeOut.html","",""],["Net::HTTPGenericRequest","","Net/HTTPGenericRequest.html","","<p>HTTPGenericRequest is the parent of the HTTPRequest class. Do not use this\ndirectly; use a subclass of …\n"],["Net::HTTPGone","","Net/HTTPGone.html","",""],["Net::HTTPHeader","","Net/HTTPHeader.html","","<p>The HTTPHeader module defines methods for reading and writing HTTP headers.\n<p>It is used as a mixin by other …\n"],["Net::HTTPHeaderSyntaxError","","Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPIMUsed","","Net/HTTPIMUsed.html","","<p>208 Already Reported - RFC 5842; experimental\n"],["Net::HTTPInformation","","Net/HTTPInformation.html","",""],["Net::HTTPInsufficientStorage","","Net/HTTPInsufficientStorage.html","","<p>506 Variant Also Negotiates - RFC 2295; experimental\n"],["Net::HTTPInternalServerError","","Net/HTTPInternalServerError.html","","<p>444 No Response - Nginx 449 Retry With - Microsoft 450 Blocked by Windows\nParental Controls - Microsoft …\n"],["Net::HTTPLengthRequired","","Net/HTTPLengthRequired.html","",""],["Net::HTTPLocked","","Net/HTTPLocked.html","",""],["Net::HTTPMethodNotAllowed","","Net/HTTPMethodNotAllowed.html","",""],["Net::HTTPMovedPermanently","","Net/HTTPMovedPermanently.html","",""],["Net::HTTPMultiStatus","","Net/HTTPMultiStatus.html","",""],["Net::HTTPMultipleChoices","","Net/HTTPMultipleChoices.html","",""],["Net::HTTPNetworkAuthenticationRequired","","Net/HTTPNetworkAuthenticationRequired.html","","<p>508 Loop Detected - RFC 5842; experimental 509 Bandwidth Limit Exceeded -\nApache bw/limited extension …\n"],["Net::HTTPNoContent","","Net/HTTPNoContent.html","",""],["Net::HTTPNonAuthoritativeInformation","","Net/HTTPNonAuthoritativeInformation.html","",""],["Net::HTTPNotAcceptable","","Net/HTTPNotAcceptable.html","",""],["Net::HTTPNotFound","","Net/HTTPNotFound.html","",""],["Net::HTTPNotImplemented","","Net/HTTPNotImplemented.html","",""],["Net::HTTPNotModified","","Net/HTTPNotModified.html","",""],["Net::HTTPOK","","Net/HTTPOK.html","","<p>102 - RFC 2518; removed in RFC 4918\n"],["Net::HTTPPartialContent","","Net/HTTPPartialContent.html","",""],["Net::HTTPPaymentRequired","","Net/HTTPPaymentRequired.html","",""],["Net::HTTPPermanentRedirect","","Net/HTTPPermanentRedirect.html","",""],["Net::HTTPPreconditionFailed","","Net/HTTPPreconditionFailed.html","",""],["Net::HTTPPreconditionRequired","","Net/HTTPPreconditionRequired.html","",""],["Net::HTTPProxyAuthenticationRequired","","Net/HTTPProxyAuthenticationRequired.html","",""],["Net::HTTPRedirection","","Net/HTTPRedirection.html","",""],["Net::HTTPRequest","","Net/HTTPRequest.html","","<p>HTTP request class. This class wraps together the request header and the\nrequest path. You cannot use …\n"],["Net::HTTPRequestEntityTooLarge","","Net/HTTPRequestEntityTooLarge.html","",""],["Net::HTTPRequestHeaderFieldsTooLarge","","Net/HTTPRequestHeaderFieldsTooLarge.html","",""],["Net::HTTPRequestTimeOut","","Net/HTTPRequestTimeOut.html","",""],["Net::HTTPRequestURITooLong","","Net/HTTPRequestURITooLong.html","",""],["Net::HTTPRequestedRangeNotSatisfiable","","Net/HTTPRequestedRangeNotSatisfiable.html","",""],["Net::HTTPResetContent","","Net/HTTPResetContent.html","",""],["Net::HTTPResponse","","Net/HTTPResponse.html","","<p>HTTP response class.\n<p>This class wraps together the response header and the response body (the\nentity requested). …\n"],["Net::HTTPRetriableError","","Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","Net/HTTPSeeOther.html","",""],["Net::HTTPServerError","","Net/HTTPServerError.html","",""],["Net::HTTPServerException","","Net/HTTPServerException.html","",""],["Net::HTTPServiceUnavailable","","Net/HTTPServiceUnavailable.html","",""],["Net::HTTPSuccess","","Net/HTTPSuccess.html","",""],["Net::HTTPSwitchProtocol","","Net/HTTPSwitchProtocol.html","",""],["Net::HTTPTemporaryRedirect","","Net/HTTPTemporaryRedirect.html","","<p>306 Switch Proxy - no longer unused\n"],["Net::HTTPTooManyRequests","","Net/HTTPTooManyRequests.html","",""],["Net::HTTPUnauthorized","","Net/HTTPUnauthorized.html","",""],["Net::HTTPUnavailableForLegalReasons","","Net/HTTPUnavailableForLegalReasons.html","",""],["Net::HTTPUnknownResponse","","Net/HTTPUnknownResponse.html","",""],["Net::HTTPUnprocessableEntity","","Net/HTTPUnprocessableEntity.html","","<p>418 I&#39;m a teapot - RFC 2324; a joke RFC 420 Enhance Your Calm - Twitter\n"],["Net::HTTPUnsupportedMediaType","","Net/HTTPUnsupportedMediaType.html","",""],["Net::HTTPUpgradeRequired","","Net/HTTPUpgradeRequired.html","","<p>425 Unordered Collection - existed only in draft\n"],["Net::HTTPUseProxy","","Net/HTTPUseProxy.html","",""],["Net::HTTPVersionNotSupported","","Net/HTTPVersionNotSupported.html","",""],["Net::IMAP","","Net/IMAP.html","","<p>Net::IMAP implements Internet Message Access Protocol (IMAP) client\nfunctionality.  The protocol is described …\n"],["Net::IMAP::BadResponseError","","Net/IMAP/BadResponseError.html","","<p>Error raised upon a “BAD” response from the server, indicating that the\nclient command violated …\n"],["Net::IMAP::BodyTypeAttachment","","Net/IMAP/BodyTypeAttachment.html","","<p>Net::IMAP::BodyTypeAttachment represents attachment body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeBasic","","Net/IMAP/BodyTypeBasic.html","","<p>Net::IMAP::BodyTypeBasic represents basic body structures of messages.\n<p>Fields:\n<p>media_type &mdash; Returns the content …\n"],["Net::IMAP::BodyTypeExtension","","Net/IMAP/BodyTypeExtension.html","",""],["Net::IMAP::BodyTypeMessage","","Net/IMAP/BodyTypeMessage.html","","<p>Net::IMAP::BodyTypeMessage represents MESSAGE/RFC822 body structures of\nmessages.\n<p>Fields:\n<p>envelope &mdash; Returns …\n"],["Net::IMAP::BodyTypeMultipart","","Net/IMAP/BodyTypeMultipart.html","","<p>Net::IMAP::BodyTypeMultipart represents multipart body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeText","","Net/IMAP/BodyTypeText.html","","<p>Net::IMAP::BodyTypeText represents TEXT body structures of messages.\n<p>Fields:\n<p>lines &mdash; Returns the size of …\n"],["Net::IMAP::ByeResponseError","","Net/IMAP/ByeResponseError.html","","<p>Error raised upon a “BYE” response from the server, indicating that the\nclient is not being …\n"],["Net::IMAP::CramMD5Authenticator","","Net/IMAP/CramMD5Authenticator.html","","<p>Authenticator for the “CRAM-MD5” authentication type.  See #authenticate().\n"],["Net::IMAP::DataFormatError","","Net/IMAP/DataFormatError.html","","<p>Error raised when data is in the incorrect format.\n"],["Net::IMAP::DigestMD5Authenticator","","Net/IMAP/DigestMD5Authenticator.html","","<p>Authenticator for the “DIGEST-MD5” authentication type.  See\n#authenticate().\n"],["Net::IMAP::Error","","Net/IMAP/Error.html","","<p>Superclass of IMAP errors.\n"],["Net::IMAP::FlagCountError","","Net/IMAP/FlagCountError.html","","<p>Error raised when too many flags are interned to symbols.\n"],["Net::IMAP::LoginAuthenticator","","Net/IMAP/LoginAuthenticator.html","","<p>Authenticator for the “LOGIN” authentication type.  See #authenticate().\n"],["Net::IMAP::NoResponseError","","Net/IMAP/NoResponseError.html","","<p>Error raised upon a “NO” response from the server, indicating that the\nclient command could …\n"],["Net::IMAP::NumValidator","","Net/IMAP/NumValidator.html","","<p>Common validators of number and nz_number types\n"],["Net::IMAP::PlainAuthenticator","","Net/IMAP/PlainAuthenticator.html","","<p>Authenticator for the “PLAIN” authentication type.  See #authenticate().\n"],["Net::IMAP::ResponseError","","Net/IMAP/ResponseError.html","","<p>Superclass of all errors used to encapsulate “fail” responses from the\nserver.\n"],["Net::IMAP::ResponseParseError","","Net/IMAP/ResponseParseError.html","","<p>Error raised when a response from the server is non-parseable.\n"],["Net::InternetMessageIO","","Net/InternetMessageIO.html","",""],["Net::InternetMessageIO::NetPrivate","","Net/InternetMessageIO/NetPrivate.html","",""],["Net::InternetMessageIO::WriteAdapter","","Net/InternetMessageIO/WriteAdapter.html","","<p>The writer adapter class\n"],["Net::OpenTimeout","","Net/OpenTimeout.html","","<p>OpenTimeout, a subclass of Timeout::Error, is raised if a connection cannot\nbe created within the open_timeout. …\n"],["Net::POP3","","Net/POP3.html","","<p>What is This Library?\n<p>This library provides functionality for retrieving email via POP3, the Post\nOffice …\n"],["Net::POPAuthenticationError","","Net/POPAuthenticationError.html","","<p>POP3 authentication error.\n"],["Net::POPBadResponse","","Net/POPBadResponse.html","","<p>Unexpected response from the server.\n"],["Net::POPError","","Net/POPError.html","","<p>Non-authentication POP3 protocol error (reply code “-ERR”, except\nauthentication).\n"],["Net::POPMail","","Net/POPMail.html","","<p>This class represents a message which exists on the POP server. Instances\nof this class are created by …\n"],["Net::ProtoAuthError","","Net/ProtoAuthError.html","",""],["Net::ProtoCommandError","","Net/ProtoCommandError.html","",""],["Net::ProtoFatalError","","Net/ProtoFatalError.html","",""],["Net::ProtoRetriableError","","Net/ProtoRetriableError.html","",""],["Net::ProtoServerError","","Net/ProtoServerError.html","",""],["Net::ProtoSyntaxError","","Net/ProtoSyntaxError.html","",""],["Net::ProtoUnknownError","","Net/ProtoUnknownError.html","",""],["Net::ProtocRetryError","","Net/ProtocRetryError.html","",""],["Net::ProtocolError","","Net/ProtocolError.html","",""],["Net::ReadTimeout","","Net/ReadTimeout.html","","<p>ReadTimeout, a subclass of Timeout::Error, is raised if a chunk of the\nresponse cannot be read within …\n"],["Net::SMTP","","Net/SMTP.html","","<p>What is This Library?\n<p>This library provides functionality to send internet mail via SMTP, the\nSimple  …\n"],["Net::SMTP::Response","","Net/SMTP/Response.html","","<p>This class represents a response received by the SMTP server. Instances of\nthis class are created by …\n"],["Net::SMTPAuthenticationError","","Net/SMTPAuthenticationError.html","","<p>Represents an SMTP authentication error.\n"],["Net::SMTPError","","Net/SMTPError.html","","<p>Module mixed in to all SMTP error classes\n"],["Net::SMTPFatalError","","Net/SMTPFatalError.html","","<p>Represents a fatal SMTP error (error code 5xx, except for 500)\n"],["Net::SMTPServerBusy","","Net/SMTPServerBusy.html","","<p>Represents SMTP error code 420 or 450, a temporary error.\n"],["Net::SMTPSyntaxError","","Net/SMTPSyntaxError.html","","<p>Represents an SMTP command syntax error (error code 500)\n"],["Net::SMTPUnknownError","","Net/SMTPUnknownError.html","","<p>Unexpected reply code returned from server.\n"],["Net::SMTPUnsupportedCommand","","Net/SMTPUnsupportedCommand.html","","<p>Command is not supported on server.\n"],["Newton","","Newton.html","","<p>newton.rb\n<p>Solves the nonlinear algebraic equation system f = 0 by Newton&#39;s\nmethod. This program is …\n"],["NilClass","","NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMemoryError","","NoMemoryError.html","","<p>Raised when memory allocation fails.\n"],["NoMethodError","","NoMethodError.html","","<p>Raised when a method is called on a receiver which doesn&#39;t have it\ndefined and also fails to respond …\n"],["NotImplementedError","","NotImplementedError.html","","<p>Raised when a feature is not implemented on the current platform. For\nexample, methods depending on the …\n"],["Numeric","","Numeric.html","","<p>Numeric is the class from which all higher-level numeric classes should\ninherit.\n<p>Numeric allows instantiation …\n"],["OLEProperty","","OLEProperty.html","","<p>OLEProperty helper class of Property with arguments.\n"],["Object","","Object.html","","<p>Object is the default root of all Ruby objects.  Object inherits from\nBasicObject which allows creating …\n"],["Object::ParseError","","Racc/ParseError.html","",""],["Object::TimeoutError","","Timeout/Error.html","","<p>Raised by Timeout#timeout when the block times out.\n"],["ObjectSpace","","ObjectSpace.html","","<p>The objspace library extends the ObjectSpace module and adds several\nmethods to get internal statistic …\n"],["ObjectSpace::InternalObjectWrapper","","ObjectSpace/InternalObjectWrapper.html","","<p>This class is used as a return value from\nObjectSpace::reachable_objects_from.\n<p>When ObjectSpace::reachable_objects_from …\n"],["ObjectSpace::WeakMap","","ObjectSpace/WeakMap.html","","<p>An ObjectSpace::WeakMap object holds references to any objects, but those\nobjects can get garbage collected. …\n"],["Observable","","Observable.html","","<p>The Observer pattern (also known as publish/subscribe) provides a simple\nmechanism for one object to …\n"],["Open3","","Open3.html","","<p>Open3 grants you access to stdin, stdout, stderr and a thread to wait for\nthe child process when running …\n"],["OpenSSL","","OpenSSL.html","","<p>OpenSSL provides SSL, TLS and general purpose cryptography.  It wraps the\nOpenSSL library.\n<p>Examples\n<p>All …\n"],["OpenSSL::ASN1","","OpenSSL/ASN1.html","","<p>Abstract Syntax Notation One (or ASN.1) is a notation syntax to describe\ndata structures and is defined …\n"],["OpenSSL::ASN1::ASN1Data","","OpenSSL/ASN1/ASN1Data.html","","<p>The top-level class representing any ASN.1 object. When parsed by\nASN1.decode, tagged values are always …\n"],["OpenSSL::ASN1::ASN1Error","","OpenSSL/ASN1/ASN1Error.html","","<p>Generic error class for all errors raised in ASN1 and any of the classes\ndefined in it.\n"],["OpenSSL::ASN1::Constructive","","OpenSSL/ASN1/Constructive.html","","<p>The parent class for all constructed encodings. The <code>value</code>\nattribute of a Constructive is always an <code>Array</code> …\n"],["OpenSSL::ASN1::ObjectId","","OpenSSL/ASN1/ObjectId.html","","<p>Represents the primitive object id for OpenSSL::ASN1\n"],["OpenSSL::ASN1::Primitive","","OpenSSL/ASN1/Primitive.html","","<p>The parent class for all primitive encodings. Attributes are the same as\nfor ASN1Data, with the addition …\n"],["OpenSSL::BN","","OpenSSL/BN.html","",""],["OpenSSL::BNError","","OpenSSL/BNError.html","","<p>Generic Error for all of OpenSSL::BN (big num)\n"],["OpenSSL::Buffering","","OpenSSL/Buffering.html","","<p>OpenSSL IO buffering mix-in module.\n<p>This module allows an OpenSSL::SSL::SSLSocket to behave like an IO …\n"],["OpenSSL::Cipher","","OpenSSL/Cipher.html","","<p>Provides symmetric algorithms for encryption and decryption. The algorithms\nthat are available depend …\n"],["OpenSSL::Cipher::Cipher","","OpenSSL/Cipher/Cipher.html","","<p>Deprecated.\n<p>This class is only provided for backwards compatibility. Use\nOpenSSL::Cipher.\n"],["OpenSSL::Cipher::CipherError","","OpenSSL/Cipher/CipherError.html","",""],["OpenSSL::Config","","OpenSSL/Config.html","","<p>OpenSSL::Config\n<p>Configuration for the openssl library.\n<p>Many system&#39;s installation of openssl library …\n"],["OpenSSL::ConfigError","","OpenSSL/ConfigError.html","","<p>General error for openssl library configuration files. Including\nformatting, parsing errors, etc.\n"],["OpenSSL::Digest","","OpenSSL/Digest.html","","<p>OpenSSL::Digest allows you to compute message digests (sometimes\ninterchangeably called “hashes”) …\n"],["OpenSSL::Digest::DigestError","","OpenSSL/Digest/DigestError.html","","<p>Generic Exception class that is raised if an error occurs during a Digest\noperation.\n"],["OpenSSL::Engine","","OpenSSL/Engine.html","","<p>This class is the access to openssl&#39;s ENGINE cryptographic module\nimplementation.\n<p>See also, www.openssl.org/docs/crypto/engine.html …\n"],["OpenSSL::Engine::EngineError","","OpenSSL/Engine/EngineError.html","","<p>This is the generic exception for OpenSSL::Engine related errors\n"],["OpenSSL::ExtConfig","","OpenSSL/ExtConfig.html","","<p>This module contains configuration information about the SSL extension, for\nexample if socket support …\n"],["OpenSSL::HMAC","","OpenSSL/HMAC.html","","<p>OpenSSL::HMAC allows computing Hash-based Message Authentication Code\n(HMAC). It is a type of message …\n"],["OpenSSL::HMACError","","OpenSSL/HMACError.html","","<p>Document-class: OpenSSL::HMAC\n<p>OpenSSL::HMAC allows computing Hash-based Message Authentication Code\n(HMAC). …\n"],["OpenSSL::Netscape","","OpenSSL/Netscape.html","","<p>OpenSSL::Netscape is a namespace for SPKI (Simple Public Key\nInfrastructure) which implements Signed …\n"],["OpenSSL::Netscape::SPKI","","OpenSSL/Netscape/SPKI.html","","<p>A Simple Public Key Infrastructure implementation (pronounced “spooky”).\nThe structure is defined …\n"],["OpenSSL::Netscape::SPKIError","","OpenSSL/Netscape/SPKIError.html","","<p>Generic Exception class that is raised if an error occurs during an\noperation on an instance of OpenSSL::Netscape::SPKI …\n"],["OpenSSL::OCSP","","OpenSSL/OCSP.html","","<p>OpenSSL::OCSP implements Online Certificate Status Protocol requests and\nresponses.\n<p>Creating and sending …\n"],["OpenSSL::OCSP::BasicResponse","","OpenSSL/OCSP/BasicResponse.html","","<p>An OpenSSL::OCSP::BasicResponse contains the status of a certificate check\nwhich is created from an  …\n"],["OpenSSL::OCSP::CertificateId","","OpenSSL/OCSP/CertificateId.html","","<p>An OpenSSL::OCSP::CertificateId identifies a certificate to the CA so that\na status check can be performed. …\n"],["OpenSSL::OCSP::OCSPError","","OpenSSL/OCSP/OCSPError.html","","<p>OCSP error class.\n"],["OpenSSL::OCSP::Request","","OpenSSL/OCSP/Request.html","","<p>An OpenSSL::OCSP::Request contains the certificate information for\ndetermining if a certificate has been …\n"],["OpenSSL::OCSP::Response","","OpenSSL/OCSP/Response.html","","<p>An OpenSSL::OCSP::Response contains the status of a certificate check which\nis created from an OpenSSL::OCSP::Request …\n"],["OpenSSL::OCSP::SingleResponse","","OpenSSL/OCSP/SingleResponse.html","","<p>An OpenSSL::OCSP::SingleResponse represents an OCSP SingleResponse\nstructure, which contains the basic …\n"],["OpenSSL::OpenSSLError","","OpenSSL/OpenSSLError.html","","<p>Generic error, common for all classes under OpenSSL module\n"],["OpenSSL::PKCS12","","OpenSSL/PKCS12.html","","<p>Defines a file format commonly used to store private keys with accompanying\npublic key certificates, …\n"],["OpenSSL::PKCS12::PKCS12Error","","OpenSSL/PKCS12/PKCS12Error.html","",""],["OpenSSL::PKCS5","","OpenSSL/PKCS5.html","","<p>Provides password-based encryption functionality based on PKCS#5. Typically\nused for securely deriving …\n"],["OpenSSL::PKCS5::PKCS5Error","","OpenSSL/PKCS5/PKCS5Error.html","","<p>Generic Exception class that is raised if an error occurs during a\ncomputation.\n"],["OpenSSL::PKCS7","","OpenSSL/PKCS7.html","",""],["OpenSSL::PKCS7::PKCS7Error","","OpenSSL/PKCS7/PKCS7Error.html","",""],["OpenSSL::PKCS7::RecipientInfo","","OpenSSL/PKCS7/RecipientInfo.html","",""],["OpenSSL::PKCS7::SignerInfo","","OpenSSL/PKCS7/SignerInfo.html","",""],["OpenSSL::PKey","","OpenSSL/PKey.html","","<p>Asymmetric Public Key Algorithms\n<p>Asymmetric public key algorithms solve the problem of establishing and …\n"],["OpenSSL::PKey::DH","","OpenSSL/PKey/DH.html","","<p>An implementation of the Diffie-Hellman key exchange protocol based on\ndiscrete logarithms in finite …\n"],["OpenSSL::PKey::DHError","","OpenSSL/PKey/DHError.html","","<p>Generic exception that is raised if an operation on a DH PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::DSA","","OpenSSL/PKey/DSA.html","","<p>DSA, the Digital Signature Algorithm, is specified in NIST&#39;s FIPS\n186-3. It is an asymmetric public …\n"],["OpenSSL::PKey::DSAError","","OpenSSL/PKey/DSAError.html","","<p>Generic exception that is raised if an operation on a DSA PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::EC","","OpenSSL/PKey/EC.html","","<p>OpenSSL::PKey::EC provides access to Elliptic Curve Digital Signature\nAlgorithm (ECDSA) and Elliptic …\n"],["OpenSSL::PKey::EC::Group","","OpenSSL/PKey/EC/Group.html","",""],["OpenSSL::PKey::EC::Group::Error","","OpenSSL/PKey/EC/Group/Error.html","",""],["OpenSSL::PKey::EC::Point","","OpenSSL/PKey/EC/Point.html","",""],["OpenSSL::PKey::EC::Point::Error","","OpenSSL/PKey/EC/Point/Error.html","",""],["OpenSSL::PKey::ECError","","OpenSSL/PKey/ECError.html","",""],["OpenSSL::PKey::PKey","","OpenSSL/PKey/PKey.html","","<p>An abstract class that bundles signature creation (PKey#sign) and\nvalidation (PKey#verify) that is common …\n"],["OpenSSL::PKey::PKeyError","","OpenSSL/PKey/PKeyError.html","","<p>Raised when errors occur during PKey#sign or PKey#verify.\n"],["OpenSSL::PKey::RSA","","OpenSSL/PKey/RSA.html","","<p>RSA is an asymmetric public key algorithm that has been formalized in RFC\n3447. It is in widespread use …\n"],["OpenSSL::PKey::RSAError","","OpenSSL/PKey/RSAError.html","","<p>Generic exception that is raised if an operation on an RSA PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::Random","","OpenSSL/Random.html","",""],["OpenSSL::Random::RandomError","","OpenSSL/Random/RandomError.html","",""],["OpenSSL::SSL","","OpenSSL/SSL.html","","<p>Use SSLContext to set up the parameters for a TLS (former SSL) connection.\nBoth client and server TLS …\n"],["OpenSSL::SSL::SSLContext","","OpenSSL/SSL/SSLContext.html","","<p>An SSLContext is used to set various options regarding certificates,\nalgorithms, verification, session …\n"],["OpenSSL::SSL::SSLContext::ExtConfig","","OpenSSL/SSL/SSLContext/ExtConfig.html","",""],["OpenSSL::SSL::SSLError","","OpenSSL/SSL/SSLError.html","","<p>Generic error class raised by SSLSocket and SSLContext.\n"],["OpenSSL::SSL::SSLErrorWaitReadable","","OpenSSL/SSL/SSLErrorWaitReadable.html","",""],["OpenSSL::SSL::SSLErrorWaitWritable","","OpenSSL/SSL/SSLErrorWaitWritable.html","",""],["OpenSSL::SSL::SSLServer","","OpenSSL/SSL/SSLServer.html","","<p>SSLServer represents a TCP/IP server socket with Secure Sockets Layer.\n"],["OpenSSL::SSL::SSLSocket","","OpenSSL/SSL/SSLSocket.html","",""],["OpenSSL::SSL::SSLSocket::ExtConfig","","OpenSSL/SSL/SSLSocket/ExtConfig.html","",""],["OpenSSL::SSL::Session","","OpenSSL/SSL/Session.html","",""],["OpenSSL::SSL::Session::SessionError","","OpenSSL/SSL/Session/SessionError.html","",""],["OpenSSL::SSL::SocketForwarder","","OpenSSL/SSL/SocketForwarder.html","",""],["OpenSSL::X509","","OpenSSL/X509.html","",""],["OpenSSL::X509::Attribute","","OpenSSL/X509/Attribute.html","",""],["OpenSSL::X509::AttributeError","","OpenSSL/X509/AttributeError.html","",""],["OpenSSL::X509::CRL","","OpenSSL/X509/CRL.html","",""],["OpenSSL::X509::CRLError","","OpenSSL/X509/CRLError.html","",""],["OpenSSL::X509::Certificate","","OpenSSL/X509/Certificate.html","","<p>Implementation of an X.509 certificate as specified in RFC 5280. Provides\naccess to a certificate&#39;s …\n"],["OpenSSL::X509::CertificateError","","OpenSSL/X509/CertificateError.html","",""],["OpenSSL::X509::Extension","","OpenSSL/X509/Extension.html","",""],["OpenSSL::X509::ExtensionError","","OpenSSL/X509/ExtensionError.html","",""],["OpenSSL::X509::ExtensionFactory","","OpenSSL/X509/ExtensionFactory.html","",""],["OpenSSL::X509::Name","","OpenSSL/X509/Name.html","","<p>An X.509 name represents a hostname, email address or other entity\nassociated with a public key.\n<p>You can …\n"],["OpenSSL::X509::Name::RFC2253DN","","OpenSSL/X509/Name/RFC2253DN.html","",""],["OpenSSL::X509::NameError","","OpenSSL/X509/NameError.html","",""],["OpenSSL::X509::Request","","OpenSSL/X509/Request.html","",""],["OpenSSL::X509::RequestError","","OpenSSL/X509/RequestError.html","",""],["OpenSSL::X509::Revoked","","OpenSSL/X509/Revoked.html","",""],["OpenSSL::X509::RevokedError","","OpenSSL/X509/RevokedError.html","",""],["OpenSSL::X509::Store","","OpenSSL/X509/Store.html","","<p>The X509 certificate store holds trusted CA certificates used to verify\npeer certificates.\n<p>The easiest …\n"],["OpenSSL::X509::StoreContext","","OpenSSL/X509/StoreContext.html","","<p>A StoreContext is used while validating a single certificate and holds the\nstatus involved.\n"],["OpenSSL::X509::StoreError","","OpenSSL/X509/StoreError.html","",""],["OpenStruct","","OpenStruct.html","","<p>An OpenStruct is a data structure, similar to a Hash, that allows the\ndefinition of arbitrary attributes …\n"],["OpenURI","","OpenURI.html","","<p>OpenURI is an easy-to-use wrapper for Net::HTTP, Net::HTTPS and Net::FTP.\n<p>Example\n<p>It is possible to open …\n"],["OpenURI::HTTPError","","OpenURI/HTTPError.html","",""],["OpenURI::HTTPRedirect","","OpenURI/HTTPRedirect.html","","<p>Raised on redirection, only occurs when <code>redirect</code> option for\nHTTP is <code>false</code>.\n"],["OpenURI::Meta","","OpenURI/Meta.html","","<p>Mixin for holding meta-information.\n"],["OpenURI::OpenRead","","OpenURI/OpenRead.html","","<p>Mixin for HTTP and FTP URIs.\n"],["OptionParser","","OptionParser.html","","<p>OptionParser\n<p>Introduction\n<p>OptionParser is a class for command-line option analysis.  It is much more\nadvanced, …\n"],["OptionParser::AC","","OptionParser/AC.html","",""],["OptionParser::Acceptables","","OptionParser/Acceptables.html","","<p>Acceptable argument classes. Now contains DecimalInteger, OctalInteger and\nDecimalNumeric. See Acceptable …\n"],["OptionParser::AmbiguousArgument","","OptionParser/AmbiguousArgument.html","","<p>Raises when the given argument word can&#39;t be completed uniquely.\n"],["OptionParser::AmbiguousOption","","OptionParser/AmbiguousOption.html","","<p>Raises when ambiguously completable string is encountered.\n"],["OptionParser::Arguable","","OptionParser/Arguable.html","","<p>Extends command line arguments array (ARGV) to parse itself.\n"],["OptionParser::CompletingHash","","OptionParser/CompletingHash.html","","<p>Hash with completion search feature. See OptionParser::Completion.\n"],["OptionParser::Completion","","OptionParser/Completion.html","","<p>Keyword completion module.  This allows partial arguments to be specified\nand resolved against a list …\n"],["OptionParser::InvalidArgument","","OptionParser/InvalidArgument.html","","<p>Raises when the given argument does not match required format.\n"],["OptionParser::InvalidOption","","OptionParser/InvalidOption.html","","<p>Raises when switch is undefined.\n"],["OptionParser::List","","OptionParser/List.html","","<p>Simple option list providing mapping from short and/or long option string\nto OptionParser::Switch and …\n"],["OptionParser::MissingArgument","","OptionParser/MissingArgument.html","","<p>Raises when a switch with mandatory argument has no argument.\n"],["OptionParser::NeedlessArgument","","OptionParser/NeedlessArgument.html","","<p>Raises when there is an argument for a switch which takes no argument.\n"],["OptionParser::OptionMap","","OptionParser/OptionMap.html","","<p>Map from option/keyword string to object with completion.\n"],["OptionParser::ParseError","","OptionParser/ParseError.html","","<p>Base class of exceptions from OptionParser.\n"],["OptionParser::Switch","","OptionParser/Switch.html","","<p>Individual switch class.  Not important to the user.\n<p>Defined within Switch are several Switch-derived …\n"],["OptionParser::Switch::NoArgument","","OptionParser/Switch/NoArgument.html","","<p>Switch that takes no arguments.\n"],["OptionParser::Switch::OptionalArgument","","OptionParser/Switch/OptionalArgument.html","","<p>Switch that can omit argument.\n"],["OptionParser::Switch::PlacedArgument","","OptionParser/Switch/PlacedArgument.html","","<p>Switch that takes an argument, which does not begin with &#39;-&#39;.\n"],["OptionParser::Switch::RequiredArgument","","OptionParser/Switch/RequiredArgument.html","","<p>Switch that takes an argument.\n"],["PP","","PP.html","","<p>A pretty-printer for Ruby objects.\n<p>All examples assume you have loaded the PP class with:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;pp&#39;</span>\n</pre>\n"],["PP::PPMethods","","PP/PPMethods.html","",""],["PStore","","PStore.html","","<p>PStore implements a file based persistence mechanism based on a Hash.  User\ncode can store hierarchies …\n"],["PStore::Error","","PStore/Error.html","","<p>The error type thrown by all PStore methods.\n"],["PTY","","PTY.html","","<p>Creates and managed pseudo terminals (PTYs).  See also\nen.wikipedia.org/wiki/Pseudo_terminal\n<p>PTY allows …\n"],["PTY::ChildExited","","PTY/ChildExited.html","","<p>Thrown when PTY::check is called for a pid that represents a process that\nhas exited.\n"],["Pathname","","Pathname.html","","<p>Pathname represents the name of a file or directory on the filesystem, but\nnot the file itself.\n<p>The pathname …\n"],["PrettyPrint","","PrettyPrint.html","","<p>This class implements a pretty printing algorithm. It finds line breaks and\nnice indentations for grouped …\n"],["PrettyPrint::SingleLine","","PrettyPrint/SingleLine.html","","<p>PrettyPrint::SingleLine is used by PrettyPrint.singleline_format\n<p>It is passed to be similar to a PrettyPrint …\n"],["Prime","","Prime.html","","<p>The set of all prime numbers.\n<p>Example\n\n<pre>Prime.each(100) do |prime|\n  p prime  #=&gt; 2, 3, 5, 7, 11, ...., 97 ...</pre>\n"],["Prime::EratosthenesGenerator","","Prime/EratosthenesGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code>.\n<p>Uses <code>EratosthenesSieve</code>.\n"],["Prime::EratosthenesSieve","","Prime/EratosthenesSieve.html","","<p>Internal use. An implementation of eratosthenes&#39; sieve\n"],["Prime::Generator23","","Prime/Generator23.html","","<p>Generates all integers which are greater than 2 and are not divisible by\neither 2 or 3.\n<p>This is a pseudo-prime …\n"],["Prime::PseudoPrimeGenerator","","Prime/PseudoPrimeGenerator.html","","<p>An abstract class for enumerating pseudo-prime numbers.\n<p>Concrete subclasses should override succ, next, …\n"],["Prime::TrialDivision","","Prime/TrialDivision.html","","<p>Internal use. An implementation of prime table by trial division method.\n"],["Prime::TrialDivisionGenerator","","Prime/TrialDivisionGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code> which uses a prime\ntable generated by trial division.\n"],["Proc","","Proc.html","","<p><code>Proc</code> objects are blocks of code that have been bound to a set\nof local variables. Once bound, the code …\n"],["Process","","Process.html","",""],["Process::GID","","Process/GID.html","","<p>The <code>Process::GID</code> module contains a collection of module\nfunctions which can be used to portably get, …\n"],["Process::Status","","Process/Status.html","","<p><code>Process::Status</code> encapsulates the information on the status of\na running or terminated system process. …\n"],["Process::Sys","","Process/Sys.html","","<p>The <code>Process::Sys</code> module contains UID and GID functions which\nprovide direct bindings to the system calls …\n"],["Process::UID","","Process/UID.html","","<p>The <code>Process::UID</code> module contains a collection of module\nfunctions which can be used to portably get, …\n"],["Process::Waiter","","Process/Waiter.html","",""],["Profiler__","","Profiler__.html","","<p>Profile provides a way to Profile your Ruby application.\n<p>Profiling your program is a way of determining …\n"],["Psych","","Psych.html","","<p>Overview\n<p>Psych is a YAML parser and emitter. Psych leverages libyaml [Home page:\npyyaml.org/wiki/LibYAML …\n"],["Psych::BadAlias","","Psych/BadAlias.html","",""],["Psych::ClassLoader","","Psych/ClassLoader.html","",""],["Psych::ClassLoader::Restricted","","Psych/ClassLoader/Restricted.html","",""],["Psych::Coder","","Psych/Coder.html","","<p>If an object defines <code>encode_with</code>, then an instance of\nPsych::Coder will be passed to the method when …\n"],["Psych::DisallowedClass","","Psych/DisallowedClass.html","",""],["Psych::Exception","","Psych/Exception.html","",""],["Psych::Handler","","Psych/Handler.html","","<p>Psych::Handler is an abstract base class that defines the events used when\ndealing with Psych::Parser …\n"],["Psych::Handler::DumperOptions","","Psych/Handler/DumperOptions.html","","<p>Configuration options for dumping YAML.\n"],["Psych::Handlers","","Psych/Handlers.html","",""],["Psych::Handlers::Recorder","","Psych/Handlers/Recorder.html","","<p>This handler will capture an event and record the event.  Recorder events\nare available vial Psych::Handlers::Recorder#events …\n"],["Psych::JSON","","Psych/JSON.html","",""],["Psych::JSON::Stream","","Psych/JSON/Stream.html","",""],["Psych::JSON::TreeBuilder","","Psych/JSON/TreeBuilder.html","","<p>Psych::JSON::TreeBuilder is an event based AST builder.  Events are sent to\nan instance of Psych::JSON::TreeBuilder …\n"],["Psych::Nodes","","Psych/Nodes.html","","<p>Overview\n<p>When using Psych.load to deserialize a YAML document, the document is\ntranslated to an intermediary …\n"],["Psych::Nodes::Alias","","Psych/Nodes/Alias.html","","<p>This class represents a YAML Alias. It points to an <code>anchor</code>.\n<p>A Psych::Nodes::Alias is a terminal node and …\n"],["Psych::Nodes::Document","","Psych/Nodes/Document.html","","<p>This represents a YAML Document.  This node must be a child of\nPsych::Nodes::Stream.  A Psych::Nodes::Document …\n"],["Psych::Nodes::Mapping","","Psych/Nodes/Mapping.html","","<p>This class represents a YAML Mapping.\n<p>A Psych::Nodes::Mapping node may have 0 or more children, but must …\n"],["Psych::Nodes::Node","","Psych/Nodes/Node.html","","<p>The base class for any Node in a YAML parse tree.  This class should never\nbe instantiated.\n"],["Psych::Nodes::Scalar","","Psych/Nodes/Scalar.html","","<p>This class represents a YAML Scalar.\n<p>This node type is a terminal node and should not have any children. …\n"],["Psych::Nodes::Sequence","","Psych/Nodes/Sequence.html","","<p>This class represents a YAML sequence.\n<p>A YAML sequence is basically a list, and looks like this:\n\n<pre>%YAML ...</pre>\n"],["Psych::Nodes::Stream","","Psych/Nodes/Stream.html","","<p>Represents a YAML stream.  This is the root node for any YAML parse tree. \nThis node must have one or …\n"],["Psych::Omap","","Psych/Omap.html","",""],["Psych::Parser","","Psych/Parser.html","","<p>YAML event parser class.  This class parses a YAML document and calls\nevents on the handler that is passed …\n"],["Psych::Parser::Mark","","Psych/Parser/Mark.html","",""],["Psych::ScalarScanner","","Psych/ScalarScanner.html","","<p>Scan scalars for built in types\n"],["Psych::Set","","Psych/Set.html","",""],["Psych::Stream","","Psych/Stream.html","","<p>Psych::Stream is a streaming YAML emitter.  It will not buffer your YAML,\nbut send it straight to an …\n"],["Psych::Streaming","","Psych/Streaming.html","",""],["Psych::Streaming::ClassMethods","","Psych/Streaming/ClassMethods.html","",""],["Psych::SyntaxError","","Psych/SyntaxError.html","",""],["Psych::TreeBuilder","","Psych/TreeBuilder.html","","<p>This class works in conjunction with Psych::Parser to build an in-memory\nparse tree that represents a …\n"],["Psych::Visitors","","Psych/Visitors.html","",""],["Psych::Visitors::DepthFirst","","Psych/Visitors/DepthFirst.html","",""],["Psych::Visitors::Emitter","","Psych/Visitors/Emitter.html","",""],["Psych::Visitors::JSONTree","","Psych/Visitors/JSONTree.html","",""],["Psych::Visitors::NoAliasRuby","","Psych/Visitors/NoAliasRuby.html","",""],["Psych::Visitors::ToRuby","","Psych/Visitors/ToRuby.html","","<p>This class walks a YAML AST, converting each node to Ruby\n"],["Psych::Visitors::Visitor","","Psych/Visitors/Visitor.html","",""],["Psych::Visitors::YAMLTree","","Psych/Visitors/YAMLTree.html","","<p>YAMLTree builds a YAML ast given a Ruby object.  For example:\n\n<pre>builder = Psych::Visitors::YAMLTree.new ...</pre>\n"],["Queue","","Queue.html","","<p>The Queue class implements multi-producer, multi-consumer queues. It is\nespecially useful in threaded …\n"],["RDoc","","RDoc.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems\nupon gem installation.\n<p>This …\n"],["RDoc","","RDoc.html","","<p>RDoc produces documentation for Ruby source files by parsing the source and\nextracting the definition …\n"],["RDoc::Alias","","RDoc/Alias.html","","<p>Represent an alias, which is an old_name/new_name pair associated with a\nparticular context\n"],["RDoc::AnonClass","","RDoc/AnonClass.html","","<p>An anonymous class like:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">Class</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n<p>AnonClass is currently not used.\n"],["RDoc::AnyMethod","","RDoc/AnyMethod.html","","<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","RDoc/Attr.html","","<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"],["RDoc::ClassModule","","RDoc/ClassModule.html","","<p>ClassModule is the base class for objects representing either a class or a\nmodule.\n"],["RDoc::CodeObject","","RDoc/CodeObject.html","","<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts (which are containers) and …\n"],["RDoc::Comment","","RDoc/Comment.html","","<p>A comment holds the text comment for a RDoc::CodeObject and provides a\nunified way of cleaning it up …\n"],["RDoc::Constant","","RDoc/Constant.html","","<p>A constant\n"],["RDoc::Context","","RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes,\naliases, requires, and includes. …\n"],["RDoc::CrossReference","","RDoc/CrossReference.html","","<p>RDoc::CrossReference is a reusable way to create cross references for\nnames.\n"],["RDoc::ERBIO","","RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson\nand Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::ERBPartial","","RDoc/ERBPartial.html","","<p>Allows an ERB template to be rendered in the context (binding) of an\nexisting ERB template evaluation. …\n"],["RDoc::Encoding","","RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load\nfiles and convert them to the …\n"],["RDoc::Error","","RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Extend","","RDoc/Extend.html","","<p>A Module extension to a class with #extend\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RDoc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Extend</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&#39;Enumerable&#39;</span>, <span class=\"ruby-string\">&#39;comment ...&#39;</span>\n</pre>\n"],["RDoc::Generator","","RDoc/Generator.html","","<p>RDoc uses generators to turn parsed source code in the form of an\nRDoc::CodeObject tree into some form …\n"],["RDoc::GhostMethod","","RDoc/GhostMethod.html","","<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::I18n","","RDoc/I18n.html","","<p>This module provides i18n realated features.\n"],["RDoc::Include","","RDoc/Include.html","","<p>A Module included in a class with #include\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RDoc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Include</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&#39;Enumerable&#39;</span>, <span class=\"ruby-string\">&#39;comment ...&#39;</span>\n</pre>\n"],["RDoc::Markdown","","RDoc/Markdown.html","","<p>RDoc::Markdown as described by the markdown syntax.\n<p>To choose Markdown as your only default format see …\n"],["RDoc::Markdown::MemoEntry","","RDoc/Markdown/MemoEntry.html","",""],["RDoc::Markdown::ParseError","","RDoc/Markdown/ParseError.html","",""],["RDoc::Markdown::RuleInfo","","RDoc/Markdown/RuleInfo.html","",""],["RDoc::Markup","","RDoc/Markup.html","","<p>RDoc::Markup parses plain text documents and attempts to decompose them\ninto their constituent parts. …\n"],["RDoc::MetaMethod","","RDoc/MetaMethod.html","","<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","RDoc/MethodAttr.html","","<p>Abstract class representing either a method or an attribute.\n"],["RDoc::Mixin","","RDoc/Mixin.html","","<p>A Mixin adds features from a module into another context.  RDoc::Include\nand RDoc::Extend are both mixins. …\n"],["RDoc::NormalClass","","RDoc/NormalClass.html","","<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","RDoc/NormalModule.html","","<p>A normal module, like NormalClass\n"],["RDoc::Options","","RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n<p>Saved Options\n<p>You can save some options like the …\n"],["RDoc::Parser","","RDoc/Parser.html","","<p>A parser is simple a class that subclasses RDoc::Parser and implements\n#scan to fill in an RDoc::TopLevel …\n"],["RDoc::RD","","RDoc/RD.html","","<p>RDoc::RD implements the RD format from the rdtool gem.\n<p>To choose RD as your only default format see RDoc::Options@Saved+Options …\n"],["RDoc::RDoc","","RDoc/RDoc.html","","<p>This is the driver for generating RDoc output.  It handles file parsing and\ngeneration of output.\n<p>To use …\n"],["RDoc::RI","","RDoc/RI.html","","<p>Namespace for the ri command line tool&#39;s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Error","","RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::Require","","RDoc/Require.html","","<p>A file loaded by #require\n"],["RDoc::RubyLex","","RDoc/RubyLex.html","","<p>Ruby lexer adapted from irb.\n<p>The internals are not documented because they are scary.\n"],["RDoc::RubyLex::Error","","RDoc/RubyLex/Error.html","","<p>Raised upon invalid input\n"],["RDoc::RubyToken","","RDoc/RubyToken.html","","<p>Definitions of all tokens involved in the lexical analysis.\n<p>This class is not documented because it is …\n"],["RDoc::RubyToken::TkError","","RDoc/RubyToken/TkError.html","",""],["RDoc::RubyToken::TkId","","RDoc/RubyToken/TkId.html","",""],["RDoc::RubyToken::TkKW","","RDoc/RubyToken/TkKW.html","",""],["RDoc::RubyToken::TkNode","","RDoc/RubyToken/TkNode.html","",""],["RDoc::RubyToken::TkOPASGN","","RDoc/RubyToken/TkOPASGN.html","",""],["RDoc::RubyToken::TkOp","","RDoc/RubyToken/TkOp.html","",""],["RDoc::RubyToken::TkSYMBOL","","RDoc/RubyToken/TkSYMBOL.html","",""],["RDoc::RubyToken::TkUnknownChar","","RDoc/RubyToken/TkUnknownChar.html","",""],["RDoc::RubyToken::TkVal","","RDoc/RubyToken/TkVal.html","",""],["RDoc::RubyToken::Token","","RDoc/RubyToken/Token.html","",""],["RDoc::RubygemsHook","","RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems\nupon gem installation.\n<p>This …\n"],["RDoc::Servlet","","RDoc/Servlet.html","","<p>This is a WEBrick servlet that allows you to browse ri documentation.\n<p>You can show documentation through …\n"],["RDoc::SingleClass","","RDoc/SingleClass.html","","<p>A singleton class\n"],["RDoc::Stats","","RDoc/Stats.html","","<p>RDoc statistics collector which prints a summary and report of a\nproject&#39;s documentation totals. …\n"],["RDoc::Store","","RDoc/Store.html","","<p>A set of rdoc data for a single project (gem, path, etc.).\n<p>The store manages reading and writing ri data …\n"],["RDoc::Store::Error","","RDoc/Store/Error.html","","<p>Errors raised from loading or saving the store\n"],["RDoc::Store::MissingFileError","","RDoc/Store/MissingFileError.html","","<p>Raised when a stored file for a class, module, page or method is missing.\n"],["RDoc::Task","","RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc\noutput:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::TestCase","","RDoc/TestCase.html","","<p>RDoc::TestCase is an abstract TestCase to provide common setup and teardown\nacross all RDoc tests.   …\n"],["RDoc::Text","","RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","RDoc/TokenStream.html","","<p>A TokenStream is a list of tokens, gathered during the parse of some entity\n(say a method). Entities …\n"],["RDoc::TomDoc","","RDoc/TomDoc.html","","<p>A parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\n<p>The TomDoc specification can be found at:\n<p>tomdoc.org …\n"],["RDoc::TopLevel","","RDoc/TopLevel.html","","<p>A TopLevel context is a representation of the contents of a single file\n"],["RDocTask","","RDocTask.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc\noutput:\n<p>rdoc &mdash; Main task for this …\n"],["REXML","","REXML.html","","<p> :element, parent, name, attributes, children*  &mdash; a = Node.new a &lt;&lt; “B”            # =&gt; …\n\n"],["REXML::AttlistDecl","","REXML/AttlistDecl.html","","<p>This class needs:\n<p>Documentation\n<p>Work!  Not all types of attlists are intelligently parsed, so we just\n"],["REXML::Attribute","","REXML/Attribute.html","","<p>Defines an Element Attribute; IE, a attribute=value pair, as in:\n&lt;element attribute=“value”/&gt;. …\n"],["REXML::Attributes","","REXML/Attributes.html","","<p>A class that defines the set of Attributes of an Element and provides\noperations for accessing elements …\n"],["REXML::CData","","REXML/CData.html","",""],["REXML::Child","","REXML/Child.html","","<p>A Child object is something contained by a parent, and this class contains\nmethods to support that.  …\n"],["REXML::Comment","","REXML/Comment.html","","<p>Represents an XML comment; that is, text between &lt;!– … –&gt;\n"],["REXML::DTD","","REXML/DTD.html","",""],["REXML::DTD::AttlistDecl","","REXML/DTD/AttlistDecl.html","",""],["REXML::DTD::ElementDecl","","REXML/DTD/ElementDecl.html","",""],["REXML::DTD::EntityDecl","","REXML/DTD/EntityDecl.html","",""],["REXML::DTD::NotationDecl","","REXML/DTD/NotationDecl.html","",""],["REXML::DTD::Parser","","REXML/DTD/Parser.html","",""],["REXML::Declaration","","REXML/Declaration.html","","<p>This is an abstract class.  You never use this directly; it serves as a\nparent class for the specific …\n"],["REXML::DocType","","REXML/DocType.html","","<p>Represents an XML DOCTYPE declaration; that is, the contents of\n&lt;!DOCTYPE … &gt;.  DOCTYPES can …\n"],["REXML::Document","","REXML/Document.html","","<p>Represents a full XML document, including PIs, a doctype, etc.  A Document\nhas a single child that can …\n"],["REXML::Element","","REXML/Element.html","","<p>Represents a tagged XML element.  Elements are characterized by having\nchildren, attributes, and names, …\n"],["REXML::ElementDecl","","REXML/ElementDecl.html","",""],["REXML::Elements","","REXML/Elements.html","","<p>A class which provides filtering of children for Elements, and XPath search\nsupport.  You are expected …\n"],["REXML::Encoding","","REXML/Encoding.html","",""],["REXML::Entity","","REXML/Entity.html","","<p>God, I hate DTDs.  I really do.  Why this idiot standard still plagues us\nis beyond me.\n"],["REXML::EntityConst","","REXML/EntityConst.html","","<p>This is a set of entity constants – the ones defined in the XML\nspecification.  These are <code>gt</code>, <code>lt</code>,\n<code>amp</code> …\n"],["REXML::ExternalEntity","","REXML/ExternalEntity.html","",""],["REXML::Formatters","","REXML/Formatters.html","",""],["REXML::Formatters::Default","","REXML/Formatters/Default.html","",""],["REXML::Formatters::Pretty","","REXML/Formatters/Pretty.html","","<p>Pretty-prints an XML document.  This destroys whitespace in text nodes and\nwill insert carriage returns …\n"],["REXML::Formatters::Transitive","","REXML/Formatters/Transitive.html","","<p>The Transitive formatter writes an XML document that parses to an identical\ndocument as the source document. …\n"],["REXML::Functions","","REXML/Functions.html","","<p>If you add a method, keep in mind two things: (1) the first argument will\nalways be a list of nodes from …\n"],["REXML::IOSource","","REXML/IOSource.html","","<p>A Source that wraps an IO.  See the Source class for method documentation\n"],["REXML::Instruction","","REXML/Instruction.html","","<p>Represents an XML Instruction; IE, &lt;? … ?&gt; TODO: Add parent arg (3rd\narg) to constructor\n"],["REXML::Light","","REXML/Light.html","",""],["REXML::Light::Node","","REXML/Light/Node.html","","<p>Represents a tagged XML element.  Elements are characterized by having\nchildren, attributes, and names, …\n"],["REXML::Namespace","","REXML/Namespace.html","","<p>Adds named attributes to an object.\n"],["REXML::Node","","REXML/Node.html","","<p>Represents a node in the tree.  Nodes are never encountered except as\nsuperclasses of other objects. …\n"],["REXML::NotationDecl","","REXML/NotationDecl.html","",""],["REXML::Output","","REXML/Output.html","",""],["REXML::Parent","","REXML/Parent.html","","<p>A parent has children, and has methods for accessing them.  The Parent\nclass is never encountered except …\n"],["REXML::ParseException","","REXML/ParseException.html","",""],["REXML::Parsers","","REXML/Parsers.html","",""],["REXML::Parsers::BaseParser","","REXML/Parsers/BaseParser.html","","<p>Using the Pull Parser\n<p><em>This API is experimental, and subject to change.</em>\n\n<pre>parser = PullParser.new( &quot;&lt;a&gt;text&lt;b ...</pre>\n"],["REXML::Parsers::LightParser","","REXML/Parsers/LightParser.html","",""],["REXML::Parsers::PullEvent","","REXML/Parsers/PullEvent.html","","<p>A parsing event.  The contents of the event are accessed as an +Array?, and\nthe type is given either …\n"],["REXML::Parsers::PullParser","","REXML/Parsers/PullParser.html","","<p>Using the Pull Parser\n<p><em>This API is experimental, and subject to change.</em>\n\n<pre>parser = PullParser.new( &quot;&lt;a&gt;text&lt;b ...</pre>\n"],["REXML::Parsers::SAX2Parser","","REXML/Parsers/SAX2Parser.html","","<p>SAX2Parser\n"],["REXML::Parsers::StreamParser","","REXML/Parsers/StreamParser.html","",""],["REXML::Parsers::TreeParser","","REXML/Parsers/TreeParser.html","",""],["REXML::Parsers::UltraLightParser","","REXML/Parsers/UltraLightParser.html","",""],["REXML::Parsers::XPathParser","","REXML/Parsers/XPathParser.html","","<p>You don&#39;t want to use this class.  Really.  Use XPath, which is a\nwrapper for this class.  Believe …\n"],["REXML::QuickPath","","REXML/QuickPath.html","",""],["REXML::SAX2Listener","","REXML/SAX2Listener.html","","<p>A template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are …\n"],["REXML::Security","","REXML/Security.html","",""],["REXML::Source","","REXML/Source.html","","<p>A Source can be searched for patterns, and wraps buffers and other objects\nand provides consumption of …\n"],["REXML::SourceFactory","","REXML/SourceFactory.html","","<p>Generates Source-s.  USE THIS CLASS.\n"],["REXML::StreamListener","","REXML/StreamListener.html","","<p>A template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are …\n"],["REXML::SyncEnumerator","","REXML/SyncEnumerator.html","",""],["REXML::Text","","REXML/Text.html","","<p>Represents text nodes in an XML document\n"],["REXML::UndefinedNamespaceException","","REXML/UndefinedNamespaceException.html","",""],["REXML::Validation","","REXML/Validation.html","",""],["REXML::Validation::Choice","","REXML/Validation/Choice.html","",""],["REXML::Validation::Event","","REXML/Validation/Event.html","",""],["REXML::Validation::Interleave","","REXML/Validation/Interleave.html","",""],["REXML::Validation::OneOrMore","","REXML/Validation/OneOrMore.html","",""],["REXML::Validation::Optional","","REXML/Validation/Optional.html","",""],["REXML::Validation::Ref","","REXML/Validation/Ref.html","",""],["REXML::Validation::RelaxNG","","REXML/Validation/RelaxNG.html","","<p>Implemented:\n<p>empty\n<p>element\n"],["REXML::Validation::Sequence","","REXML/Validation/Sequence.html","",""],["REXML::Validation::State","","REXML/Validation/State.html","",""],["REXML::Validation::ValidationException","","REXML/Validation/ValidationException.html","",""],["REXML::Validation::Validator","","REXML/Validation/Validator.html","",""],["REXML::Validation::ZeroOrMore","","REXML/Validation/ZeroOrMore.html","",""],["REXML::XMLDecl","","REXML/XMLDecl.html","","<p>NEEDS DOCUMENTATION\n"],["REXML::XMLTokens","","REXML/XMLTokens.html","","<p>Defines a number of tokens used for parsing XML.  Not for general\nconsumption.\n"],["REXML::XPath","","REXML/XPath.html","","<p>Wrapper class.  Use this class to access the XPath functions.\n"],["REXML::XPathParser","","REXML/XPathParser.html","","<p>You don&#39;t want to use this class.  Really.  Use XPath, which is a\nwrapper for this class.  Believe …\n"],["RSS","","RSS.html","","<p>RSS reading and writing\n<p>Really Simple Syndication (RSS) is a family of formats that describe\n&#39;feeds,&#39; …\n"],["RSS::Atom","","RSS/Atom.html","","<p>Atom is an XML-based document format that is used to describe\n&#39;feeds&#39; of related information. …\n"],["RSS::Atom::CommonModel","","RSS/Atom/CommonModel.html","",""],["RSS::Atom::ContentModel","","RSS/Atom/ContentModel.html","",""],["RSS::Atom::ContentModel::ClassMethods","","RSS/Atom/ContentModel/ClassMethods.html","",""],["RSS::Atom::DateConstruct","","RSS/Atom/DateConstruct.html","","<p>Element used to describe an Atom date and time in the ISO 8601 format\n<p>Examples:\n<p>2013-03-04T15:30:02Z\n"],["RSS::Atom::DuplicateLinkChecker","","RSS/Atom/DuplicateLinkChecker.html","",""],["RSS::Atom::Entry","","RSS/Atom/Entry.html","","<p>Defines a top-level Atom Entry element, used as the document element of a\nstand-alone Atom Entry Document …\n"],["RSS::Atom::Feed","","RSS/Atom/Feed.html","","<p>Defines the top-level element of an Atom Feed Document. It consists of a\nnumber of children Entry elements, …\n"],["RSS::Atom::Feed::Author","","RSS/Atom/Feed/Author.html","","<p>PersonConstruct that contains information regarding the author of a Feed or\nEntry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.author …\n"],["RSS::Atom::Feed::Category","","RSS/Atom/Feed/Category.html","","<p>Contains information about a category associated with a Feed or Entry. It\nhas the following attributes: …\n"],["RSS::Atom::Feed::Contributor","","RSS/Atom/Feed/Contributor.html","","<p>PersonConstruct that contains information regarding the contributors of a\nFeed or Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.contributor …\n"],["RSS::Atom::Feed::Entry","","RSS/Atom/Feed/Entry.html","","<p>Defines a child Atom Entry element of an Atom Feed element. It has the\nfollowing attributes:\n<p>author\n<p>category …\n"],["RSS::Atom::Feed::Entry::Content","","RSS/Atom/Feed/Entry/Content.html","","<p>Contains or links to the content of the Entry. It has the following\nattributes:\n<p>type\n<p>src\n"],["RSS::Atom::Feed::Entry::Published","","RSS/Atom/Feed/Entry/Published.html","","<p>DateConstruct that usually indicates the time of the initial creation of an\nEntry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.published …\n"],["RSS::Atom::Feed::Entry::Source","","RSS/Atom/Feed/Entry/Source.html","","<p>Defines a Atom Source element. It has the following attributes:\n<p>author\n<p>category\n"],["RSS::Atom::Feed::Entry::Summary","","RSS/Atom/Feed/Entry/Summary.html","","<p>TextConstruct that describes a summary of the Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.summary …\n"],["RSS::Atom::Feed::Generator","","RSS/Atom/Feed/Generator.html","","<p>Contains information on the agent used to generate the feed.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.generator …\n"],["RSS::Atom::Feed::Icon","","RSS/Atom/Feed/Icon.html","","<p>Defines an image that provides a visual identification for a eed. The image\nshould have an aspect ratio …\n"],["RSS::Atom::Feed::Id","","RSS/Atom/Feed/Id.html","","<p>Defines the Universally Unique Identifier (UUID) for a Feed or Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.id …\n"],["RSS::Atom::Feed::Link","","RSS/Atom/Feed/Link.html","","<p>Defines a reference to a Web resource. It has the following attributes:\n<p>href\n<p>rel\n"],["RSS::Atom::Feed::Logo","","RSS/Atom/Feed/Logo.html","","<p>Defines an image that provides a visual identification for the Feed. The\nimage should have an aspect …\n"],["RSS::Atom::Feed::Rights","","RSS/Atom/Feed/Rights.html","","<p>TextConstruct that contains copyright information regarding the content in\nan Entry or Feed. It should …\n"],["RSS::Atom::Feed::Subtitle","","RSS/Atom/Feed/Subtitle.html","","<p>TextConstruct that conveys a description or subtitle for a Feed.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.subtitle …\n"],["RSS::Atom::Feed::Title","","RSS/Atom/Feed/Title.html","","<p>TextConstruct that conveys a description or title for a Feed or Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.title …\n"],["RSS::Atom::Feed::Updated","","RSS/Atom/Feed/Updated.html","","<p>DateConstruct indicating the most recent time when a Feed or Entry was\nmodified in a way the publisher …\n"],["RSS::Atom::PersonConstruct","","RSS/Atom/PersonConstruct.html","","<p>The PersonConstruct module is used to define a person Atom element that can\nbe used to describe a person, …\n"],["RSS::Atom::PersonConstruct::Email","","RSS/Atom/PersonConstruct/Email.html","","<p>The email of the person or entity.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.email\n"],["RSS::Atom::PersonConstruct::Name","","RSS/Atom/PersonConstruct/Name.html","","<p>The name of the person or entity.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.name\n"],["RSS::Atom::PersonConstruct::Uri","","RSS/Atom/PersonConstruct/Uri.html","","<p>The URI of the person or entity.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.uri\n"],["RSS::Atom::TextConstruct","","RSS/Atom/TextConstruct.html","","<p>The TextConstruct module is used to define a Text construct Atom element,\nwhich is used to store small …\n"],["RSS::Atom::URIContentModel","","RSS/Atom/URIContentModel.html","",""],["RSS::BaseDublinCoreModel","","RSS/BaseDublinCoreModel.html","",""],["RSS::BaseListener","","RSS/BaseListener.html","",""],["RSS::BaseModel","","RSS/BaseModel.html","",""],["RSS::BaseParser","","RSS/BaseParser.html","",""],["RSS::BaseTrackBackModel","","RSS/BaseTrackBackModel.html","",""],["RSS::ContentModel","","RSS/ContentModel.html","",""],["RSS::ConversionError","","RSS/ConversionError.html","","<p>Raised when a conversion failure occurs.\n"],["RSS::Converter","","RSS/Converter.html","",""],["RSS::DublinCoreModel","","RSS/DublinCoreModel.html","",""],["RSS::DublincoreModel","","RSS/DublinCoreModel.html","",""],["RSS::Element","","RSS/Element.html","",""],["RSS::Error","","RSS/Error.html","","<p>The basic error all other RSS errors stem from. Rescue this error if you\nwant to handle any given RSS …\n"],["RSS::ITunesBaseModel","","RSS/ITunesBaseModel.html","",""],["RSS::ITunesChannelModel","","RSS/ITunesChannelModel.html","",""],["RSS::ITunesChannelModel::ITunesCategory","","RSS/ITunesChannelModel/ITunesCategory.html","",""],["RSS::ITunesChannelModel::ITunesImage","","RSS/ITunesChannelModel/ITunesImage.html","",""],["RSS::ITunesChannelModel::ITunesOwner","","RSS/ITunesChannelModel/ITunesOwner.html","",""],["RSS::ITunesItemModel","","RSS/ITunesItemModel.html","",""],["RSS::ITunesItemModel::ITunesDuration","","RSS/ITunesItemModel/ITunesDuration.html","",""],["RSS::ITunesModelUtils","","RSS/ITunesModelUtils.html","",""],["RSS::ImageFaviconModel","","RSS/ImageFaviconModel.html","",""],["RSS::ImageFaviconModel::ImageFavicon","","RSS/ImageFaviconModel/ImageFavicon.html","",""],["RSS::ImageItemModel","","RSS/ImageItemModel.html","",""],["RSS::ImageItemModel::ImageItem","","RSS/ImageItemModel/ImageItem.html","",""],["RSS::ImageModelUtils","","RSS/ImageModelUtils.html","",""],["RSS::InvalidRSSError","","RSS/InvalidRSSError.html","","<p>The InvalidRSSError error is the base class for a variety of errors related\nto a poorly-formed RSS feed. …\n"],["RSS::ListenerMixin","","RSS/ListenerMixin.html","",""],["RSS::Maker","","RSS/Maker.html","","<p>Provides a set of builders for various RSS objects\n<p>Feeds\n<p>RSS 0.91\n"],["RSS::Maker::Atom","","RSS/Maker/Atom.html","",""],["RSS::Maker::Atom::Entry","","RSS/Maker/Atom/Entry.html","",""],["RSS::Maker::Atom::Entry::Channel","","RSS/Maker/Atom/Entry/Channel.html","",""],["RSS::Maker::Atom::Entry::Channel::Cloud","","RSS/Maker/Atom/Entry/Channel/Cloud.html","",""],["RSS::Maker::Atom::Entry::Channel::Description","","RSS/Maker/Atom/Entry/Channel/Description.html","",""],["RSS::Maker::Atom::Entry::Channel::Generator","","RSS/Maker/Atom/Entry/Channel/Generator.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipDays","","RSS/Maker/Atom/Entry/Channel/SkipDays.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipDays::Day","","RSS/Maker/Atom/Entry/Channel/SkipDays/Day.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipHours","","RSS/Maker/Atom/Entry/Channel/SkipHours.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipHours::Hour","","RSS/Maker/Atom/Entry/Channel/SkipHours/Hour.html","",""],["RSS::Maker::Atom::Entry::Image","","RSS/Maker/Atom/Entry/Image.html","",""],["RSS::Maker::Atom::Entry::Items","","RSS/Maker/Atom/Entry/Items.html","",""],["RSS::Maker::Atom::Entry::Items::Item","","RSS/Maker/Atom/Entry/Items/Item.html","",""],["RSS::Maker::Atom::Entry::Textinput","","RSS/Maker/Atom/Entry/Textinput.html","",""],["RSS::Maker::Atom::Feed","","RSS/Maker/Atom/Feed.html","",""],["RSS::Maker::Atom::Feed::Channel","","RSS/Maker/Atom/Feed/Channel.html","",""],["RSS::Maker::Atom::Feed::Channel::Categories","","RSS/Maker/Atom/Feed/Channel/Categories.html","",""],["RSS::Maker::Atom::Feed::Channel::Categories::Category","","RSS/Maker/Atom/Feed/Channel/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Channel::Cloud","","RSS/Maker/Atom/Feed/Channel/Cloud.html","",""],["RSS::Maker::Atom::Feed::Channel::Generator","","RSS/Maker/Atom/Feed/Channel/Generator.html","",""],["RSS::Maker::Atom::Feed::Channel::Links","","RSS/Maker/Atom/Feed/Channel/Links.html","",""],["RSS::Maker::Atom::Feed::Channel::Links::Link","","RSS/Maker/Atom/Feed/Channel/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipDays","","RSS/Maker/Atom/Feed/Channel/SkipDays.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipDays::Day","","RSS/Maker/Atom/Feed/Channel/SkipDays/Day.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipHours","","RSS/Maker/Atom/Feed/Channel/SkipHours.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipHours::Hour","","RSS/Maker/Atom/Feed/Channel/SkipHours/Hour.html","",""],["RSS::Maker::Atom::Feed::Image","","RSS/Maker/Atom/Feed/Image.html","",""],["RSS::Maker::Atom::Feed::Items","","RSS/Maker/Atom/Feed/Items.html","",""],["RSS::Maker::Atom::Feed::Items::Item","","RSS/Maker/Atom/Feed/Items/Item.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Categories","","RSS/Maker/Atom/Feed/Items/Item/Categories.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Categories::Category","","RSS/Maker/Atom/Feed/Items/Item/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Content","","RSS/Maker/Atom/Feed/Items/Item/Content.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Enclosure","","RSS/Maker/Atom/Feed/Items/Item/Enclosure.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Guid","","RSS/Maker/Atom/Feed/Items/Item/Guid.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Links","","RSS/Maker/Atom/Feed/Items/Item/Links.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Links::Link","","RSS/Maker/Atom/Feed/Items/Item/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source","","RSS/Maker/Atom/Feed/Items/Item/Source.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Categories","","RSS/Maker/Atom/Feed/Items/Item/Source/Categories.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category","","RSS/Maker/Atom/Feed/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Generator","","RSS/Maker/Atom/Feed/Items/Item/Source/Generator.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Icon","","RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Links","","RSS/Maker/Atom/Feed/Items/Item/Source/Links.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link","","RSS/Maker/Atom/Feed/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Logo","","RSS/Maker/Atom/Feed/Items/Item/Source/Logo.html","",""],["RSS::Maker::Atom::Feed::Textinput","","RSS/Maker/Atom/Feed/Textinput.html","",""],["RSS::Maker::AtomCategory","","RSS/Maker/AtomCategory.html","",""],["RSS::Maker::AtomGenerator","","RSS/Maker/AtomGenerator.html","",""],["RSS::Maker::AtomLink","","RSS/Maker/AtomLink.html","",""],["RSS::Maker::AtomLogo","","RSS/Maker/AtomLogo.html","",""],["RSS::Maker::AtomPersonConstructBase","","RSS/Maker/AtomPersonConstructBase.html","",""],["RSS::Maker::AtomPersons","","RSS/Maker/AtomPersons.html","",""],["RSS::Maker::AtomTextConstruct","","RSS/Maker/AtomTextConstruct.html","",""],["RSS::Maker::AtomTextConstructBase","","RSS/Maker/AtomTextConstructBase.html","",""],["RSS::Maker::AtomTextConstructBase::EnsureXMLContent","","RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html","",""],["RSS::Maker::Base","","RSS/Maker/Base.html","",""],["RSS::Maker::ChannelBase","","RSS/Maker/ChannelBase.html","",""],["RSS::Maker::ChannelBase::AuthorsBase","","RSS/Maker/ChannelBase/AuthorsBase.html","",""],["RSS::Maker::ChannelBase::AuthorsBase::AuthorBase","","RSS/Maker/ChannelBase/AuthorsBase/AuthorBase.html","",""],["RSS::Maker::ChannelBase::CategoriesBase","","RSS/Maker/ChannelBase/CategoriesBase.html","",""],["RSS::Maker::ChannelBase::CategoriesBase::CategoryBase","","RSS/Maker/ChannelBase/CategoriesBase/CategoryBase.html","",""],["RSS::Maker::ChannelBase::CloudBase","","RSS/Maker/ChannelBase/CloudBase.html","",""],["RSS::Maker::ChannelBase::ContributorsBase","","RSS/Maker/ChannelBase/ContributorsBase.html","",""],["RSS::Maker::ChannelBase::ContributorsBase::ContributorBase","","RSS/Maker/ChannelBase/ContributorsBase/ContributorBase.html","",""],["RSS::Maker::ChannelBase::CopyrightBase","","RSS/Maker/ChannelBase/CopyrightBase.html","",""],["RSS::Maker::ChannelBase::DescriptionBase","","RSS/Maker/ChannelBase/DescriptionBase.html","",""],["RSS::Maker::ChannelBase::GeneratorBase","","RSS/Maker/ChannelBase/GeneratorBase.html","",""],["RSS::Maker::ChannelBase::ITunesCategories","","RSS/Maker/ChannelBase/ITunesCategories.html","",""],["RSS::Maker::ChannelBase::ITunesCategories::ITunesCategory","","RSS/Maker/ChannelBase/ITunesCategories/ITunesCategory.html","",""],["RSS::Maker::ChannelBase::ITunesImage","","RSS/Maker/ChannelBase/ITunesImage.html","",""],["RSS::Maker::ChannelBase::ITunesOwner","","RSS/Maker/ChannelBase/ITunesOwner.html","",""],["RSS::Maker::ChannelBase::LinksBase","","RSS/Maker/ChannelBase/LinksBase.html","",""],["RSS::Maker::ChannelBase::LinksBase::LinkBase","","RSS/Maker/ChannelBase/LinksBase/LinkBase.html","",""],["RSS::Maker::ChannelBase::SkipDaysBase","","RSS/Maker/ChannelBase/SkipDaysBase.html","",""],["RSS::Maker::ChannelBase::SkipDaysBase::DayBase","","RSS/Maker/ChannelBase/SkipDaysBase/DayBase.html","",""],["RSS::Maker::ChannelBase::SkipHoursBase","","RSS/Maker/ChannelBase/SkipHoursBase.html","",""],["RSS::Maker::ChannelBase::SkipHoursBase::HourBase","","RSS/Maker/ChannelBase/SkipHoursBase/HourBase.html","",""],["RSS::Maker::ChannelBase::TitleBase","","RSS/Maker/ChannelBase/TitleBase.html","",""],["RSS::Maker::ContentModel","","RSS/Maker/ContentModel.html","",""],["RSS::Maker::DublinCoreModel","","RSS/Maker/DublinCoreModel.html","",""],["RSS::Maker::ITunesBaseModel","","RSS/Maker/ITunesBaseModel.html","",""],["RSS::Maker::ITunesChannelModel","","RSS/Maker/ITunesChannelModel.html","",""],["RSS::Maker::ITunesChannelModel::ITunesCategoriesBase","","RSS/Maker/ITunesChannelModel/ITunesCategoriesBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","","RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesImageBase","","RSS/Maker/ITunesChannelModel/ITunesImageBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesOwnerBase","","RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html","",""],["RSS::Maker::ITunesItemModel","","RSS/Maker/ITunesItemModel.html","",""],["RSS::Maker::ITunesItemModel::ITunesDurationBase","","RSS/Maker/ITunesItemModel/ITunesDurationBase.html","",""],["RSS::Maker::ImageBase","","RSS/Maker/ImageBase.html","",""],["RSS::Maker::ImageFaviconModel","","RSS/Maker/ImageFaviconModel.html","",""],["RSS::Maker::ImageFaviconModel::ImageFaviconBase","","RSS/Maker/ImageFaviconModel/ImageFaviconBase.html","",""],["RSS::Maker::ImageItemModel","","RSS/Maker/ImageItemModel.html","",""],["RSS::Maker::ImageItemModel::ImageItemBase","","RSS/Maker/ImageItemModel/ImageItemBase.html","",""],["RSS::Maker::ItemsBase","","RSS/Maker/ItemsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase","","RSS/Maker/ItemsBase/ItemBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::ContentBase","","RSS/Maker/ItemsBase/ItemBase/ContentBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::DescriptionBase","","RSS/Maker/ItemsBase/ItemBase/DescriptionBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::EnclosureBase","","RSS/Maker/ItemsBase/ItemBase/EnclosureBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::GuidBase","","RSS/Maker/ItemsBase/ItemBase/GuidBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::ITunesDuration","","RSS/Maker/ItemsBase/ItemBase/ITunesDuration.html","",""],["RSS::Maker::ItemsBase::ItemBase::RightsBase","","RSS/Maker/ItemsBase/ItemBase/RightsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase","","RSS/Maker/ItemsBase/ItemBase/SourceBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::IconBase","","RSS/Maker/ItemsBase/ItemBase/SourceBase/IconBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::LogoBase","","RSS/Maker/ItemsBase/ItemBase/SourceBase/LogoBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::RightsBase","","RSS/Maker/ItemsBase/ItemBase/SourceBase/RightsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::SubtitleBase","","RSS/Maker/ItemsBase/ItemBase/SourceBase/SubtitleBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::TitleBase","","RSS/Maker/ItemsBase/ItemBase/SourceBase/TitleBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::TitleBase","","RSS/Maker/ItemsBase/ItemBase/TitleBase.html","",""],["RSS::Maker::RSS09","","RSS/Maker/RSS09.html","",""],["RSS::Maker::RSS091","","RSS/Maker/RSS091.html","",""],["RSS::Maker::RSS091::Channel","","RSS/Maker/RSS091/Channel.html","",""],["RSS::Maker::RSS091::Image","","RSS/Maker/RSS091/Image.html","",""],["RSS::Maker::RSS091::Items","","RSS/Maker/RSS091/Items.html","",""],["RSS::Maker::RSS091::Items::Item","","RSS/Maker/RSS091/Items/Item.html","",""],["RSS::Maker::RSS091::Textinput","","RSS/Maker/RSS091/Textinput.html","",""],["RSS::Maker::RSS092","","RSS/Maker/RSS092.html","",""],["RSS::Maker::RSS092::Channel","","RSS/Maker/RSS092/Channel.html","",""],["RSS::Maker::RSS092::Image","","RSS/Maker/RSS092/Image.html","",""],["RSS::Maker::RSS092::Items","","RSS/Maker/RSS092/Items.html","",""],["RSS::Maker::RSS092::Items::Item","","RSS/Maker/RSS092/Items/Item.html","",""],["RSS::Maker::RSS092::Textinput","","RSS/Maker/RSS092/Textinput.html","",""],["RSS::Maker::RSS09::Channel","","RSS/Maker/RSS09/Channel.html","",""],["RSS::Maker::RSS09::Channel::Authors","","RSS/Maker/RSS09/Channel/Authors.html","",""],["RSS::Maker::RSS09::Channel::Authors::Author","","RSS/Maker/RSS09/Channel/Authors/Author.html","",""],["RSS::Maker::RSS09::Channel::Categories","","RSS/Maker/RSS09/Channel/Categories.html","",""],["RSS::Maker::RSS09::Channel::Categories::Category","","RSS/Maker/RSS09/Channel/Categories/Category.html","",""],["RSS::Maker::RSS09::Channel::Cloud","","RSS/Maker/RSS09/Channel/Cloud.html","",""],["RSS::Maker::RSS09::Channel::Contributors","","RSS/Maker/RSS09/Channel/Contributors.html","",""],["RSS::Maker::RSS09::Channel::Contributors::Contributor","","RSS/Maker/RSS09/Channel/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Channel::Copyright","","RSS/Maker/RSS09/Channel/Copyright.html","",""],["RSS::Maker::RSS09::Channel::Description","","RSS/Maker/RSS09/Channel/Description.html","",""],["RSS::Maker::RSS09::Channel::Generator","","RSS/Maker/RSS09/Channel/Generator.html","",""],["RSS::Maker::RSS09::Channel::Links","","RSS/Maker/RSS09/Channel/Links.html","",""],["RSS::Maker::RSS09::Channel::Links::Link","","RSS/Maker/RSS09/Channel/Links/Link.html","",""],["RSS::Maker::RSS09::Channel::SkipDays","","RSS/Maker/RSS09/Channel/SkipDays.html","",""],["RSS::Maker::RSS09::Channel::SkipDays::Day","","RSS/Maker/RSS09/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS09::Channel::SkipHours","","RSS/Maker/RSS09/Channel/SkipHours.html","",""],["RSS::Maker::RSS09::Channel::SkipHours::Hour","","RSS/Maker/RSS09/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS09::Channel::Title","","RSS/Maker/RSS09/Channel/Title.html","",""],["RSS::Maker::RSS09::Image","","RSS/Maker/RSS09/Image.html","",""],["RSS::Maker::RSS09::Items","","RSS/Maker/RSS09/Items.html","",""],["RSS::Maker::RSS09::Items::Item","","RSS/Maker/RSS09/Items/Item.html","",""],["RSS::Maker::RSS09::Items::Item::Authors","","RSS/Maker/RSS09/Items/Item/Authors.html","",""],["RSS::Maker::RSS09::Items::Item::Authors::Author","","RSS/Maker/RSS09/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS09::Items::Item::Categories","","RSS/Maker/RSS09/Items/Item/Categories.html","",""],["RSS::Maker::RSS09::Items::Item::Categories::Category","","RSS/Maker/RSS09/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS09::Items::Item::Content","","RSS/Maker/RSS09/Items/Item/Content.html","",""],["RSS::Maker::RSS09::Items::Item::Contributors","","RSS/Maker/RSS09/Items/Item/Contributors.html","",""],["RSS::Maker::RSS09::Items::Item::Contributors::Contributor","","RSS/Maker/RSS09/Items/Item/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Items::Item::Description","","RSS/Maker/RSS09/Items/Item/Description.html","",""],["RSS::Maker::RSS09::Items::Item::Enclosure","","RSS/Maker/RSS09/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS09::Items::Item::Guid","","RSS/Maker/RSS09/Items/Item/Guid.html","",""],["RSS::Maker::RSS09::Items::Item::Links","","RSS/Maker/RSS09/Items/Item/Links.html","",""],["RSS::Maker::RSS09::Items::Item::Links::Link","","RSS/Maker/RSS09/Items/Item/Links/Link.html","",""],["RSS::Maker::RSS09::Items::Item::Rights","","RSS/Maker/RSS09/Items/Item/Rights.html","",""],["RSS::Maker::RSS09::Items::Item::Source","","RSS/Maker/RSS09/Items/Item/Source.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Authors","","RSS/Maker/RSS09/Items/Item/Source/Authors.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Authors::Author","","RSS/Maker/RSS09/Items/Item/Source/Authors/Author.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Categories","","RSS/Maker/RSS09/Items/Item/Source/Categories.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Categories::Category","","RSS/Maker/RSS09/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Contributors","","RSS/Maker/RSS09/Items/Item/Source/Contributors.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Contributors::Contributor","","RSS/Maker/RSS09/Items/Item/Source/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Generator","","RSS/Maker/RSS09/Items/Item/Source/Generator.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Icon","","RSS/Maker/RSS09/Items/Item/Source/Icon.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Links","","RSS/Maker/RSS09/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Links::Link","","RSS/Maker/RSS09/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Logo","","RSS/Maker/RSS09/Items/Item/Source/Logo.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Rights","","RSS/Maker/RSS09/Items/Item/Source/Rights.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Subtitle","","RSS/Maker/RSS09/Items/Item/Source/Subtitle.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Title","","RSS/Maker/RSS09/Items/Item/Source/Title.html","",""],["RSS::Maker::RSS09::Items::Item::Title","","RSS/Maker/RSS09/Items/Item/Title.html","",""],["RSS::Maker::RSS09::Textinput","","RSS/Maker/RSS09/Textinput.html","",""],["RSS::Maker::RSS10","","RSS/Maker/RSS10.html","",""],["RSS::Maker::RSS10::Channel","","RSS/Maker/RSS10/Channel.html","",""],["RSS::Maker::RSS10::Channel::Authors","","RSS/Maker/RSS10/Channel/Authors.html","",""],["RSS::Maker::RSS10::Channel::Authors::Author","","RSS/Maker/RSS10/Channel/Authors/Author.html","",""],["RSS::Maker::RSS10::Channel::Categories","","RSS/Maker/RSS10/Channel/Categories.html","",""],["RSS::Maker::RSS10::Channel::Categories::Category","","RSS/Maker/RSS10/Channel/Categories/Category.html","",""],["RSS::Maker::RSS10::Channel::Cloud","","RSS/Maker/RSS10/Channel/Cloud.html","",""],["RSS::Maker::RSS10::Channel::Contributors","","RSS/Maker/RSS10/Channel/Contributors.html","",""],["RSS::Maker::RSS10::Channel::Contributors::Contributor","","RSS/Maker/RSS10/Channel/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Channel::Copyright","","RSS/Maker/RSS10/Channel/Copyright.html","",""],["RSS::Maker::RSS10::Channel::Description","","RSS/Maker/RSS10/Channel/Description.html","",""],["RSS::Maker::RSS10::Channel::Generator","","RSS/Maker/RSS10/Channel/Generator.html","",""],["RSS::Maker::RSS10::Channel::Links","","RSS/Maker/RSS10/Channel/Links.html","",""],["RSS::Maker::RSS10::Channel::Links::Link","","RSS/Maker/RSS10/Channel/Links/Link.html","",""],["RSS::Maker::RSS10::Channel::SkipDays","","RSS/Maker/RSS10/Channel/SkipDays.html","",""],["RSS::Maker::RSS10::Channel::SkipDays::Day","","RSS/Maker/RSS10/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS10::Channel::SkipHours","","RSS/Maker/RSS10/Channel/SkipHours.html","",""],["RSS::Maker::RSS10::Channel::SkipHours::Hour","","RSS/Maker/RSS10/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS10::Channel::Title","","RSS/Maker/RSS10/Channel/Title.html","",""],["RSS::Maker::RSS10::Image","","RSS/Maker/RSS10/Image.html","",""],["RSS::Maker::RSS10::Items","","RSS/Maker/RSS10/Items.html","",""],["RSS::Maker::RSS10::Items::Item","","RSS/Maker/RSS10/Items/Item.html","",""],["RSS::Maker::RSS10::Items::Item::Authors","","RSS/Maker/RSS10/Items/Item/Authors.html","",""],["RSS::Maker::RSS10::Items::Item::Authors::Author","","RSS/Maker/RSS10/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS10::Items::Item::Categories","","RSS/Maker/RSS10/Items/Item/Categories.html","",""],["RSS::Maker::RSS10::Items::Item::Categories::Category","","RSS/Maker/RSS10/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS10::Items::Item::Content","","RSS/Maker/RSS10/Items/Item/Content.html","",""],["RSS::Maker::RSS10::Items::Item::Contributors","","RSS/Maker/RSS10/Items/Item/Contributors.html","",""],["RSS::Maker::RSS10::Items::Item::Contributors::Contributor","","RSS/Maker/RSS10/Items/Item/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Items::Item::Description","","RSS/Maker/RSS10/Items/Item/Description.html","",""],["RSS::Maker::RSS10::Items::Item::Enclosure","","RSS/Maker/RSS10/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS10::Items::Item::Guid","","RSS/Maker/RSS10/Items/Item/Guid.html","",""],["RSS::Maker::RSS10::Items::Item::Links","","RSS/Maker/RSS10/Items/Item/Links.html","",""],["RSS::Maker::RSS10::Items::Item::Links::Link","","RSS/Maker/RSS10/Items/Item/Links/Link.html","",""],["RSS::Maker::RSS10::Items::Item::Rights","","RSS/Maker/RSS10/Items/Item/Rights.html","",""],["RSS::Maker::RSS10::Items::Item::Source","","RSS/Maker/RSS10/Items/Item/Source.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Authors","","RSS/Maker/RSS10/Items/Item/Source/Authors.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Authors::Author","","RSS/Maker/RSS10/Items/Item/Source/Authors/Author.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Categories","","RSS/Maker/RSS10/Items/Item/Source/Categories.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Categories::Category","","RSS/Maker/RSS10/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Contributors","","RSS/Maker/RSS10/Items/Item/Source/Contributors.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Contributors::Contributor","","RSS/Maker/RSS10/Items/Item/Source/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Generator","","RSS/Maker/RSS10/Items/Item/Source/Generator.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Icon","","RSS/Maker/RSS10/Items/Item/Source/Icon.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Links","","RSS/Maker/RSS10/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Links::Link","","RSS/Maker/RSS10/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Logo","","RSS/Maker/RSS10/Items/Item/Source/Logo.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Rights","","RSS/Maker/RSS10/Items/Item/Source/Rights.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Subtitle","","RSS/Maker/RSS10/Items/Item/Source/Subtitle.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Title","","RSS/Maker/RSS10/Items/Item/Source/Title.html","",""],["RSS::Maker::RSS10::Items::Item::Title","","RSS/Maker/RSS10/Items/Item/Title.html","",""],["RSS::Maker::RSS10::Textinput","","RSS/Maker/RSS10/Textinput.html","",""],["RSS::Maker::RSS20","","RSS/Maker/RSS20.html","",""],["RSS::Maker::RSS20::Channel","","RSS/Maker/RSS20/Channel.html","",""],["RSS::Maker::RSS20::Channel::Categories","","RSS/Maker/RSS20/Channel/Categories.html","",""],["RSS::Maker::RSS20::Channel::Categories::Category","","RSS/Maker/RSS20/Channel/Categories/Category.html","",""],["RSS::Maker::RSS20::Channel::Cloud","","RSS/Maker/RSS20/Channel/Cloud.html","",""],["RSS::Maker::RSS20::Channel::Generator","","RSS/Maker/RSS20/Channel/Generator.html","",""],["RSS::Maker::RSS20::Channel::SkipDays","","RSS/Maker/RSS20/Channel/SkipDays.html","",""],["RSS::Maker::RSS20::Channel::SkipDays::Day","","RSS/Maker/RSS20/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS20::Channel::SkipHours","","RSS/Maker/RSS20/Channel/SkipHours.html","",""],["RSS::Maker::RSS20::Channel::SkipHours::Hour","","RSS/Maker/RSS20/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS20::Image","","RSS/Maker/RSS20/Image.html","",""],["RSS::Maker::RSS20::Items","","RSS/Maker/RSS20/Items.html","",""],["RSS::Maker::RSS20::Items::Item","","RSS/Maker/RSS20/Items/Item.html","",""],["RSS::Maker::RSS20::Items::Item::Authors","","RSS/Maker/RSS20/Items/Item/Authors.html","",""],["RSS::Maker::RSS20::Items::Item::Authors::Author","","RSS/Maker/RSS20/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS20::Items::Item::Categories","","RSS/Maker/RSS20/Items/Item/Categories.html","",""],["RSS::Maker::RSS20::Items::Item::Categories::Category","","RSS/Maker/RSS20/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS20::Items::Item::Enclosure","","RSS/Maker/RSS20/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS20::Items::Item::Guid","","RSS/Maker/RSS20/Items/Item/Guid.html","",""],["RSS::Maker::RSS20::Items::Item::Source","","RSS/Maker/RSS20/Items/Item/Source.html","",""],["RSS::Maker::RSS20::Items::Item::Source::Links","","RSS/Maker/RSS20/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS20::Items::Item::Source::Links::Link","","RSS/Maker/RSS20/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS20::Textinput","","RSS/Maker/RSS20/Textinput.html","",""],["RSS::Maker::RSSBase","","RSS/Maker/RSSBase.html","",""],["RSS::Maker::SetupDefaultDate","","RSS/Maker/SetupDefaultDate.html","",""],["RSS::Maker::SetupDefaultLanguage","","RSS/Maker/SetupDefaultLanguage.html","",""],["RSS::Maker::SlashModel","","RSS/Maker/SlashModel.html","",""],["RSS::Maker::SyndicationModel","","RSS/Maker/SyndicationModel.html","",""],["RSS::Maker::TaxonomyTopicModel","","RSS/Maker/TaxonomyTopicModel.html","",""],["RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase","","RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase.html","",""],["RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase","","RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase/TaxonomyTopicBase.html","",""],["RSS::Maker::TaxonomyTopicsModel","","RSS/Maker/TaxonomyTopicsModel.html","",""],["RSS::Maker::TaxonomyTopicsModel::TaxonomyTopicsBase","","RSS/Maker/TaxonomyTopicsModel/TaxonomyTopicsBase.html","",""],["RSS::Maker::TextinputBase","","RSS/Maker/TextinputBase.html","",""],["RSS::Maker::TrackBackModel","","RSS/Maker/TrackBackModel.html","",""],["RSS::Maker::TrackBackModel::TrackBackAboutsBase","","RSS/Maker/TrackBackModel/TrackBackAboutsBase.html","",""],["RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","","RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html","",""],["RSS::Maker::XMLStyleSheets","","RSS/Maker/XMLStyleSheets.html","",""],["RSS::Maker::XMLStyleSheets::XMLStyleSheet","","RSS/Maker/XMLStyleSheets/XMLStyleSheet.html","",""],["RSS::MissingAttributeError","","RSS/MissingAttributeError.html","","<p>Certain attributes are required on specific tags in an RSS feed. If a feed\nis missing one of these attributes, …\n"],["RSS::MissingTagError","","RSS/MissingTagError.html","","<p>Since RSS is based on XML, it must have opening and closing tags that\nmatch. If they don&#39;t, a MissingTagError …\n"],["RSS::NSError","","RSS/NSError.html","",""],["RSS::NotAvailableValueError","","RSS/NotAvailableValueError.html","","<p>Attributes are in key-value form, and if there&#39;s no value provided for\nan attribute, a NotAvailableValueError …\n"],["RSS::NotExpectedTagError","","RSS/NotExpectedTagError.html","","<p>Raised when an unexpected tag is encountered.\n"],["RSS::NotSetError","","RSS/NotSetError.html","","<p>Raised when a required variable is not set.\n"],["RSS::NotValidXMLParser","","RSS/NotValidXMLParser.html","",""],["RSS::NotWellFormedError","","RSS/NotWellFormedError.html","",""],["RSS::OverlappedPrefixError","","RSS/OverlappedPrefixError.html","","<p>RSS, being an XML-based format, has namespace support. If two namespaces\nare declared with the same name, …\n"],["RSS::Parser","","RSS/Parser.html","",""],["RSS::RDF","","RSS/RDF.html","",""],["RSS::RDF::Bag","","RSS/RDF/Bag.html","",""],["RSS::RDF::Bag::Li","","RSS/RDF/Li.html","",""],["RSS::RDF::Channel","","RSS/RDF/Channel.html","",""],["RSS::RDF::Channel::Image","","RSS/RDF/Channel/Image.html","",""],["RSS::RDF::Channel::Items","","RSS/RDF/Channel/Items.html","",""],["RSS::RDF::Channel::Items::Seq","","RSS/RDF/Seq.html","",""],["RSS::RDF::Channel::Textinput","","RSS/RDF/Channel/Textinput.html","",""],["RSS::RDF::Image","","RSS/RDF/Image.html","",""],["RSS::RDF::Item","","RSS/RDF/Item.html","",""],["RSS::RDF::Li","","RSS/RDF/Li.html","",""],["RSS::RDF::Seq","","RSS/RDF/Seq.html","",""],["RSS::RDF::Seq::Li","","RSS/RDF/Li.html","",""],["RSS::RDF::Textinput","","RSS/RDF/Textinput.html","",""],["RSS::REXMLLikeXMLParser","","RSS/REXMLLikeXMLParser.html","",""],["RSS::REXMLListener","","RSS/REXMLListener.html","",""],["RSS::REXMLParser","","RSS/REXMLParser.html","",""],["RSS::RSS09","","RSS/RSS09.html","","<p>RSS 0.9 support\n<p>RSS has three different versions. This module contains support for version\n0.9.1.\n<p>Producing …\n"],["RSS::RSS10","","RSS/RSS10.html","","<p>RSS 1.0 support\n<p>RSS has three different versions. This module contains support for version\n1.0\n<p>Producing …\n"],["RSS::RootElementMixin","","RSS/RootElementMixin.html","",""],["RSS::Rss","","RSS/Rss.html","","<p>RSS 2.0 support\n<p>RSS has three different versions. This module contains support for version\n2.0\n<p>Producing …\n"],["RSS::Rss::Channel","","RSS/Rss/Channel.html","",""],["RSS::Rss::Channel::Cloud","","RSS/Rss/Channel/Cloud.html","",""],["RSS::Rss::Channel::Image","","RSS/Rss/Channel/Image.html","",""],["RSS::Rss::Channel::Item","","RSS/Rss/Channel/Item.html","",""],["RSS::Rss::Channel::Item::Category","","RSS/Rss/Channel/Item/Category.html","",""],["RSS::Rss::Channel::Item::Enclosure","","RSS/Rss/Channel/Item/Enclosure.html","",""],["RSS::Rss::Channel::Item::Guid","","RSS/Rss/Channel/Item/Guid.html","",""],["RSS::Rss::Channel::Item::Source","","RSS/Rss/Channel/Item/Source.html","",""],["RSS::Rss::Channel::SkipDays","","RSS/Rss/Channel/SkipDays.html","",""],["RSS::Rss::Channel::SkipDays::Day","","RSS/Rss/Channel/SkipDays/Day.html","",""],["RSS::Rss::Channel::SkipHours","","RSS/Rss/Channel/SkipHours.html","",""],["RSS::Rss::Channel::SkipHours::Hour","","RSS/Rss/Channel/SkipHours/Hour.html","",""],["RSS::Rss::Channel::TextInput","","RSS/Rss/Channel/TextInput.html","",""],["RSS::SetupMaker","","RSS/SetupMaker.html","",""],["RSS::SlashModel","","RSS/SlashModel.html","",""],["RSS::SyndicationModel","","RSS/SyndicationModel.html","",""],["RSS::TaxonomyTopicModel","","RSS/TaxonomyTopicModel.html","",""],["RSS::TaxonomyTopicModel::TaxonomyTopic","","RSS/TaxonomyTopicModel/TaxonomyTopic.html","",""],["RSS::TaxonomyTopicsModel","","RSS/TaxonomyTopicsModel.html","",""],["RSS::TaxonomyTopicsModel::TaxonomyTopics","","RSS/TaxonomyTopicsModel/TaxonomyTopics.html","",""],["RSS::TaxonomyTopicsModel::TaxonomyTopics::Bag","","RSS/RDF/Bag.html","",""],["RSS::TooMuchTagError","","RSS/TooMuchTagError.html","","<p>Some tags must only exist a specific number of times in a given RSS feed.\nIf a feed has too many occurrences …\n"],["RSS::TrackBackModel10","","RSS/TrackBackModel10.html","",""],["RSS::TrackBackModel10::TrackBackAbout","","RSS/TrackBackModel10/TrackBackAbout.html","",""],["RSS::TrackBackModel10::TrackBackPing","","RSS/TrackBackModel10/TrackBackPing.html","",""],["RSS::TrackBackModel20","","RSS/TrackBackModel20.html","",""],["RSS::TrackBackModel20::TrackBackAbout","","RSS/TrackBackModel20/TrackBackAbout.html","",""],["RSS::TrackBackModel20::TrackBackPing","","RSS/TrackBackModel20/TrackBackPing.html","",""],["RSS::TrackBackUtils","","RSS/TrackBackUtils.html","",""],["RSS::UnknownConversionMethodError","","RSS/UnknownConversionMethodError.html","","<p>Raised when an unknown conversion error occurs.\n"],["RSS::UnknownTagError","","RSS/UnknownTagError.html","","<p>RSS does not allow for free-form tag names, so if an RSS feed contains a\ntag that we don&#39;t know about, …\n"],["RSS::UnsupportedMakerVersionError","","RSS/UnsupportedMakerVersionError.html","","<p>Raised when a RSS::Maker attempts to use an unknown maker.\n"],["RSS::Utils","","RSS/Utils.html","","<p>RSS::Utils is a module that holds various utility functions that are used\nacross many parts of the rest …\n"],["RSS::Utils::CSV","","RSS/Utils/CSV.html","",""],["RSS::Utils::InheritedReader","","RSS/Utils/InheritedReader.html","",""],["RSS::Utils::YesCleanOther","","RSS/Utils/YesCleanOther.html","",""],["RSS::Utils::YesOther","","RSS/Utils/YesOther.html","",""],["RSS::XML","","RSS/XML.html","",""],["RSS::XML::Element","","RSS/XML/Element.html","",""],["RSS::XMLParserListener","","RSS/XMLParserListener.html","",""],["RSS::XMLParserNotFound","","RSS/XMLParserNotFound.html","",""],["RSS::XMLParserParser","","RSS/XMLParserParser.html","",""],["RSS::XMLScanListener","","RSS/XMLScanListener.html","",""],["RSS::XMLScanParser","","RSS/XMLScanParser.html","",""],["RSS::XMLStyleSheet","","RSS/XMLStyleSheet.html","",""],["RSS::XMLStyleSheetMixin","","RSS/XMLStyleSheetMixin.html","",""],["Racc","","Racc.html","","<p>Racc is a LALR(1) parser generator. It is written in Ruby itself, and\ngenerates Ruby programs.\n<p>Command-line …\n"],["Racc::CparseParams","","Racc/CparseParams.html","",""],["Racc::ParseError","","Racc/ParseError.html","",""],["Racc::ParseError","","Racc/ParseError.html","",""],["Racc::Parser","","Racc/Parser.html","",""],["Rake","","Rake.html","",""],["Random","","Random.html","","<p>Random provides an interface to Ruby&#39;s pseudo-random number generator,\nor PRNG.  The PRNG produces …\n"],["Random::Formatter","","Random/Formatter.html","",""],["Range","","Range.html","","<p>A <code>Range</code> represents an interval—a set of values with a\nbeginning and an end. Ranges may be constructed …\n"],["RangeError","","RangeError.html","","<p>Raised when a given numerical value is out of range.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">drop</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">100</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Rational","","Rational.html","","<p>BigDecimal extends the native Rational class to provide the #to_d method.\n<p>When you require BigDecimal …\n"],["Rational::compatible","","Rational/compatible.html","",""],["Readline","","Readline.html","","<p>The Readline module provides interface for GNU Readline. This module\ndefines a number of methods to facilitate …\n"],["Regexp","","Regexp.html","","<p>A <code>Regexp</code> holds a regular expression, used to match a pattern\nagainst strings. Regexps are created using …\n"],["RegexpError","","RegexpError.html","","<p>Raised when given an invalid regexp expression.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;?&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Resolv","","Resolv.html","","<p>Resolv is a thread-aware DNS resolver library written in Ruby.  Resolv can\nhandle multiple DNS requests …\n"],["Resolv::DNS","","Resolv/DNS.html","","<p>Resolv::DNS is a DNS stub resolver.\n<p>Information taken from the following places:\n<p>STD0013\n"],["Resolv::DNS::Config","","Resolv/DNS/Config.html","",""],["Resolv::DNS::Config::NXDomain","","Resolv/DNS/Config/NXDomain.html","","<p>Indicates no such domain was found.\n"],["Resolv::DNS::Config::OtherResolvError","","Resolv/DNS/Config/OtherResolvError.html","","<p>Indicates some other unhandled resolver error was encountered.\n"],["Resolv::DNS::DecodeError","","Resolv/DNS/DecodeError.html","","<p>Indicates that the DNS response was unable to be decoded.\n"],["Resolv::DNS::EncodeError","","Resolv/DNS/EncodeError.html","","<p>Indicates that the DNS request was unable to be encoded.\n"],["Resolv::DNS::Name","","Resolv/DNS/Name.html","","<p>A representation of a DNS name.\n"],["Resolv::DNS::Query","","Resolv/DNS/Query.html","","<p>A DNS query abstract class.\n"],["Resolv::DNS::Requester","","Resolv/DNS/Requester.html","",""],["Resolv::DNS::Requester::RequestError","","Resolv/DNS/Requester/RequestError.html","","<p>Indicates a problem with the DNS request.\n"],["Resolv::DNS::Resource","","Resolv/DNS/Resource.html","","<p>A DNS resource abstract class.\n"],["Resolv::DNS::Resource::ANY","","Resolv/DNS/Resource/ANY.html","","<p>A Query type requesting any RR.\n"],["Resolv::DNS::Resource::CNAME","","Resolv/DNS/Resource/CNAME.html","","<p>The canonical name for an alias.\n"],["Resolv::DNS::Resource::DomainName","","Resolv/DNS/Resource/DomainName.html","","<p>Domain Name resource abstract class.\n"],["Resolv::DNS::Resource::Generic","","Resolv/DNS/Resource/Generic.html","","<p>A generic resource abstract class.\n"],["Resolv::DNS::Resource::HINFO","","Resolv/DNS/Resource/HINFO.html","","<p>Host Information resource.\n"],["Resolv::DNS::Resource::IN","","Resolv/DNS/Resource/IN.html","","<p>module IN contains ARPA Internet specific RRs.\n"],["Resolv::DNS::Resource::IN::A","","Resolv/DNS/Resource/IN/A.html","","<p>IPv4 Address resource\n"],["Resolv::DNS::Resource::IN::AAAA","","Resolv/DNS/Resource/IN/AAAA.html","","<p>An IPv6 address record.\n"],["Resolv::DNS::Resource::IN::SRV","","Resolv/DNS/Resource/IN/SRV.html","","<p>SRV resource record defined in RFC 2782\n<p>These records identify the hostname and port that a service is …\n"],["Resolv::DNS::Resource::IN::WKS","","Resolv/DNS/Resource/IN/WKS.html","","<p>Well Known Service resource.\n"],["Resolv::DNS::Resource::LOC","","Resolv/DNS/Resource/LOC.html","","<p>Location resource\n"],["Resolv::DNS::Resource::MINFO","","Resolv/DNS/Resource/MINFO.html","","<p>Mailing list or mailbox information.\n"],["Resolv::DNS::Resource::MX","","Resolv/DNS/Resource/MX.html","","<p>Mail Exchanger resource.\n"],["Resolv::DNS::Resource::NS","","Resolv/DNS/Resource/NS.html","","<p>An authoritative name server.\n"],["Resolv::DNS::Resource::PTR","","Resolv/DNS/Resource/PTR.html","","<p>A Pointer to another DNS name.\n"],["Resolv::DNS::Resource::SOA","","Resolv/DNS/Resource/SOA.html","","<p>Start Of Authority resource.\n"],["Resolv::DNS::Resource::TXT","","Resolv/DNS/Resource/TXT.html","","<p>Unstructured text resource.\n"],["Resolv::Hosts","","Resolv/Hosts.html","","<p>Resolv::Hosts is a hostname resolver that uses the system hosts file.\n"],["Resolv::IPv4","","Resolv/IPv4.html","","<p>A Resolv::DNS IPv4 address.\n"],["Resolv::IPv6","","Resolv/IPv6.html","","<p>A Resolv::DNS IPv6 address.\n"],["Resolv::LOC","","Resolv/LOC.html","",""],["Resolv::LOC::Alt","","Resolv/LOC/Alt.html","","<p>A Resolv::LOC::Alt\n"],["Resolv::LOC::Coord","","Resolv/LOC/Coord.html","","<p>A Resolv::LOC::Coord\n"],["Resolv::LOC::Size","","Resolv/LOC/Size.html","","<p>A Resolv::LOC::Size\n"],["Resolv::MDNS","","Resolv/MDNS.html","","<p>Resolv::MDNS is a one-shot Multicast DNS (mDNS) resolver.  It blindly makes\nqueries to the mDNS addresses …\n"],["Resolv::ResolvError","","Resolv/ResolvError.html","","<p>Indicates a failure to resolve a name or address.\n"],["Resolv::ResolvTimeout","","Resolv/ResolvTimeout.html","","<p>Indicates a timeout resolving a name or address.\n"],["Rinda","","Rinda.html","","<p>A module to implement the Linda distributed computing paradigm in Ruby.\n<p>Rinda is part of DRb (dRuby). …\n"],["Rinda::DRbObjectTemplate","","Rinda/DRbObjectTemplate.html","","<p><em>Documentation?</em>\n"],["Rinda::InvalidHashTupleKey","","Rinda/InvalidHashTupleKey.html","","<p>Raised when a hash-based tuple has an invalid key.\n"],["Rinda::NotifyTemplateEntry","","Rinda/NotifyTemplateEntry.html","","<p>A NotifyTemplateEntry is returned by TupleSpace#notify and is notified of\nTupleSpace changes.  You may …\n"],["Rinda::RequestCanceledError","","Rinda/RequestCanceledError.html","","<p>Raised when trying to use a canceled tuple.\n"],["Rinda::RequestExpiredError","","Rinda/RequestExpiredError.html","","<p>Raised when trying to use an expired tuple.\n"],["Rinda::RindaError","","Rinda/RindaError.html","","<p>Rinda error base class\n"],["Rinda::RingFinger","","Rinda/RingFinger.html","","<p>RingFinger is used by RingServer clients to discover the RingServer&#39;s\nTupleSpace.  Typically, all …\n"],["Rinda::RingProvider","","Rinda/RingProvider.html","","<p>RingProvider uses a RingServer advertised TupleSpace as a name service.\nTupleSpace clients can register …\n"],["Rinda::RingServer","","Rinda/RingServer.html","","<p>A RingServer allows a Rinda::TupleSpace to be located via UDP broadcasts.\nDefault service location uses …\n"],["Rinda::SimpleRenewer","","Rinda/SimpleRenewer.html","","<p>An SimpleRenewer allows a TupleSpace to check if a TupleEntry is still\nalive.\n"],["Rinda::Template","","Rinda/Template.html","","<p>Templates are used to match tuples in Rinda.\n"],["Rinda::TemplateEntry","","Rinda/TemplateEntry.html","","<p>A TemplateEntry is a Template together with expiry and cancellation data.\n"],["Rinda::Tuple","","Rinda/Tuple.html","","<p>A tuple is the elementary object in Rinda programming. Tuples may be\nmatched against templates if the …\n"],["Rinda::TupleBag","","Rinda/TupleBag.html","","<p>TupleBag is an unordered collection of tuples. It is the basis of\nTuplespace.\n"],["Rinda::TupleBag::TupleBin","","Rinda/TupleBag/TupleBin.html","",""],["Rinda::TupleEntry","","Rinda/TupleEntry.html","","<p>A TupleEntry is a Tuple (i.e. a possible entry in some Tuplespace) together\nwith expiry and cancellation …\n"],["Rinda::TupleSpace","","Rinda/TupleSpace.html","","<p>The Tuplespace manages access to the tuples it contains, ensuring mutual\nexclusion requirements are met. …\n"],["Rinda::TupleSpaceProxy","","Rinda/TupleSpaceProxy.html","","<p>TupleSpaceProxy allows a remote Tuplespace to appear as local.\n"],["Rinda::WaitTemplateEntry","","Rinda/WaitTemplateEntry.html","","<p><em>Documentation?</em>\n"],["Ripper","","Ripper.html","","<p>Ripper is a Ruby script parser.\n<p>You can get information from the parser with event-based style. Information\n…\n"],["Ripper::Filter","","Ripper/Filter.html","","<p>This class handles only scanner events, which are dispatched in the\n&#39;right&#39; order (same with …\n"],["RubyLex","","RubyLex.html","",""],["RubyToken","","RubyToken.html","",""],["RubyToken::TkError","","RubyToken/TkError.html","",""],["RubyToken::TkId","","RubyToken/TkId.html","",""],["RubyToken::TkNode","","RubyToken/TkNode.html","",""],["RubyToken::TkOPASGN","","RubyToken/TkOPASGN.html","",""],["RubyToken::TkOp","","RubyToken/TkOp.html","",""],["RubyToken::TkUnknownChar","","RubyToken/TkUnknownChar.html","",""],["RubyToken::TkVal","","RubyToken/TkVal.html","",""],["RubyToken::Token","","RubyToken/Token.html","",""],["RubyVM","","RubyVM.html","","<p>::RubyVM\n"],["RubyVM::InstructionSequence","","RubyVM/InstructionSequence.html","","<p>The InstructionSequence class represents a compiled sequence of\ninstructions for the Ruby Virtual Machine …\n"],["RuntimeError","","RuntimeError.html","","<p>A generic error class raised when an invalid operation is attempted.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">4</span>\n</pre>\n<p><em>raises the exception:</em> …\n"],["SDBM","","SDBM.html","","<p>SDBM provides a simple file-based key-value store, which can only store\nString keys and values.\n<p>Note that …\n"],["SDBMError","","SDBMError.html","","<p>Exception class used to return errors from the sdbm library.\n"],["SOCKSSocket","","SOCKSSocket.html","","<p>SOCKS is an Internet protocol that routes packets between a client and a\nserver through a proxy server. …\n"],["Scanf","","Scanf.html","","<p>scanf for Ruby\n<p>Description\n<p>scanf is an implementation of the C function scanf(3), modified as\nnecessary …\n"],["Scanf::FormatSpecifier","","Scanf/FormatSpecifier.html","",""],["Scanf::FormatString","","Scanf/FormatString.html","",""],["ScriptError","","ScriptError.html","","<p>ScriptError is the superclass for errors raised when a script can not be\nexecuted because of a <code>LoadError</code> …\n"],["SecureRandom","","SecureRandom.html","","<p>Secure random number generator interface.\n<p>This library is an interface to secure random number generators …\n"],["SecurityError","","SecurityError.html","","<p>Raised when attempting a potential unsafe operation, typically when the\n$SAFE level is raised above 0. …\n"],["Set","","Set.html","","<p>Set implements a collection of unordered values with no duplicates. This is\na hybrid of Array&#39;s intuitive …\n"],["Shell","","Shell.html","","<p>Shell implements an idiomatic Ruby interface for common UNIX shell\ncommands.\n<p>It provides users the ability …\n"],["Shell::AppendFile","","Shell/AppendFile.html","",""],["Shell::AppendIO","","Shell/AppendIO.html","",""],["Shell::BuiltInCommand","","Shell/BuiltInCommand.html","",""],["Shell::Cat","","Shell/Cat.html","",""],["Shell::CommandProcessor","","Shell/CommandProcessor.html","","<p>In order to execute a command on your OS, you need to define it as a Shell\nmethod.\n<p>Alternatively, you …\n"],["Shell::Concat","","Shell/Concat.html","",""],["Shell::Echo","","Shell/Echo.html","",""],["Shell::Error","","Shell/Error.html","",""],["Shell::Filter","","Shell/Filter.html","","<p>Any result of command execution is a Filter.\n<p>This class includes Enumerable, therefore a Filter object …\n"],["Shell::Glob","","Shell/Glob.html","",""],["Shell::ProcessController","","Shell/ProcessController.html","",""],["Shell::SystemCommand","","Shell/SystemCommand.html","",""],["Shell::Tee","","Shell/Tee.html","",""],["Shell::Thread","","Shell/Thread.html","",""],["Shell::Void","","Shell/Void.html","",""],["Shellwords","","Shellwords.html","","<p>Manipulates strings like the UNIX Bourne shell\n<p>This module manipulates strings according to the word parsing …\n"],["Signal","","Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some\nsignals have a defined effect …\n"],["SignalException","","SignalException.html","","<p>Raised when a signal is received.\n\n<pre>begin\n  Process.kill(&#39;HUP&#39;,Process.pid)\n  sleep # wait for receiver ...</pre>\n"],["SimpleDelegator","","SimpleDelegator.html","","<p>A concrete implementation of Delegator, this class provides the means to\ndelegate all supported method …\n"],["SingleForwardable","","SingleForwardable.html","","<p>SingleForwardable can be used to setup delegation at the object level as\nwell.\n\n<pre>printer = String.new\nprinter.extend ...</pre>\n"],["Singleton","","Singleton.html","","<p>The Singleton module implements the Singleton pattern.\n<p>Usage\n<p>To use Singleton, include the module in your …\n"],["SizedQueue","","SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push\noperation may be blocked if the capacity …\n"],["Socket","","Socket.html","","<p>Class <code>Socket</code> provides access to the underlying operating\nsystem socket implementations.  It can be used …\n"],["Socket::AncillaryData","","Socket/AncillaryData.html","","<p>Socket::AncillaryData represents the ancillary data (control information)\nused by sendmsg and recvmsg …\n"],["Socket::Constants","","Socket/Constants.html","","<p>Socket::Constants provides socket-related constants.  All possible socket\nconstants are listed in the …\n"],["Socket::Ifaddr","","Socket/Ifaddr.html","","<p>Socket::Ifaddr represents a result of getifaddrs() function.\n"],["Socket::Option","","Socket/Option.html","","<p>Socket::Option represents a socket option used by BasicSocket#getsockopt\nand BasicSocket#setsockopt. …\n"],["Socket::UDPSource","","Socket/UDPSource.html","","<p>UDP/IP address information used by Socket.udp_server_loop.\n"],["SocketError","","SocketError.html","","<p>SocketError is the error class for socket.\n"],["SortedSet","","SortedSet.html","","<p>SortedSet implements a Set that guarantees that its elements are yielded in\nsorted order (according to …\n"],["StandardError","","StandardError.html","","<p>The most standard error types are subclasses of StandardError. A rescue\nclause without an explicit Exception …\n"],["StopIteration","","StopIteration.html","","<p>Raised to stop the iteration, in particular by Enumerator#next. It is\nrescued by Kernel#loop.\n\n<pre>loop do ...</pre>\n"],["String","","String.html","","<p>BigDecimal extends the native String class to provide the #to_d method.\n<p>When you require BigDecimal in …\n"],["StringIO","","StringIO.html","","<p>Pseudo I/O on String object.\n<p>Commonly used to simulate `$stdio` or `$stderr`\n<p>Examples\n"],["StringScanner","","StringScanner.html","","<p>StringScanner provides for lexical scanning operations on a String.  Here\nis an example of its usage: …\n"],["StringScanner::Error","","StringScanner/Error.html","",""],["Struct","","Struct.html","","<p>A Struct is a convenient way to bundle a number of attributes together,\nusing accessor methods, without …\n"],["Symbol","","Symbol.html","","<p>BigDecimal extends the native Integer class to provide the #to_d method.\n<p>When you require the BigDecimal …\n"],["Symbol","","Symbol.html","","<p><code>Symbol</code> objects represent names and some strings inside the\nRuby interpreter. They are generated using …\n"],["Sync","","Sync.html","","<p>A class that provides two-phase lock with a counter.  See Sync_m for\ndetails.\n"],["Sync_m","","Sync_m.html","","<p>A module that provides a two-phase lock with a counter.\n"],["Sync_m::Err","","Sync_m/Err.html","","<p>exceptions\n"],["Sync_m::Err::LockModeFailer","","Sync_m/Err/LockModeFailer.html","",""],["Sync_m::Err::UnknownLocker","","Sync_m/Err/UnknownLocker.html","",""],["Synchronizer","","Synchronizer.html","","<p>A class that provides two-phase lock with a counter.  See Sync_m for\ndetails.\n"],["Synchronizer_m","","Synchronizer_m.html","","<p>A module that provides a two-phase lock with a counter.\n"],["SyntaxError","","SyntaxError.html","","<p>Raised when encountering Ruby code with an invalid syntax.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;1+1=2&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Syslog","","Syslog.html","","<p>The syslog package provides a Ruby interface to the POSIX system logging\nfacility.\n<p>Syslog messages are …\n"],["Syslog::Constants","","Syslog/Constants.html","",""],["Syslog::Facility","","Syslog/Facility.html","",""],["Syslog::Level","","Syslog/Level.html","",""],["Syslog::Logger","","Syslog/Logger.html","","<p>Syslog::Logger is a Logger work-alike that logs via syslog instead of to a\nfile.  You can use Syslog::Logger …\n"],["Syslog::Logger::Formatter","","Syslog/Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Syslog::Logger::Severity","","Syslog/Logger/Severity.html","",""],["Syslog::Macros","","Syslog/Macros.html","",""],["Syslog::Option","","Syslog/Option.html","",""],["SystemCallError","","SystemCallError.html","","<p>SystemCallError is the base class for all low-level platform-dependent\nerrors.\n<p>The errors available on …\n"],["SystemExit","","SystemExit.html","","<p>Raised by <code>exit</code> to initiate the termination of the script.\n"],["SystemStackError","","SystemStackError.html","","<p>Raised in case of a stack overflow.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">me_myself_and_i</span>\n  <span class=\"ruby-identifier\">me_myself_and_i</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">me_myself_and_i</span>\n</pre>\n<p><em>raises the</em> …\n"],["TCPServer","","TCPServer.html","","<p>TCPServer represents a TCP/IP server socket.\n<p>A simple TCP server may look like:\n\n<pre>require &#39;socket&#39;\n\nserver ...</pre>\n"],["TCPSocket","","TCPSocket.html","","<p>TCPSocket represents a TCP/IP client socket.\n<p>A simple client may look like:\n\n<pre>require &#39;socket&#39;\n\ns = TCPSocket.new ...</pre>\n"],["TSort","","TSort.html","","<p>TSort implements topological sorting using Tarjan&#39;s algorithm for\nstrongly connected components. …\n"],["TSort::Cyclic","","TSort/Cyclic.html","",""],["TempIO","","TempIO.html","","<p>A StringIO duck-typed class that uses Tempfile instead of String as the\nbacking store.\n<p>This is available …\n"],["Tempfile","","Tempfile.html","","<p>A utility class for managing temporary files. When you create a Tempfile\nobject, it will create a temporary …\n"],["Tempfile::Remover","","Tempfile/Remover.html","",""],["Test","","Test.html","",""],["ThWait","","ThWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["Thread","","Thread.html","","<p>Threads are the Ruby implementation for a concurrent programming model.\n<p>Programs that require multiple …\n"],["Thread::Backtrace::Location","","Thread/Backtrace/Location.html","","<p>An object representation of a stack frame, initialized by\nKernel#caller_locations.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># caller_locations.rb ...</span>\n</pre>\n"],["Thread::Mutex","","Thread/Mutex.html","","<p>Mutex\n"],["ThreadError","","ThreadError.html","","<p>Raised when an invalid operation is attempted on a thread.\n<p>For example, when no other thread has been …\n"],["ThreadGroup","","ThreadGroup.html","","<p>ThreadGroup provides a means of keeping track of a number of threads as a\ngroup.\n<p>A given Thread object …\n"],["ThreadsWait","","ThreadsWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["Time","","Time.html","","<p>time.rb\n<p>When &#39;time&#39; is required, Time is extended with additional methods\nfor parsing and converting …\n"],["Timeout","","Timeout.html","","<p>Timeout long-running blocks\n<p>Synopsis\n\n<pre>require &#39;timeout&#39;\nstatus = Timeout::timeout(5) {\n  # Something that ...</pre>\n"],["Timeout::Error","","Timeout/Error.html","","<p>Raised by Timeout#timeout when the block times out.\n"],["Timeout::TimeoutError","","Timeout/TimeoutError.html","","<p>Raised by Timeout#timeout when the block times out.\n"],["TracePoint","","TracePoint.html","","<p>A class that provides the functionality of Kernel#set_trace_func in a nice\nObject-Oriented API.\n<p>Example …\n"],["Tracer","","Tracer.html","","<p>Outputs a source level execution trace of a Ruby program.\n<p>It does this by registering an event handler …\n"],["Tracer::Thread","","Tracer/Thread.html","",""],["TrueClass","","TrueClass.html","","<p>The global value <code>true</code> is the only instance of class\n<code>TrueClass</code> and represents a logically true value in …\n"],["TypeError","","TypeError.html","","<p>Raised when encountering an object that is not of the expected type.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">first</span>(<span class=\"ruby-string\">&quot;two&quot;</span>)\n</pre>\n<p><em>raises the</em> …\n"],["UDPSocket","","UDPSocket.html","","<p>UDPSocket represents a UDP/IP socket.\n"],["UNIXServer","","UNIXServer.html","","<p>UNIXServer represents a UNIX domain stream server socket.\n"],["UNIXSocket","","UNIXSocket.html","","<p>UNIXSocket represents a UNIX domain stream client socket.\n"],["URI","","URI.html","","<p>URI is a module providing classes to handle Uniform Resource Identifiers\n(RFC2396)\n<p>Features\n<p>Uniform handling …\n"],["URI::BadURIError","","URI/BadURIError.html","","<p>URI is valid, bad usage is not.\n"],["URI::Error","","URI/Error.html","","<p>Base class for all URI exceptions.\n"],["URI::Escape","","URI/Escape.html","","<p>module for escaping unsafe characters with codes.\n"],["URI::FTP","","URI/FTP.html","","<p>FTP URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["URI::Generic","","URI/Generic.html","","<p>Base class for all URI classes. Implements generic URI syntax as per RFC\n2396.\n"],["URI::HTTP","","URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby URI library allows HTTP …\n"],["URI::HTTPS","","URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is &#39;https:&#39;\nrather than &#39;http:&#39;. …\n"],["URI::InvalidComponentError","","URI/InvalidComponentError.html","","<p>Not a URI component.\n"],["URI::InvalidURIError","","URI/InvalidURIError.html","","<p>Not a URI.\n"],["URI::LDAP","","URI/LDAP.html","","<p>LDAP URI SCHEMA (described in RFC2255)\nldap://<host>/<dn>[?<attrs>[?<scope>[?<filter>]]]\n"],["URI::LDAPS","","URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is &#39;ldaps:&#39;\nrather than &#39;ldap:&#39;. …\n"],["URI::MailTo","","URI/MailTo.html","","<p>RFC6068, The mailto URL scheme\n"],["URI::REGEXP","","URI/REGEXP.html","",""],["URI::RFC2396_Parser","","URI/RFC2396_Parser.html","","<p>class that Parses String&#39;s into URI&#39;s\n<p>It contains a Hash set of patterns and Regexp&#39;s that …\n"],["URI::RFC2396_REGEXP","","URI/RFC2396_REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_REGEXP::PATTERN","","URI/RFC2396_REGEXP/PATTERN.html","","<p>Patterns used to parse URI&#39;s\n"],["UnboundMethod","","UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class <code>Method</code>\nis used to represent methods that are associated …\n"],["UncaughtThrowError","","UncaughtThrowError.html","","<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not\nhave corresponding <code>catch</code> block.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">throw</span> <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar&quot;</span>\n</pre>\n"],["UnicodeNormalize","","UnicodeNormalize.html","","<p>automatically generated by template/unicode_norm_gen.tmpl\n"],["Vector","","Vector.html","","<p>The <code>Vector</code> class represents a mathematical vector, which is\nuseful in its own right, and also constitutes …\n"],["Vector::ZeroVectorError","","Vector/ZeroVectorError.html","",""],["WEBrick","","WEBrick.html","","<p>WEB server toolkit.\n<p>WEBrick is an HTTP server toolkit that can be configured as an HTTPS\nserver, a proxy …\n"],["WEBrick::AccessLog","","WEBrick/AccessLog.html","","<p>AccessLog provides logging to various files in various formats.\n<p>Multiple logs may be written to at the …\n"],["WEBrick::AccessLog::AccessLogError","","WEBrick/AccessLog/AccessLogError.html","","<p>Raised if a parameter such as %e, %i, %o or %n is used without fetching a\nspecific field.\n"],["WEBrick::BasicLog","","WEBrick/BasicLog.html","","<p>A generic logging class\n"],["WEBrick::CGI","","WEBrick/CGI.html","","<p>A CGI library using WEBrick requests and responses.\n<p>Example:\n\n<pre>class MyCGI &lt; WEBrick::CGI\n  def do_GET req, ...</pre>\n"],["WEBrick::Config","","WEBrick/Config.html","",""],["WEBrick::Cookie","","WEBrick/Cookie.html","","<p>Processes HTTP cookies\n"],["WEBrick::Daemon","","WEBrick/Daemon.html","","<p>A generic module for daemonizing a process\n"],["WEBrick::GenericServer","","WEBrick/GenericServer.html","","<p>Base TCP server class.  You must subclass GenericServer and provide a #run\nmethod.\n"],["WEBrick::HTMLUtils","","WEBrick/HTMLUtils.html","",""],["WEBrick::HTTPAuth","","WEBrick/HTTPAuth.html","","<p>HTTPAuth provides both basic and digest authentication.\n<p>To enable authentication for requests in WEBrick …\n"],["WEBrick::HTTPAuth::Authenticator","","WEBrick/HTTPAuth/Authenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes.\n"],["WEBrick::HTTPAuth::BasicAuth","","WEBrick/HTTPAuth/BasicAuth.html","","<p>Basic Authentication for WEBrick\n<p>Use this class to add basic authentication to a WEBrick servlet.\n<p>Here …\n"],["WEBrick::HTTPAuth::DigestAuth","","WEBrick/HTTPAuth/DigestAuth.html","","<p>RFC 2617 Digest Access Authentication for WEBrick\n<p>Use this class to add digest authentication to a WEBrick …\n"],["WEBrick::HTTPAuth::Htdigest","","WEBrick/HTTPAuth/Htdigest.html","","<p>Htdigest accesses apache-compatible digest password files.  Passwords are\nmatched to a realm where they …\n"],["WEBrick::HTTPAuth::Htgroup","","WEBrick/HTTPAuth/Htgroup.html","","<p>Htgroup accesses apache-compatible group files.  Htgroup can be used to\nprovide group-based authentication …\n"],["WEBrick::HTTPAuth::Htpasswd","","WEBrick/HTTPAuth/Htpasswd.html","","<p>Htpasswd accesses apache-compatible password files.  Passwords are matched\nto a realm where they are …\n"],["WEBrick::HTTPAuth::ProxyAuthenticator","","WEBrick/HTTPAuth/ProxyAuthenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes for proxies.\n"],["WEBrick::HTTPAuth::ProxyBasicAuth","","WEBrick/HTTPAuth/ProxyBasicAuth.html","","<p>Basic authentication for proxy servers.  See BasicAuth for details.\n"],["WEBrick::HTTPAuth::ProxyDigestAuth","","WEBrick/HTTPAuth/ProxyDigestAuth.html","","<p>Digest authentication for proxy servers.  See DigestAuth for details.\n"],["WEBrick::HTTPAuth::UserDB","","WEBrick/HTTPAuth/UserDB.html","","<p>User database mixin for HTTPAuth.  This mixin dispatches user record access\nto the underlying auth_type …\n"],["WEBrick::HTTPProxyServer","","WEBrick/HTTPProxyServer.html","","<p>An HTTP Proxy server which proxies GET, HEAD and POST requests.\n<p>To create a simple proxy server:\n\n<pre>require ...</pre>\n"],["WEBrick::HTTPRequest","","WEBrick/HTTPRequest.html","","<p>An HTTP request.  This is consumed by service and do_* methods in WEBrick\nservlets\n"],["WEBrick::HTTPResponse","","WEBrick/HTTPResponse.html","","<p>An HTTP response.  This is filled in by the service or do_* methods of a\nWEBrick HTTP Servlet.\n"],["WEBrick::HTTPServer","","WEBrick/HTTPServer.html","","<p>An HTTP Server\n"],["WEBrick::HTTPServerError","","WEBrick/HTTPServerError.html","",""],["WEBrick::HTTPServlet","","WEBrick/HTTPServlet.html","",""],["WEBrick::HTTPServlet::AbstractServlet","","WEBrick/HTTPServlet/AbstractServlet.html","","<p>AbstractServlet allows HTTP server modules to be reused across multiple\nservers and allows encapsulation …\n"],["WEBrick::HTTPServlet::CGIHandler","","WEBrick/HTTPServlet/CGIHandler.html","","<p>Servlet for handling CGI scripts\n<p>Example:\n\n<pre>server.mount(&#39;/cgi/my_script&#39;, WEBrick::HTTPServlet::CGIHandler, ...</pre>\n"],["WEBrick::HTTPServlet::DefaultFileHandler","","WEBrick/HTTPServlet/DefaultFileHandler.html","","<p>Servlet for serving a single file.  You probably want to use the\nFileHandler servlet instead as it handles …\n"],["WEBrick::HTTPServlet::ERBHandler","","WEBrick/HTTPServlet/ERBHandler.html","","<p>ERBHandler evaluates an ERB file and returns the result.  This handler is\nautomatically used if there …\n"],["WEBrick::HTTPServlet::FileHandler","","WEBrick/HTTPServlet/FileHandler.html","","<p>Serves a directory including fancy indexing and a variety of other options.\n<p>Example:\n\n<pre>server.mount(&#39;/assets&#39;, ...</pre>\n"],["WEBrick::HTTPServlet::HTTPServletError","","WEBrick/HTTPServlet/HTTPServletError.html","",""],["WEBrick::HTTPServlet::ProcHandler","","WEBrick/HTTPServlet/ProcHandler.html","","<p>Mounts a proc at a path that accepts a request and response.\n<p>Instead of mounting this servlet with WEBrick::HTTPServer#mount …\n"],["WEBrick::HTTPStatus","","WEBrick/HTTPStatus.html","","<p>This module is used to manager HTTP status codes.\n<p>See www.w3.org/Protocols/rfc2616/rfc2616-sec10.html …\n"],["WEBrick::HTTPStatus::ClientError","","WEBrick/HTTPStatus/ClientError.html","","<p>Root of the HTTP client error statuses\n"],["WEBrick::HTTPStatus::EOFError","","WEBrick/HTTPStatus/EOFError.html","",""],["WEBrick::HTTPStatus::Error","","WEBrick/HTTPStatus/Error.html","","<p>Root of the HTTP error statuses\n"],["WEBrick::HTTPStatus::Info","","WEBrick/HTTPStatus/Info.html","","<p>Root of the HTTP info statuses\n"],["WEBrick::HTTPStatus::Redirect","","WEBrick/HTTPStatus/Redirect.html","","<p>Root of the HTTP redirect statuses\n"],["WEBrick::HTTPStatus::ServerError","","WEBrick/HTTPStatus/ServerError.html","","<p>Root of the HTTP server error statuses\n"],["WEBrick::HTTPStatus::Status","","WEBrick/HTTPStatus/Status.html","","<p>Root of the HTTP status class hierarchy\n"],["WEBrick::HTTPStatus::Success","","WEBrick/HTTPStatus/Success.html","","<p>Root of the HTTP success statuses\n"],["WEBrick::HTTPUtils","","WEBrick/HTTPUtils.html","","<p>HTTPUtils provides utility methods for working with the HTTP protocol.\n<p>This module is generally used internally …\n"],["WEBrick::HTTPUtils::FormData","","WEBrick/HTTPUtils/FormData.html","","<p>Stores multipart form data.  FormData objects are created when\nWEBrick::HTTPUtils.parse_form_data is …\n"],["WEBrick::HTTPVersion","","WEBrick/HTTPVersion.html","","<p>Represents an HTTP protocol version\n"],["WEBrick::Log","","WEBrick/Log.html","","<p>A logging class that prepends a timestamp to each message.\n"],["WEBrick::ServerError","","WEBrick/ServerError.html","","<p>Server error exception\n"],["WEBrick::SimpleServer","","WEBrick/SimpleServer.html","","<p>Base server class\n"],["WEBrick::Utils","","WEBrick/Utils.html","",""],["WEBrick::Utils::TimeoutHandler","","WEBrick/Utils/TimeoutHandler.html","","<p>Class used to manage timeout handlers across multiple threads.\n<p>Timeout handlers should be managed by using …\n"],["WEBrick::Utils::TimeoutHandler::Process","","WEBrick/Utils/TimeoutHandler/Process.html","",""],["WIN32OLE","","WIN32OLE.html","","<p><code>WIN32OLE</code> objects represent OLE Automation object in Ruby.\n<p>By using WIN32OLE, you can access OLE server …\n"],["WIN32OLE::VARIANT","","WIN32OLE/VARIANT.html","","<p>The WIN32OLE::VARIANT module includes constants of VARIANT type constants.\nThe constants is used when …\n"],["WIN32OLERuntimeError","","WIN32OLERuntimeError.html","","<p>Raised when OLE processing failed.\n<p>EX:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;NonExistProgID&quot;</span>)\n</pre>\n"],["WIN32OLE_EVENT","","WIN32OLE_EVENT.html","","<p><code>WIN32OLE_EVENT</code> objects controls OLE event.\n"],["WIN32OLE_METHOD","","WIN32OLE_METHOD.html","","<p><code>WIN32OLE_METHOD</code> objects represent OLE method information.\n"],["WIN32OLE_PARAM","","WIN32OLE_PARAM.html","","<p><code>WIN32OLE_PARAM</code> objects represent param information of the OLE\nmethod.\n"],["WIN32OLE_RECORD","","WIN32OLE_RECORD.html","","<p><code>WIN32OLE_RECORD</code> objects represents VT_RECORD OLE variant.\nWin32OLE returns WIN32OLE_RECORD object if …\n"],["WIN32OLE_TYPE","","WIN32OLE_TYPE.html","","<p><code>WIN32OLE_TYPE</code> objects represent OLE type libarary information.\n"],["WIN32OLE_TYPELIB","","WIN32OLE_TYPELIB.html","","<p><code>WIN32OLE_TYPELIB</code> objects represent OLE tyblib information.\n"],["WIN32OLE_VARIABLE","","WIN32OLE_VARIABLE.html","","<p><code>WIN32OLE_VARIABLE</code> objects represent OLE variable information.\n"],["WIN32OLE_VARIANT","","WIN32OLE_VARIANT.html","","<p><code>WIN32OLE_VARIANT</code> objects represents OLE variant.\n<p>Win32OLE converts Ruby object into OLE variant automatically …\n"],["Warning","","Warning.html","",""],["WeakRef","","WeakRef.html","","<p>Weak Reference class that allows a referenced object to be\ngarbage-collected.\n<p>A WeakRef may be used exactly …\n"],["WeakRef::RefError","","WeakRef/RefError.html","","<p>RefError is raised when a referenced object has been recycled by the\ngarbage collector\n"],["XML","","XML.html","",""],["XML::Parser","","XML/Parser.html","",""],["XMLEncoding_ja","","XMLEncoding_ja.html","",""],["XMLEncoding_ja::SJISHandler","","XMLEncoding_ja/SJISHandler.html","",""],["XMP","","XMP.html","","<p>An example printer for irb.\n<p>It&#39;s much like the standard library PrettyPrint, that shows the value …\n"],["XMP::StringInputMethod","","XMP/StringInputMethod.html","","<p>A custom InputMethod class used by XMP for evaluating string io.\n"],["YAML","","YAML.html","","<p>YAML Ain&#39;t Markup Language\n<p>This module provides a Ruby interface for data serialization in YAML\nformat. …\n"],["YAML::DBM","","YAML/DBM.html","","<p>YAML + DBM = YDBM\n<p>YAML::DBM provides the same interface as ::DBM.\n<p>However, while DBM only allows strings …\n"],["YAML::Store","","YAML/Store.html","","<p>YAML::Store provides the same functionality as PStore, except it uses YAML\nto dump objects instead of …\n"],["YAML::Syck","","YAML/Syck.html","","<p>Now that we&#39;ve got something that is always here, define #to_s so when\ncode tries to use this, it …\n"],["YAML::Syck","","YAML/Syck.html","","<p>Now that we&#39;ve got something that is always here, define #to_s so when\ncode tries to use this, it …\n"],["ZeroDivisionError","","ZeroDivisionError.html","","<p>Raised when attempting to divide an integer by 0.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">42</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">0</span>\n<span class=\"ruby-comment\">#=&gt; ZeroDivisionError: divided by 0</span>\n</pre>\n<p>Note that …\n"],["Zlib","","Zlib.html","","<p>This module provides access to the zlib library. Zlib is designed to be a\nportable, free, general-purpose, …\n"],["Zlib::BufError","","Zlib/BufError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_BUF_ERROR.\n<p>Usually if no progress is possible.\n"],["Zlib::DataError","","Zlib/DataError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_DATA_ERROR.\n<p>Usually if a stream was prematurely freed.\n"],["Zlib::Deflate","","Zlib/Deflate.html","","<p>Zlib::Deflate is the class for compressing data.  See Zlib::ZStream for\nmore information.\n"],["Zlib::Error","","Zlib/Error.html","","<p>The superclass for all exceptions raised by Ruby/zlib.\n<p>The following exceptions are defined as subclasses …\n"],["Zlib::GzipFile","","Zlib/GzipFile.html","","<p>Zlib::GzipFile is an abstract class for handling a gzip formatted\ncompressed file. The operations are …\n"],["Zlib::GzipFile::CRCError","","Zlib/GzipFile/CRCError.html","","<p>Raised when the CRC checksum recorded in gzip file footer is not equivalent\nto the CRC checksum of the …\n"],["Zlib::GzipFile::Error","","Zlib/GzipFile/Error.html","","<p>Base class of errors that occur when processing GZIP files.\n"],["Zlib::GzipFile::LengthError","","Zlib/GzipFile/LengthError.html","","<p>Raised when the data length recorded in the gzip file footer is not\nequivalent to the length of the actual …\n"],["Zlib::GzipFile::NoFooter","","Zlib/GzipFile/NoFooter.html","","<p>Raised when gzip file footer is not found.\n"],["Zlib::GzipReader","","Zlib/GzipReader.html","","<p>Zlib::GzipReader is the class for reading a gzipped file.  GzipReader\nshould be used as an IO, or -IO-like, …\n"],["Zlib::GzipWriter","","Zlib/GzipWriter.html","","<p>Zlib::GzipWriter is a class for writing gzipped files.  GzipWriter should\nbe used with an instance of …\n"],["Zlib::Inflate","","Zlib/Inflate.html","","<p>Zlib:Inflate is the class for decompressing compressed data.  Unlike\nZlib::Deflate, an instance of this …\n"],["Zlib::MemError","","Zlib/MemError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_MEM_ERROR, usually if there was not enough memory.\n"],["Zlib::NeedDict","","Zlib/NeedDict.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_NEED_DICT if a preset dictionary is needed at this\npoint. …\n"],["Zlib::StreamEnd","","Zlib/StreamEnd.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_END is return if the end of the compressed\ndata has …\n"],["Zlib::StreamError","","Zlib/StreamError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_ERROR, usually if the stream state was\ninconsistent. …\n"],["Zlib::VersionError","","Zlib/VersionError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_VERSION_ERROR, usually if the zlib library version is\nincompatible …\n"],["Zlib::ZStream","","Zlib/ZStream.html","","<p>Zlib::ZStream is the abstract class for the stream which handles the\ncompressed data. The operations …\n"],["fatal","","fatal.html","","<p>fatal is an Exception that is raised when ruby has encountered a fatal\nerror and must exit.  You are …\n"],["unknown","","unknown.html","",""],["!","BasicObject","BasicObject.html#method-i-21","()","<p>Boolean negate.\n"],["!","Delegator","Delegator.html#method-i-21","()","<p>Delegates ! to the _<em>getobj</em>_\n"],["!=","BasicObject","BasicObject.html#method-i-21-3D","(p1)","<p>Returns true if two objects are not-equal, otherwise false.\n"],["!=","Delegator","Delegator.html#method-i-21-3D","(obj)","<p>Returns true if two objects are not considered of equal value.\n"],["!~","Object","Object.html#method-i-21-7E","(p1)","<p>Returns true if two objects do not match (using the <em>=~</em> method),\notherwise false.\n"],["%","BigDecimal","BigDecimal.html#method-i-25","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["%","Float","Float.html#method-i-25","(p1)","<p>Return the modulo after division of <code>float</code> by\n<code>other</code>.\n\n<pre>6543.21.modulo(137)      #=&gt; 104.21\n6543.21.modulo(137.24) ...</pre>\n"],["%","Integer","Integer.html#method-i-25","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["%","Integer","Integer.html#method-i-25","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["%","Numeric","Numeric.html#method-i-25","(p1)","\n<pre>x.modulo(y) means x-y*(x/y).floor</pre>\n<p>Equivalent to <code>num.divmod(numeric)[1]</code>.\n<p>See Numeric#divmod.\n"],["%","OpenSSL::BN","OpenSSL/BN.html#method-i-25","(p1)",""],["%","String","String.html#method-i-25","(p1)","<p>Format—Uses <em>str</em> as a format specification, and returns the result\nof applying it to <em>arg</em>. If the format …\n"],["&","Array","Array.html#method-i-26","(p1)","<p>Set Intersection — Returns a new array containing unique elements common to\nthe two arrays. The order …\n"],["&","FalseClass","FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","IPAddr","IPAddr.html#method-i-26","(other)","<p>Returns a new ipaddr built by bitwise AND.\n"],["&","Integer","Integer.html#method-i-26","(p1)","<p>Bitwise AND.\n"],["&","Integer","Integer.html#method-i-26","(p1)","<p>Bitwise AND.\n"],["&","NilClass","NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Process::Status","Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre>fork { exit 0x37 }\nProcess.wait\nsprintf(&#39;%04x&#39;, $?.to_i)    ...</pre>\n"],["&","Set","Set.html#method-i-26","(enum)","<p>Returns a new set containing elements common to the set and the given\nenumerable object.\n"],["&","TrueClass","TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>, <code>true</code> otherwise.\n"],["*","Array","Array.html#method-i-2A","(p1)","<p>Repetition — With a String argument, equivalent to\n<code>ary.join(str)</code>.\n<p>Otherwise, returns a new array built …\n"],["*","Benchmark::Tms","Benchmark/Tms.html#method-i-2A","(x)","<p>Returns a new Tms object obtained by memberwise multiplication of the\nindividual times for this Tms object …\n"],["*","BigDecimal","BigDecimal.html#method-i-2A","(p1)","<p>Multiply by the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">mult</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n<span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["*","Complex","Complex.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre>Complex(2, 3)  * Complex(2, 3)   #=&gt; (-5+12i)\nComplex(900)   * Complex(1)    ...</pre>\n"],["*","Float","Float.html#method-i-2A","(p1)","<p>Returns a new float which is the product of <code>float</code> and\n<code>other</code>.\n"],["*","Integer","Integer.html#method-i-2A","(p1)","<p>Performs multiplication: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the …\n"],["*","Integer","Integer.html#method-i-2A","(p1)","<p>Performs multiplication: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the …\n"],["*","Matrix","Matrix.html#method-i-2A","(m)","<p>Matrix multiplication.\n\n<pre>Matrix[[2,4], [6,8]] * Matrix.identity(2)\n  =&gt; 2 4\n     6 8</pre>\n"],["*","OpenSSL::BN","OpenSSL/BN.html#method-i-2A","(p1)",""],["*","Rational","Rational.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre>Rational(2, 3)  * Rational(2, 3)   #=&gt; (4/9)\nRational(900)   * Rational(1)   ...</pre>\n"],["*","String","String.html#method-i-2A","(p1)","<p>Copy — Returns a new String containing <code>integer</code> copies of the\nreceiver. <code>integer</code> must be greater than …\n"],["*","Vector","Vector.html#method-i-2A","(x)","<p>Multiplies the vector by <code>x</code>, where <code>x</code> is a number\nor a matrix.\n"],["**","BigDecimal","BigDecimal.html#method-i-2A-2A","(p1)","<p>Returns the value raised to the power of n.\n<p>See BigDecimal#power.\n"],["**","Complex","Complex.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;i&#39;</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\">#=&gt; (-1+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["**","Float","Float.html#method-i-2A-2A","(p1)","<p>Raises <code>float</code> to the power of <code>other</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span><span class=\"ruby-operator\">**</span><span class=\"ruby-value\">3</span>      <span class=\"ruby-comment\">#=&gt; 8.0</span>\n</pre>\n"],["**","Integer","Integer.html#method-i-2A-2A","(p1)","<p>Raises <code>integer</code> to the power of <code>numeric</code>, which may\nbe negative or fractional. The result may be an Integer …\n"],["**","Integer","Integer.html#method-i-2A-2A","(p1)","<p>Raises <code>integer</code> to the power of <code>numeric</code>, which may\nbe negative or fractional. The result may be an Integer …\n"],["**","Matrix","Matrix.html#method-i-2A-2A","(other)","<p>Matrix exponentiation. Equivalent to multiplying the matrix by itself N\ntimes. Non integer exponents …\n"],["**","OpenSSL::BN","OpenSSL/BN.html#method-i-2A-2A","(p1)",""],["**","Rational","Rational.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>)    <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">3</span>)    <span class=\"ruby-comment\">#=&gt; (8/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">10</span>)   <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">-2</span>             <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["+","Array","Array.html#method-i-2B","(p1)","<p>Concatenation — Returns a new array built by concatenating the two arrays\ntogether to produce a third …\n"],["+","Benchmark::Tms","Benchmark/Tms.html#method-i-2B","(other)","<p>Returns a new Tms object obtained by memberwise summation of the individual\ntimes for this Tms object …\n"],["+","BigDecimal","BigDecimal.html#method-i-2B","(p1)","<p>Add the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">add</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n<span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["+","Complex","Complex.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4+6i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; (901+0i) ...</span>\n</pre>\n"],["+","Date","Date.html#method-i-2B","(p1)","<p>Returns a date object pointing <code>other</code> days after self.  The\nother should be a numeric value.  If the other …\n"],["+","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2B","(p1)","<p>Returns a new pointer instance that has been advanced <code>n</code> bytes.\n"],["+","Float","Float.html#method-i-2B","(p1)","<p>Returns a new float which is the sum of <code>float</code> and\n<code>other</code>.\n"],["+","Integer","Integer.html#method-i-2B","(p1)","<p>Performs addition: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["+","Integer","Integer.html#method-i-2B","(p1)","<p>Performs addition: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["+","Matrix","Matrix.html#method-i-2B","(m)","<p>Matrix addition.\n\n<pre>Matrix.scalar(2,5) + Matrix[[1,0], [-4,7]]\n  =&gt;  6  0\n     -4 12</pre>\n"],["+","OpenSSL::BN","OpenSSL/BN.html#method-i-2B","(p1)",""],["+","Pathname","Pathname.html#method-i-2B","(other)","<p>Appends a pathname fragment to <code>self</code> to produce a new Pathname\nobject.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p1</span> = <span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/usr&quot;</span>)      <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["+","Rational","Rational.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4/3)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["+","Set","Set.html#method-i-2B","(enum)",""],["+","Shell::Filter","Shell/Filter.html#method-i-2B","(filter)","<p>Outputs <code>filter1</code>, and then <code>filter2</code> using Join.new\n"],["+","String","String.html#method-i-2B","(p1)","<p>Concatenation—Returns a new <code>String</code> containing\n<em>other_str</em> concatenated to <em>str</em>.\n\n<pre>&quot;Hello from &quot; + self.to_s ...</pre>\n"],["+","Time","Time.html#method-i-2B","(p1)","<p>Addition — Adds some number of seconds (possibly fractional) to\n<em>time</em> and returns that value as a new …\n"],["+","URI::Generic","URI/Generic.html#method-i-2B","(oth)",""],["+","Vector","Vector.html#method-i-2B","(v)","<p>Vector addition.\n"],["+@","BigDecimal","BigDecimal.html#method-i-2B-40","()","<p>Return self.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">+</span><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;5&#39;</span>)  <span class=\"ruby-comment\">#=&gt; 0.5e1</span>\n</pre>\n"],["+@","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2B-40","()","<p>Returns a new Fiddle::Pointer instance that is a dereferenced pointer for\nthis pointer.\n<p>Analogous to the …\n"],["+@","Matrix","Matrix.html#method-i-2B-40","()",""],["+@","Numeric","Numeric.html#method-i-2B-40","()","<p>Unary Plus—Returns the receiver&#39;s value.\n"],["+@","String","String.html#method-i-2B-40","()","<p>If the string is frozen, then return duplicated mutable string.\n<p>If the string is not frozen, then return …\n"],["+@","Vector","Vector.html#method-i-2B-40","()",""],["-","Array","Array.html#method-i-2D","(p1)","<p>Array Difference\n<p>Returns a new array that is a copy of the original array, removing any\nitems that also …\n"],["-","Benchmark::Tms","Benchmark/Tms.html#method-i-2D","(other)","<p>Returns a new Tms object obtained by memberwise subtraction of the\nindividual times for the other Tms …\n"],["-","BigDecimal","BigDecimal.html#method-i-2D","(p1)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["-","Complex","Complex.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (0+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["-","Date","Date.html#method-i-2D","(p1)","<p>Returns the difference between the two dates if the other is a date object.\nIf the other is a numeric …\n"],["-","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2D","(p1)","<p>Returns a new pointer instance that has been moved back <code>n</code>\nbytes.\n"],["-","Float","Float.html#method-i-2D","(p1)","<p>Returns a new float which is the difference of <code>float</code> and\n<code>other</code>.\n"],["-","Integer","Integer.html#method-i-2D","(p1)","<p>Performs subtraction: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the magnitude …\n"],["-","Integer","Integer.html#method-i-2D","(p1)","<p>Performs subtraction: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the magnitude …\n"],["-","Matrix","Matrix.html#method-i-2D","(m)","<p>Matrix subtraction.\n\n<pre>Matrix[[1,5], [4,2]] - Matrix[[9,3], [-4,1]]\n  =&gt; -8  2\n      8  1</pre>\n"],["-","OpenSSL::BN","OpenSSL/BN.html#method-i-2D","(p1)",""],["-","Rational","Rational.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre>Rational(2, 3)  - Rational(2, 3)   #=&gt; (0/1)\nRational(900)   - Rational(1)      ...</pre>\n"],["-","Set","Set.html#method-i-2D","(enum)","<p>Returns a new set built by duplicating the set, removing every element that\nappears in the given enumerable …\n"],["-","Time","Time.html#method-i-2D","(p1)","<p>Difference — Returns a new Time object that represents the difference\nbetween <em>time</em> and <code>other_time</code>, …\n"],["-","URI::Generic","URI/Generic.html#method-i-2D","(oth)",""],["-","Vector","Vector.html#method-i-2D","(v)","<p>Vector subtraction.\n"],["-@","BigDecimal","BigDecimal.html#method-i-2D-40","()","<p>Return the negation of self.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;5&#39;</span>)  <span class=\"ruby-comment\">#=&gt; -0.5e1</span>\n</pre>\n"],["-@","Complex","Complex.html#method-i-2D-40","()","<p>Returns negation of the value.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (-1-2i)</span>\n</pre>\n"],["-@","Fiddle::Pointer","Fiddle/Pointer.html#method-i-2D-40","()","<p>Returns a new Fiddle::Pointer instance that is a reference pointer for this\npointer.\n<p>Analogous to the …\n"],["-@","Float","Float.html#method-i-2D-40","()","<p>Returns float, negated.\n"],["-@","Integer","Integer.html#method-i-2D-40","()","<p>Negates <code>int</code>. (returns an integer whose value is 0-int)\n"],["-@","Integer","Integer.html#method-i-2D-40","()","<p>Negates <code>int</code>. (returns an integer whose value is 0-int)\n"],["-@","Matrix","Matrix.html#method-i-2D-40","()",""],["-@","Numeric","Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver&#39;s value, negated.\n"],["-@","Rational","Rational.html#method-i-2D-40","()","<p>Negates <code>rat</code>.\n"],["-@","String","String.html#method-i-2D-40","()","<p>If the string is frozen, then return the string itself.\n<p>If the string is not frozen, then duplicate the …\n"],["-@","Vector","Vector.html#method-i-2D-40","()",""],["/","Benchmark::Tms","Benchmark/Tms.html#method-i-2F","(x)","<p>Returns a new Tms object obtained by memberwise division of the individual\ntimes for this Tms object …\n"],["/","BigDecimal","BigDecimal.html#method-i-2F","(p1)","<p>Divide by the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">div</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n</pre>\n"],["/","Complex","Complex.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre>Complex(2, 3)  / Complex(2, 3)   #=&gt; ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)   ...</pre>\n"],["/","Float","Float.html#method-i-2F","(p1)","<p>Returns a new float which is the result of dividing <code>float</code> by\n<code>other</code>.\n"],["/","Integer","Integer.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["/","Integer","Integer.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["/","Matrix","Matrix.html#method-i-2F","(other)","<p>Matrix division (multiplication by the inverse).\n\n<pre>Matrix[[7,6], [3,9]] / Matrix[[2,9], [3,1]]\n  =&gt; -7  ...</pre>\n"],["/","OpenSSL::BN","OpenSSL/BN.html#method-i-2F","(p1)","<p>Division of OpenSSL::BN instances\n"],["/","Pathname","Pathname.html#method-i-2F","(other)",""],["/","Rational","Rational.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["/","Vector","Vector.html#method-i-2F","(x)","<p>Vector division.\n"],["<","BigDecimal","BigDecimal.html#method-i-3C","(p1)","<p>Returns true if a is less than b.\n<p>Values may be coerced to perform the comparison (see ==, BigDecimal#coerce\n…\n"],["<","Comparable","Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns -1.\n"],["<","Float","Float.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>float</code> is less than\n<code>real</code>.\n<p>The result of <code>NaN &lt; NaN</code> is undefined, so the\nimplementation-dependent …\n"],["<","Hash","Hash.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <em>hash</em> is subset of <em>other</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &lt; h2    #=&gt; true\nh2 &lt; ...</pre>\n"],["<","Integer","Integer.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than\nthat of <code>real</code>.\n"],["<","Integer","Integer.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than\nthat of <code>real</code>.\n"],["<","Module","Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],["<","Set","Set.html#method-i-3C","(set)",""],["<","Shell::Filter","Shell/Filter.html#method-i-3C","(src)","<p>Inputs from <code>source</code>, which is either a string of a file name or\nan IO object.\n"],["<<","Array","Array.html#method-i-3C-3C","(p1)","<p>Append—Pushes the given object on to the end of this array. This expression\nreturns the array itself, …\n"],["<<","CSV","CSV.html#method-i-3C-3C","(row)","<p>The primary write method for wrapped Strings and IOs, <code>row</code> (an\nArray or CSV::Row) is converted to CSV …\n"],["<<","CSV::Row","CSV/Row.html#method-i-3C-3C","(arg)","<p>If a two-element Array is provided, it is assumed to be a header and field\nand the pair is appended. …\n"],["<<","CSV::Table","CSV/Table.html#method-i-3C-3C","(row_or_array)","<p>Adds a new row to the bottom end of this table.  You can provide an Array,\nwhich will be converted to …\n"],["<<","Date","Date.html#method-i-3C-3C","(p1)","<p>Returns a date object pointing <code>n</code> months before self. The\nargument <code>n</code> should be a numeric value.\n\n<pre>Date.new(2001,2,3) ...</pre>\n"],["<<","Digest::Base","Digest/Base.html#method-i-3C-3C","(p1)","<p>Update the digest using given <em>string</em> and return <code>self</code>.\n"],["<<","Digest::Instance","Digest/Instance.html#method-i-3C-3C","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["<<","Gem::AvailableSet","Gem/AvailableSet.html#method-i-3C-3C","(o)",""],["<<","Gem::SourceList","Gem/SourceList.html#method-i-3C-3C","(obj)","<p>Appends <code>obj</code> to the source list which may be a Gem::Source, URI\nor URI String.\n"],["<<","IO","IO.html#method-i-3C-3C","(p1)","<p>String Output—Writes <em>obj</em> to <em>ios</em>. <em>obj</em> will be\nconverted to a string using <code>to_s</code>.\n\n<pre>$stdout &lt;&lt; &quot;Hello &quot; &lt;&lt; ...</pre>\n"],["<<","IO::generic_writable","IO/generic_writable.html#method-i-3C-3C","(p1)","<p>See IO#<<.\n"],["<<","IPAddr","IPAddr.html#method-i-3C-3C","(num)","<p>Returns a new ipaddr built by bitwise left shift.\n"],["<<","Integer","Integer.html#method-i-3C-3C","(p1)","<p>Shifts <code>int</code> left <code>count</code> positions, or right if\n<code>count</code> is negative.\n"],["<<","Integer","Integer.html#method-i-3C-3C","(p1)","<p>Shifts <code>int</code> left <code>count</code> positions, or right if\n<code>count</code> is negative.\n"],["<<","Logger","Logger.html#method-i-3C-3C","(msg)","<p>Dump given message to the log device without any formatting.  If no log\ndevice exists, return <code>nil</code>.\n"],["<<","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-i-3C-3C","(str)",""],["<<","OpenSSL::BN","OpenSSL/BN.html#method-i-3C-3C","(p1)",""],["<<","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-3C-3C","(s)","<p>Writes <code>s</code> to the stream.  <code>s</code> will be converted to a\nString using String#to_s.\n"],["<<","OpenSSL::Digest","OpenSSL/Digest.html#method-i-3C-3C","(p1)",""],["<<","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-3C-3C","(p1)",""],["<<","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-3C-3C","(object)",""],["<<","Queue","Queue.html#method-i-3C-3C","(p1)",""],["<<","REXML::Attributes","REXML/Attributes.html#method-i-3C-3C","( attribute )",""],["<<","REXML::Document","REXML/Document.html#method-i-3C-3C","( child )",""],["<<","REXML::Elements","REXML/Elements.html#method-i-3C-3C","(element=nil)",""],["<<","REXML::Light::Node","REXML/Light/Node.html#method-i-3C-3C","(element)","<p>Append a child to this element, optionally under a provided namespace. The\nnamespace argument is ignored …\n"],["<<","REXML::Output","REXML/Output.html#method-i-3C-3C","( content )",""],["<<","REXML::Parent","REXML/Parent.html#method-i-3C-3C","( object )",""],["<<","REXML::Text","REXML/Text.html#method-i-3C-3C","( to_append )","<p>Appends text to this text node.  The text is appended in the\n<code>raw</code> mode of this text node.\n<p><code>returns</code> the text …\n"],["<<","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-3C-3C","( event )",""],["<<","REXML::Validation::State","REXML/Validation/State.html#method-i-3C-3C","( event )",""],["<<","RSS::XML::Element","RSS/XML/Element.html#method-i-3C-3C","(child)",""],["<<","Set","Set.html#method-i-3C-3C","(o)",""],["<<","SizedQueue","SizedQueue.html#method-i-3C-3C","(*args)",""],["<<","String","String.html#method-i-3C-3C","(p1)","<p>Append—Concatenates the given object to <em>str</em>. If the object is an\n<code>Integer</code>, it is considered as a codepoint, …\n"],["<<","StringScanner","StringScanner.html#method-i-3C-3C","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not\naffect scan pointer.\n\n<pre>s = StringScanner.new(&quot;Fri ...</pre>\n"],["<<","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-3C-3C","(obj)","<p>Synonym for log(INFO, obj.to_s)\n"],["<<","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-3C-3C","(str)","<p>Adds <code>str</code> to this FormData which may be the body, a header or a\nheader entry.\n<p>This is called by WEBrick::HTTPUtils.parse_form_data …\n"],["<<","Zlib::Deflate","Zlib/Deflate.html#method-i-3C-3C","(p1)","<p>Inputs <code>string</code> into the deflate stream just like\nZlib::Deflate#deflate, but returns the Zlib::Deflate …\n"],["<<","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-3C-3C","(p1)","<p>Document-method: &lt;&lt; Same as IO.\n"],["<<","Zlib::Inflate","Zlib/Inflate.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<=","BigDecimal","BigDecimal.html#method-i-3C-3D","(p1)","<p>Returns true if a is less than or equal to b.\n<p>Values may be coerced to perform the comparison (see ==, …\n"],["<=","Comparable","Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns -1 or …\n"],["<=","Float","Float.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>float</code> is less than or equal to\n<code>real</code>.\n<p>The result of <code>NaN &lt;= NaN</code> is undefined, so the …\n"],["<=","Hash","Hash.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <em>hash</em> is subset of <em>other</em> or\nequals to <em>other</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &lt;= ...</pre>\n"],["<=","Integer","Integer.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than or\nequal to that of <code>real</code>.\n"],["<=","Integer","Integer.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than or\nequal to that of <code>real</code>.\n"],["<=","Module","Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same\nas <em>other</em>. Returns <code>nil</code> if there&#39;s no relationship\n…\n"],["<=","Set","Set.html#method-i-3C-3D","(set)",""],["<=>","Array","Array.html#method-i-3C-3D-3E","(p1)","<p>Comparison — Returns an integer (<code>-1</code>, <code>0</code>, or\n<code>+1</code>) if this array is less than, equal to, or greater than …\n"],["<=>","BigDecimal","BigDecimal.html#method-i-3C-3D-3E","(p1)","<p>The comparison operator. a &lt;=&gt; b is 0 if a == b, 1 if a &gt; b, -1 if\na &lt; b.\n"],["<=>","Date","Date.html#method-i-3C-3D-3E","(p1)","<p>Compares the two dates and returns -1, zero, 1 or nil.  The other should be\na date object or a numeric …\n"],["<=>","Fiddle::Pointer","Fiddle/Pointer.html#method-i-3C-3D-3E","(p1)","<p>Returns -1 if less than, 0 if equal to, 1 if greater than\n<code>other</code>.\n<p>Returns nil if <code>ptr</code> cannot be compared …\n"],["<=>","File::Stat","File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares File::Stat objects by comparing their respective modification\ntimes.\n<p><code>nil</code> is returned if <code>other_stat</code> …\n"],["<=>","Float","Float.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, +1 or nil depending on whether <code>float</code> is less\nthan, equal to, or greater than <code>real</code>. This …\n"],["<=>","Gem::Dependency","Gem/Dependency.html#method-i-3C-3D-3E","(other)","<p>Dependencies are ordered by name.\n"],["<=>","Gem::NameTuple","Gem/NameTuple.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Source","Gem/Source.html#method-i-3C-3D-3E","(other)","<p>Sources are ordered by installation preference.\n"],["<=>","Gem::Source::Git","Gem/Source/Git.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Source::Installed","Gem/Source/Installed.html#method-i-3C-3D-3E","(other)","<p>Installed sources sort before all other sources\n"],["<=>","Gem::Source::Local","Gem/Source/Local.html#method-i-3C-3D-3E","(other)","<p>Local sorts before Gem::Source and after Gem::Source::Installed\n"],["<=>","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-i-3C-3D-3E","(other)","<p>Orders this source against <code>other</code>.\n<p>If <code>other</code> is a SpecificFile from a different gem name\n<code>nil</code> is returned. …\n"],["<=>","Gem::Source::Vendor","Gem/Source/Vendor.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Version","Gem/Version.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> returning -1, 0, or 1 if the\nother version is larger, the same, or smaller …\n"],["<=>","IPAddr","IPAddr.html#method-i-3C-3D-3E","(other)","<p>Compares the ipaddr with another.\n"],["<=>","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-3C-3D-3E","(other)","<p>Compares the level of this notifier object with the given\n<code>other</code> notifier.\n<p>See the Comparable module for …\n"],["<=>","Integer","Integer.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns <code>-1</code>, <code>0</code>, +<code>1</code> or\n<code>nil</code> depending on whether <code>int</code> is less than, equal\nto, or greater than …\n"],["<=>","Integer","Integer.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns <code>-1</code>, <code>0</code>, +<code>1</code> or\n<code>nil</code> depending on whether <code>int</code> is less than, equal\nto, or greater than …\n"],["<=>","Module","Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether\n<code>module</code> includes <code>other_module</code>, they are the …\n"],["<=>","Numeric","Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <code>number</code> equals <code>other</code>, otherwise\n<code>nil</code> is returned if the two values are incomparable.\n"],["<=>","Object","Object.html#method-i-3C-3D-3E","(p1)","<p>Returns 0 if <code>obj</code> and <code>other</code> are the same object or\n<code>obj == other</code>, otherwise nil.\n<p>The <code>&lt;=&gt;</code> is used by …\n"],["<=>","OpenSSL::BN","OpenSSL/BN.html#method-i-3C-3D-3E","(p1)",""],["<=>","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-3C-3D-3E","(p1)",""],["<=>","Pathname","Pathname.html#method-i-3C-3D-3E","(p1)","<p>Provides a case-sensitive comparison operator for pathnames.\n\n<pre>Pathname.new(&#39;/usr&#39;) &lt;=&gt; Pathname.new(&#39;/usr/bin&#39;) ...</pre>\n"],["<=>","RDoc::Alias","RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["<=>","RDoc::Mixin","RDoc/Mixin.html#method-i-3C-3D-3E","(other)","<p>Mixins are sorted by name\n"],["<=>","REXML::Comment","REXML/Comment.html#method-i-3C-3D-3E","(other)","<p>Compares this Comment to another; the contents of the comment are used in\nthe comparison.\n"],["<=>","REXML::Text","REXML/Text.html#method-i-3C-3D-3E","( other )","<p><code>other</code> a String or a Text <code>returns</code> the result of\n(to_s &lt;=&gt; arg.to_s)\n"],["<=>","RSS::Maker::ItemsBase::ItemBase","RSS/Maker/ItemsBase/ItemBase.html#method-i-3C-3D-3E","(other)",""],["<=>","Rational","Rational.html#method-i-3C-3D-3E","(p1)","<p>Performs comparison and returns -1, 0, or +1.\n<p><code>nil</code> is returned if the two values are incomparable.\n\n<pre>Rational(2, ...</pre>\n"],["<=>","String","String.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether\n<code>string</code> is less than, equal to, or greater …\n"],["<=>","Symbol","Symbol.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>symbol</code> with <code>other_symbol</code> after calling\n#to_s on each of the symbols. Returns -1, 0, +1 or nil …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Compares <code>time</code> with <code>other_time</code>.\n<p>-1, 0, +1 or nil depending on whether <code>time</code> is less  than, …\n"],["<=>","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> according to the HTTP\nspecification rules.\n"],["==","Array","Array.html#method-i-3D-3D","(p1)","<p>Equality — Two arrays are equal if they contain the same number of elements\nand if each element is …\n"],["==","BasicObject","BasicObject.html#method-i-3D-3D","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["==","BigDecimal","BigDecimal.html#method-i-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["==","CSV::Row","CSV/Row.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if this row contains the same headers and fields\nin the same order as <code>other</code>.\n"],["==","CSV::Table","CSV/Table.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if all rows of this table ==()\n<code>other</code>&#39;s rows.\n"],["==","Comparable","Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0. Also …\n"],["==","Complex","Complex.html#method-i-3D-3D","(p1)","<p>Returns true if cmp equals object numerically.\n\n<pre>Complex(2, 3)  == Complex(2, 3)   #=&gt; true\nComplex(5)  ...</pre>\n"],["==","Delegator","Delegator.html#method-i-3D-3D","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["==","Digest::Instance","Digest/Instance.html#method-i-3D-3D","(p1)","<p>If a string is given, checks whether it is equal to the hex-encoded hash\nvalue of the digest object. …\n"],["==","Encoding::Converter","Encoding/Converter.html#method-i-3D-3D","(p1)",""],["==","Exception","Exception.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not an <code>Exception</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <em>exc</em>\nand <em>obj</em> share same …\n"],["==","Fiddle::Pointer","Fiddle/Pointer.html#method-i-3D-3D","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["==","Float","Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>float</code>. Contrast this with Float#eql?, which requires obj …\n"],["==","Gem::NameTuple","Gem/NameTuple.html#method-i-3D-3D","(other)","<p>Compare with <code>other</code>. Supports another NameTuple or an Array in\nthe [name, version, platform] format.\n"],["==","Gem::Platform","Gem/Platform.html#method-i-3D-3D","(other)","<p>Is <code>other</code> equal to this platform?  Two platforms are equal if\nthey have the same CPU, OS and version. …\n"],["==","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two dependency graphs are equal, determined\n\n<pre>by a recursive traversal of ...</pre>\n"],["==","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two vertices are equal, determined\n\n<pre>by a recursive traversal of each {Vertex#successors}</pre>\n"],["==","Hash","Hash.html#method-i-3D-3D","(p1)","<p>Equality—Two hashes are equal if they each contain the same number of keys\nand if each key-value pair …\n"],["==","IPAddr","IPAddr.html#method-i-3D-3D","(other)","<p>Returns true if two ipaddrs are equal.\n"],["==","Integer","Integer.html#method-i-3D-3D","(p1)","<p>Return <code>true</code> if <code>int</code> equals <code>other</code>\nnumerically. Contrast this with <code>Integer#eql?</code>, which requires\n<em>other</em> to …\n"],["==","Integer","Integer.html#method-i-3D-3D","(p1)","<p>Return <code>true</code> if <code>int</code> equals <code>other</code>\nnumerically. Contrast this with <code>Integer#eql?</code>, which requires\n<em>other</em> to …\n"],["==","MatchData","MatchData.html#method-i-3D-3D","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["==","Matrix","Matrix.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if and only if the two matrices contain equal\nelements.\n"],["==","Method","Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["==","Module","Module.html#method-i-3D-3D","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["==","OpenSSL::BN","OpenSSL/BN.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>bn</code>. Contrast this with OpenSSL::BN#eql?, which requires …\n"],["==","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-3D-3D","(p1)","<p>Returns true if the two Session is the same, false if not.\n"],["==","OpenStruct","OpenStruct.html#method-i-3D-3D","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is\nequal to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["==","Pathname","Pathname.html#method-i-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["==","Process::Status","Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals\n<em>other</em>.\n"],["==","RDoc::Attr","RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::TopLevel","RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same relative_name\n"],["==","REXML::Attribute","REXML/Attribute.html#method-i-3D-3D","( other )","<p>Returns true if other is an Attribute and has the same name and value,\nfalse otherwise.\n"],["==","REXML::Comment","REXML/Comment.html#method-i-3D-3D","( other )","<p>Compares this Comment to another; the contents of the comment are used in\nthe comparison.\n"],["==","REXML::Instruction","REXML/Instruction.html#method-i-3D-3D","( other )","<p>@return true if other is an Instruction, and the content and target of the\nother matches the target and …\n"],["==","REXML::Validation::Event","REXML/Validation/Event.html#method-i-3D-3D","( other )",""],["==","REXML::XMLDecl","REXML/XMLDecl.html#method-i-3D-3D","( other )",""],["==","RSS::XML::Element","RSS/XML/Element.html#method-i-3D-3D","(other)",""],["==","Random","Random.html#method-i-3D-3D","(p1)","<p>Returns true if the two generators have the same internal state, otherwise\nfalse.  Equivalent generators …\n"],["==","Range","Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Range, has\nequivalent begin and end items (by comparing them with <code>==</code>), …\n"],["==","Rational","Rational.html#method-i-3D-3D","(p1)","<p>Returns true if rat equals object numerically.\n\n<pre>Rational(2, 3)  == Rational(2, 3)   #=&gt; true\nRational(5) ...</pre>\n"],["==","Regexp","Regexp.html#method-i-3D-3D","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["==","Set","Set.html#method-i-3D-3D","(other)","<p>Returns true if two sets are equal.  The equality of each couple of\nelements is defined according to …\n"],["==","String","String.html#method-i-3D-3D","(p1)","<p>Equality—Returns whether <code>str</code> == <code>obj</code>, similar to\nObject#==.\n<p>If <code>obj</code> is not an instance of String but responds …\n"],["==","Struct","Struct.html#method-i-3D-3D","(p1)","<p>Equality—Returns <code>true</code> if <code>other</code> has the same\nstruct subclass and has equal member values (according …\n"],["==","Symbol","Symbol.html#method-i-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["==","URI::Generic","URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares to URI&#39;s\n"],["==","UnboundMethod","UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["==","Vector","Vector.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> iff the two vectors have the same elements in the\nsame order.\n"],["===","BigDecimal","BigDecimal.html#method-i-3D-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["===","Date","Date.html#method-i-3D-3D-3D","(p1)","<p>Returns true if they are the same day.\n\n<pre>Date.new(2001,2,3) === Date.new(2001,2,3)\n                     ...</pre>\n"],["===","FalseClass","FalseClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Float","Float.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>float</code>. Contrast this with Float#eql?, which requires obj …\n"],["===","Gem::Dependency","Gem/Dependency.html#method-i-3D-3D-3D","(other)",""],["===","Gem::Platform","Gem/Platform.html#method-i-3D-3D-3D","(other)","<p>Does <code>other</code> match this platform?  Two platforms match if they\nhave the same CPU, or either has a CPU of …\n"],["===","Gem::Requirement","Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["===","IPAddr","IPAddr.html#method-i-3D-3D-3D","(other)",""],["===","Integer","Integer.html#method-i-3D-3D-3D","(p1)",""],["===","Integer","Integer.html#method-i-3D-3D-3D","(p1)",""],["===","Module","Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>obj</em> is an instance of\n<em>mod</em> or an instance of one of <em>mod</em>&#39;s descendants. …\n"],["===","NilClass","NilClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Object","Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","OpenSSL::BN","OpenSSL/BN.html#method-i-3D-3D-3D","(p1)",""],["===","Pathname","Pathname.html#method-i-3D-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["===","Proc","Proc.html#method-i-3D-3D-3D","(*args)","<p>Invokes the block with <code>obj</code> as the proc&#39;s parameter like\nProc#call.  It is to allow a proc object …\n"],["===","Range","Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.  Conveniently, <code>===</code> is the\ncomparison …\n"],["===","Regexp","Regexp.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Used in case statements.\n\n<pre>a = &quot;HELLO&quot;\ncase a\nwhen /^[a-z]*$/; print &quot;Lower case\\n&quot;\nwhen ...</pre>\n"],["===","Rinda::DRbObjectTemplate","Rinda/DRbObjectTemplate.html#method-i-3D-3D-3D","(ro)","<p>This DRbObjectTemplate matches <code>ro</code> if the remote object&#39;s\ndrburi and drbref are the same.  <code>nil</code> is …\n"],["===","Rinda::Template","Rinda/Template.html#method-i-3D-3D-3D","(tuple)","<p>Alias for #match.\n"],["===","Rinda::TemplateEntry","Rinda/TemplateEntry.html#method-i-3D-3D-3D","(tuple)",""],["===","String","String.html#method-i-3D-3D-3D","(p1)","<p>Equality—Returns whether <code>str</code> == <code>obj</code>, similar to\nObject#==.\n<p>If <code>obj</code> is not an instance of String but responds …\n"],["===","Symbol","Symbol.html#method-i-3D-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["===","SystemCallError","SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic\n<code>SystemCallError</code>, or if the error numbers <code>self</code> and\n<em>other</em> are …\n"],["===","TrueClass","TrueClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["=~","Gem::Dependency","Gem/Dependency.html#method-i-3D-7E","(other)","<p>Uses this dependency as a pattern to compare to <code>other</code>. This\ndependency will match if the name matches …\n"],["=~","Gem::Platform","Gem/Platform.html#method-i-3D-7E","(other)","<p>Does <code>other</code> match this platform?  If <code>other</code> is a\nString it will be converted to a Gem::Platform first. …\n"],["=~","Gem::Requirement","Gem/Requirement.html#method-i-3D-7E","(version)",""],["=~","Object","Object.html#method-i-3D-7E","(p1)","<p>Pattern Match—Overridden by descendants (notably <code>Regexp</code> and\n<code>String</code>) to provide meaningful pattern-match …\n"],["=~","REXML::Light::Node","REXML/Light/Node.html#method-i-3D-7E","( path )",""],["=~","Regexp","Regexp.html#method-i-3D-7E","(p1)","<p>Match—Matches <em>rxp</em> against <em>str</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/at/</span> <span class=\"ruby-operator\">=~</span> <span class=\"ruby-string\">&quot;input data&quot;</span>   <span class=\"ruby-comment\">#=&gt; 7</span>\n<span class=\"ruby-regexp\">/ax/</span> <span class=\"ruby-operator\">=~</span> <span class=\"ruby-string\">&quot;input data&quot;</span>   <span class=\"ruby-comment\">#=&gt; nil</span>\n</pre>\n<p>If <code>=~</code> is used …\n"],["=~","String","String.html#method-i-3D-7E","(p1)","<p>Match—If <em>obj</em> is a <code>Regexp</code>, use it as a pattern to\nmatch against <em>str</em>,and returns the position the match …\n"],["=~","Symbol","Symbol.html#method-i-3D-7E","(p1)","<p>Returns <code>sym.to_s =~ obj</code>.\n"],[">","BigDecimal","BigDecimal.html#method-i-3E","(p1)","<p>Returns true if a is greater than b.\n<p>Values may be coerced to perform the comparison (see ==, BigDecimal#coerce\n…\n"],[">","Comparable","Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 1.\n"],[">","Float","Float.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>float</code> is greater than\n<code>real</code>.\n<p>The result of <code>NaN &gt; NaN</code> is undefined, so the\nimplementation-dependent …\n"],[">","Hash","Hash.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <em>other</em> is subset of <em>hash</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &gt; h2    #=&gt; false\nh2 ...</pre>\n"],[">","Integer","Integer.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nthat of <code>real</code>.\n"],[">","Integer","Integer.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nthat of <code>real</code>.\n"],[">","Module","Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],[">","Set","Set.html#method-i-3E","(set)",""],[">","Shell::Filter","Shell/Filter.html#method-i-3E","(to)","<p>Outputs from <code>source</code>, which is either a string of a file name\nor an IO object.\n"],[">=","BigDecimal","BigDecimal.html#method-i-3E-3D","(p1)","<p>Returns true if a is greater than or equal to b.\n<p>Values may be coerced to perform the comparison (see …\n"],[">=","Comparable","Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0 or …\n"],[">=","Float","Float.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>float</code> is greater than or equal to\n<code>real</code>.\n<p>The result of <code>NaN &gt;= NaN</code> is undefined, so the …\n"],[">=","Hash","Hash.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <em>other</em> is subset of <em>hash</em> or\nequals to <em>hash</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &gt;= ...</pre>\n"],[">=","Integer","Integer.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nor equal to that of <code>real</code>.\n"],[">=","Integer","Integer.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nor equal to that of <code>real</code>.\n"],[">=","Module","Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two\nmodules are the same. Returns <code>nil</code> if there&#39;s …\n"],[">=","Set","Set.html#method-i-3E-3D","(set)",""],[">>","Date","Date.html#method-i-3E-3E","(p1)","<p>Returns a date object pointing <code>n</code> months after self. The\nargument <code>n</code> should be a numeric value.\n\n<pre>Date.new(2001,2,3) ...</pre>\n"],[">>","IPAddr","IPAddr.html#method-i-3E-3E","(num)","<p>Returns a new ipaddr built by bitwise right-shift.\n"],[">>","Integer","Integer.html#method-i-3E-3E","(p1)","<p>Shifts <code>int</code> right <code>count</code> positions, or left if\n<code>count</code> is negative.\n"],[">>","Integer","Integer.html#method-i-3E-3E","(p1)","<p>Shifts <code>int</code> right <code>count</code> positions, or left if\n<code>count</code> is negative.\n"],[">>","OpenSSL::BN","OpenSSL/BN.html#method-i-3E-3E","(p1)",""],[">>","Process::Status","Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre>fork { exit 99 }   #=&gt; 26563\nProcess.wait       #=&gt; 26563\n$?.to_i ...</pre>\n"],[">>","Shell::Filter","Shell/Filter.html#method-i-3E-3E","(to)","<p>Appends the output to <code>source</code>, which is either a string of a\nfile name or an IO object.\n"],["APOP","Net::POP3","Net/POP3.html#method-c-APOP","(isapop)","<p>Returns the APOP class if <code>isapop</code> is true; otherwise, returns\nthe POP class.  For example:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Example 1 ...</span>\n</pre>\n"],["ASCIIZ","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-ASCIIZ","(str, length)",""],["AdditiveExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-AdditiveExpr","(path, parsed)","<p>| AdditiveExpr (&#39;+&#39; | S &#39;-&#39;) MultiplicativeExpr |\nMultiplicativeExpr\n"],["AndExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-AndExpr","(path, parsed)","<p>| AndExpr S &#39;and&#39; S EqualityExpr | EqualityExpr\n"],["Array","Kernel","Kernel.html#method-i-Array","(p1)","<p>Returns <code>arg</code> as an Array.\n<p>First tries to call <code>to_ary</code> on <code>arg</code>, then\n<code>to_a</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Array</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>)   <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5]</span>\n</pre>\n"],["BigDecimal","Kernel","Kernel.html#method-i-BigDecimal","(*args)","<p>See also BigDecimal.new\n"],["CSV","Object","Object.html#method-i-CSV","(*args, &block)","<p>Passes <code>args</code> to CSV::instance.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CSV</span>(<span class=\"ruby-string\">&quot;CSV,data&quot;</span>).<span class=\"ruby-identifier\">read</span>\n  <span class=\"ruby-comment\">#=&gt; [[&quot;CSV&quot;, &quot;data&quot;]]</span>\n</pre>\n<p>If a block is given, the instance …\n"],["Complex","Kernel","Kernel.html#method-i-Complex","(*args)","<p>Returns x+i*y;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)    <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;1+2i&#39;</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-keyword\">nil</span>)     <span class=\"ruby-comment\">#=&gt; TypeError ...</span>\n</pre>\n"],["CurrentContext","IRB","IRB.html#method-c-CurrentContext","()","<p>The current IRB::Context of the session, see IRB.conf\n\n<pre>irb\nirb(main):001:0&gt; IRB.CurrentContext.irb_name ...</pre>\n"],["D","Net::HTTP","Net/HTTP.html#method-i-D","(msg)",""],["DEBUG","Thread","Thread.html#method-c-DEBUG","()","<p>Returns the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DEBUG=","Thread","Thread.html#method-c-DEBUG-3D","(p1)","<p>Sets the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DelegateClass","Object","Object.html#method-i-DelegateClass","(superclass)","<p>The primary interface to this library.  Use to setup delegation when\ndefining your class.\n\n<pre>class MyClass ...</pre>\n"],["Digest","Object","Object.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <code>name</code> in a thread-safe manner even\nwhen on-demand loading is involved.\n\n<pre>require ...</pre>\n"],["Digest","OpenSSL","OpenSSL.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <code>name</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;openssl&#39;</span>\n\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Digest</span>(<span class=\"ruby-string\">&quot;MD5&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; OpenSSL::Digest::MD5 ...</span>\n</pre>\n"],["Digest","OpenSSL","OpenSSL.html#method-c-Digest","(name)","<p>Returns a Digest subclass by <code>name</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;openssl&#39;</span>\n\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Digest</span>(<span class=\"ruby-string\">&quot;MD5&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; OpenSSL::Digest::MD5 ...</span>\n</pre>\n"],["E","BigMath","BigMath.html#method-i-E","(prec)","<p>Computes e (the base of natural logarithms) to the specified number of\ndigits of precision, <code>numeric</code>. …\n"],["EqualityExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-EqualityExpr","(path, parsed)","<p>| EqualityExpr (&#39;=&#39; | &#39;!=&#39;)  RelationalExpr |\nRelationalExpr\n"],["Fail","Exception2MessageMapper","Exception2MessageMapper.html#method-i-Fail","(err = nil, *rest)",""],["Fail","Sync_m::Err","Sync_m/Err.html#method-c-Fail","(*opt)",""],["Fail","Sync_m::Err::LockModeFailer","Sync_m/Err/LockModeFailer.html#method-c-Fail","(mode)",""],["Fail","Sync_m::Err::UnknownLocker","Sync_m/Err/UnknownLocker.html#method-c-Fail","(th)",""],["FilterExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-FilterExpr","(path, parsed)","<p>| FilterExpr Predicate | PrimaryExpr\n"],["Float","Kernel","Kernel.html#method-i-Float","(p1)",""],["FunctionCall","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-FunctionCall","(rest, parsed)","<p>| FUNCTION_NAME &#39;(&#39; ( expr ( &#39;,&#39; expr )* )? &#39;)&#39;\n"],["Hash","Kernel","Kernel.html#method-i-Hash","(p1)","<p>Converts <em>arg</em> to a <code>Hash</code> by calling\n<em>arg</em><code>.to_hash</code>. Returns an empty <code>Hash</code> when\n<em>arg</em> is <code>nil</code> or <code>[]</code>.\n\n<pre>Hash([])  ...</pre>\n"],["I","Matrix","Matrix.html#method-c-I","(n)",""],["Integer","Kernel","Kernel.html#method-i-Integer","(p1, p2 = v2)","<p>Converts <em>arg</em> to an <code>Integer</code>. Numeric types are\nconverted directly (with floating point numbers being truncated). …\n"],["JSON","Kernel","Kernel.html#method-i-JSON","(object, *args)","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["JobManager","IRB","IRB.html#method-c-JobManager","()","<p>The current JobManager in the session\n"],["LOG_MASK","Syslog::Macros","Syslog/Macros.html#method-i-LOG_MASK","(p1)","<p>Generates a mask bit for a priority level. See #mask=\n"],["LOG_UPTO","Syslog::Macros","Syslog/Macros.html#method-i-LOG_UPTO","(p1)","<p>Generates a mask value for priority levels at or below the level specified.\nSee #mask=\n"],["LocationPath","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-LocationPath","(path, parsed)","<p>LocationPath\n\n<pre>| RelativeLocationPath\n| &#39;/&#39; RelativeLocationPath?\n| &#39;//&#39; RelativeLocationPath</pre>\n"],["MultiplicativeExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-MultiplicativeExpr","(path, parsed)","<p>| MultiplicativeExpr (&#39;*&#39; | S (&#39;div&#39; | &#39;mod&#39;) S)\nUnaryExpr | UnaryExpr\n"],["NodeTest","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-NodeTest","(path, parsed)",""],["OrExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-OrExpr","(path, parsed)","<p>| OrExpr S &#39;or&#39; S AndExpr | AndExpr\n"],["PI","BigMath","BigMath.html#method-i-PI","(prec)","<p>Computes the value of pi to the specified number of digits of precision,\n<code>numeric</code>.\n\n<pre>BigMath.PI(10).to_s ...</pre>\n"],["PathExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-PathExpr","(path, parsed)","<p>| LocationPath | FilterExpr (&#39;/&#39; | &#39;//&#39;)\nRelativeLocationPath\n"],["Pathname","Kernel","Kernel.html#method-i-Pathname","(p1)","<p>Creates a new Pathname object from the given string, <code>path</code>, and\nreturns pathname object.\n<p>In order to use …\n"],["PermaLink?","RSS::Rss::Channel::Item::Guid","RSS/Rss/Channel/Item/Guid.html#method-i-PermaLink-3F","()",""],["Predicate","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-Predicate","(path, parsed)","<p>Filters the supplied nodeset on the predicate(s)\n"],["PrimaryExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-PrimaryExpr","(path, parsed)",""],["Proxy","Net::HTTP","Net/HTTP.html#method-c-Proxy","(p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates an HTTP proxy class which behaves like Net::HTTP, but performs all\naccess via the specified proxy. …\n"],["Raise","Exception2MessageMapper","Exception2MessageMapper.html#method-i-Raise","(err = nil, *rest)",""],["Rational","Kernel","Kernel.html#method-i-Rational","(*args)","<p>Returns x/y;\n\n<pre>Rational(1, 2)   #=&gt; (1/2)\nRational(&#39;1/2&#39;)  #=&gt; (1/2)\nRational(nil)    #=&gt; TypeError\nRational(1, ...</pre>\n"],["RelationalExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-RelationalExpr","(path, parsed)","<p>| RelationalExpr (&#39;&lt;&#39; | &#39;&gt;&#39; | &#39;&lt;=&#39; |\n&#39;&gt;=&#39;) AdditiveExpr | …\n"],["RelativeLocationPath","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-RelativeLocationPath","(path, parsed)",""],["SP","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-SP","(s)",""],["SP_Z","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-SP_Z","(s)",""],["String","IRB::Locale","IRB/Locale.html#method-i-String","(mes)",""],["String","Kernel","Kernel.html#method-i-String","(p1)","<p>Returns <em>arg</em> as a <code>String</code>.\n<p>First tries to call its <code>to_str</code> method, then its\n<code>to_s</code> method.\n\n<pre>String(self)     ...</pre>\n"],["URI","Kernel","Kernel.html#method-i-URI","(uri)","<p>Returns <code>uri</code> converted to a URI object.\n"],["URI","Kernel","Kernel.html#method-c-URI","(uri)","<p>Returns <code>uri</code> converted to a URI object.\n"],["UnaryExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-UnaryExpr","(path, parsed)","<p>| &#39;-&#39; UnaryExpr | UnionExpr\n"],["UnionExpr","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-UnionExpr","(path, parsed)","<p>| UnionExpr &#39;|&#39; PathExpr | PathExpr\n"],["Z","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-Z","(s)",""],["[]","Array","Array.html#method-i-5B-5D","(p1, p2 = v2)","<p>Element Reference — Returns the element at <code>index</code>, or returns a\nsubarray starting at the <code>start</code> index …\n"],["[]","Array","Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre>Array.[]( 1, &#39;a&#39;, /^A/ ) # =&gt; [1, &quot;a&quot;, /^A/]\nArray[ ...</pre>\n"],["[]","CGI::QueryExtension","CGI/QueryExtension.html#method-i-5B-5D","(key)","<p>Get the value for the parameter with a given key.\n<p>If the parameter has multiple values, only the first …\n"],["[]","CGI::Session","CGI/Session.html#method-i-5B-5D","(key)","<p>Retrieve the session data for key <code>key</code>.\n"],["[]","CSV::Row","CSV/Row.html#method-i-5B-5D","(header_or_index, minimum_index = 0)",""],["[]","CSV::Table","CSV/Table.html#method-i-5B-5D","(index_or_header)","<p>In the default mixed mode, this method returns rows for index access and\ncolumns for header access.  …\n"],["[]","Continuation","Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["[]","DBM","DBM.html#method-i-5B-5D","(p1)","<p>Return a value from the database by locating the key string provided.  If\nthe key is not found, returns …\n"],["[]","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-5B-5D","(key)","<p>A convenience method to access the values like a Hash\n"],["[]","DRb::GW","DRb/GW.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the GW\n"],["[]","Dir","Dir.html#method-c-5B-5D","(*args)","<p>Equivalent to calling <code>Dir.glob([string,...],0)</code>.\n"],["[]","ENV","ENV.html#method-c-5B-5D","(p1)","<p>Retrieves the <code>value</code> for environment variable <code>name</code>\nas a String.  Returns <code>nil</code> if the named variable does …\n"],["[]","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-5B-5D","(name)","<p>Fetch struct member <code>name</code>\n"],["[]","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-i-5B-5D","(symbol)","<p>See Fiddle::CompositeHandler.sym\n"],["[]","Fiddle::Handle","Fiddle/Handle.html#method-i-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["[]","Fiddle::Handle","Fiddle/Handle.html#method-c-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>. \nThe function is searched via dlsym on RTLD_NEXT …\n"],["[]","Fiddle::Importer","Fiddle/Importer.html#method-i-5B-5D","(name)","<p>Returns the function mapped to <code>name</code>, that was created by\neither Fiddle::Importer.extern or Fiddle::Importer.bind …\n"],["[]","Fiddle::Pointer","Fiddle/Pointer.html#method-c-5B-5D","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a Fiddle::Pointer object.\n"],["[]","Fiddle::Pointer","Fiddle/Pointer.html#method-i-5B-5D","(p1, p2 = v2)","<p>Returns integer stored at <em>index</em>.\n<p>If <em>start</em> and <em>length</em> are given, a string containing the\nbytes from <em>start</em> …\n"],["[]","GDBM","GDBM.html#method-i-5B-5D","(p1)","<p>Retrieves the <em>value</em> corresponding to <em>key</em>.\n"],["[]","Gem::CommandManager","Gem/CommandManager.html#method-i-5B-5D","(command_name)","<p>Returns a Command instance for <code>command_name</code>\n"],["[]","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D","(key)","<p>Return the configuration information for <code>key</code>.\n"],["[]","Hash","Hash.html#method-c-5B-5D","(*args)","<p>Creates a new hash populated with the given objects.\n<p>Similar to the literal <code>{ <em>key</em> =&gt; <em>value</em>, ...\n}</code>. …\n"],["[]","Hash","Hash.html#method-i-5B-5D","(p1)","<p>Element Reference—Retrieves the <em>value</em> object corresponding to the\n<em>key</em> object. If not found, returns …\n"],["[]","Integer","Integer.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the +n+th bit in the binary representation of\n<code>int</code>, where <code>int[0]</code> is the least …\n"],["[]","Integer","Integer.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the +n+th bit in the binary representation of\n<code>int</code>, where <code>int[0]</code> is the least …\n"],["[]","JSON","JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["[]","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D","(name)",""],["[]","MatchData","MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>Match Reference – <code>MatchData</code> acts as an array, and may be\naccessed using the normal array indexing techniques. …\n"],["[]","Matrix","Matrix.html#method-c-5B-5D","(*rows)","<p>Creates a matrix where each argument is a row.\n\n<pre>Matrix[ [25, 93], [-1, 66] ]\n   =&gt;  25 93\n       -1 66</pre>\n"],["[]","Matrix","Matrix.html#method-i-5B-5D","(i, j)","<p>Returns element (<code>i</code>,<code>j</code>) of the matrix.  That is:\nrow <code>i</code>, column <code>j</code>.\n"],["[]","Method","Method.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["[]","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the header field corresponding to the case-insensitive key. For\nexample, a key of “Content-Type” …\n"],["[]","OLEProperty","OLEProperty.html#method-i-5B-5D","(*args)",""],["[]","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D","(p1)","<p>Retrieves a weakly referenced object with the given key\n"],["[]","OpenSSL::Config","OpenSSL/Config.html#method-i-5B-5D","(section)","<p>Get a specific <code>section</code> from the current configuration\n<p>Given the following configurating file being loaded: …\n"],["[]","OpenStruct","OpenStruct.html#method-i-5B-5D","(name)","<p>Returns the value of a member.\n\n<pre>person = OpenStruct.new(&#39;name&#39; =&gt; &#39;John Smith&#39;, &#39;age&#39; =&gt; 70)\nperson[:age] ...</pre>\n"],["[]","PStore","PStore.html#method-i-5B-5D","(name)","<p>Retrieves a value from the PStore file data, by <em>name</em>.  The\nhierarchy of Ruby objects stored under that …\n"],["[]","Prime::TrialDivision","Prime/TrialDivision.html#method-i-5B-5D","(index)","<p>Returns the +index+th prime number.\n<p><code>index</code> is a 0-based index.\n"],["[]","Proc","Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["[]","Psych::Coder","Psych/Coder.html#method-i-5B-5D","(k)",""],["[]","REXML::AttlistDecl","REXML/AttlistDecl.html#method-i-5B-5D","(key)","<p>Access the attlist attribute/value pairs.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">value</span> = <span class=\"ruby-identifier\">attlist_decl</span>[ <span class=\"ruby-identifier\">attribute_name</span> ]\n</pre>\n"],["[]","REXML::Attributes","REXML/Attributes.html#method-i-5B-5D","(name)","<p>Fetches an attribute value.  If you want to get the Attribute itself, use\nget_attribute()\n<p>name &mdash; an XPath …\n"],["[]","REXML::Element","REXML/Element.html#method-i-5B-5D","(name_or_index)","<p>Fetches an attribute value or a child.\n<p>If String or Symbol is specified, it&#39;s treated as attribute …\n"],["[]","REXML::Elements","REXML/Elements.html#method-i-5B-5D","( index, name=nil)","<p>Fetches a child element.  Filters only Element children, regardless of the\nXPath match.\n<p>index &mdash; the search …\n"],["[]","REXML::Light::Node","REXML/Light/Node.html#method-i-5B-5D","( reference, ns=nil )",""],["[]","REXML::Parent","REXML/Parent.html#method-i-5B-5D","( index )","<p>Fetches a child at a given index @param index the Integer index of the\nchild to fetch\n"],["[]","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-5B-5D","( start, endd=nil)",""],["[]","RSS::Maker","RSS/Maker.html#method-c-5B-5D","(version)","<p>Returns the maker for the <code>version</code>\n"],["[]","RSS::XML::Element","RSS/XML/Element.html#method-i-5B-5D","(name)",""],["[]","Rinda::Tuple","Rinda/Tuple.html#method-i-5B-5D","(k)","<p>Accessor method for elements of the tuple.\n"],["[]","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the tuple.\n"],["[]","SDBM","SDBM.html#method-i-5B-5D","(p1)","<p>Returns the <code>value</code> in the database associated with the given\n<code>key</code> string.\n<p>If no value is found, returns …\n"],["[]","Set","Set.html#method-c-5B-5D","(*ary)","<p>Creates a new set containing the given objects.\n"],["[]","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-5B-5D","(command, file1, file2=nil)","<p>See Shell::CommandProcessor#test\n"],["[]","String","String.html#method-i-5B-5D","(*args)","<p>Element Reference — If passed a single <code>index</code>, returns a\nsubstring of one character at that index.  …\n"],["[]","StringScanner","StringScanner.html#method-i-5B-5D","(p1)","<p>Return the n-th subgroup in the most recent match.\n\n<pre>s = StringScanner.new(&quot;Fri Dec 12 1975 14:39&quot;)\ns.scan(/(\\w+) ...</pre>\n"],["[]","Struct","Struct.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of the given struct\n<code>member</code> or the member at the given <code>index</code>. …\n"],["[]","Symbol","Symbol.html#method-i-5B-5D","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["[]","Thread","Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a fiber-local variable (current\nthread&#39;s root fiber if …\n"],["[]","Vector","Vector.html#method-i-5B-5D","(i)","<p>Returns element number <code>i</code> (starting at zero) of the vector.\n"],["[]","Vector","Vector.html#method-c-5B-5D","(*array)","<p>Creates a Vector from a list of elements.\n\n<pre>Vector[7, 4, ...]</pre>\n"],["[]","WEBrick::CGI","WEBrick/CGI.html#method-i-5B-5D","(key)","<p>Reads <code>key</code> from the configuration\n"],["[]","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the configuration\n"],["[]","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-5B-5D","(header_name)","<p>Retrieves <code>header_name</code>\n"],["[]","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-5B-5D","(field)","<p>Retrieves the response header <code>field</code>\n"],["[]","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-5B-5D","(code)","<p>Returns the status class corresponding to <code>code</code>\n\n<pre>WEBrick::HTTPStatus[302]\n=&gt; WEBrick::HTTPStatus::NotFound</pre>\n"],["[]","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-5B-5D","(*key)","<p>Retrieves the header at the first entry in <code>key</code>\n"],["[]","WIN32OLE","WIN32OLE.html#method-i-5B-5D","(*args)","<p>Returns the value of Collection specified by a1, a2,.…\n\n<pre>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;)\ndict.add(&#39;ruby&#39;, ...</pre>\n"],["[]","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-i-5B-5D","(*args)","<p>Returns the element of WIN32OLE_VARIANT object(OLE array). This method is\navailable only when the variant …\n"],["[]","YAML::DBM","YAML/DBM.html#method-i-5B-5D","( key )","<p>Return value associated with <code>key</code> from database.\n<p>Returns <code>nil</code> if there is no such <code>key</code>.\n<p>See #fetch for more …\n"],["[]=","Array","Array.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment — Sets the element at <code>index</code>, or replaces a\nsubarray from the <code>start</code> index for <code>length</code> …\n"],["[]=","CGI::Session","CGI/Session.html#method-i-5B-5D-3D","(key, val)","<p>Set the session data for key <code>key</code>.\n"],["[]=","CSV::Row","CSV/Row.html#method-i-5B-5D-3D","(*args)","<p>Looks up the field by the semantics described in CSV::Row.field() and\nassigns the <code>value</code>.\n<p>Assigning past …\n"],["[]=","CSV::Table","CSV/Table.html#method-i-5B-5D-3D","(index_or_header, value)","<p>In the default mixed mode, this method assigns rows for index access and\ncolumns for header access.  …\n"],["[]=","DBM","DBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Stores the specified string value in the database, indexed via the string\nkey provided.\n"],["[]=","DRb::GW","DRb/GW.html#method-i-5B-5D-3D","(key, v)","<p>Stores value <code>v</code> at <code>key</code> in the GW\n"],["[]=","ENV","ENV.html#method-c-5B-5D-3D","(p1, p2)","<p>Sets the environment variable <code>name</code> to <code>value</code>.  If\nthe value given is <code>nil</code> the environment variable is deleted. …\n"],["[]=","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-5B-5D-3D","(name, val)","<p>Set struct member <code>name</code>, to value <code>val</code>\n"],["[]=","Fiddle::Pointer","Fiddle/Pointer.html#method-i-5B-5D-3D","(p1, p2, p3 = v3)","<p>Set the value at <code>index</code> to <code>int</code>.\n<p>Or, set the memory at <code>start</code> until <code>length</code> with the\ncontents of <code>string</code>, the …\n"],["[]=","GDBM","GDBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Associates the value <em>value</em> with the specified <em>key</em>.\n"],["[]=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D-3D","(key, value)","<p>Set configuration option <code>key</code> to <code>value</code>.\n"],["[]=","Hash","Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Element Assignment\n<p>Associates the value given by <code>value</code> with the key given by\n<code>key</code>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</pre>\n"],["[]=","JSON::GenericObject","JSON/GenericObject.html#method-i-5B-5D-3D","(name, value)",""],["[]=","Matrix","Matrix.html#method-i-5B-5D-3D","(i, j, v)",""],["[]=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the header field corresponding to the case-insensitive key.\n"],["[]=","OLEProperty","OLEProperty.html#method-i-5B-5D-3D","(*args)",""],["[]=","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D-3D","(p1, p2)","<p>Creates a weak reference from the given key to the given value\n"],["[]=","OpenSSL::Config","OpenSSL/Config.html#method-i-5B-5D-3D","(section, pairs)","<p>Sets a specific <code>section</code> name with a Hash <code>pairs</code>\n<p>Given the following configuration being created:\n\n<pre>config ...</pre>\n"],["[]=","OpenStruct","OpenStruct.html#method-i-5B-5D-3D","(name, value)","<p>Sets the value of a member.\n\n<pre>person = OpenStruct.new(&#39;name&#39; =&gt; &#39;John Smith&#39;, &#39;age&#39; =&gt; 70)\nperson[:age] ...</pre>\n"],["[]=","PStore","PStore.html#method-i-5B-5D-3D","(name, value)","<p>Stores an individual Ruby object or a hierarchy of Ruby objects in the data\nstore file under the root …\n"],["[]=","Psych::Coder","Psych/Coder.html#method-i-5B-5D-3D","(k, v)",""],["[]=","REXML::Attributes","REXML/Attributes.html#method-i-5B-5D-3D","( name, value )","<p>Sets an attribute, overwriting any existing attribute value by the same\nname.  Namespace is significant. …\n"],["[]=","REXML::Elements","REXML/Elements.html#method-i-5B-5D-3D","( index, element )","<p>Sets an element, replacing any previous matching element.  If no existing\nelement is found ,the element …\n"],["[]=","REXML::Light::Node","REXML/Light/Node.html#method-i-5B-5D-3D","( reference, ns, value=nil )","<p>Doesn&#39;t handle namespaces yet\n"],["[]=","REXML::Parent","REXML/Parent.html#method-i-5B-5D-3D","( *args )","<p>Set an index entry.  See Array.[]= @param index the index of the element to\nset @param opt either the …\n"],["[]=","REXML::XPathParser","REXML/XPathParser.html#method-i-5B-5D-3D","( variable_name, value )",""],["[]=","RSS::XML::Element","RSS/XML/Element.html#method-i-5B-5D-3D","(name, value)",""],["[]=","SDBM","SDBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Stores a new <code>value</code> in the database with the given\n<code>key</code> as an index.\n<p>If the <code>key</code> already exists, this will …\n"],["[]=","String","String.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Replaces some or all of the content of <em>str</em>. The\nportion of the string affected is …\n"],["[]=","Struct","Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets the value of the given struct <code>member</code>\nor the member at the given <code>index</code>.   …\n"],["[]=","Thread","Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a fiber-local variable,\nusing either a symbol or …\n"],["[]=","Vector","Vector.html#method-i-5B-5D-3D","(i, v)",""],["[]=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-5B-5D-3D","(field, value)","<p>Sets the response header <code>field</code> to <code>value</code>\n"],["[]=","WIN32OLE","WIN32OLE.html#method-i-5B-5D-3D","(*args)","<p>Sets the value to WIN32OLE object specified by a1, a2, …\n\n<pre>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;) ...</pre>\n"],["[]=","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-i-5B-5D-3D","(*args)","<p>Set the element of WIN32OLE_VARIANT object(OLE array) to val. This method\nis available only when the …\n"],["[]=","YAML::DBM","YAML/DBM.html#method-i-5B-5D-3D","( key, val )","<p>Set <code>key</code> to <code>value</code> in database.\n<p><code>value</code> will be converted to YAML before storage.\n<p>See #store for more information. …\n"],["^","FalseClass","FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Integer","Integer.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR.\n"],["^","Integer","Integer.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR.\n"],["^","NilClass","NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Set","Set.html#method-i-5E","(enum)","<p>Returns a new set containing elements exclusive between the set and the\ngiven enumerable object.  (set …\n"],["^","TrueClass","TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code>\nor <code>false</code>, <code>false</code> otherwise.\n"],["_PermaLink?","RSS::Rss::Channel::Item::Guid","RSS/Rss/Channel/Item/Guid.html#method-i-_PermaLink-3F","()",""],["__callee__","Kernel","Kernel.html#method-i-__callee__","()","<p>Returns the called name of the current method as a Symbol. If called\noutside of a method, it returns …\n"],["__dir__","Kernel","Kernel.html#method-i-__dir__","()","<p>Returns the canonicalized absolute path of the directory of the file from\nwhich this method is called. …\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drbref","DRb::DRbObject","DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__drburi","DRb::DRbObject","DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__evaluate__","IRB::WorkSpace","IRB/WorkSpace.html#method-i-__evaluate__","(context, statements, file = nil, line = nil)",""],["__exit__","IRB::Context","IRB/Context.html#method-i-__exit__","(ret = 0)",""],["__getobj__","Delegator","Delegator.html#method-i-__getobj__","()","<p>This method must be overridden by subclasses and should return the object\nmethod calls are being delegated …\n"],["__getobj__","SimpleDelegator","SimpleDelegator.html#method-i-__getobj__","()","<p>Returns the current object method calls are being delegated to.\n"],["__id__","BasicObject","BasicObject.html#method-i-__id__","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for\n…\n"],["__method__","Kernel","Kernel.html#method-i-__method__","()","<p>Returns the name at the definition of the current method as a Symbol. If\ncalled outside of a method, …\n"],["__raise__","Delegator","Delegator.html#method-i-__raise__","",""],["__send__","BasicObject","BasicObject.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["__setobj__","Delegator","Delegator.html#method-i-__setobj__","(obj)","<p>This method must be overridden by subclasses and change the object delegate\nto <em>obj</em>.\n"],["__setobj__","SimpleDelegator","SimpleDelegator.html#method-i-__setobj__","(obj)","<p>Changes the delegate object to <em>obj</em>.\n<p>It&#39;s important to note that this does <strong>not</strong> cause\nSimpleDelegator&#39;s …\n"],["__to_xpath_helper","REXML::Element","REXML/Element.html#method-i-__to_xpath_helper","(node)",""],["__validate","RSS::Element","RSS/Element.html#method-i-__validate","(ignore_unknown_element, tags=_tags, recursive=true)",""],["_ac_arg_enable","OptionParser::AC","OptionParser/AC.html#method-i-_ac_arg_enable","(prefix, name, help_string, block)",""],["_attrs","RSS::Element","RSS/Element.html#method-i-_attrs","()",""],["_attrs","RSS::Rss","RSS/Rss.html#method-i-_attrs","()",""],["_check_ac_args","OptionParser::AC","OptionParser/AC.html#method-i-_check_ac_args","(name, block)",""],["_dispatch_0","Ripper","Ripper.html#method-i-_dispatch_0","()",""],["_dispatch_1","Ripper","Ripper.html#method-i-_dispatch_1","(a)",""],["_dispatch_2","Ripper","Ripper.html#method-i-_dispatch_2","(a, b)",""],["_dispatch_3","Ripper","Ripper.html#method-i-_dispatch_3","(a, b, c)",""],["_dispatch_4","Ripper","Ripper.html#method-i-_dispatch_4","(a, b, c, d)",""],["_dispatch_5","Ripper","Ripper.html#method-i-_dispatch_5","(a, b, c, d, e)",""],["_dispatch_6","Ripper","Ripper.html#method-i-_dispatch_6","(a, b, c, d, e, f)",""],["_dispatch_7","Ripper","Ripper.html#method-i-_dispatch_7","(a, b, c, d, e, f, g)",""],["_do_nothing","FileUtils::LowMethods","FileUtils/LowMethods.html#method-i-_do_nothing","(*)",""],["_dump","BigDecimal","BigDecimal.html#method-i-_dump","(p1 = v1)","<p>Method used to provide marshalling support.\n\n<pre>inf = BigDecimal.new(&#39;Infinity&#39;)\n  #=&gt; Infinity\nBigDecimal._load(inf._dump) ...</pre>\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","DRb::DRbObject","DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","Gem::Specification","Gem/Specification.html#method-i-_dump","(limit)","<p>Dump only crucial instance variables.\n"],["_dump","Singleton","Singleton.html#method-i-_dump","(depth = -1)","<p>By default, do not retain any state when marshalling.\n"],["_getproperty","WIN32OLE","WIN32OLE.html#method-i-_getproperty","(p1, p2, p3)","<p>Runs the early binding method to get property. The 1st argument specifies\ndispatch ID, the 2nd argument …\n"],["_gets_noecho","Gem::StreamUI","Gem/StreamUI.html#method-i-_gets_noecho","()",""],["_httpdate","Date","Date.html#method-c-_httpdate","(p1)","<p>Returns a hash of parsed elements.\n"],["_id2ref","ObjectSpace","ObjectSpace.html#method-c-_id2ref","(p1)","<p>Converts an object id to a reference to the object. May not be called on an\nobject id passed as a parameter …\n"],["_invoke","WIN32OLE","WIN32OLE.html#method-i-_invoke","(p1, p2, p3)","<p>Runs the early binding method. The 1st argument specifies dispatch ID, the\n2nd argument specifies the …\n"],["_iso8601","Date","Date.html#method-c-_iso8601","(p1)","<p>Returns a hash of parsed elements.\n"],["_jisx0301","Date","Date.html#method-c-_jisx0301","(p1)","<p>Returns a hash of parsed elements.\n"],["_load","BigDecimal","BigDecimal.html#method-c-_load","(p1)","<p>Internal method used to provide marshalling support. See the Marshal\nmodule.\n"],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","DRb::DRbObject","DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","Gem::Specification","Gem/Specification.html#method-c-_load","(str)","<p>Load custom marshal format, re-initializing defaults as needed\n"],["_load","Singleton","Singleton.html#method-c-_load","","<p>By default calls instance(). Override to retain singleton state.\n"],["_ns","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-_ns","(ns, prefix)",""],["_parse","Date","Date.html#method-c-_parse","(*args)","<p>Parses the given representation of date and time, and returns a hash of\nparsed elements.  This method …\n"],["_parse","RSS::REXMLParser","RSS/REXMLParser.html#method-i-_parse","()",""],["_parse","RSS::XMLParserParser","RSS/XMLParserParser.html#method-i-_parse","()",""],["_parse","RSS::XMLScanParser","RSS/XMLScanParser.html#method-i-_parse","()",""],["_parse_date_if_needed","RSS::Maker::SetupDefaultDate","RSS/Maker/SetupDefaultDate.html#method-i-_parse_date_if_needed","(date_value)",""],["_racc_do_parse_c","Racc::Parser","Racc/Parser.html#method-i-_racc_do_parse_c","(p1, p2)",""],["_racc_do_parse_rb","Racc::Parser","Racc/Parser.html#method-i-_racc_do_parse_rb","(arg, in_debug)",""],["_racc_do_reduce","Racc::Parser","Racc/Parser.html#method-i-_racc_do_reduce","(arg, act)",""],["_racc_evalact","Racc::Parser","Racc/Parser.html#method-i-_racc_evalact","(act, arg)","<p>common\n"],["_racc_init_sysvars","Racc::Parser","Racc/Parser.html#method-i-_racc_init_sysvars","()",""],["_racc_setup","Racc::Parser","Racc/Parser.html#method-i-_racc_setup","()",""],["_racc_yyparse_c","Racc::Parser","Racc/Parser.html#method-i-_racc_yyparse_c","(p1, p2, p3, p4)",""],["_racc_yyparse_rb","Racc::Parser","Racc/Parser.html#method-i-_racc_yyparse_rb","(recv, mid, arg, c_debug)",""],["_reverse","IPAddr","IPAddr.html#method-i-_reverse","()",""],["_rfc2822","Date","Date.html#method-c-_rfc2822","(p1)","<p>Returns a hash of parsed elements.\n"],["_rfc3339","Date","Date.html#method-c-_rfc3339","(p1)","<p>Returns a hash of parsed elements.\n"],["_rfc822","Date","Date.html#method-c-_rfc822","(p1)","<p>Returns a hash of parsed elements.\n"],["_segments","Gem::Version","Gem/Version.html#method-i-_segments","()",""],["_set_default_values","RSS::Maker::Atom::Entry::Items::Item","RSS/Maker/Atom/Entry/Items/Item.html#method-i-_set_default_values","()",""],["_set_default_values","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-_set_default_values","(&block)",""],["_set_default_values","RSS::Maker::Atom::Feed::Items::Item","RSS/Maker/Atom/Feed/Items/Item.html#method-i-_set_default_values","(&block)",""],["_set_default_values","RSS::Maker::Base","RSS/Maker/Base.html#method-i-_set_default_values","(&block)",""],["_set_default_values","RSS::Maker::SetupDefaultDate","RSS/Maker/SetupDefaultDate.html#method-i-_set_default_values","()",""],["_set_default_values","RSS::Maker::SetupDefaultLanguage","RSS/Maker/SetupDefaultLanguage.html#method-i-_set_default_values","()",""],["_set_last_value","IRB::Context","IRB/Context.html#method-i-_set_last_value","(value)","<p>See #set_last_value\n"],["_setproperty","WIN32OLE","WIN32OLE.html#method-i-_setproperty","(p1, p2, p3)","<p>Runs the early binding method to set property. The 1st argument specifies\ndispatch ID, the 2nd argument …\n"],["_setup_maker_element","RSS::Rss::Channel::Item","RSS/Rss/Channel/Item.html#method-i-_setup_maker_element","(item)",""],["_strptime","Date","Date.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template,\nand returns a hash of parsed …\n"],["_strptime","DateTime","DateTime.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template,\nand returns a hash of parsed …\n"],["_tags","RSS::Element","RSS/Element.html#method-i-_tags","()",""],["_to_string","IPAddr","IPAddr.html#method-i-_to_string","(addr)",""],["_validate","RSS::Element","RSS/Element.html#method-i-_validate","(ignore_unknown_element, tags, uri, models=self.class.models)",""],["_version","Gem::Version","Gem/Version.html#method-i-_version","()",""],["_xmlschema","Date","Date.html#method-c-_xmlschema","(p1)","<p>Returns a hash of parsed elements.\n"],["`","Kernel","Kernel.html#method-i-60","(p1)","<p>Returns the standard output of running <em>cmd</em> in a subshell. The\nbuilt-in syntax <code>%x{...}</code> uses this method. …\n"],["a","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-a","(href = \"\")","<p>Generate an Anchor element as a string.\n<p><code>href</code> can either be a string, giving the URL for the HREF\nattribute, …\n"],["abbrev","Abbrev","Abbrev.html#method-i-abbrev","(words, pattern = nil)","<p>Given a set of strings, calculate the set of unambiguous abbreviations for\nthose strings, and return …\n"],["abbrev","Abbrev","Abbrev.html#method-c-abbrev","(words, pattern = nil)","<p>Given a set of strings, calculate the set of unambiguous abbreviations for\nthose strings, and return …\n"],["abbrev","Array","Array.html#method-i-abbrev","(pattern = nil)","<p>Calculates the set of unambiguous abbreviations for the strings in\n<code>self</code>.\n\n<pre>require &#39;abbrev&#39;\n%w{ car cone ...</pre>\n"],["abbreviate","Gem::Specification","Gem/Specification.html#method-i-abbreviate","()","<p>Abbreviate the spec for downloading.  Abbreviated specs are only used for\nsearching, downloading and …\n"],["abbreviate","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-abbreviate","( path )",""],["abort","Kernel","Kernel.html#method-i-abort","(*args)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort","Net::FTP","Net/FTP.html#method-i-abort","()","<p>Aborts the previous command (ABOR command).\n"],["abort","OptionParser","OptionParser.html#method-i-abort","(mesg = $!)",""],["abort","PStore","PStore.html#method-i-abort","()","<p>Ends the current PStore#transaction, discarding any changes to the data\nstore.\n<p>Example:\n\n<pre>require &quot;pstore&quot; ...</pre>\n"],["abort","Process","Process.html#method-c-abort","(*args)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort_on_exception","Thread","Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception&#39;&#39; condition.\n<p>The default is <code>false</code>.\n<p>When set …\n"],["abort_on_exception","Thread","Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception&#39;&#39;\ncondition for this <code>thr</code>.\n<p>The default …\n"],["abort_on_exception=","Thread","Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if this <code>thr</code> is aborted by an\nexception, the raised exception will be re-raised in the …\n"],["abort_on_exception=","Thread","Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if any thread is aborted by an exception,\nthe raised exception will be re-raised in …\n"],["abs","BigDecimal","BigDecimal.html#method-i-abs","()","<p>Returns the absolute value, as a BigDecimal.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;5&#39;</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; 0.5e1</span>\n<span class=\"ruby-constant\">BigDecimal</span>(<span class=\"ruby-string\">&#39;-3&#39;</span>).<span class=\"ruby-identifier\">abs</span> <span class=\"ruby-comment\">#=&gt; 0.3e1</span>\n</pre>\n"],["abs","Complex","Complex.html#method-i-abs","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["abs","Float","Float.html#method-i-abs","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["abs","Integer","Integer.html#method-i-abs","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre>-12345.abs   #=&gt; 12345\n12345.abs    #=&gt; 12345\n-1234567890987654321.abs ...</pre>\n"],["abs","Integer","Integer.html#method-i-abs","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre>-12345.abs   #=&gt; 12345\n12345.abs    #=&gt; 12345\n-1234567890987654321.abs ...</pre>\n"],["abs","Numeric","Numeric.html#method-i-abs","()","<p>Returns the absolute value of <code>num</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["abs","Rational","Rational.html#method-i-abs","()","<p>Returns the absolute value of <code>rat</code>.\n<p>(1/2r).abs    #=&gt; 1/2r (-1/2r).abs   #=&gt; 1/2r\n<p>Rational#magnitude …\n"],["abs2","Complex","Complex.html#method-i-abs2","()","<p>Returns square of the absolute value.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs2</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs2</span>  <span class=\"ruby-comment\">#=&gt; 25.0</span>\n</pre>\n"],["abs2","Numeric","Numeric.html#method-i-abs2","()","<p>Returns square of self.\n"],["absolute","URI::Generic","URI/Generic.html#method-i-absolute","()",""],["absolute?","Pathname","Pathname.html#method-i-absolute-3F","()","<p>Predicate method for testing whether a path is absolute.\n<p>It returns <code>true</code> if the pathname begins with a …\n"],["absolute?","Resolv::DNS::Name","Resolv/DNS/Name.html#method-i-absolute-3F","()","<p>True if this name is absolute.\n"],["absolute?","URI::Generic","URI/Generic.html#method-i-absolute-3F","()","<p>Checks if URI is an absolute one\n"],["absolute_path","File","File.html#method-c-absolute_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["absolute_path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-absolute_path","()","<p>Returns the absolute path of this instruction sequence.\n<p><code>nil</code> if the iseq was evaluated from a string.\n<p>For …\n"],["absolute_path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-absolute_path","()","<p>Returns the full file path of this frame.\n<p>Same as #path, but includes the absolute path.\n"],["ac_arg_disable","OptionParser::AC","OptionParser/AC.html#method-i-ac_arg_disable","(name, help_string, &block)",""],["ac_arg_enable","OptionParser::AC","OptionParser/AC.html#method-i-ac_arg_enable","(name, help_string, &block)",""],["ac_arg_with","OptionParser::AC","OptionParser/AC.html#method-i-ac_arg_with","(name, help_string, &block)",""],["accept","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-accept","(tcp)","<p>Accept connection to IO <code>tcp</code>, with context of the current\ncertificate configuration\n"],["accept","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-accept","()","<p>Works similar to TCPServer#accept.\n"],["accept","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-accept","()","<p>Waits for a SSL/TLS client to initiate a handshake.  The handshake may be\nstarted after unencrypted data …\n"],["accept","OptionParser","OptionParser.html#method-i-accept","(*args, &blk)","<p>Directs to accept specified class <code>t</code>. The argument string is\npassed to the block in which it should be …\n"],["accept","OptionParser","OptionParser.html#method-c-accept","(*args, &blk)","<p>See #accept.\n"],["accept","OptionParser::List","OptionParser/List.html#method-i-accept","(t, pat = /.*/m, &block)","<p>See OptionParser.accept.\n"],["accept","Psych::Visitors::JSONTree","Psych/Visitors/JSONTree.html#method-i-accept","(target)",""],["accept","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-accept","(target)",""],["accept","Psych::Visitors::Visitor","Psych/Visitors/Visitor.html#method-i-accept","(target)",""],["accept","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-accept","(target)",""],["accept","Socket","Socket.html#method-i-accept","()","<p>Accepts a next connection. Returns a new Socket object and Addrinfo object.\n\n<pre>serv = Socket.new(:INET, :STREAM, ...</pre>\n"],["accept","TCPServer","TCPServer.html#method-i-accept","()","<p>Accepts an incoming connection. It returns a new TCPSocket object.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 14641) ...</pre>\n"],["accept","UNIXServer","UNIXServer.html#method-i-accept","()","<p>Accepts an incoming connection. It returns a new UNIXSocket object.\n\n<pre>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv| ...</pre>\n"],["accept_charset","CGI","CGI.html#method-c-accept_charset","()","<p>Return the accept character set for all new CGI instances.\n"],["accept_charset=","CGI","CGI.html#method-c-accept_charset-3D","(accept_charset)","<p>Set the accept character set for all new CGI instances.\n"],["accept_loop","Socket","Socket.html#method-c-accept_loop","(*sockets)","<p>yield socket and client address for each a connection accepted via given\nsockets.\n<p>The arguments are a …\n"],["accept_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-accept_nonblock","(p1 = {})","<p>Initiates the SSL/TLS handshake as a server in non-blocking manner.\n\n<pre># emulates blocking accept\nbegin\n ...</pre>\n"],["accept_nonblock","Socket","Socket.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_nonblock","TCPServer","TCPServer.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_nonblock","UNIXServer","UNIXServer.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_uri_http","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-accept_uri_http","()","<p>Allows OptionParser to handle HTTP URIs.\n"],["access_log","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-access_log","(config, req, res)","<p>Logs <code>req</code> and <code>res</code> in the access logs. \n<code>config</code> is used for the server name.\n"],["acct","Net::FTP","Net/FTP.html#method-i-acct","(account)","<p>Sends the ACCT command.\n<p>This is a less common FTP command, to send account information if the\ndestination …\n"],["acos","CMath","CMath.html#method-i-acos","(z)","<p>Returns the arc cosine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">acos</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.9045568943023813-1.0612750619050357i)</span>\n</pre>\n"],["acos","CMath","CMath.html#method-c-acos","(z)","<p>Returns the arc cosine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">acos</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.9045568943023813-1.0612750619050357i)</span>\n</pre>\n"],["acos","Math","Math.html#method-c-acos","(p1)","<p>Computes the arc cosine of <code>x</code>. Returns 0..PI.\n<p>Domain: [-1, 1]\n<p>Codomain: [0, PI]\n"],["acosh","CMath","CMath.html#method-i-acosh","(z)","<p>returns the inverse hyperbolic cosine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">acosh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0612750619050357+0.9045568943023813i)</span>\n</pre>\n"],["acosh","CMath","CMath.html#method-c-acosh","(z)","<p>returns the inverse hyperbolic cosine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">acosh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0612750619050357+0.9045568943023813i)</span>\n</pre>\n"],["acosh","Math","Math.html#method-c-acosh","(p1)","<p>Computes the inverse hyperbolic cosine of <code>x</code>.\n<p>Domain: [1, INFINITY)\n<p>Codomain: [0, INFINITY)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-c-action_name","()","<p>@return [Symbol] The name of the action.\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-action_name","()","<p>(see Action#name)\n"],["action_name","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["activate","Gem::Specification","Gem/Specification.html#method-i-activate","()","<p>Activate this spec, registering it as a loaded spec and adding it&#39;s lib\npaths to $LOAD_PATH. Returns …\n"],["activate","Shell::ProcessController","Shell/ProcessController.html#method-c-activate","(pc)",""],["activate_dependencies","Gem::Specification","Gem/Specification.html#method-i-activate_dependencies","()","<p>Activate all unambiguously resolved runtime dependencies of this spec. Add\nany ambiguous dependencies …\n"],["activate_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-activate_spec","()","<p>Add the current {#possibility} to the dependency graph of the current\n{#state} @return [void]\n"],["activated","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-activated","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#activated)\n"],["activated?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-activated-3F","()","<p>True when the gem has been activated\n"],["active?","Net::HTTP","Net/HTTP.html#method-i-active-3F","()",""],["active?","Net::POP3","Net/POP3.html#method-i-active-3F","()",""],["active?","Shell::BuiltInCommand","Shell/BuiltInCommand.html#method-i-active-3F","()",""],["active?","Shell::SystemCommand","Shell/SystemCommand.html#method-i-active-3F","()",""],["active_count","Gem::DependencyList","Gem/DependencyList.html#method-i-active_count","(specs, ignored)","<p>Count the number of gemspecs in the list <code>specs</code> that are not in\n<code>ignored</code>.\n"],["active_job?","Shell::ProcessController","Shell/ProcessController.html#method-i-active_job-3F","(job)",""],["active_jobs","Shell::ProcessController","Shell/ProcessController.html#method-i-active_jobs","()",""],["active_jobs_exist?","Shell::ProcessController","Shell/ProcessController.html#method-i-active_jobs_exist-3F","()",""],["active_process_controllers","Shell::ProcessController","Shell/ProcessController.html#method-c-active_process_controllers","()",""],["add","ACL::ACLList","ACL/ACLList.html#method-i-add","(str)","<p>Adds <code>str</code> as an ACLEntry in this list\n"],["add","Benchmark::Tms","Benchmark/Tms.html#method-i-add","()","<p>Returns a new Tms object whose times are the sum of the times for this Tms\nobject, plus the time required …\n"],["add","BigDecimal","BigDecimal.html#method-i-add","(p1, p2)","\n<pre>+</pre>\n<p>Add the specified value.\n<p>e.g.\n"],["add","Gem::AvailableSet","Gem/AvailableSet.html#method-i-add","(spec, source)",""],["add","Gem::DependencyList","Gem/DependencyList.html#method-i-add","(*gemspecs)","<p>Adds <code>gemspecs</code> to the dependency list.\n"],["add","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-add","(req)","<p>Adds Resolver::DependencyRequest <code>req</code> to this requirements\nlist.\n"],["add","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-add","(spec)","<p>Adds <code>spec</code> to this set.\n"],["add","Logger","Logger.html#method-i-add","(severity, message = nil, progname = nil)","<p>Args\n<p>severity &mdash; Severity.  Constants are defined in Logger namespace: <code>DEBUG</code>,\n<code>INFO</code>, <code>WARN</code>, <code>ERROR</code>,\n<code>FATAL</code>, or …\n"],["add","Psych::Coder","Psych/Coder.html#method-i-add","(k, v)",""],["add","RDoc::Context","RDoc/Context.html#method-i-add","(klass, name, comment)","<p>Adds an item of type <code>klass</code> with the given <code>name</code>\nand <code>comment</code> to the context.\n<p>Currently only RDoc::Extend …\n"],["add","REXML::Attributes","REXML/Attributes.html#method-i-add","( attribute )","<p>Adds an attribute, overriding any existing attribute by the same name. \nNamespaces are significant.\n<p>attribute … &mdash; "],["add","REXML::DocType","REXML/DocType.html#method-i-add","(child)",""],["add","REXML::Document","REXML/Document.html#method-i-add","( child )","<p>We override this, because XMLDecls and DocTypes must go at the start of the\ndocument\n"],["add","REXML::Elements","REXML/Elements.html#method-i-add","(element=nil)","<p>Adds an element\n<p>element &mdash; if supplied, is either an Element, String, or Source (see\nElement.initialize). …\n"],["add","REXML::Parent","REXML/Parent.html#method-i-add","( object )",""],["add","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-add","( pair )",""],["add","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-i-add","(tuple)",""],["add","Set","Set.html#method-i-add","(o)","<p>Adds the given object to the set and returns self.  Use <code>merge</code>\nto add many elements at once.\n"],["add","Syslog::Logger","Syslog/Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Almost duplicates Logger#add.  <code>progname</code> is ignored.\n"],["add","ThreadGroup","ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <code>thread</code> to this group, removing it from any\nother group to which it may have previously …\n"],["add","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-add","(group, members)","<p>Add an Array of <code>members</code> to <code>group</code>\n"],["add!","Benchmark::Tms","Benchmark/Tms.html#method-i-add-21","(&blk)","<p>An in-place version of #add.\n"],["add?","Set","Set.html#method-i-add-3F","(o)","<p>Adds the given object to the set and returns self.  If the object is\nalready in the set, returns nil. …\n"],["add_GIT","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-add_GIT","(out, git_requests)",""],["add_alias","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in\n<code>context</code>.\n"],["add_alias","RDoc::Attr","RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a\nnew alias for this known method/attribute. …\n"],["add_alias","RDoc::Stats","RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_always_install","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_always_install","(dependency)","<p>Looks up the latest specification for <code>dependency</code> and adds it\nto the always_install list.\n"],["add_attribute","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-add_attribute","(p1)",""],["add_attribute","RDoc::Context","RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or\nattribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_attribute","REXML::Element","REXML/Element.html#method-i-add_attribute","( key, value=nil )","<p>Adds an attribute to this element, overwriting any existing attribute by\nthe same name.\n<p>key &mdash; can be either …\n"],["add_attributes","REXML::Element","REXML/Element.html#method-i-add_attributes","(hash)","<p>Add multiple attributes to this element.\n<p>hash &mdash; is either a hash, or array of arrays\n\n\n<pre>el.add_attributes( {&quot;name1&quot;=&gt;&quot;value1&quot;, ...</pre>\n"],["add_authenticator","Net::IMAP","Net/IMAP.html#method-c-add_authenticator","(auth_type, authenticator)","<p>Adds an authenticator for Net::IMAP#authenticate.  <code>auth_type</code>\nis the type of authentication this authenticator …\n"],["add_bindir","Gem::Specification","Gem/Specification.html#method-i-add_bindir","(executables)","<p>Returns an array with bindir attached to each executable in the\n<code>executables</code> list\n"],["add_bulk_threshold_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_bulk_threshold_option","()","<p>Add the –bulk-threshold option\n"],["add_c_enclosure","RDoc::Store","RDoc/Store.html#method-i-add_c_enclosure","(variable, namespace)","<p>Adds <code>module</code> as an enclosure (namespace) for the given\n<code>variable</code> for C files.\n"],["add_c_variables","RDoc::Store","RDoc/Store.html#method-i-add_c_variables","(c_parser)","<p>Adds C variables from an RDoc::Parser::C\n"],["add_cert","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_cert","(p1)","<p>Adds the OpenSSL::X509::Certificate <code>cert</code> to the certificate\nstore.\n"],["add_certid","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-add_certid","(p1)","<p>Adds <code>certificate_id</code> to the request.\n"],["add_certificate","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_certificate","(p1)",""],["add_checksums","Gem::Package","Gem/Package.html#method-i-add_checksums","(tar)","<p>Adds a checksum for each entry in the gem to checksums.yaml.gz.\n"],["add_child_vertex","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_child_vertex","(name, payload, parent_names, requirement)","<p>@param [String] name @param [Object] payload @param [Array&lt;String&gt;]\nparent_names @param [Object] …\n"],["add_class","RDoc::Context","RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain\n&#39;::&#39;, …\n"],["add_class","RDoc::Stats","RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash\n<code>self_hash</code>, and to <code>all_hash</code> (either\n<code>TopLevel::modules_hash</code> …\n"],["add_clear_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_clear_sources_option","()","<p>Add the –clear-sources option\n"],["add_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule&#39;s list of comments at\n<code>location</code>.  This method is preferred over  …\n"],["add_common_option","Gem::Command","Gem/Command.html#method-c-add_common_option","(*args, &handler)",""],["add_constant","RDoc::Context","RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the\ncomment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_converter","CSV","CSV.html#method-i-add_converter","(var_name, const, name = nil, &converter)","<p>The actual work method for adding converters, used by both CSV.convert()\nand CSV.header_convert().\n<p>This …\n"],["add_crl","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_crl","(p1)",""],["add_crl","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_crl","(p1)","<p>Adds the OpenSSL::X509::CRL <code>crl</code> to the store.\n"],["add_data","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_data","(p1)",""],["add_date","Gem::Server","Gem/Server.html#method-i-add_date","(res)",""],["add_dependency","Gem::Specification","Gem/Specification.html#method-i-add_dependency","(gem, *requirements)",""],["add_dependency_with_type","Gem::Specification","Gem/Specification.html#method-i-add_dependency_with_type","(dependency, type, *requirements)","<p>Adds a dependency on gem <code>dependency</code> with type\n<code>type</code> that requires <code>requirements</code>.  Valid types are\ncurrently …\n"],["add_development_dependency","Gem::Specification","Gem/Specification.html#method-i-add_development_dependency","(gem, *requirements)","<p>Adds a development dependency named <code>gem</code> with\n<code>requirements</code> to this gem.\n<p>Usage:\n\n<pre>spec.add_development_dependency ...</pre>\n"],["add_dictionary","Zlib::Inflate","Zlib/Inflate.html#method-i-add_dictionary","(p1)","<p>Provide the inflate stream with a dictionary that may be required in the\nfuture.  Multiple dictionaries …\n"],["add_edge","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_edge","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph @param [Vertex] origin @param\n[Vertex] destination @param [Object] …\n"],["add_edge_no_circular","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_edge_no_circular","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph without checking for circularity.\n@param (see #add_edge) @return …\n"],["add_edge_no_circular","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-add_edge_no_circular","(graph, origin, destination, requirement)","<p>@macro action\n"],["add_element","REXML::Document","REXML/Document.html#method-i-add_element","(arg=nil, arg2=nil)",""],["add_element","REXML::Element","REXML/Element.html#method-i-add_element","(element, attrs=nil)","<p>Adds a child to this element, optionally setting attributes in the element.\n<p>element &mdash; optional.  If Element …\n"],["add_entry","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-add_entry","(p1, p2, p3 = v3)","<p>Adds a new entry with the given <code>oid</code> and <code>value</code> to\nthis name.  The <code>oid</code> is an object identifier defined …\n"],["add_event_to_arry","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-add_event_to_arry","( arry, evt )",""],["add_event_to_arry","REXML::Validation::State","REXML/Validation/State.html#method-i-add_event_to_arry","( arry, evt )",""],["add_extend","RDoc::Context","RDoc/Context.html#method-i-add_extend","(ext)","<p>Adds extension module <code>ext</code> which should be an RDoc::Extend\n"],["add_extension","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-add_extension","(p1)",""],["add_extra_args","Gem::Command","Gem/Command.html#method-i-add_extra_args","(args)","<p>Adds extra args from ~/.gemrc\n"],["add_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Ruby 1.8.3 &mdash; Adds a value to a named header field, instead of replacing its value.\nSecond argument <code>val</code> …\n"],["add_file","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file","(name, mode)","<p>Adds file <code>name</code> with permissions <code>mode</code>, and yields\nan IO for writing the file to\n"],["add_file","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_file","(p1)","<p>Adds the certificates in <code>file</code> to the certificate store.  The\n<code>file</code> can contain multiple PEM-encoded certificates. …\n"],["add_file","RDoc::Stats","RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_file","RDoc::Store","RDoc/Store.html#method-i-add_file","(absolute_name, relative_name = absolute_name)","<p>Adds the file with <code>name</code> as an RDoc::TopLevel to the store. \nReturns the created RDoc::TopLevel.\n"],["add_file_digest","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_digest","(name, mode, digest_algorithms)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar,\nyielding <code>io</code> for writing the file.  The\n<code>digest_algorithm</code> is …\n"],["add_file_signed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_signed","(name, mode, signer)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar,\nyielding <code>io</code> for writing the file.  The <code>signer</code> is\nused to …\n"],["add_file_simple","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_simple","(name, mode, size)","<p>Add file <code>name</code> with permissions <code>mode</code>\n<code>size</code> bytes long.  Yields an IO to write the file to.\n"],["add_filter","Tracer","Tracer.html#method-c-add_filter","(p = proc)","<p>Used to filter unwanted trace output\n<p>Example which only outputs lines of code executed within the Kernel …\n"],["add_generator","RDoc::RDoc","RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_handler","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-add_handler","(suffix, handler)","<p>Allow custom handling of requests for files with <code>suffix</code> by\nclass <code>handler</code>\n"],["add_have_children_element","RSS::Element","RSS/Element.html#method-c-add_have_children_element","(variable_name, plural_name)",""],["add_html","RDoc::Markup","RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_include","RDoc::Context","RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-add_install_update_options","()","<p>Add the install/update options to the option parser.\n"],["add_key_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_key_option","()","<p>Add the –key option\n"],["add_listener","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::LightParser","REXML/Parsers/LightParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::PullParser","REXML/Parsers/PullParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::StreamParser","REXML/Parsers/StreamParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::TreeParser","REXML/Parsers/TreeParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::UltraLightParser","REXML/Parsers/UltraLightParser.html#method-i-add_listener","( listener )",""],["add_local","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_local","(dep_name, spec, source)","<p>Adds a local gem requested using <code>dep_name</code> with the given\n<code>spec</code> that can be loaded and installed using …\n"],["add_local_remote_options","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_local_remote_options","()","<p>Add local/remote options to the command line parser.\n"],["add_log_header","Logger::LogDevice","Logger/LogDevice.html#method-i-add_log_header","(file)",""],["add_maker","RSS::Maker","RSS/Maker.html#method-c-add_maker","(version, normalized_version, maker)","<p>Adds a maker to the set of supported makers\n"],["add_method","RDoc::Context","RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or\nattribute), updates the comment if it was empty. …\n"],["add_method","RDoc::Stats","RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_module","RDoc::Context","RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows\n<code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","RDoc/Context.html#method-i-add_module_alias","(from, name, file)","<p>Adds an alias from <code>from</code> (a class or module) to\n<code>name</code> which was defined in <code>file</code>.\n"],["add_namespace","REXML::Element","REXML/Element.html#method-i-add_namespace","( prefix, uri=nil )","<p>Adds a namespace to this element.\n<p>prefix &mdash; the prefix string, or the namespace URI if <code>uri</code> is not supplied\n…\n"],["add_need_initialize_variable","RSS::Element","RSS/Element.html#method-c-add_need_initialize_variable","(variable_name)",""],["add_need_initialize_variable","RSS::Maker::Base","RSS/Maker/Base.html#method-c-add_need_initialize_variable","(variable_name, init_value=nil, &init_block)",""],["add_nonce","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-add_nonce","(p1 = v1)","<p>Adds <code>nonce</code> to this response.  If no nonce was provided a\nrandom nonce will be added.\n"],["add_nonce","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-add_nonce","(p1 = v1)","<p>Adds a <code>nonce</code> to the OCSP request.  If no nonce is given a\nrandom one will be generated.\n<p>The nonce is used …\n"],["add_observer","Observable","Observable.html#method-i-add_observer","(observer, func=:update)","<p>Add <code>observer</code> as an observer on this object. so that it will\nreceive notifications.\n<p>observer &mdash; the object …\n"],["add_option","Gem::Command","Gem/Command.html#method-i-add_option","(*opts)","<p>Add a command-line option and handler to the command.\n<p>See OptionParser#make_switch for an explanation …\n"],["add_other_element","RSS::Maker::Base","RSS/Maker/Base.html#method-c-add_other_element","(variable_name)",""],["add_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-add_owners","(name, owners)",""],["add_parser_run_info","Gem::Command","Gem/Command.html#method-i-add_parser_run_info","(title, content)","<p>Adds a section with <code>title</code> and <code>content</code> to the\nparser help view.  Used for adding command arguments and …\n"],["add_path","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-add_path","(out, path)",""],["add_path","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-add_path","(p1)","<p>Adds <code>path</code> as the hash dir to be looked up by the store.\n"],["add_platform","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-add_platform","(platform)","<p>append a platform to the list of mismatched platforms.\n<p>Platforms are added via this instead of injected …\n"],["add_platform_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_platform_option","(task = command, *wrap)","<p>Add the –platform option to the option parser.\n"],["add_plural_form","RSS::Element","RSS/Element.html#method-c-add_plural_form","(singular, plural)",""],["add_prerelease_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_prerelease_option","(*wrap)","<p>Add the –prerelease option to the option parser.\n"],["add_private_type","Psych","Psych.html#method-c-add_private_type","(type_tag, &block)",""],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_protocol","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_proxy_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_proxy_option","()","<p>Add the –http-proxy option\n"],["add_recipient","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_recipient","(p1)",""],["add_require","RDoc::Context","RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context&#39;s top level\n"],["add_response_handler","Net::IMAP","Net/IMAP.html#method-i-add_response_handler","(handler = Proc.new)","<p>Adds a response handler. For example, to detect when the server sends a new\nEXISTS response (which normally …\n"],["add_revoked","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-add_revoked","(p1)",""],["add_row","CSV","CSV.html#method-i-add_row","(row)",""],["add_ruby_type","Psych","Psych.html#method-c-add_ruby_type","(type_tag, &block)",""],["add_runtime_dependency","Gem::Specification","Gem/Specification.html#method-i-add_runtime_dependency","(gem, *requirements)","<p>Adds a runtime dependency named <code>gem</code> with\n<code>requirements</code> to this gem.\n<p>Usage:\n\n<pre>spec.add_runtime_dependency &#39;example&#39;, ...</pre>\n"],["add_schedule","Shell::ProcessController","Shell/ProcessController.html#method-i-add_schedule","(command)","<p>schedule a command\n"],["add_section","RDoc::Context","RDoc/Context.html#method-i-add_section","(title, comment = nil)","<p>Returns a section with <code>title</code>, creating it if it doesn&#39;t\nalready exist. <code>comment</code> will be appended to …\n"],["add_self_to_load_path","Gem::Specification","Gem/Specification.html#method-i-add_self_to_load_path","()","<p>Adds this spec&#39;s require paths to LOAD_PATH, in the proper location.\n"],["add_signer","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-add_signer","(p1)",""],["add_source_gem","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-i-add_source_gem","(name, source)",""],["add_source_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_source_option","()","<p>Add the –source option\n"],["add_spec","Gem::Specification","Gem/Specification.html#method-c-add_spec","(spec)","<p>Adds <code>spec</code> to the known specifications, keeping the collection\nproperly sorted.\n"],["add_special","RDoc::Markup","RDoc/Markup.html#method-i-add_special","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using\nsomething like:\n\n<pre>parser.add_special(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...</pre>\n"],["add_specific_extra_args","Gem::Command","Gem/Command.html#method-c-add_specific_extra_args","(cmd,args)","<p>Add a list of extra arguments for the given command.  <code>args</code> may\nbe an array or a string to be split on …\n"],["add_specs","Gem::Specification","Gem/Specification.html#method-c-add_specs","(*specs)","<p>Adds multiple specs to the known specifications.\n"],["add_status","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-add_status","(p1, p2, p3, p4, p5, p6, p7)","<p>Adds a certificate status for <code>certificate_id</code>.\n<code>status</code> is the status, and must be one of these:\n<p>OpenSSL::OCSP::V_CERTSTATUS_GOOD …\n"],["add_stress_to_class","GC","GC.html#method-c-add_stress_to_class","(*args)",""],["add_symlink","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_symlink","(name, target, mode)","<p>Adds symlink <code>name</code> with permissions <code>mode</code>, linking\nto <code>target</code>.\n"],["add_text","REXML::Element","REXML/Element.html#method-i-add_text","( text )","<p>A helper method to add a Text child.  Actual Text instances can be added\nwith regular Parent methods, …\n"],["add_to","RDoc::Context","RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the\nRuby parser.\n"],["add_to_element_method","RSS::Element","RSS/Element.html#method-c-add_to_element_method","(method_name)",""],["add_to_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-add_to_fetcher","(spec, path=nil, repo=@gem_repo)","<p>Add <code>spec</code> to +@fetcher+ serving the data in the file\n<code>path</code>. <code>repo</code> indicates which repo to make\n<code>spec</code> appear …\n"],["add_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_token","(*tokens)",""],["add_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-add_tokens","(*tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_trace_func","Thread","Thread.html#method-i-add_trace_func","(p1)","<p>Adds <em>proc</em> as a handler for tracing.\n<p>See Thread#set_trace_func and Kernel#set_trace_func.\n"],["add_unconverted_fields","CSV","CSV.html#method-i-add_unconverted_fields","(row, fields)","<p>This method injects an instance variable <code>unconverted_fields</code>\ninto <code>row</code> and an accessor method for <code>row</code> called …\n"],["add_update_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_update_sources_option","()","<p>Add the –update-sources option\n"],["add_value","OpenSSL::Config","OpenSSL/Config.html#method-i-add_value","(section, key, value)","<p>Set the target <code>key</code> with a given <code>value</code> under a\nspecific <code>section</code>.\n<p>Given the following configurating file …\n"],["add_version_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_version_option","(task = command, *wrap)","<p>Add the –version option to the option parser.\n"],["add_vertex","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-add_vertex","(name, payload, root = false)","<p>Adds a vertex with the given name, or updates the existing one. @param\n[String] name @param [Object] …\n"],["add_vertex","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-add_vertex","(graph, name, payload, root)","<p>@macro action\n"],["add_word_pair","RDoc::Markup","RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as\n<strong>bold</strong>).  Matching entries will …\n"],["addr","IPSocket","IPSocket.html#method-i-addr","(*args)","<p>Returns the local address as an array which contains address_family, port,\nhostname and numeric_address. …\n"],["addr","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-addr","()",""],["addr","Socket::Ifaddr","Socket/Ifaddr.html#method-i-addr","()","<p>Returns the address of <em>ifaddr</em>. nil is returned if address is not\navailable in <em>ifaddr</em>.\n"],["addr","UNIXSocket","UNIXSocket.html#method-i-addr","()","<p>Returns the local address as an array which contains address_family and\nunix_path.\n<p>Example\n\n<pre>serv = UNIXServer.new(&quot;/tmp/sock&quot;) ...</pre>\n"],["addr_mask","IPAddr","IPAddr.html#method-i-addr_mask","(addr)",""],["addr_port","Net::HTTP","Net/HTTP.html#method-i-addr_port","()","<p>utils\n"],["adjugate","Matrix","Matrix.html#method-i-adjugate","()","<p>Returns the adjugate of the matrix.\n\n<pre>Matrix[ [7,6],[3,9] ].adjugate\n  =&gt; 9 -6\n     -3 7</pre>\n"],["adler","Zlib::ZStream","Zlib/ZStream.html#method-i-adler","()","<p>Returns the adler-32 checksum.\n"],["adler32","Zlib","Zlib.html#method-c-adler32","(*args)","<p>Calculates Adler-32 checksum for <code>string</code>, and returns updated\nvalue of <code>adler</code>. If <code>string</code> is omitted, it …\n"],["adler32_combine","Zlib","Zlib.html#method-c-adler32_combine","(p1, p2, p3)","<p>Combine two Adler-32 check values in to one.  <code>alder1</code> is the\nfirst Adler-32 value, <code>adler2</code> is the second …\n"],["advise","IO","IO.html#method-i-advise","(p1, p2 = v2, p3 = v3)","<p>Announce an intention to access data from the current file in a specific\npattern. On platforms that do …\n"],["afamily","Addrinfo","Addrinfo.html#method-i-afamily","()","<p>returns the address family as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">afamily</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AF_INET</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["after_resolution","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-after_resolution","()","<p>Called after resolution ends (either successfully or with an error). By\ndefault, prints a newline.\n<p>@return …\n"],["ajd","Date","Date.html#method-i-ajd","()","<p>Returns the astronomical Julian day number.  This is a fractional number,\nwhich is not adjusted by the …\n"],["alert","Gem::StreamUI","Gem/StreamUI.html#method-i-alert","(statement, question=nil)","<p>Display an informational alert.  Will ask <code>question</code> if it is\nnot nil.\n"],["alert","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert","(statement, question = nil)","<p>Displays an alert <code>statement</code>.  Asks a <code>question</code> if\ngiven.\n"],["alert_error","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_error","(statement, question=nil)","<p>Display an error message in a location expected to get error messages. Will\nask <code>question</code> if it is not …\n"],["alert_error","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_error","(statement, question = nil)","<p>Displays an error <code>statement</code> to the error output location. \nAsks a <code>question</code> if given.\n"],["alert_warning","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_warning","(statement, question=nil)","<p>Display a warning on stderr.  Will ask <code>question</code> if it is not\nnil.\n"],["alert_warning","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_warning","(statement, question = nil)","<p>Displays a warning <code>statement</code> to the warning output location. \nAsks a <code>question</code> if given.\n"],["alias","Psych::Handler","Psych/Handler.html#method-i-alias","(anchor)","<p>Called when an alias is found to <code>anchor</code>.  <code>anchor</code>\nwill be the name of the anchor found.\n<p>Example\n<p>Here we …\n"],["alias","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-alias","(anchor)",""],["alias_command","Shell","Shell.html#method-c-alias_command","(ali, command, *opts, &block)","<p>Convenience method for Shell::CommandProcessor.alias_command. Defines an\ninstance method which will execute …\n"],["alias_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-alias_command","(ali, command, *opts)","<p>Creates a command alias at the given <code>alias</code> for the given\n<code>command</code>, passing any <code>options</code> along with it. …\n"],["alias_extension","RDoc::Parser","RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending\n“new_ext” will be parsed …\n"],["alias_map","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-alias_map","()","<p>Returns a list of aliased commands\n"],["alias_method","Module","Module.html#method-i-alias_method","(p1, p2)","<p>Makes <em>new_name</em> a new copy of the method <em>old_name</em>. This\ncan be used to retain access to methods that are …\n"],["aliases","Encoding","Encoding.html#method-c-aliases","()","<p>Returns the hash of available encoding alias and original encoding name.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">aliases</span>\n<span class=\"ruby-comment\">#=&gt; {&quot;BINARY&quot;=&gt;&quot;ASCII-8BIT&quot;, ...</span>\n</pre>\n"],["alien","Gem::Validator","Gem/Validator.html#method-i-alien","(gems=[])","<p>Checks the gem directory for the following potential\ninconsistencies/problems:\n<p>Checksum gem itself\n<p>For …\n"],["alive?","DRb::DRbServer","DRb/DRbServer.html#method-i-alive-3F","()","<p>Is this server alive?\n"],["alive?","DRb::ExtServ","DRb/ExtServ.html#method-i-alive-3F","()",""],["alive?","Fiber","Fiber.html#method-i-alive-3F","()","<p>Returns true if the fiber can still be resumed (or transferred to). After\nfinishing execution of the …\n"],["alive?","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-alive-3F","()","<p>A TupleEntry is dead when it is canceled or expired.\n"],["alive?","Thread","Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <code>thr</code> is running or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">thr</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { }\n<span class=\"ruby-identifier\">thr</span>.<span class=\"ruby-identifier\">join</span>                <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401b3fb0 ...</span>\n</pre>\n"],["all","Gem::Specification","Gem/Specification.html#method-c-all","()","<p>Returns all specifications. This method is discouraged from use. You\nprobably want to use one of the …\n"],["all","Net::POPMail","Net/POPMail.html#method-i-all","( dest = '' )",""],["all=","Gem::Specification","Gem/Specification.html#method-c-all-3D","(specs)","<p>Sets the known specs to <code>specs</code>. Not guaranteed to work for you\nin the future. Use at your own risk. Caveat …\n"],["all?","Enumerable","Enumerable.html#method-i-all-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["all_classes","RDoc::Store","RDoc/Store.html#method-i-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::Store","RDoc/Store.html#method-i-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_files","RDoc::Store","RDoc/Store.html#method-i-all_files","()","<p>All TopLevels known to RDoc\n"],["all_modules","RDoc::Store","RDoc/Store.html#method-i-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["all_names","Gem::Specification","Gem/Specification.html#method-c-all_names","()","<p>Return full names of all specs in sorted order.\n"],["all_spec_names","Gem::TestCase","Gem/TestCase.html#method-i-all_spec_names","()",""],["all_specs","Gem::AvailableSet","Gem/AvailableSet.html#method-i-all_specs","()",""],["all_symbols","Symbol","Symbol.html#method-c-all_symbols","()","<p>Returns an array of all the symbols currently in Ruby&#39;s symbol table.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Symbol</span>.<span class=\"ruby-identifier\">all_symbols</span>.<span class=\"ruby-identifier\">size</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["allocate","Class","Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>&#39;s class and does not\ncall initialize on the new instance. …\n"],["allocation_class_path","ObjectSpace","ObjectSpace.html#method-c-allocation_class_path","(p1)","<p>Returns the class for the given <code>object</code>.\n\n<pre>class A\n  def foo\n    ObjectSpace::trace_object_allocations do ...</pre>\n"],["allocation_generation","ObjectSpace","ObjectSpace.html#method-c-allocation_generation","(p1)","<p>Returns garbage collector generation for the given <code>object</code>.\n\n<pre>class B\n  include ObjectSpace\n\n  def foo\n  ...</pre>\n"],["allocation_method_id","ObjectSpace","ObjectSpace.html#method-c-allocation_method_id","(p1)","<p>Returns the method identifier for the given <code>object</code>.\n\n<pre>class A\n  include ObjectSpace\n\n  def foo\n    trace_object_allocations ...</pre>\n"],["allocation_sourcefile","ObjectSpace","ObjectSpace.html#method-c-allocation_sourcefile","(p1)","<p>Returns the source file origin from the given <code>object</code>.\n<p>See ::trace_object_allocations for more information …\n"],["allocation_sourceline","ObjectSpace","ObjectSpace.html#method-c-allocation_sourceline","(p1)","<p>Returns the original line from source for from the given\n<code>object</code>.\n<p>See ::trace_object_allocations for more …\n"],["allow_addr?","ACL","ACL.html#method-i-allow_addr-3F","(addr)","<p>Allow connections from addrinfo <code>addr</code>?  It must be formatted\nlike Socket#peeraddr:\n\n<pre>[&quot;AF_INET&quot;, 10, &quot;lc630&quot;, ...</pre>\n"],["allow_missing?","Gem::Resolver","Gem/Resolver.html#method-i-allow_missing-3F","(dependency)",""],["allow_missing?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#allow_missing?)\n"],["allow_missing?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>Returns whether this dependency, which has no possible matching\nspecifications, can safely be ignored. …\n"],["allow_socket?","ACL","ACL.html#method-i-allow_socket-3F","(soc)","<p>Allow connections from Socket <code>soc</code>?\n"],["alpn_protocol","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-alpn_protocol","()","<p>Returns the ALPN protocol string that was finally selected by the server\nduring the handshake.\n"],["alt_name_or_x509_entry","Gem::Security","Gem/Security.html#method-c-alt_name_or_x509_entry","(certificate, x509_entry)",""],["alternate=","RSS::XMLStyleSheet","RSS/XMLStyleSheet.html#method-i-alternate-3D","(value)",""],["amjd","Date","Date.html#method-i-amjd","()","<p>Returns the astronomical modified Julian day number.  This is a fractional\nnumber, which is not adjusted …\n"],["amount_constrained","Gem::Resolver","Gem/Resolver.html#method-i-amount_constrained","(dependency)","<p>returns an integer in (-infty, 0] a number closer to 0 means the dependency\nis less constraining\n<p>dependencies …\n"],["ancestor?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-ancestor-3F","(other)","<p>Is there a path from `other` to `self` following edges in the dependency\ngraph? @return true iff there …\n"],["ancestors","Module","Module.html#method-i-ancestors","()","<p>Returns a list of modules included/prepended in <em>mod</em> (including\n<em>mod</em> itself).\n\n<pre>module Mod\n  include Math ...</pre>\n"],["ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes\nwill add their superclass …\n"],["ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-ancestors","()","<p>The ancestors of this class including modules.  Unlike Module#ancestors,\nthis class is not included in …\n"],["ancestors","RDoc::SingleClass","RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors","RDoc::Store","RDoc/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors\nin this store.  If Foo in this …\n"],["angle","Complex","Complex.html#method-i-angle","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["angle","Float","Float.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle","Numeric","Numeric.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle_with","Vector","Vector.html#method-i-angle_with","(v)","<p>Returns an angle with another vector. Result is within the [0…Math::PI].\n\n<pre>Vector[1,0].angle_with(Vector[0,1]) ...</pre>\n"],["any?","Array","Array.html#method-i-any-3F","()","<p>See also Enumerable#any?\n"],["any?","Enumerable","Enumerable.html#method-i-any-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block ever returns …\n"],["any?","Hash","Hash.html#method-i-any-3F","()","<p>See also Enumerable#any?\n"],["any_content","RDoc::Context","RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases,\nrequire, …\n"],["any_to_s","DRb::DRbServer","DRb/DRbServer.html#method-i-any_to_s","(obj)","<p>Coerce an object to a string, providing our own representation if to_s is\nnot defined for the object. …\n"],["api_endpoint","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-api_endpoint","(uri)",""],["api_endpoint","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-api_endpoint","(uri)","<p>Given a source at <code>uri</code>, calculate what hostname to actually\nconnect to query the data for it.\n"],["api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key","()","<p>The API key from the command options or from the user&#39;s configuration.\n"],["api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-api_keys","()","<p>Hash of RubyGems.org and alternate API keys\n"],["apop?","Net::APOP","Net/APOP.html#method-i-apop-3F","()","<p>Always returns true.\n"],["apop?","Net::APOP","Net/APOP.html#method-i-apop-3F","()","<p>Always returns true.\n"],["apop?","Net::POP3","Net/POP3.html#method-i-apop-3F","()","<p>Does this instance use APOP authentication?\n"],["app_script_text","Gem::Installer","Gem/Installer.html#method-i-app_script_text","(bin_file_name)","<p>Return the text for an application file.\n"],["append","Net::IMAP","Net/IMAP.html#method-i-append","(mailbox, message, flags = nil, date_time = nil)","<p>Sends a APPEND command to append the <code>message</code> to the end of the\n<code>mailbox</code>. The optional <code>flags</code> argument is …\n"],["append","OptionParser::List","OptionParser/List.html#method-i-append","(*args)","<p>Appends <code>switch</code> at the tail of the list, and associates short,\nlong and negated long options. Arguments …\n"],["append","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-append","(to, filter)",""],["append_data","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-append_data","(data)","<p>Adds <code>data</code> at the end of the chain of entries\n<p>This is called by WEBrick::HTTPUtils.parse_form_data for …\n"],["append_features","Module","Module.html#method-i-append_features","(p1)","<p>When this module is included in another, Ruby calls\n<code>append_features</code> in this module, passing it the receiving …\n"],["append_features","RSS::Atom::CommonModel","RSS/Atom/CommonModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::ContentModel","RSS/Atom/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::DateConstruct","RSS/Atom/DateConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::PersonConstruct","RSS/Atom/PersonConstruct.html#method-c-append_features","(klass)","<p>Adds attributes for name, uri, and email to the <code>klass</code>\n"],["append_features","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::URIContentModel","RSS/Atom/URIContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::BaseDublinCoreModel","RSS/BaseDublinCoreModel.html#method-i-append_features","(klass)",""],["append_features","RSS::ContentModel","RSS/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ITunesChannelModel","RSS/ITunesChannelModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ITunesItemModel","RSS/ITunesItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ImageFaviconModel","RSS/ImageFaviconModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ImageItemModel","RSS/ImageItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::AtomPersonConstructBase","RSS/Maker/AtomPersonConstructBase.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::AtomTextConstructBase","RSS/Maker/AtomTextConstructBase.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ContentModel","RSS/Maker/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::DublinCoreModel","RSS/Maker/DublinCoreModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ITunesChannelModel","RSS/Maker/ITunesChannelModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ITunesItemModel","RSS/Maker/ITunesItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ImageFaviconModel","RSS/Maker/ImageFaviconModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ImageItemModel","RSS/Maker/ImageItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::SlashModel","RSS/Maker/SlashModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::SyndicationModel","RSS/Maker/SyndicationModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TaxonomyTopicModel","RSS/Maker/TaxonomyTopicModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TaxonomyTopicsModel","RSS/Maker/TaxonomyTopicsModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TrackBackModel","RSS/Maker/TrackBackModel.html#method-c-append_features","(klass)",""],["append_features","RSS::RSS09","RSS/RSS09.html#method-c-append_features","(klass)",""],["append_features","RSS::RSS10","RSS/RSS10.html#method-c-append_features","(klass)",""],["append_features","RSS::SlashModel","RSS/SlashModel.html#method-c-append_features","(klass)",""],["append_features","RSS::SyndicationModel","RSS/SyndicationModel.html#method-c-append_features","(klass)",""],["append_features","RSS::TaxonomyTopicModel","RSS/TaxonomyTopicModel.html#method-c-append_features","(klass)",""],["append_features","RSS::TaxonomyTopicsModel","RSS/TaxonomyTopicsModel.html#method-c-append_features","(klass)",""],["append_features","Singleton","Singleton.html#method-c-append_features","(mod)",""],["append_features","Sync_m","Sync_m.html#method-c-append_features","(cl)",""],["append_features","Sync_m","Sync_m.html#method-c-append_features","(cl)",""],["appendable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-appendable-3F","()","<p>Returns <code>true</code> if the APPE command may be applied to the file.\n"],["apply_offset","Time","Time.html#method-c-apply_offset","(year, mon, day, hour, min, sec, off)",""],["approximate_recommendation","Gem::Version","Gem/Version.html#method-i-approximate_recommendation","()","<p>A recommended version for use with a ~&gt; Requirement.\n"],["aref","RDoc::Alias","RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::ClassModule","RDoc/ClassModule.html#method-i-aref","()","<p>HTML fragment reference for this module or class.  See\nRDoc::NormalClass#aref and RDoc::NormalModule#aref …\n"],["aref","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is &#39;method&#39;.\n"],["aref_prefix","RDoc::Attr","RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["arg","Complex","Complex.html#method-i-arg","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["arg","Float","Float.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg","Numeric","Numeric.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arglists","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method&#39;s …\n"],["args","NoMethodError","NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["arguments","Gem::Command","Gem/Command.html#method-i-arguments","()","<p>Override to provide details of the arguments a command takes.  It should\nreturn a left-justified string, …\n"],["argv","ARGF","ARGF.html#method-i-argv","()","<p>Returns the <code>ARGV</code> array, which contains the arguments passed to\nyour script, one per element.\n<p>For example: …\n"],["argv0","Process","Process.html#method-c-argv0","()","<p>Returns the name of the script being executed.  The value is not affected\nby assigning a new value to …\n"],["arity","Method","Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["arity","Proc","Proc.html#method-i-arity","()","<p>Returns the number of mandatory arguments. If the block is declared to take\nno arguments, returns 0. …\n"],["arity","UnboundMethod","UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["array","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-c-array","(p1, p2)","<p>Returns Ruby object wrapping OLE variant whose variant type is VT_ARRAY.\nThe first argument should be …\n"],["array_attributes","Gem::Specification","Gem/Specification.html#method-c-array_attributes","()","<p>Return the list of all array-oriented instance variables.\n"],["as_json","BigDecimal","BigDecimal.html#method-i-as_json","(*)","<p>Marshal the object to JSON.\n<p>method used for JSON marshalling support.\n"],["as_json","Complex","Complex.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Date","Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","DateTime","DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Exception","Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","JSON::GenericObject","JSON/GenericObject.html#method-i-as_json","(*)",""],["as_json","OpenStruct","OpenStruct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Range","Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Rational","Rational.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Regexp","Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Struct","Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Symbol","Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Time","Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["ascend","Pathname","Pathname.html#method-i-ascend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in ascending order. …\n"],["ascii_compatible?","Encoding","Encoding.html#method-i-ascii_compatible-3F","()","<p>Returns whether ASCII-compatible or not.\n\n<pre>Encoding::UTF_8.ascii_compatible?     #=&gt; true\nEncoding::UTF_16BE.ascii_compatible? ...</pre>\n"],["ascii_only?","String","String.html#method-i-ascii_only-3F","()","<p>Returns true for a string which has only ASCII characters.\n\n<pre>&quot;abc&quot;.force_encoding(&quot;UTF-8&quot;).ascii_only?  ...</pre>\n"],["asciicompat_encoding","Encoding::Converter","Encoding/Converter.html#method-c-asciicompat_encoding","(p1)","<p>Returns the corresponding ASCII compatible encoding.\n<p>Returns nil if the argument is an ASCII compatible …\n"],["asctime","Date","Date.html#method-i-asctime","()","<p>Returns a string in asctime(3) format (but without “n0” at the end).  This\nmethod is equivalent …\n"],["asctime","Time","Time.html#method-i-asctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\nTime.now.ctime ...</pre>\n"],["asin","CMath","CMath.html#method-i-asin","(z)","<p>Returns the arc sine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">asin</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.6662394324925153+1.0612750619050355i)</span>\n</pre>\n"],["asin","CMath","CMath.html#method-c-asin","(z)","<p>Returns the arc sine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">asin</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.6662394324925153+1.0612750619050355i)</span>\n</pre>\n"],["asin","Math","Math.html#method-c-asin","(p1)","<p>Computes the arc sine of <code>x</code>. Returns -PI/2..PI/2.\n<p>Domain: [-1, -1]\n<p>Codomain: [-PI/2, PI/2]\n"],["asinh","CMath","CMath.html#method-c-asinh","(z)","<p>returns the inverse hyperbolic sine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">asinh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0612750619050357+0.6662394324925153i)</span>\n</pre>\n"],["asinh","CMath","CMath.html#method-i-asinh","(z)","<p>returns the inverse hyperbolic sine of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">asinh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0612750619050357+0.6662394324925153i)</span>\n</pre>\n"],["asinh","Math","Math.html#method-c-asinh","(p1)","<p>Computes the inverse hyperbolic sine of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY …\n"],["ask","Gem::MockGemUi","Gem/MockGemUi.html#method-i-ask","(question)",""],["ask","Gem::StreamUI","Gem/StreamUI.html#method-i-ask","(question)","<p>Ask a question.  Returns an answer if connected to a tty, nil otherwise.\n"],["ask","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask","(question)","<p>Asks a <code>question</code> and returns the answer.\n"],["ask_for_password","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password","(question)","<p>Ask for a password. Does not echo response to terminal.\n"],["ask_for_password","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_for_password","(prompt)","<p>Asks for a password with a <code>prompt</code>\n"],["ask_if_ok","Gem::TestCase","Gem/TestCase.html#method-i-ask_if_ok","(spec)",""],["ask_yes_no","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_yes_no","(question, default=nil)","<p>Ask a question.  Returns a true for yes, false for no.  If not connected to\na tty, raises an exception …\n"],["ask_yes_no","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_yes_no","(question, default = nil)","<p>Asks a yes or no <code>question</code>.  Returns true for yes, false for\nno.\n"],["asn1_flag","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-asn1_flag","()","<p>Returns the flags set on the group.\n<p>See also #asn1_flag=.\n"],["asn1_flag=","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-asn1_flag-3D","(p1)","<p>Sets flags on the group. The flag value is used to determine how to encode\nthe group: encode explicit …\n"],["assert_activate","Gem::TestCase","Gem/TestCase.html#method-i-assert_activate","(expected, *specs)",""],["assert_contains_make_command","Gem::TestCase","Gem/TestCase.html#method-i-assert_contains_make_command","(target, output, msg = nil)",""],["assert_directory","RDoc::TestCase","RDoc/TestCase.html#method-i-assert_directory","(path)","<p>Asserts <code>path</code> is a directory\n"],["assert_file","RDoc::TestCase","RDoc/TestCase.html#method-i-assert_file","(path)","<p>Asserts <code>path</code> is a file\n"],["assert_headers_equal","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-assert_headers_equal","(expected, actual)",""],["assert_path_exists","Gem::TestCase","Gem/TestCase.html#method-i-assert_path_exists","(path, msg = nil)","<p>TODO: move to minitest\n"],["asset","RDoc::Servlet","RDoc/Servlet.html#method-i-asset","(generator_name, req, res)","<p>Serves the asset at the path in <code>req</code> for\n<code>generator_name</code> via <code>res</code>.\n"],["assign_names","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-assign_names","(members)","<p>Set the names of the <code>members</code> in this C struct\n"],["assoc","Array","Array.html#method-i-assoc","(p1)","<p>Searches through an array whose elements are also arrays comparing\n<code>obj</code> with the first element of each …\n"],["assoc","ENV","ENV.html#method-c-assoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>name</code> or <code>nil</code> if the name cannot …\n"],["assoc","Hash","Hash.html#method-i-assoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the key using\n<code>==</code>. Returns the key-value pair (two elements …\n"],["at","Array","Array.html#method-i-at","(p1)","<p>Returns the element at <code>index</code>. A negative index counts from the\nend of <code>self</code>. Returns <code>nil</code> if the index …\n"],["at","Gem::Installer","Gem/Installer.html#method-c-at","(path, options = {})","<p>Construct an installer object for the gem file located at <code>path</code>\n"],["at","Time","Time.html#method-c-at","(p1, p2 = v2)","<p>Creates a new Time object with the value given by <code>time</code>, the\ngiven number of <code>seconds_with_frac</code>, or <code>seconds</code> …\n"],["at_exit","Kernel","Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds\nit at the point of call) and registers it for execution …\n"],["atan","BigMath","BigMath.html#method-i-atan","(x, prec)","<p>Computes the arctangent of <code>decimal</code> to the specified number of\ndigits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> …\n"],["atan","CMath","CMath.html#method-i-atan","(z)","<p>Returns the arc tangent of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">atan</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0172219678978514+0.4023594781085251i)</span>\n</pre>\n"],["atan","CMath","CMath.html#method-c-atan","(z)","<p>Returns the arc tangent of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">atan</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0172219678978514+0.4023594781085251i)</span>\n</pre>\n"],["atan","Math","Math.html#method-c-atan","(p1)","<p>Computes the arc tangent of <code>x</code>. Returns -PI/2..PI/2.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-PI/2, PI/2 …\n"],["atan2","CMath","CMath.html#method-i-atan2","(y,x)","<p>returns the arc tangent of <code>y</code> divided by <code>x</code> using\nthe signs of <code>y</code> and <code>x</code> to determine the quadrant\n\n<pre>CMath.atan2(1 ...</pre>\n"],["atan2","CMath","CMath.html#method-c-atan2","(y,x)","<p>returns the arc tangent of <code>y</code> divided by <code>x</code> using\nthe signs of <code>y</code> and <code>x</code> to determine the quadrant\n\n<pre>CMath.atan2(1 ...</pre>\n"],["atan2","Math","Math.html#method-c-atan2","(p1, p2)","<p>Computes the arc tangent given <code>y</code> and <code>x</code>. Returns a\nFloat in the range -PI..PI. Return value is a angle …\n"],["atanh","CMath","CMath.html#method-c-atanh","(z)","<p>returns the inverse hyperbolic tangent of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">atanh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.4023594781085251+1.0172219678978514i)</span>\n</pre>\n"],["atanh","CMath","CMath.html#method-i-atanh","(z)","<p>returns the inverse hyperbolic tangent of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">atanh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.4023594781085251+1.0172219678978514i)</span>\n</pre>\n"],["atanh","Math","Math.html#method-c-atanh","(p1)","<p>Computes the inverse hyperbolic tangent of <code>x</code>.\n<p>Domain: (-1, 1)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["atime","File","File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object).\n<p><em>file_name</em> can be an IO object.\n\n<pre>File.atime(&quot;testfile&quot;) ...</pre>\n"],["atime","File","File.html#method-i-atime","()","<p>Returns the last access time (a <code>Time</code> object)\n\n<pre>for &lt;i&gt;file&lt;/i&gt;, or epoch if &lt;i&gt;file&lt;/i&gt; has not been accessed. ...</pre>\n"],["atime","File::Stat","File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class\n<code>Time</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["atime","Pathname","Pathname.html#method-i-atime","()","<p>Returns the last access time for the file.\n<p>See File.atime.\n"],["atom_validate","RSS::Atom::DateConstruct","RSS/Atom/DateConstruct.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)","<p>Raises NotAvailableValueError if element content is nil\n"],["atom_validate","RSS::Atom::Entry","RSS/Atom/Entry.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)",""],["atom_validate","RSS::Atom::Feed","RSS/Atom/Feed.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)",""],["atom_validate","RSS::Atom::Feed::Entry","RSS/Atom/Feed/Entry.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)",""],["atom_validate","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)","<p>Raises a MissingAttributeError, NotAvailableValueError, MissingTagError or\nNotExpectedTagError if the …\n"],["atom_validate","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)","<p>Raises a MissingTagError or NotExpectedTagError if the element is not\nproperly formatted.\n"],["attempt_to_activate","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate","()","<p>Attempts to activate the current {#possibility} @return [void]\n"],["attempt_to_activate_existing_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate_existing_spec","(existing_node)","<p>Attempts to activate the current {#possibility} (given that it has already\nbeen activated) @return [void] …\n"],["attempt_to_activate_new_spec","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate_new_spec","()","<p>Attempts to activate the current {#possibility} (given that it hasn&#39;t\nalready been activated) @return …\n"],["attempt_to_swap_possibility","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-attempt_to_swap_possibility","()","<p>Attempts to swp the current {#possibility} with the already-activated spec\nwith the given name @return …\n"],["attlistdecl","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-attlistdecl","(element, pairs, contents)","<p>If a doctype includes an ATTLIST declaration, it will cause this method to\nbe called.  The content is …\n"],["attlistdecl","REXML::StreamListener","REXML/StreamListener.html#method-i-attlistdecl","(element_name, attributes, raw_content)","<p>If a doctype includes an ATTLIST declaration, it will cause this method to\nbe called.  The content is …\n"],["attlistdecl?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-attlistdecl-3F","()","<p>Content: [ String text ]\n"],["attr","Module","Module.html#method-i-attr","(*args)",""],["attr_accessor","Module","Module.html#method-i-attr_accessor","(*args)","<p>Defines a named attribute for this module, where the name is\n<em>symbol.</em><code>id2name</code>, creating an instance variable …\n"],["attr_reader","Module","Module.html#method-i-attr_reader","(*args)","<p>Creates instance variables and corresponding methods that return the value\nof each instance variable. …\n"],["attr_writer","Module","Module.html#method-i-attr_writer","(*args)","<p>Creates an accessor method to allow assignment to the attribute\n<em>symbol</em><code>.id2name</code>. String arguments are …\n"],["attribute","REXML::Element","REXML/Element.html#method-i-attribute","( name, namespace=nil )",""],["attribute","REXML::QuickPath","REXML/QuickPath.html#method-c-attribute","( name )",""],["attribute_names","Gem::Specification","Gem/Specification.html#method-c-attribute_names","()","<p>Return the list of all instance variables.\n"],["attribute_of","REXML::DocType","REXML/DocType.html#method-i-attribute_of","(element, attribute)",""],["attributes","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-attributes","()",""],["attributes","RDoc::Store","RDoc/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["attributes","URI::LDAP","URI/LDAP.html#method-i-attributes","()","<p>returns attributes.\n"],["attributes=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-attributes-3D","(p1)",""],["attributes=","URI::LDAP","URI/LDAP.html#method-i-attributes-3D","(val)","<p>setter for attributes <code>val</code>\n"],["attributes_of","REXML::DocType","REXML/DocType.html#method-i-attributes_of","(element)",""],["auth_capable?","Net::SMTP","Net/SMTP.html#method-i-auth_capable-3F","(type)",""],["auth_cram_md5","Net::SMTP","Net/SMTP.html#method-i-auth_cram_md5","(user, secret)",""],["auth_data=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_data-3D","(p1)","<p>Sets the cipher&#39;s additional authenticated data. This field must be set\nwhen using AEAD cipher modes …\n"],["auth_login","Net::SMTP","Net/SMTP.html#method-i-auth_login","(user, secret)",""],["auth_method","Net::SMTP","Net/SMTP.html#method-i-auth_method","(type)",""],["auth_only","Net::POP3","Net/POP3.html#method-i-auth_only","(account, password)","<p>Starts a pop3 session, attempts authentication, and quits. This method must\nnot be called while POP3 …\n"],["auth_only","Net::POP3","Net/POP3.html#method-c-auth_only","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Opens a POP3 session, attempts authentication, and quits.\n<p>This method raises POPAuthenticationError if …\n"],["auth_plain","Net::SMTP","Net/SMTP.html#method-i-auth_plain","(user, secret)",""],["auth_tag","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_tag","(p1 = v1)","<p>Gets the authentication tag generated by Authenticated Encryption Cipher\nmodes (GCM for example). This …\n"],["auth_tag=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_tag-3D","(p1)","<p>Sets the authentication tag to verify the contents of the ciphertext. The\ntag must be set after calling …\n"],["auth_tag_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-auth_tag_len-3D","(p1)","<p>Sets the length of the authentication tag to be generated or to be given\nfor AEAD ciphers that requires …\n"],["authenticate","Net::IMAP","Net/IMAP.html#method-i-authenticate","(auth_type, *args)","<p>Sends an AUTHENTICATE command to authenticate the client. The\n<code>auth_type</code> parameter is a string that represents …\n"],["authenticate","Net::SMTP","Net/SMTP.html#method-i-authenticate","(user, secret, authtype = DEFAULT_AUTH_TYPE)",""],["authenticate","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["authenticate","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["authenticated?","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-authenticated-3F","()","<p>Indicated whether this Cipher instance uses an Authenticated Encryption\nmode.\n"],["author","Gem::Specification","Gem/Specification.html#method-i-author","()","<p>Singular reader for #authors.  Returns the first author in the list\n"],["author=","Gem::Specification","Gem/Specification.html#method-i-author-3D","(o)","<p>Singular writer for #authors\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">author</span> = <span class=\"ruby-string\">&#39;John Jones&#39;</span>\n</pre>\n"],["authors","Gem::Specification","Gem/Specification.html#method-i-authors","()","<p>The list of author names who wrote this gem.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">authors</span> = [<span class=\"ruby-string\">&#39;Chad Fowler&#39;</span>, <span class=\"ruby-string\">&#39;Jim Weirich&#39;</span>, <span class=\"ruby-string\">&#39;Rich Kilmer&#39;</span>]\n</pre>\n"],["authors=","Gem::Specification","Gem/Specification.html#method-i-authors-3D","(value)","<p>Sets the list of authors, ensuring it is an array.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">authors</span> = [<span class=\"ruby-string\">&#39;John Jones&#39;</span>, <span class=\"ruby-string\">&#39;Mary Smith&#39;</span>]\n</pre>\n"],["autoclose=","IO","IO.html#method-i-autoclose-3D","(p1)","<p>Sets auto-close flag.\n\n<pre>f = open(&quot;/dev/null&quot;)\nIO.for_fd(f.fileno)\n# ...\nf.gets # may cause IOError\n\nf = ...</pre>\n"],["autoclose?","IO","IO.html#method-i-autoclose-3F","()","<p>Returns <code>true</code> if the underlying file descriptor of <em>ios</em>\nwill be closed automatically at its finalization, …\n"],["autoload","Kernel","Kernel.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload","Module","Module.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload?","Kernel","Kernel.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code>.\n\n<pre>autoload(:B, &quot;b&quot;)\nautoload?(:B)      ...</pre>\n"],["autoload?","Module","Module.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code> in the namespace of <em>mod</em>.\n\n<pre>module A\nend ...</pre>\n"],["avail_in","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_in","()","<p>Returns bytes of data in the input buffer. Normally, returns 0.\n"],["avail_out","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_out","()","<p>Returns number of bytes of free spaces in output buffer.  Because the free\nspace is allocated automatically, …\n"],["avail_out=","Zlib::ZStream","Zlib/ZStream.html#method-i-avail_out-3D","(p1)","<p>Allocates <code>size</code> bytes of free space in the output buffer. If\nthere are more than <code>size</code> bytes already in …\n"],["available_specs","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-available_specs","(type)","<p>Returns a list of gems available for each source in Gem::sources.\n<p><code>type</code> can be one of 3 values: :released …\n"],["available_tags","RSS::BaseListener","RSS/BaseListener.html#method-c-available_tags","(uri)","<p>return the tag_names for setters associated with uri\n"],["axe","REXML::QuickPath","REXML/QuickPath.html#method-c-axe","( elements, axe_name, rest )",""],["b","String","String.html#method-i-b","()","<p>Returns a copied string whose encoding is ASCII-8BIT.\n"],["backtrace","Exception","Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an\narray of strings, each containing …\n"],["backtrace","Gem::ConfigFile","Gem/ConfigFile.html#method-i-backtrace","()","<p>True if the backtrace option has been specified, or debug is on.\n"],["backtrace","Gem::StreamUI","Gem/StreamUI.html#method-i-backtrace","(exception)","<p>Prints a formatted backtrace to the errors stream if backtraces are\nenabled.\n"],["backtrace","Thread","Thread.html#method-i-backtrace","(*args)","<p>Returns the current backtrace of the target thread.\n"],["backtrace_locations","Exception","Exception.html#method-i-backtrace_locations","()","<p>Returns any backtrace associated with the exception. This method is similar\nto Exception#backtrace, but …\n"],["backtrace_locations","Thread","Thread.html#method-i-backtrace_locations","(*args)","<p>Returns the execution stack for the target thread—an array containing\nbacktrace location objects.\n<p>See …\n"],["backtracking!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-backtracking-21","()",""],["banner","OptionParser","OptionParser.html#method-i-banner","()","<p>Heading banner preceding summary.\n"],["base","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-base","(href = \"\")","<p>Generate a Document Base URI element as a String.\n<p><code>href</code> can either by a string, giving the base URL for …\n"],["base","OptionParser","OptionParser.html#method-i-base","()","<p>Subject of #on_tail.\n"],["base64","Random::Formatter","Random/Formatter.html#method-i-base64","(n=nil)","<p>SecureRandom.base64 generates a random base64 string.\n<p>The argument <em>n</em> specifies the length, in bytes, of …\n"],["base64_encode","Net::SMTP","Net/SMTP.html#method-i-base64_encode","(str)",""],["base64digest","Digest::Class","Digest/Class.html#method-c-base64digest","(str, *args)","<p>Returns the base64 encoded hash value of a given <em>string</em>.  The\nreturn value is properly padded with &#39;=&#39; …\n"],["base64digest","Digest::Instance","Digest/Instance.html#method-i-base64digest","(str = nil)","<p>If none is given, returns the resulting hash value of the digest in a\nbase64 encoded form, keeping the …\n"],["base64digest!","Digest::Instance","Digest/Instance.html#method-i-base64digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["base_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-base_dir","()","<p>Returns the full path to the base gem directory.\n<p>eg: /usr/local/lib/ruby/gems/1.8\n"],["base_dir","Gem::Specification","Gem/Specification.html#method-i-base_dir","()",""],["base_label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-base_label","()","<p>Returns the base label of this instruction sequence.\n<p>For example, using irb:\n\n<pre>iseq = RubyVM::InstructionSequence.compile(&#39;num ...</pre>\n"],["base_label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-base_label","()","<p>Returns the base label of this frame.\n<p>Usually same as #label, without decoration.\n"],["base_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["basename","File","File.html#method-c-basename","(*args)","<p>Returns the last component of the filename given in <em>file_name</em>,\nwhich can be formed using both <code>File::SEPARATOR</code> …\n"],["basename","Pathname","Pathname.html#method-i-basename","(p1 = v1)","<p>Returns the last component of the path.\n<p>See File.basename.\n"],["basic","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-basic","()","<p>Returns a BasicResponse for this response\n"],["basic_auth","WEBrick::HTTPAuth","WEBrick/HTTPAuth.html#method-i-basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a request.  When\ncalled with a request <code>req</code>, response …\n"],["basic_quote_characters","Readline","Readline.html#method-c-basic_quote_characters","()","<p>Gets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_quote_characters=","Readline","Readline.html#method-c-basic_quote_characters-3D","(p1)","<p>Sets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_word_break_characters","Readline","Readline.html#method-c-basic_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for the\ncompleter routine.\n<p>Raises …\n"],["basic_word_break_characters=","Readline","Readline.html#method-c-basic_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for the\ncompleter routine. The default …\n"],["basis","Vector","Vector.html#method-c-basis","(size:, index:)","<p>Returns a standard basis <code>n</code>-vector, where k is the index.\n\n<pre>Vector.basis(size:, index:) # =&gt; Vector[0, 1, ...</pre>\n"],["beep","IO","IO.html#method-i-beep","()",""],["before_resolution","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-before_resolution","()","<p>Called before resolution begins.\n<p>@return [void]\n"],["before_running_rdoc","RDoc::Task","RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc\ngenerator. It is allowed …\n"],["before_running_rdoc","RDoc::Task","RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc\ngenerator. It is allowed …\n"],["begin","MatchData","MatchData.html#method-i-begin","(p1)","<p>Returns the offset of the start of the <em>n</em>th element of the match\narray in the string. <em>n</em> can be a string …\n"],["begin","Range","Range.html#method-i-begin","()","<p>Returns the object that defines the beginning of the range.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">begin</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n</pre>\n"],["begin_adding","RDoc::Stats","RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["begin_transport","Net::HTTP","Net/HTTP.html#method-i-begin_transport","(req)",""],["beginning_of_line?","StringScanner","StringScanner.html#method-i-beginning_of_line-3F","()","<p>Returns <code>true</code> iff the scan pointer is at the beginning of the\nline.\n\n<pre>s = StringScanner.new(&quot;test\\ntest\\n&quot;) ...</pre>\n"],["begins?","Gem::Command","Gem/Command.html#method-i-begins-3F","(long, short)","<p>True if <code>long</code> begins with the characters from\n<code>short</code>.\n"],["benchmark","Benchmark","Benchmark.html#method-i-benchmark","(caption = \"\", label_width = nil, format = nil, *labels)","<p>Invokes the block with a Benchmark::Report object, which may be used to\ncollect and report on the results …\n"],["benchmark","Benchmark","Benchmark.html#method-c-benchmark","(caption = \"\", label_width = nil, format = nil, *labels)","<p>Invokes the block with a Benchmark::Report object, which may be used to\ncollect and report on the results …\n"],["between?","Comparable","Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>min</em> is less than zero or if <em>anObject</em>\n<code>&lt;=&gt;</code> <em>max</em> is greater than zero, …\n"],["bin_dir","Gem::Specification","Gem/Specification.html#method-i-bin_dir","()","<p>Returns the full path to installed gem&#39;s bin directory.\n<p>NOTE: do not confuse this with <code>bindir</code>, which …\n"],["bin_file","Gem::Specification","Gem/Specification.html#method-i-bin_file","(name)","<p>Returns the full path to an executable named <code>name</code> in this gem.\n"],["bin_for_find","Rinda::TupleBag","Rinda/TupleBag.html#method-i-bin_for_find","(template)",""],["bin_key","Rinda::TupleBag","Rinda/TupleBag.html#method-i-bin_key","(tuple)",""],["bin_path","Gem","Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the\n<code>exec_name</code> is not given, the gem&#39;s default_executable …\n"],["binary=","Net::FTP","Net/FTP.html#method-i-binary-3D","(newmode)","<p>A setter to toggle transfers in binary mode. <code>newmode</code> is either\n<code>true</code> or <code>false</code>\n"],["binary?","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-binary-3F","(string)",""],["binary?","RDoc::Parser","RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has\ncontent that an RDoc …\n"],["binary_mode","Gem","Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["bind","Addrinfo","Addrinfo.html#method-i-bind","()","<p>creates a socket bound to self.\n<p>If a block is given, it is called with the socket and the value of the …\n"],["bind","Exception2MessageMapper","Exception2MessageMapper.html#method-i-bind","(cl)",""],["bind","Fiddle::Importer","Fiddle/Importer.html#method-i-bind","(signature, *opts, &blk)","<p>Creates a global method from the given C <code>signature</code> using the\ngiven <code>opts</code> as bind parameters with the given …\n"],["bind","Socket","Socket.html#method-i-bind","(p1)","<p>Binds to the given local address.\n<p>Parameter\n<p><code>local_sockaddr</code> - the <code>struct</code> sockaddr contained in\na string …\n"],["bind","UDPSocket","UDPSocket.html#method-i-bind","(p1, p2)","<p>Binds <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n\n<pre>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, 4913)\nu1.send &quot;message-to-self&quot;, ...</pre>\n"],["bind","UnboundMethod","UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If <code>Klass</code> was the class\nfrom which <em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code>\nmust be …\n"],["bind_function","Fiddle::Importer","Fiddle/Importer.html#method-i-bind_function","(name, ctype, argtype, call_type = nil, &block)","<p>Returns a new closure wrapper for the <code>name</code> function.\n<p><code>ctype</code> is the return type of the function\n<p><code>argtype</code> is …\n"],["binding","Kernel","Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method\nbindings at the point of call. This object …\n"],["binding","Proc","Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>. Note that\n<code>Kernel#eval</code> accepts either a <code>Proc</code> or a\n<code>Binding</code> object …\n"],["binding","TracePoint","TracePoint.html#method-i-binding","()","<p>Return the generated binding object from event\n"],["bindir","Gem","Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["binmode","ARGF","ARGF.html#method-i-binmode","()","<p>Puts <code>ARGF</code> into binary mode. Once a stream is in binary mode,\nit cannot be reset to non-binary mode.  …\n"],["binmode","IO","IO.html#method-i-binmode","()","<p>Puts <em>ios</em> into binary mode. Once a stream is in binary mode, it\ncannot be reset to nonbinary mode.\n<p>newline …\n"],["binmode","StringIO","StringIO.html#method-i-binmode","()",""],["binmode?","ARGF","ARGF.html#method-i-binmode-3F","()","<p>Returns true if <code>ARGF</code> is being read in binary mode; false\notherwise. To enable binary mode use <code>ARGF.binmode</code> …\n"],["binmode?","IO","IO.html#method-i-binmode-3F","()","<p>Returns <code>true</code> if <em>ios</em> is binmode.\n"],["binread","IO","IO.html#method-c-binread","(p1, p2 = v2, p3 = v3)","<p>Opens the file, optionally seeks to the given <em>offset</em>, then returns\n<em>length</em> bytes (defaulting to the rest …\n"],["binread","Pathname","Pathname.html#method-i-binread","(p1 = v1, p2 = v2)","<p>Returns all the bytes from the file, or the first <code>N</code> if\nspecified.\n<p>See IO.binread.\n"],["binwrite","IO","IO.html#method-c-binwrite","(*args)","<p>Same as <code>IO.write</code> except opening the file in binary mode and\nASCII-8BIT encoding (“wb:ASCII-8BIT”). …\n"],["binwrite","Pathname","Pathname.html#method-i-binwrite","(p1 = v1, p2 = v2, p3 = v3)","<p>Writes <code>contents</code> to the file, opening it in binary mode.\n<p>See IO.binwrite.\n"],["birthtime","File","File.html#method-c-birthtime","(p1)","<p>Returns the birth time for the named file.\n<p><em>file_name</em> can be an IO object.\n\n<pre>File.birthtime(&quot;testfile&quot;)   ...</pre>\n"],["birthtime","File","File.html#method-i-birthtime","()","<p>Returns the birth time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">birthtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n<p>If the …\n"],["birthtime","File::Stat","File/Stat.html#method-i-birthtime","()","<p>Returns the birth time for <em>stat</em>.\n<p>If the platform doesn&#39;t have birthtime, raises NotImplementedError …\n"],["birthtime","Pathname","Pathname.html#method-i-birthtime","()","<p>Returns the birth time for the file. If the platform doesn&#39;t have\nbirthtime, raises NotImplementedError …\n"],["bit_length","Integer","Integer.html#method-i-bit_length","()","<p>Returns the number of bits of the value of <em>int</em>.\n<p>“the number of bits” means that the bit position …\n"],["bit_length","Integer","Integer.html#method-i-bit_length","()","<p>Returns the number of bits of the value of <em>int</em>.\n<p>“the number of bits” means that the bit position …\n"],["bit_set?","OpenSSL::BN","OpenSSL/BN.html#method-i-bit_set-3F","(p1)","<p>Returns boolean of whether <code>bit</code> is set. Bitwise operations for\nopenssl BIGNUMs.\n"],["blank_line","RDoc::TestCase","RDoc/TestCase.html#method-i-blank_line","()","<p>Shortcut for RDoc::Markup::BlankLine.new\n"],["blinding_off!","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-blinding_off-21","()",""],["blinding_on!","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-blinding_on-21","()",""],["blksize","File::Stat","File/Stat.html#method-i-blksize","()","<p>Returns the native file system&#39;s block size. Will return\n<code>nil</code> on platforms that don&#39;t support …\n"],["block","RDoc::TestCase","RDoc/TestCase.html#method-i-block","(*contents)","<p>Shortcut for RDoc::Markup::BlockQuote.new with <code>contents</code>\n"],["block_given?","Kernel","Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["block_length","Digest::Base","Digest/Base.html#method-i-block_length","()","<p>Return the block length of the digest in bytes.\n"],["block_length","Digest::Instance","Digest/Instance.html#method-i-block_length","()","<p>Returns the block length of the digest.\n<p>This method is overridden by each implementation subclass.\n"],["block_length","OpenSSL::Digest","OpenSSL/Digest.html#method-i-block_length","()","<p>Returns the block length of the digest algorithm, i.e. the length in bytes\nof an individual block. Most …\n"],["block_output_synchronize","Shell::ProcessController","Shell/ProcessController.html#method-c-block_output_synchronize","(&b)",""],["block_params=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the Ruby parser: remove outer\nparentheses, etc.\n"],["block_scanf","IO","IO.html#method-i-block_scanf","(str)",""],["block_scanf","String","String.html#method-i-block_scanf","(fstr)","<p>Scans the current string until the match is exhausted yielding each match\nas it is encountered in the …\n"],["block_size","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-block_size","()","<p>Returns the size in bytes of the blocks on which this Cipher operates on.\n"],["blockdev?","File","File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n<p><em>file_name</em> can be an IO object.\n"],["blockdev?","File::Stat","File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t …\n"],["blockdev?","FileTest","FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n<p><em>file_name</em> can be an IO object.\n"],["blockdev?","Pathname","Pathname.html#method-i-blockdev-3F","()","<p>See FileTest.blockdev?.\n"],["blockquote","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-blockquote","(cite = {})","<p>Generate a BlockQuote element as a string.\n<p><code>cite</code> can either be a string, give the URI for the source of …\n"],["blocks","File::Stat","File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or\n<code>nil</code> if the operating system …\n"],["bm","Benchmark","Benchmark.html#method-i-bm","(label_width = 0, *labels)","<p>A simple interface to the #benchmark method, #bm generates sequential\nreports with labels. <code>label_width</code> …\n"],["bm","Benchmark","Benchmark.html#method-c-bm","(label_width = 0, *labels)","<p>A simple interface to the #benchmark method, #bm generates sequential\nreports with labels. <code>label_width</code> …\n"],["bmbm","Benchmark","Benchmark.html#method-i-bmbm","(width = 0)","<p>Sometimes benchmark results are skewed because code executed earlier\nencounters different garbage collection …\n"],["bmbm","Benchmark","Benchmark.html#method-c-bmbm","(width = 0)","<p>Sometimes benchmark results are skewed because code executed earlier\nencounters different garbage collection …\n"],["body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body","()","<p>Returns the full entity body.\n<p>Calling this method a second or subsequent time will return the string\nalready …\n"],["body","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-body","()","<p>Returns the request body.\n"],["body=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body-3D","(str)",""],["body=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Because it may be necessary to modify the body, Eg, decompression this\nmethod facilitates that.\n"],["body_exist?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_exist-3F","()",""],["body_permitted?","Net::HTTPResponse","Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_stream=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)",""],["bool","Socket::Option","Socket/Option.html#method-c-bool","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains boolean as data.\nActually 0 or 1 as int is used.\n\n<pre>require ...</pre>\n"],["bool","Socket::Option","Socket/Option.html#method-i-bool","()","<p>Returns the data in <em>sockopt</em> as an boolean value.\n\n<pre>sockopt = Socket::Option.int(:INET, :SOCKET, :KEEPALIVE, ...</pre>\n"],["boolean","REXML::Functions","REXML/Functions.html#method-c-boolean","( object=nil )","<p>UNTESTED\n"],["boolean_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-boolean_writer","(name, disp_name=name)",""],["both?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-both-3F","()","<p>Is fetching of local and remote information enabled?\n"],["bottom","IRB::Frame","IRB/Frame.html#method-i-bottom","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the\nfirst frame initialized.\n<p>Raises FrameOverflow …\n"],["bottom","IRB::Frame","IRB/Frame.html#method-c-bottom","(n = 0)","<p>Convenience method for Frame#bottom\n"],["break_on_newline","RDoc::Markdown","RDoc/Markdown.html#method-i-break_on_newline","","<p>Converts all newlines into hard breaks\n"],["break_outmost_groups","PrettyPrint","PrettyPrint.html#method-i-break_outmost_groups","()","<p>Breaks the buffer into lines that are shorter than #maxwidth\n"],["break_points","DEBUGGER__","DEBUGGER__.html#method-c-break_points","()","<p>Returns the list of break points where execution will be stopped.\n<p>See DEBUGGER__ for more usage\n"],["breakable","PrettyPrint","PrettyPrint.html#method-i-breakable","(sep=' ', width=sep.length)","<p>This says “you can break a line here if necessary”, and a\n<code>width</code>-column text <code>sep</code> is inserted …\n"],["breakable","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-breakable","(sep=' ', width=nil)","<p>Appends <code>sep</code> to the text to be output. By default\n<code>sep</code> is &#39; &#39;\n<p><code>width</code> argument is here for compatibility. …\n"],["broadaddr","Socket::Ifaddr","Socket/Ifaddr.html#method-i-broadaddr","()","<p>Returns the broadcast address of <em>ifaddr</em>. nil is returned if the\nflags doesn&#39;t have IFF_BROADCAST …\n"],["broadcast","ConditionVariable","ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["broadcast","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["bsearch","Array","Array.html#method-i-bsearch","()","<p>By using binary search, finds a value from this array which meets the given\ncondition in O(log n) where …\n"],["bsearch","Range","Range.html#method-i-bsearch","()","<p>By using binary search, finds a value in range which meets the given\ncondition in O(log n) where n is …\n"],["bsearch_index","Array","Array.html#method-i-bsearch_index","()","<p>By using binary search, finds an index of a value from this array which\nmeets the given condition in …\n"],["bubblebabble","Digest","Digest.html#method-c-bubblebabble","(p1)","<p>Returns a BubbleBabble encoded version of a given <em>string</em>.\n"],["bubblebabble","Digest::Class","Digest/Class.html#method-c-bubblebabble","(*args)","<p>Returns the BubbleBabble encoded hash value of a given <em>string</em>.\n"],["bubblebabble","Digest::Instance","Digest/Instance.html#method-i-bubblebabble","()","<p>Returns the resulting hash value in a Bubblebabble encoded form.\n"],["build","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-build","(name)",""],["build","Gem::Ext::CmakeBuilder","Gem/Ext/CmakeBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Ext::ConfigureBuilder","Gem/Ext/ConfigureBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Ext::RakeBuilder","Gem/Ext/RakeBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Package","Gem/Package.html#method-i-build","(skip_validation = false)","<p>Builds this package based on the specification set by #spec=\n"],["build","Gem::Package","Gem/Package.html#method-c-build","(spec, skip_validation=false)",""],["build","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-build","(request_set, gem_deps_file, dependencies = nil)","<p>Creates a new Lockfile for the given <code>request_set</code> and\n<code>gem_deps_file</code> location.\n"],["build","Matrix","Matrix.html#method-c-build","(row_count, column_count = row_count)","<p>Creates a matrix of size <code>row_count</code> x\n<code>column_count</code>. It fills the values by calling the given block,\npassing …\n"],["build","REXML::Document","REXML/Document.html#method-i-build","( source )",""],["build","URI::FTP","URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::FTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::Generic","URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See #new\n<p>Description\n"],["build","URI::HTTP","URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Create a new URI::HTTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::LDAP","URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Create a new URI::LDAP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::MailTo","URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::MailTo object from components, with syntax checking.\n<p>Components can be provided …\n"],["build2","URI::Generic","URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See #new\n<p>Description\n"],["build_args","Gem::Command","Gem/Command.html#method-c-build_args","()","<p>Arguments used when building gems\n"],["build_args","Gem::Specification","Gem/Specification.html#method-i-build_args","()","<p>Returns the build_args used to install the gem\n"],["build_args=","Gem::Command","Gem/Command.html#method-c-build_args-3D","(value)",""],["build_eigenvectors","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-build_eigenvectors","()",""],["build_extensions","Gem::Ext::Builder","Gem/Ext/Builder.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files,\nconfigure scripts and rakefiles or …\n"],["build_extensions","Gem::Installer","Gem/Installer.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files,\nconfigure scripts and rakefiles or …\n"],["build_heading","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_heading","(level)","<p>Builds a heading from the token stream\n<p>level &mdash; The level of heading to create\n\n<p>Returns\n"],["build_indices","Gem::Indexer","Gem/Indexer.html#method-i-build_indices","()","<p>Build various indices\n"],["build_info_dir","Gem::Specification","Gem/Specification.html#method-i-build_info_dir","()","<p>Returns the full path to the build info directory\n"],["build_info_file","Gem::Specification","Gem/Specification.html#method-i-build_info_file","()","<p>Returns the full path to the file containing the build information\ngenerated when the gem was installed …\n"],["build_marshal_gemspecs","Gem::Indexer","Gem/Indexer.html#method-i-build_marshal_gemspecs","(specs)","<p>Builds Marshal quick index gemspecs.\n"],["build_message","Gem::MissingSpecError","Gem/MissingSpecError.html#method-i-build_message","()",""],["build_message","Gem::MissingSpecVersionError","Gem/MissingSpecVersionError.html#method-i-build_message","()",""],["build_modern_index","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_index","(index, file, name)","<p>Build a single index for RubyGems 1.2 and newer\n"],["build_modern_indices","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_indices","(specs)","<p>Builds indices for RubyGems 1.2 and newer. Handles full, latest, prerelease\n"],["build_paragraph","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_paragraph","(margin)","<p>Builds a paragraph from the token stream\n<p>margin &mdash; Unused\n\n<p>Returns\n"],["build_path_query","URI::LDAP","URI/LDAP.html#method-i-build_path_query","()","<p>private method to assemble <code>query</code> from <code>attributes</code>,\n<code>scope</code>, <code>filter</code> and <code>extensions</code>.\n"],["build_rake_in","Gem::TestCase","Gem/TestCase.html#method-i-build_rake_in","(good=true)","<p>Allows the proper version of <code>rake</code> to be used for the test.\n"],["build_verbatim","RDoc::TomDoc","RDoc/TomDoc.html#method-i-build_verbatim","(margin)","<p>Builds a verbatim from the token stream.  A verbatim in the Examples\nsection will be marked as in Ruby …\n"],["builtin_curves","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-c-builtin_curves","()","<p>Obtains a list of all predefined curves by the OpenSSL. Curve names are\nreturned as sn.\n<p>See the OpenSSL …\n"],["bump","Gem::Version","Gem/Version.html#method-i-bump","()","<p>Return a new version object where the next to the last revision number is\none greater (e.g., 5.3.1 =&gt; …\n"],["bundled_gem_in_old_ruby?","Gem::Specification","Gem/Specification.html#method-i-bundled_gem_in_old_ruby-3F","()","<p>Used to detect if the gem is bundled in older version of Ruby, but not\ndetectable as default gem (see …\n"],["by_col","CSV::Table","CSV/Table.html#method-i-by_col","()","<p>Returns a duplicate table object, in column mode.  This is handy for\nchaining in a single call without …\n"],["by_col!","CSV::Table","CSV/Table.html#method-i-by_col-21","()","<p>Switches the mode of this table to column mode.  All calls to indexing and\niteration methods will work …\n"],["by_col_or_row","CSV::Table","CSV/Table.html#method-i-by_col_or_row","()","<p>Returns a duplicate table object, in mixed mode.  This is handy for\nchaining in a single call without …\n"],["by_col_or_row!","CSV::Table","CSV/Table.html#method-i-by_col_or_row-21","()","<p>Switches the mode of this table to mixed mode.  All calls to indexing and\niteration methods will use …\n"],["by_id","OpenSSL::Engine","OpenSSL/Engine.html#method-c-by_id","(p1)","<p>Fetch the engine as specified by the <code>id</code> String\n\n<pre>OpenSSL::Engine.by_id(&quot;openssl&quot;)\n =&gt; #&lt;OpenSSL::Engine ...</pre>\n"],["by_row","CSV::Table","CSV/Table.html#method-i-by_row","()","<p>Returns a duplicate table object, in row mode.  This is handy for chaining\nin a single call without changing …\n"],["by_row!","CSV::Table","CSV/Table.html#method-i-by_row-21","()","<p>Switches the mode of this table to row mode.  All calls to indexing and\niteration methods will work with …\n"],["byte","Socket::Option","Socket/Option.html#method-i-byte","()","<p>Returns the data in <em>sockopt</em> as an byte.\n\n<pre>sockopt = Socket::Option.byte(:INET, :SOCKET, :KEEPALIVE, 1)\np ...</pre>\n"],["byte","Socket::Option","Socket/Option.html#method-c-byte","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains a byte as data.\n\n<pre>p Socket::Option.byte(:INET, :SOCKET, ...</pre>\n"],["bytes","ARGF","ARGF.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["bytes","IO","IO.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["bytes","REXML::Child","REXML/Child.html#method-i-bytes","()","<p>This doesn&#39;t yet handle encodings\n"],["bytes","Random","Random.html#method-i-bytes","(p1)","<p>Returns a random binary string containing <code>size</code> bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">random_string</span> = <span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">bytes</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># =&gt; &quot;\\xD7:R\\xAB?\\x83\\xCE\\xFAkO&quot; ...</span>\n</pre>\n"],["bytes","SecureRandom","SecureRandom.html#method-c-bytes","(n)",""],["bytes","String","String.html#method-i-bytes","()","<p>Returns an array of bytes in <em>str</em>.  This is a shorthand for\n<code>str.each_byte.to_a</code>.\n<p>If a block is given, which …\n"],["bytes","StringIO","StringIO.html#method-i-bytes","()","<p>This is a deprecated alias for #each_byte.\n"],["bytes","Zlib::GzipReader","Zlib/GzipReader.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["bytes_read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-bytes_read","()","<p>Number of bytes read out of the tar entry\n"],["bytesize","String","String.html#method-i-bytesize","()","<p>Returns the length of <code>str</code> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;\\x80\\u3042&quot;</span>.<span class=\"ruby-identifier\">bytesize</span>  <span class=\"ruby-comment\">#=&gt; 4</span>\n<span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">bytesize</span>       <span class=\"ruby-comment\">#=&gt; 5</span>\n</pre>\n"],["byteslice","String","String.html#method-i-byteslice","(*args)","<p>Byte Reference—If passed a single <code>Integer</code>, returns a substring\nof one byte at that position. If passed …\n"],["cache","Prime::TrialDivision","Prime/TrialDivision.html#method-i-cache","()","<p>Returns the cached prime numbers.\n"],["cache_dir","Gem::Source","Gem/Source.html#method-i-cache_dir","(uri)","<p>Returns the local directory to write <code>uri</code> to.\n"],["cache_dir","Gem::Specification","Gem/Specification.html#method-i-cache_dir","()","<p>Returns the full path to the cache directory containing this spec&#39;s\ncached gem.\n"],["cache_file","Gem::Specification","Gem/Specification.html#method-i-cache_file","()","<p>Returns the full path to the cached gem for this spec.\n"],["cache_path","RDoc::Store","RDoc/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["cache_update_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-cache_update_path","(uri, path = nil, update = true)",""],["cache_update_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-cache_update_path","(uri, path = nil, update = true)","<p>Downloads <code>uri</code> to <code>path</code> if necessary. If no path is\ngiven, it just passes the data.\n"],["cachesize=","GDBM","GDBM.html#method-i-cachesize-3D","(p1)","<p>Sets the size of the internal bucket cache to <em>size</em>.\n"],["calc_checksum","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-calc_checksum","(header)",""],["calc_indent","RSS::Element","RSS/Element.html#method-i-calc_indent","()","<p>For backward compatibility\n"],["calculate","RDoc::Stats","RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules,\nconstants, attributes and methods. …\n"],["calculate_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-calculate_checksum","(header)",""],["call","Continuation","Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["call","Fiddle::Closure::BlockCaller","Fiddle/Closure/BlockCaller.html#method-i-call","(*args)","<p>Calls the constructed BlockCaller, with <code>args</code>\n<p>For an example see Fiddle::Closure::BlockCaller.new\n"],["call","Fiddle::Function","Fiddle/Function.html#method-i-call","(*args)","<p>Calls the constructed Function, with <code>args</code>. Caller must ensure\nthe underlying function is called in a …\n"],["call","Logger::Formatter","Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call","Method","Method.html#method-i-call","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["call","Proc","Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["call","Syslog::Logger::Formatter","Syslog/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call_seq=","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-call_seq-3D","(call_seq)","<p>Sets the different ways you can call this method.  If an empty\n<code>call_seq</code> is given nil is assumed.\n<p>See also …\n"],["callcc","Kernel","Kernel.html#method-i-callcc","()","<p>Generates a Continuation object, which it passes to the associated block.\nYou need to <code>require &#39;continuation&#39;</code> …\n"],["callee_id","TracePoint","TracePoint.html#method-i-callee_id","()","<p>Return the called name of the method being called\n"],["caller","Kernel","Kernel.html#method-i-caller","(*args)","<p>Returns the current execution stack—an array containing strings in the form\n<code>file:line</code> or <code>file:line:</code> …\n"],["caller_locations","Kernel","Kernel.html#method-i-caller_locations","(*args)","<p>Returns the current execution stack—an array containing backtrace location\nobjects.\n<p>See Thread::Backtrace::Location …\n"],["can_parse","RDoc::Parser","RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["can_parse_by_name","RDoc::Parser","RDoc/Parser.html#method-c-can_parse_by_name","(file_name)","<p>Returns a parser that can handle the extension for <code>file_name</code>. \nThis does not depend upon the file being …\n"],["cancel","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-cancel","()","<p>Marks this TupleEntry as canceled.\n"],["cancel","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-cancel","()",""],["cancel","WEBrick","WEBrick.html#method-i-cancel","(thread, id)","<p>Cancels the timeout handler <code>id</code>\n"],["cancel","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-cancel","(id)","<p>Cancels the timeout handler <code>id</code>\n"],["canceled?","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-canceled-3F","()","<p>Returns the canceled status.\n"],["candidate","OptionParser","OptionParser.html#method-i-candidate","(word)",""],["candidate","OptionParser::Completion","OptionParser/Completion.html#method-i-candidate","(key, icase = false, pat = nil)",""],["candidate","OptionParser::Completion","OptionParser/Completion.html#method-c-candidate","(key, icase = false, pat = nil, &block)",""],["canonical_ordering_one","UnicodeNormalize","UnicodeNormalize.html#method-c-canonical_ordering_one","(string)","<p>Canonical Ordering\n"],["canonname","Addrinfo","Addrinfo.html#method-i-canonname","()","<p>returns the canonical name as an string.\n<p>nil is returned if no canonical name.\n<p>The canonical name is set …\n"],["capabilities","Net::SMTP::Response","Net/SMTP/Response.html#method-i-capabilities","()","<p>Returns a hash of the human readable reply text in the response if it is\nmultiple lines. It does not …\n"],["capability","Net::IMAP","Net/IMAP.html#method-i-capability","()","<p>Sends a CAPABILITY command, and returns an array of capabilities that the\nserver supports.  Each capability …\n"],["capable?","Net::SMTP","Net/SMTP.html#method-i-capable-3F","(key)",""],["capable_auth_types","Net::SMTP","Net/SMTP.html#method-i-capable_auth_types","()","<p>Returns supported authentication methods on this server. You cannot get\nvalid value before opening SMTP …\n"],["capable_cram_md5_auth?","Net::SMTP","Net/SMTP.html#method-i-capable_cram_md5_auth-3F","()","<p>true if server advertises AUTH CRAM-MD5. You cannot get valid value before\nopening SMTP session.\n"],["capable_login_auth?","Net::SMTP","Net/SMTP.html#method-i-capable_login_auth-3F","()","<p>true if server advertises AUTH LOGIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_plain_auth?","Net::SMTP","Net/SMTP.html#method-i-capable_plain_auth-3F","()","<p>true if server advertises AUTH PLAIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_starttls?","Net::SMTP","Net/SMTP.html#method-i-capable_starttls-3F","()","<p>true if server advertises STARTTLS. You cannot get valid value before\nopening SMTP session.\n"],["capitalize","String","String.html#method-i-capitalize","(*args)","<p>Returns a copy of <em>str</em> with the first character converted to\nuppercase and the remainder to lowercase. …\n"],["capitalize","Symbol","Symbol.html#method-i-capitalize","(*args)","<p>Same as <code>sym.to_s.capitalize.intern</code>.\n"],["capitalize!","String","String.html#method-i-capitalize-21","(*args)","<p>Modifies <em>str</em> by converting the first character to uppercase and\nthe remainder to lowercase. Returns  …\n"],["caption","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-caption","(align = {})","<p>Generate a Table Caption element as a string.\n<p><code>align</code> can be a string, giving the alignment of the caption …\n"],["capture2","Open3","Open3.html#method-i-capture2","(*cmd, stdin_data: nil, binmode: false, **opts)","<p>Open3.capture2 captures the standard output of a command.\n\n<pre>stdout_str, status = Open3.capture2([env,] cmd... ...</pre>\n"],["capture2","Open3","Open3.html#method-c-capture2","(*cmd, stdin_data: nil, binmode: false, **opts)","<p>Open3.capture2 captures the standard output of a command.\n\n<pre>stdout_str, status = Open3.capture2([env,] cmd... ...</pre>\n"],["capture2e","Open3","Open3.html#method-c-capture2e","(*cmd, stdin_data: nil, binmode: false, **opts)","<p>Open3.capture2e captures the standard output and the standard error of a\ncommand.\n\n<pre>stdout_and_stderr_str, ...</pre>\n"],["capture2e","Open3","Open3.html#method-i-capture2e","(*cmd, stdin_data: nil, binmode: false, **opts)","<p>Open3.capture2e captures the standard output and the standard error of a\ncommand.\n\n<pre>stdout_and_stderr_str, ...</pre>\n"],["capture3","Open3","Open3.html#method-c-capture3","(*cmd, stdin_data: '', binmode: false, **opts)","<p>Open3.capture3 captures the standard output and the standard error of a\ncommand.\n\n<pre>stdout_str, stderr_str, ...</pre>\n"],["capture3","Open3","Open3.html#method-i-capture3","(*cmd, stdin_data: '', binmode: false, **opts)","<p>Open3.capture3 captures the standard output and the standard error of a\ncommand.\n\n<pre>stdout_str, stderr_str, ...</pre>\n"],["captures","MatchData","MatchData.html#method-i-captures","()","<p>Returns the array of captures; equivalent to <code>mtch.to_a[1..-1]</code>.\n\n<pre>f1,f2,f3,f4 = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;).captures ...</pre>\n"],["casecmp","String","String.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>String#&lt;=&gt;</code>. Currently,\ncase-insensitivity only works on characters …\n"],["casecmp","Symbol","Symbol.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>Symbol#&lt;=&gt;</code>. Currently,\ncase-insensitivity only works on characters …\n"],["casecmp?","String","String.html#method-i-casecmp-3F","(p1)","<p>Returns true if str and other_other_str are equal after Unicode case\nfolding, false if they are not equal, …\n"],["casecmp?","Symbol","Symbol.html#method-i-casecmp-3F","(p1)","<p>Returns true if sym and other are equal after Unicode case folding, false\nif they are not equal, and …\n"],["casefold?","Regexp","Regexp.html#method-i-casefold-3F","()","<p>Returns the value of the case-insensitive flag.\n\n<pre>/a/.casefold?           #=&gt; false\n/a/i.casefold?      ...</pre>\n"],["cat","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-cat","(*filenames)","<p>Returns a Cat object, for the given <code>filenames</code>\n"],["catch","Kernel","Kernel.html#method-i-catch","(p1 = v1)","<p><code>catch</code> executes its block. If <code>throw</code> is not called,\nthe block executes normally, and <code>catch</code> returns the …\n"],["catch","Timeout::Error","Timeout/Error.html#method-c-catch","(*args)",""],["catch","Timeout::Error","Timeout/Error.html#method-c-catch","(*args)",""],["catch","Timeout::Error","Timeout/Error.html#method-c-catch","(*args)",""],["cause","Exception","Exception.html#method-i-cause","()","<p>Returns the previous exception ($!) at the time this exception was raised.\nThis is useful for wrapping …\n"],["cbrt","CMath","CMath.html#method-i-cbrt","(z)","<p>Returns the principal value of the cube root of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">cbrt</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">4</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.449461632813119+0.6858152562177092i)</span>\n</pre>\n"],["cbrt","CMath","CMath.html#method-c-cbrt","(z)","<p>Returns the principal value of the cube root of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">cbrt</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">4</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.449461632813119+0.6858152562177092i)</span>\n</pre>\n"],["cbrt","Math","Math.html#method-c-cbrt","(p1)","<p>Returns the cube root of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["cd","FileUtils","FileUtils.html#method-c-cd","(dir, verbose: nil)","<p>Changes the current directory to the directory <code>dir</code>.\n<p>If this method is called with block, resumes to the …\n"],["cd","FileUtils","FileUtils.html#method-i-cd","(dir, verbose: nil)","<p>Changes the current directory to the directory <code>dir</code>.\n<p>If this method is called with block, resumes to the …\n"],["cd","Shell","Shell.html#method-i-cd","(path = nil, verbose = @verbose)",""],["cd","Shell","Shell.html#method-c-cd","(path)","<p>Creates a new Shell instance with the current working directory set to\n<code>path</code>.\n"],["cdata","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-cdata","(content)","<p>Called when &lt;![CDATA[ … ]]&gt; is encountered in a document. @p content\n“…”\n"],["cdata","REXML::StreamListener","REXML/StreamListener.html#method-i-cdata","(content)","<p>Called when &lt;![CDATA[ … ]]&gt; is encountered in a document. @p content\n“…”\n"],["cdata?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-cdata-3F","()","<p>Content: [ String text ]\n"],["cdatas","REXML::Element","REXML/Element.html#method-i-cdatas","()","<p>Get an array of all CData children. IMMUTABLE\n"],["cdiv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-cdiv","(xr, xi, yr, yi)","<p>Complex scalar division.\n"],["ceil","BigDecimal","BigDecimal.html#method-i-ceil","(p1 = v1)","<p>Return the smallest integer greater than or equal to the value, as a\nBigDecimal.\n\n<pre>BigDecimal(&#39;3.14159&#39;).ceil ...</pre>\n"],["ceil","Float","Float.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>float</code> in\ndecimal digits (default 0 digits).\n<p>Precision …\n"],["ceil","Integer","Integer.html#method-i-ceil","(*args)","<p>Returns the smallest number than or equal to <code>int</code> in decimal\ndigits (default 0 digits).\n<p>Precision may be …\n"],["ceil","Integer","Integer.html#method-i-ceil","(*args)","<p>Returns the smallest number than or equal to <code>int</code> in decimal\ndigits (default 0 digits).\n<p>Precision may be …\n"],["ceil","Numeric","Numeric.html#method-i-ceil","(*args)","<p>Returns the smallest possible Integer that is greater than or equal to\n<code>num</code>.\n<p>Numeric achieves this by converting …\n"],["ceil","Rational","Rational.html#method-i-ceil","(*args)","<p>Returns the truncated value (toward positive infinity).\n\n<pre>Rational(3).ceil      #=&gt; 3\nRational(2, 3).ceil ...</pre>\n"],["ceiling","REXML::Functions","REXML/Functions.html#method-c-ceiling","( number )",""],["center","String","String.html#method-i-center","(*args)","<p>Centers <code>str</code> in <code>width</code>.  If <code>width</code> is\ngreater than the length of <code>str</code>, returns a new String of length\n<code>width</code> …\n"],["cert","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-cert","()","<p>The X509 certificate for this socket endpoint.\n"],["cert_files","Gem::Request","Gem/Request.html#method-i-cert_files","()",""],["cert_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-cert_path","(certificate)","<p>Returns the path to the trusted <code>certificate</code>\n"],["cert_path","Gem::TestCase","Gem/TestCase.html#method-c-cert_path","(cert_name)","<p>Returns the path to the certificate named <code>cert_name</code> from\n<code>test/rubygems/</code>.\n"],["cert_status","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-cert_status","()","<p>Returns the status of the certificate identified by the certid. The return\nvalue may be one of these …\n"],["certid","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-certid","()","<p>Returns all certificate IDs in this request.\n"],["certid","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-certid","()","<p>Returns the CertificateId for which this SingleResponse is.\n"],["certificates","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-certificates","()",""],["certificates=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-certificates-3D","(p1)",""],["certificates_matching","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-certificates_matching","(filter)",""],["certs","Net::POP3","Net/POP3.html#method-c-certs","()","<p>returns the :ca_file or :ca_path from POP3.ssl_params\n"],["chain","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-chain","()",""],["challenge","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-challenge","()","<p>Returns the challenge string associated with this SPKI.\n"],["challenge","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-i-challenge","(req, res)","<p>Returns a challenge response which asks for authentication information\n"],["challenge","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-i-challenge","(req, res, stale=false)","<p>Returns a challenge response which asks for authentication information\n"],["challenge=","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-challenge-3D","(p1)","<p>Parameters\n<p><code>str</code> - the challenge string to be set for this instance\n\n<p>Sets the challenge to be associated with …\n"],["change_privilege","Process::GID","Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective group ID to that\nspecified by <em>group</em>. Returns the …\n"],["change_privilege","Process::UID","Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective user ID to that\nspecified by <em>user</em>. Returns the new …\n"],["change_workspace","IRB::Context","IRB/Context.html#method-i-change_workspace","(*_main)","<p>Changes the current workspace to given object or binding.\n<p>If the optional argument is omitted, the workspace …\n"],["changed","Observable","Observable.html#method-i-changed","(state=true)","<p>Set the changed state of this object.  Notifications will be sent only if\nthe changed <code>state</code> is <code>true</code>. …\n"],["changed?","Observable","Observable.html#method-i-changed-3F","()","<p>Returns true if this object&#39;s state has been changed since the last\n#notify_observers call.\n"],["character","RSS::REXMLLikeXMLParser","RSS/REXMLLikeXMLParser.html#method-i-character","(data)",""],["characters","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-characters","(text)",""],["chardev?","File","File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n<p><em>file_name</em> can be an IO object.\n"],["chardev?","File::Stat","File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["chardev?","FileTest","FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n<p><em>file_name</em> can be an IO object.\n"],["chardev?","Pathname","Pathname.html#method-i-chardev-3F","()","<p>See FileTest.chardev?.\n"],["charpos","StringScanner","StringScanner.html#method-i-charpos","()","<p>Returns the character position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["chars","ARGF","ARGF.html#method-i-chars","()","<p>This is a deprecated alias for <code>each_char</code>.\n"],["chars","IO","IO.html#method-i-chars","()","<p>This is a deprecated alias for <code>each_char</code>.\n"],["chars","String","String.html#method-i-chars","()","<p>Returns an array of characters in <em>str</em>.  This is a shorthand for\n<code>str.each_char.to_a</code>.\n<p>If a block is given, …\n"],["chars","StringIO","StringIO.html#method-i-chars","()","<p>This is a deprecated alias for <code>each_char</code>.\n"],["charset","OpenURI::Meta","OpenURI/Meta.html#method-i-charset","()","<p>returns a charset parameter in Content-Type field. It is downcased for\ncanonicalization.\n<p>If charset parameter …\n"],["chdir","Dir","Dir.html#method-c-chdir","(p1 = v1)","<p>Changes the current working directory of the process to the given string.\nWhen called without an argument, …\n"],["chdir","FileUtils","FileUtils.html#method-c-chdir","(dir, verbose: nil)",""],["chdir","FileUtils","FileUtils.html#method-i-chdir","(dir, verbose: nil)",""],["chdir","Net::FTP","Net/FTP.html#method-i-chdir","(dirname)","<p>Changes the (remote) directory.\n"],["chdir","Shell","Shell.html#method-i-chdir","(path = nil, verbose = @verbose)","<p>Creates a Shell object which current directory is set to <code>path</code>.\n<p>If a block is given, it restores the current …\n"],["check","Net::IMAP","Net/IMAP.html#method-i-check","()","<p>Sends a CHECK command to request a checkpoint of the currently selected\nmailbox.  This performs implementation-specific …\n"],["check","PTY","PTY.html#method-c-check","(p1, p2 = v2)","<p>Checks the status of the child process specified by <code>pid</code>.\nReturns <code>nil</code> if the process is still alive.\n<p>If …\n"],["check","REXML::Text","REXML/Text.html#method-c-check","(string, pattern, doctype)","<p>check for illegal characters\n"],["check","StringScanner","StringScanner.html#method-i-check","(p1)","<p>This returns the value that #scan would return, without advancing the scan\npointer.  The match register …\n"],["check_auth_args","Net::SMTP","Net/SMTP.html#method-i-check_auth_args","(user, secret, authtype = DEFAULT_AUTH_TYPE)",""],["check_auth_continue","Net::SMTP","Net/SMTP.html#method-i-check_auth_continue","(res)",""],["check_auth_method","Net::SMTP","Net/SMTP.html#method-i-check_auth_method","(type)",""],["check_auth_response","Net::SMTP","Net/SMTP.html#method-i-check_auth_response","(res)",""],["check_cert","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_cert","(signer, issuer, time)","<p>Ensures that <code>signer</code> is valid for <code>time</code> and was\nsigned by the <code>issuer</code>. If the <code>issuer</code> is\n<code>nil</code> no verification …\n"],["check_chain","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_chain","(chain, time)","<p>Verifies each certificate in <code>chain</code> has signed the following\ncertificate and is valid for the given <code>time</code> …\n"],["check_closed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-check_closed","()","<p>Raises IOError if the TarWriter is closed\n"],["check_continue","Net::SMTP","Net/SMTP.html#method-i-check_continue","(res)",""],["check_credentials_permissions","Gem::ConfigFile","Gem/ConfigFile.html#method-i-check_credentials_permissions","()","<p>Checks the permissions of the credentials file.  If they are not 0600 an\nerror message is displayed and …\n"],["check_data","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_data","(public_key, digest, signature, data)","<p>Verifies that <code>data</code> matches the <code>signature</code> created\nby <code>public_key</code> and the <code>digest</code> algorithm.\n"],["check_files","RDoc::Options","RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_gems","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-check_gems","()",""],["check_generator","RDoc::Options","RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_headers","URI::MailTo","URI/MailTo.html#method-i-check_headers","(v)","<p>check the headers <code>v</code> component against either\n<p>HEADER_REGEXP\n\n"],["check_host","URI::Generic","URI/Generic.html#method-i-check_host","(v)","<p>check the host <code>v</code> component for RFC2396 compliance and against\nthe URI::Parser Regexp for :HOST\n<p>Can not …\n"],["check_insecure_method","DRb::DRbServer","DRb/DRbServer.html#method-i-check_insecure_method","(obj, msg_id)","<p>Check that a method is callable via dRuby.\n<p><code>obj</code> is the object we want to invoke the method on.\n<code>msg_id</code> is …\n"],["check_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-check_inspect_key","(id)","<p>Check whether the object_id <code>id</code> is in the current buffer of\nobjects to be pretty printed. Used to break …\n"],["check_key","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_key","(signer, key)","<p>Ensures the public key of <code>key</code> matches the public key in\n<code>signer</code>\n"],["check_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-check_key","()","<p>Raises an exception if the key is invalid.\n<p>See the OpenSSL documentation for EC_KEY_check_key()\n"],["check_modeline","RDoc::Parser","RDoc/Parser.html#method-c-check_modeline","(file_name)","<p>Returns the file type from the modeline in <code>file_name</code>\n"],["check_modify","OpenSSL::Config","OpenSSL/Config.html#method-i-check_modify","()",""],["check_names","RDoc::Task","RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc,\n:clobber_rdoc and :rerdoc.  If other names are …\n"],["check_names","RDoc::Task","RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc,\n:clobber_rdoc and :rerdoc.  If other names are …\n"],["check_nonce","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-check_nonce","(p1)","<p>Checks the nonce validity for this request and <code>response</code>.\n<p>The return value is one of the following:\n<p>-1  … &mdash; "],["check_ns","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-check_ns","(tag_name, prefix, ns, require_uri, ignore_unknown_element=nil)",""],["check_opaque","URI::Generic","URI/Generic.html#method-i-check_opaque","(v)","<p>check the opaque <code>v</code> component for RFC2396 compliance and\nagainst the URI::Parser Regexp for :OPAQUE\n<p>Can …\n"],["check_password","URI::Generic","URI/Generic.html#method-i-check_password","(v, user = @user)","<p>check the password <code>v</code> component for RFC2396 compliance and\nagainst the URI::Parser Regexp for :USERINFO …\n"],["check_path","URI::Generic","URI/Generic.html#method-i-check_path","(v)","<p>check the path <code>v</code> component for RFC2396 compliance and against\nthe URI::Parser Regexp for :ABS_PATH and …\n"],["check_port","URI::Generic","URI/Generic.html#method-i-check_port","(v)","<p>check the port <code>v</code> component for RFC2396 compliance and against\nthe URI::Parser Regexp for :PORT\n<p>Can not …\n"],["check_private_key","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-check_private_key","(p1)","<p>Checks if &#39;key&#39; is PRIV key for this cert\n"],["check_response","Net::SMTP","Net/SMTP.html#method-i-check_response","(res)",""],["check_root","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_root","(chain, time)","<p>Ensures the root certificate in <code>chain</code> is self-signed and valid\nfor <code>time</code>.\n"],["check_ruby_version","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-check_ruby_version","()",""],["check_scheme","URI::Generic","URI/Generic.html#method-i-check_scheme","(v)","<p>check the scheme <code>v</code> component against the URI::Parser Regexp\nfor :SCHEME\n"],["check_shift_log","Logger::LogDevice","Logger/LogDevice.html#method-i-check_shift_log","()",""],["check_signedness","MakeMakefile","MakeMakefile.html#method-i-check_signedness","(type, headers = nil, opts = nil, &b)","<p>Returns the signedness of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in …\n"],["check_sizeof","MakeMakefile","MakeMakefile.html#method-i-check_sizeof","(type, headers = nil, opts = \"\", &b)","<p>Returns the size of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in for the …\n"],["check_to","URI::MailTo","URI/MailTo.html#method-i-check_to","(v)","<p>check the to <code>v</code> component\n"],["check_trust","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_trust","(chain, digester, trust_dir)","<p>Ensures the root of <code>chain</code> has a trusted certificate in\n<code>trust_dir</code> and the digests of the two certificates …\n"],["check_typecode","URI::FTP","URI/FTP.html#method-i-check_typecode","(v)","<p>validates typecode <code>v</code>, returns a <code>true</code> or\n<code>false</code> boolean\n"],["check_until","StringScanner","StringScanner.html#method-i-check_until","(p1)","<p>This returns the value that #scan_until would return, without advancing the\nscan pointer.  The match …\n"],["check_user","URI::Generic","URI/Generic.html#method-i-check_user","(v)","<p>check the user <code>v</code> component for RFC2396 compliance and against\nthe URI::Parser Regexp for :USERINFO\n<p>Can …\n"],["check_userinfo","URI::Generic","URI/Generic.html#method-i-check_userinfo","(user, password = nil)","<p>check the <code>user</code> and <code>password</code>.\n<p>If <code>password</code> is not provided, then <code>user</code> is split,\nusing URI::Generic.split_userinfo …\n"],["check_validity","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-check_validity","(p1 = v1, p2 = v2)","<p>Checks the validity of thisUpdate and nextUpdate fields of this\nSingleResponse. This checks the current …\n"],["checkbox","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-checkbox","(name = \"\", value = nil, checked = nil)","<p>Generate a Checkbox Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["checkbox_group","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-checkbox_group","(name = \"\", *values)","<p>Generate a sequence of checkbox elements, as a String.\n<p>The checkboxes will all have the same <code>name</code> attribute. …\n"],["child_name","RDoc::Context","RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["children","Pathname","Pathname.html#method-i-children","(with_directory=true)","<p>Returns the children of the directory (files and subdirectories, not\nrecursive) as an array of Pathname …\n"],["children","REXML::Light::Node","REXML/Light/Node.html#method-i-children","()",""],["children","REXML::Parent","REXML/Parent.html#method-i-children","()",""],["children","RSS::Element","RSS/Element.html#method-i-children","()",""],["chmod","File","File.html#method-c-chmod","(*args)","<p>Changes permission bits on the named file(s) to the bit pattern represented\nby <em>mode_int</em>. Actual effects …\n"],["chmod","File","File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by\n<em>mode_int</em>. Actual effects are platform …\n"],["chmod","FileUtils","FileUtils.html#method-c-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n<p><code>mode</code> is the …\n"],["chmod","FileUtils","FileUtils.html#method-i-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n<p><code>mode</code> is the …\n"],["chmod","Pathname","Pathname.html#method-i-chmod","(p1)","<p>Changes file permissions.\n<p>See File.chmod.\n"],["chmod_R","FileUtils","FileUtils.html#method-i-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n\n<pre>FileUtils.chmod_R ...</pre>\n"],["chmod_R","FileUtils","FileUtils.html#method-c-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n\n<pre>FileUtils.chmod_R ...</pre>\n"],["chomp","Kernel","Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See\n<code>String#chomp</code>. Available only when -p/-n command line option …\n"],["chomp","String","String.html#method-i-chomp","(*args)","<p>Returns a new <code>String</code> with the given record separator removed\nfrom the end of <em>str</em> (if present). If <code>$/</code> …\n"],["chomp!","String","String.html#method-i-chomp-21","(*args)","<p>Modifies <em>str</em> in place as described for <code>String#chomp</code>,\nreturning <em>str</em>, or <code>nil</code> if no modifications were made.\n…\n"],["choose_from_list","Gem::StreamUI","Gem/StreamUI.html#method-i-choose_from_list","(question, list)","<p>Choose from a list of options.  <code>question</code> is a prompt displayed\nabove the list.  <code>list</code> is a list of option …\n"],["choose_from_list","Gem::UserInteraction","Gem/UserInteraction.html#method-i-choose_from_list","(question, list)","<p>Asks the user to answer <code>question</code> with an answer from the given\n<code>list</code>.\n"],["chop","Kernel","Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never\nreturned. See <code>String#chop!</code>. Available only when -p/-n …\n"],["chop","String","String.html#method-i-chop","()","<p>Returns a new <code>String</code> with the last character removed.  If the\nstring ends with <code>\\r\\n</code>, both characters …\n"],["chop!","String","String.html#method-i-chop-21","()","<p>Processes <em>str</em> as for <code>String#chop</code>, returning\n<em>str</em>, or <code>nil</code> if <em>str</em> is the empty string.  See\nalso <code>String#chomp!</code> …\n"],["chown","File","File.html#method-c-chown","(*args)","<p>Changes the owner and group of the named file(s) to the given numeric owner\nand group id&#39;s. Only …\n"],["chown","File","File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and\ngroup id&#39;s. Only a process with …\n"],["chown","FileUtils","FileUtils.html#method-c-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code>.  <code>user</code>\nand …\n"],["chown","FileUtils","FileUtils.html#method-i-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code>.  <code>user</code>\nand …\n"],["chown","Pathname","Pathname.html#method-i-chown","(p1, p2)","<p>Change owner and group of the file.\n<p>See File.chown.\n"],["chown_R","FileUtils","FileUtils.html#method-i-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code> recursively. …\n"],["chown_R","FileUtils","FileUtils.html#method-c-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code> recursively. …\n"],["chr","Integer","Integer.html#method-i-chr","(*args)","<p>Returns a string containing the character represented by the\n<code>int</code>&#39;s value according to <code>encoding</code>.\n\n<pre>65.chr ...</pre>\n"],["chr","Integer","Integer.html#method-i-chr","(*args)","<p>Returns a string containing the character represented by the\n<code>int</code>&#39;s value according to <code>encoding</code>.\n\n<pre>65.chr ...</pre>\n"],["chr","String","String.html#method-i-chr","()","<p>Returns a one-character string at the beginning of the string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-string\">&quot;abcde&quot;</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">chr</span>    <span class=\"ruby-comment\">#=&gt; &quot;a&quot;</span>\n</pre>\n"],["chroot","Dir","Dir.html#method-c-chroot","(p1)","<p>Changes this process&#39;s idea of the file system root. Only a privileged\nprocess may make this call. …\n"],["chunk","Enumerable","Enumerable.html#method-i-chunk","()","<p>Enumerates over the items, chunking them together based on the return value\nof the block.\n<p>Consecutive …\n"],["chunk","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk","(*args)",""],["chunk_while","Enumerable","Enumerable.html#method-i-chunk_while","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by the block.\n<p>This …\n"],["chunk_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk_while","(*args)",""],["chunked=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-chunked-3D","(val)","<p>Enables chunked transfer encoding.\n"],["chunked?","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-chunked-3F","()","<p>Will this response body be returned using chunked transfer-encoding?\n"],["cipher","OpenSSL::Engine","OpenSSL/Engine.html#method-i-cipher","(p1)","<p>This returns an OpenSSL::Cipher by <code>name</code>, if it is available in\nthis engine.\n<p>An EngineError will be raised …\n"],["cipher","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-cipher","()","<p>The cipher being used for the current connection\n"],["cipher=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-cipher-3D","(p1)",""],["ciphers","OpenSSL::Cipher","OpenSSL/Cipher.html#method-c-ciphers","()","<p>Returns the names of all available ciphers in an array.\n"],["ciphers","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ciphers","()","<p>The list of cipher suites configured for this context.\n"],["ciphers=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ciphers-3D","(p1)","<p>Sets the list of available cipher suites for this context.  Note in a\nserver context some ciphers require …\n"],["civil","Date","Date.html#method-c-civil","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given calendar date.\n<p>In this class, BCE years are counted astronomically. …\n"],["civil","DateTime","DateTime.html#method-c-civil","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a DateTime object denoting the given calendar date.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>)    <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: ...</span>\n</pre>\n"],["clamp","Comparable","Comparable.html#method-i-clamp","(p1, p2)","<p>Returns <em>min</em> if <em>obj</em> <code>&lt;=&gt;</code> <em>min</em> is\nless than zero, <em>max</em> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>max</em> is greater than zero and …\n"],["class","Object","Object.html#method-i-class","()","<p>Returns the class of <em>obj</em>. This method must always be called with\nan explicit receiver, as <code>class</code> is also …\n"],["class_attributes","RDoc::Context","RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_eval","Module","Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that\nwhen a block is given, constant/class …\n"],["class_exec","Module","Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["class_file","RDoc::Store","RDoc/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::Store","RDoc/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class\nmethods (not full name).\n"],["class_name","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-class_name","()",""],["class_name","RSS::BaseListener","RSS/BaseListener.html#method-c-class_name","(uri, tag_name)","<p>retrieve class_name for the supplied uri and tag_name If it doesn&#39;t\nexist, capitalize the tag_name …\n"],["class_path","RDoc::Store","RDoc/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or\nclass data)\n"],["class_variable_defined?","Module","Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in\n<em>obj</em>. String arguments are converted to symbols. …\n"],["class_variable_get","Module","Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a\n<code>NameError</code> exception). The <code>@@</code> part of the variable\n…\n"],["class_variable_set","Module","Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable named by <em>symbol</em> to the given object. If\nthe class variable name is passed as …\n"],["class_variables","Module","Module.html#method-i-class_variables","(p1 = v1)","<p>Returns an array of the names of class variables in <em>mod</em>. This\nincludes the names of class variables in ...\n"],["classes","RDoc::Context","RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes_and_modules","RDoc::Context","RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::Store","RDoc/Store.html#method-i-classes_hash","()","<p>Hash of all classes known to RDoc\n"],["classify","Set","Set.html#method-i-classify","()","<p>Classifies the set by the return value of the given block and returns a\nhash of {value =&gt; set of elements} …\n"],["clean","Syslog::Logger::Formatter","Syslog/Logger/Formatter.html#method-i-clean","(message)","<p>Clean up messages so they&#39;re nice and pretty.\n"],["clean_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-clean_gems","()",""],["clean_text","Gem::Text","Gem/Text.html#method-i-clean_text","(text)","<p>Remove any non-printable characters and make the text suitable for\nprinting.\n"],["cleanpath","Pathname","Pathname.html#method-i-cleanpath","(consider_symlink=false)","<p>Returns clean pathname of <code>self</code> with consecutive slashes and\nuseless dots removed.  The filesystem is …\n"],["cleanup","OpenSSL::Engine","OpenSSL/Engine.html#method-c-cleanup","()","<p>It is only necessary to run cleanup when engines are loaded via\nOpenSSL::Engine.load. However, running …\n"],["cleanup","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-cleanup","()",""],["clear","Array","Array.html#method-i-clear","()","<p>Removes all elements from <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span>, <span class=\"ruby-string\">&quot;d&quot;</span>, <span class=\"ruby-string\">&quot;e&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span>    <span class=\"ruby-comment\">#=&gt; [ ]</span>\n</pre>\n"],["clear","DBM","DBM.html#method-i-clear","()","<p>Deletes all data from the database.\n"],["clear","ENV","ENV.html#method-c-clear","()","<p>Removes every environment variable.\n"],["clear","GC::Profiler","GC/Profiler.html#method-c-clear","()","<p>Clears the GC profiler data.\n"],["clear","GDBM","GDBM.html#method-i-clear","()","<p>Removes all the key-value pairs within <em>gdbm</em>.\n"],["clear","Gem::DependencyList","Gem/DependencyList.html#method-i-clear","()",""],["clear","Gem::SourceList","Gem/SourceList.html#method-i-clear","()","<p>Removes all sources from the SourceList.\n"],["clear","Hash","Hash.html#method-i-clear","()","<p>Removes all key-value pairs from <em>hsh</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }   #=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;200}\nh.clear ...</pre>\n"],["clear","Queue","Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","SDBM","SDBM.html#method-i-clear","()","<p>Deletes all data from the database.\n"],["clear","Set","Set.html#method-i-clear","()","<p>Removes all elements and returns self.\n"],["clear","SizedQueue","SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","String","String.html#method-i-clear","()","<p>Makes string empty.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-string\">&quot;abcde&quot;</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span>    <span class=\"ruby-comment\">#=&gt; &quot;&quot;</span>\n</pre>\n"],["clear","StringScanner","StringScanner.html#method-i-clear","()","<p>Equivalent to #terminate. This method is obsolete; use #terminate instead.\n"],["clear_bit!","OpenSSL::BN","OpenSSL/BN.html#method-i-clear_bit-21","(p1)",""],["clear_cache","REXML::Text","REXML/Text.html#method-i-clear_cache","()",""],["clear_comment","RDoc::ClassModule","RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the Ruby parser.\n"],["clear_comments","OpenSSL::Config","OpenSSL/Config.html#method-c-clear_comments","(line)",""],["clear_default_specs","Gem","Gem.html#method-c-clear_default_specs","()","<p>Clear default gem related variables. It is for test\n"],["clear_paths","Gem","Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time\n<code>dir</code> or <code>path</code> is requested, the values will be\ncalculated …\n"],["client_ca","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-client_ca","()","<p>Returns the list of client CAs. Please note that in contrast to\nSSLContext#client_ca= no array of X509::Certificate …\n"],["client_cert_cb","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-client_cert_cb","()",""],["client_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["client_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["clobber_task_description","RDoc::Task","RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clobber_task_description","RDoc::Task","RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clobber_task_name","RDoc::Task","RDoc/Task.html#method-i-clobber_task_name","()",""],["clobber_task_name","RDoc::Task","RDoc/Task.html#method-i-clobber_task_name","()",""],["clock_getres","Process","Process.html#method-c-clock_getres","(*args)","<p>Returns the time resolution returned by POSIX clock_getres() function.\n<p><code>clock_id</code> specifies a kind of clock. …\n"],["clock_gettime","Process","Process.html#method-c-clock_gettime","(*args)","<p>Returns a time returned by POSIX clock_gettime() function.\n\n<pre>p Process.clock_gettime(Process::CLOCK_MONOTONIC) ...</pre>\n"],["clone","Matrix","Matrix.html#method-i-clone","()","<p>Returns a clone of the matrix, so that the contents of each do not\nreference identical objects. There …\n"],["clone","Method","Method.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre>class A\n  def foo\n    return &quot;bar&quot;\n  end\nend\n\nm = A.new.method(:foo)\nm.call ...</pre>\n"],["clone","Object","Object.html#method-i-clone","(p1 = {})","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["clone","REXML::Attribute","REXML/Attribute.html#method-i-clone","()","<p>Returns a copy of this attribute\n"],["clone","REXML::CData","REXML/CData.html#method-i-clone","()","<p>Make a copy of this object\n<p><em>Examples</em>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">CData</span>.<span class=\"ruby-identifier\">new</span>( <span class=\"ruby-string\">&quot;Some text&quot;</span> )\n<span class=\"ruby-identifier\">d</span> = <span class=\"ruby-identifier\">c</span>.<span class=\"ruby-identifier\">clone</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">to_s</span>        <span class=\"ruby-comment\"># -&gt; &quot;Some text&quot;</span>\n</pre>\n"],["clone","REXML::Comment","REXML/Comment.html#method-i-clone","()",""],["clone","REXML::DocType","REXML/DocType.html#method-i-clone","()",""],["clone","REXML::Document","REXML/Document.html#method-i-clone","()","<p>Should be obvious\n"],["clone","REXML::Element","REXML/Element.html#method-i-clone","()","<p>Creates a shallow copy of self.\n\n<pre>d = Document.new &quot;&lt;a&gt;&lt;b/&gt;&lt;b/&gt;&lt;c&gt;&lt;d/&gt;&lt;/c&gt;&lt;/a&gt;&quot;\nnew_a = d.root.clone\nputs ...</pre>\n"],["clone","REXML::Instruction","REXML/Instruction.html#method-i-clone","()",""],["clone","REXML::Text","REXML/Text.html#method-i-clone","()",""],["clone","REXML::XMLDecl","REXML/XMLDecl.html#method-i-clone","()",""],["clone","Singleton","Singleton.html#method-i-clone","()","<p>Raises a TypeError to prevent cloning.\n"],["clone","UnboundMethod","UnboundMethod.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre>class A\n  def foo\n    return &quot;bar&quot;\n  end\nend\n\nm = A.new.method(:foo)\nm.call ...</pre>\n"],["clone","Vector","Vector.html#method-i-clone","()","<p>Returns a copy of the vector.\n"],["close","ARGF","ARGF.html#method-i-close","()","<p>Closes the current file and skips to the next file in ARGV. If there are no\nmore files to open, just …\n"],["close","CGI::Session","CGI/Session.html#method-i-close","()","<p>Store session data on the server and close the session storage. For some\nsession storage types, this …\n"],["close","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-close","()","<p>Update and close the session&#39;s FileStore file.\n"],["close","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::PStore","CGI/Session/PStore.html#method-i-close","()","<p>Update and close the session&#39;s PStore file.\n"],["close","DBM","DBM.html#method-i-close","()","<p>Closes the database.\n"],["close","Dir","Dir.html#method-i-close","()","<p>Closes the directory stream. Calling this method on closed Dir object is\nignored since Ruby 2.3.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["close","Fiddle::Handle","Fiddle/Handle.html#method-i-close","()","<p>Close this handle.\n<p>Calling close more than once will raise a Fiddle::DLError exception.\n"],["close","GDBM","GDBM.html#method-i-close","()","<p>Closes the associated database file.\n"],["close","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-close","()","<p>Close the tar file\n"],["close","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-close","()","<p>Closes the tar entry\n"],["close","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-close","()","<p>Closes the TarWriter\n"],["close","Gem::SilentUI","Gem/SilentUI.html#method-i-close","()",""],["close","Gem::StreamUI","Gem/StreamUI.html#method-i-close","()",""],["close","IO","IO.html#method-i-close","()","<p>Closes <em>ios</em> and flushes any pending writes to the operating system.\nThe stream is unavailable for any …\n"],["close","Logger","Logger.html#method-i-close","()","<p>Close the logging device.\n"],["close","Logger::LogDevice","Logger/LogDevice.html#method-i-close","()",""],["close","Net::FTP","Net/FTP.html#method-i-close","()","<p>Closes the connection.  Further operations are impossible until you open a\nnew connection with #connect …\n"],["close","Net::IMAP","Net/IMAP.html#method-i-close","()","<p>Sends a CLOSE command to close the currently selected mailbox. The CLOSE\ncommand permanently removes …\n"],["close","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-close","()","<p>Closes the SSLSocket and flushes any unwritten data.\n"],["close","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-close","()","<p>See IO#close for details.\n"],["close","Queue","Queue.html#method-i-close","()","<p>Closes the queue. A closed queue cannot be re-opened.\n<p>After the call to close completes, the following …\n"],["close","Resolv::DNS","Resolv/DNS.html#method-i-close","()","<p>Closes the DNS resolver.\n"],["close","SDBM","SDBM.html#method-i-close","()","<p>Closes the database file.\n<p>Raises SDBMError if the database is already closed.\n"],["close","SOCKSSocket","SOCKSSocket.html#method-i-close","()","<p>Closes the SOCKS connection.\n"],["close","SizedQueue","SizedQueue.html#method-i-close","()","<p>Similar to Queue#close.\n<p>The difference is behavior with waiting enqueuing threads.\n<p>If there are waiting …\n"],["close","StringIO","StringIO.html#method-i-close","()","<p>Closes strio.  The <strong>strio</strong> is unavailable for any further\ndata operations; an <code>IOError</code> is raised if such …\n"],["close","Syslog","Syslog.html#method-c-close","()","<p>Closes the syslog facility. Raises a runtime exception if it is not open.\n"],["close","Tempfile","Tempfile.html#method-i-close","(unlink_now=false)","<p>Closes the file. If <code>unlink_now</code> is true, then the file will be\nunlinked (deleted) after closing. Of course, …\n"],["close","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-close","()","<p>Closes the logger (also closes the log device associated to the logger)\n"],["close","Zlib::GzipFile","Zlib/GzipFile.html#method-i-close","()","<p>Closes the GzipFile object. This method calls close method of the\nassociated IO object. Returns the associated …\n"],["close","Zlib::ZStream","Zlib/ZStream.html#method-i-close","()","<p>Closes the stream. All operations on the closed stream will raise an\nexception.\n"],["close!","Tempfile","Tempfile.html#method-i-close-21","()","<p>Closes and unlinks (deletes) the file. Has the same effect as called\n<code>close(true)</code>.\n"],["close_all","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-close_all","()",""],["close_enabled?","Fiddle::Handle","Fiddle/Handle.html#method-i-close_enabled-3F","()","<p>Returns <code>true</code> if dlclose() will be called when this handle is\ngarbage collected.\n<p>See man(3) dlclose() for …\n"],["close_on_exec=","IO","IO.html#method-i-close_on_exec-3D","(p1)","<p>Sets a close-on-exec flag.\n\n<pre>f = open(&quot;/dev/null&quot;)\nf.close_on_exec = true\nsystem(&quot;cat&quot;, &quot;/proc/self/fd/#{f.fileno}&quot;) ...</pre>\n"],["close_on_exec?","IO","IO.html#method-i-close_on_exec-3F","()","<p>Returns <code>true</code> if <em>ios</em> will be closed on exec.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close_on_exec?</span>                 <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["close_read","BasicSocket","BasicSocket.html#method-i-close_read","()","<p>Disallows further read using shutdown system call.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s1</span>, <span class=\"ruby-identifier\">s2</span> = <span class=\"ruby-constant\">UNIXSocket</span>.<span class=\"ruby-identifier\">pair</span>\n<span class=\"ruby-identifier\">s1</span>.<span class=\"ruby-identifier\">close_read</span>\n<span class=\"ruby-identifier\">s2</span>.<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["close_read","IO","IO.html#method-i-close_read","()","<p>Closes the read end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, such …\n"],["close_read","StringIO","StringIO.html#method-i-close_read","()","<p>Closes the read end of a StringIO.  Will raise an <code>IOError</code> if\nthe <strong>strio</strong> is not readable.\n"],["close_write","BasicSocket","BasicSocket.html#method-i-close_write","()","<p>Disallows further write using shutdown system call.\n\n<pre>UNIXSocket.pair {|s1, s2|\n  s1.print &quot;ping&quot;\n  s1.close_write ...</pre>\n"],["close_write","IO","IO.html#method-i-close_write","()","<p>Closes the write end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, …\n"],["close_write","StringIO","StringIO.html#method-i-close_write","()","<p>Closes the write end of a StringIO.  Will raise an  <code>IOError</code> if\nthe <strong>strio</strong> is not writeable.\n"],["closed?","ARGF","ARGF.html#method-i-closed-3F","()","<p>Returns <em>true</em> if the current file has been closed; <em>false</em>\notherwise. Use <code>ARGF.close</code> to actually close the …\n"],["closed?","DBM","DBM.html#method-i-closed-3F","()","<p>Returns true if the database is closed, false otherwise.\n"],["closed?","GDBM","GDBM.html#method-i-closed-3F","()","<p>Returns true if the associated database file has been closed.\n"],["closed?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-closed-3F","()","<p>Is the tar entry closed?\n"],["closed?","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-closed-3F","()","<p>Is the TarWriter closed?\n"],["closed?","IO","IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <em>ios</em> is completely closed (for duplex\nstreams, both reader and writer), <code>false</code> otherwise. …\n"],["closed?","Net::FTP","Net/FTP.html#method-i-closed-3F","()","<p>Returns <code>true</code> iff the connection is closed.\n"],["closed?","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-closed-3F","()",""],["closed?","Queue","Queue.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the queue is closed.\n"],["closed?","SDBM","SDBM.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the database is closed.\n"],["closed?","StringIO","StringIO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is completely closed,\n<code>false</code> otherwise.\n"],["closed?","Zlib::GzipFile","Zlib/GzipFile.html#method-i-closed-3F","()","<p>Same as IO#closed?\n"],["closed?","Zlib::ZStream","Zlib/ZStream.html#method-i-closed-3F","()","<p>Returns true if the stream is closed.\n"],["closed_read?","StringIO","StringIO.html#method-i-closed_read-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is not readable,\n<code>false</code> otherwise.\n"],["closed_write?","StringIO","StringIO.html#method-i-closed_write-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is not writable,\n<code>false</code> otherwise.\n"],["cmds","OpenSSL::Engine","OpenSSL/Engine.html#method-i-cmds","()","<p>Returns an array of command definitions for the current engine\n"],["cmp","FileUtils","FileUtils.html#method-i-cmp","(a, b)",""],["cmp","FileUtils","FileUtils.html#method-c-cmp","(a, b)",""],["cmp","OpenSSL::BN","OpenSSL/BN.html#method-i-cmp","(p1)",""],["cmp","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-cmp","(p1)","<p>Compares this certificate id with <code>other</code> and returns true if\nthey are the same.\n"],["cmp","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-cmp","(p1)","<p>Compares this Name with <code>other</code> and returns 0 if they are the\nsame and -1 or +1 if they are greater or …\n"],["cmp_issuer","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-cmp_issuer","(p1)","<p>Compares this certificate id&#39;s issuer with <code>other</code> and\nreturns true if they are the same.\n"],["cmsg_is?","Socket::AncillaryData","Socket/AncillaryData.html#method-i-cmsg_is-3F","(p1, p2)","<p>tests the level and type of <em>ancillarydata</em>.\n\n<pre>ancdata = Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, ...</pre>\n"],["code","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-code","()","<p>Returns the HTTP status code\n"],["codepage","WIN32OLE","WIN32OLE.html#method-c-codepage","()","<p>Returns current codepage.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">codepage</span> <span class=\"ruby-comment\"># =&gt; WIN32OLE::CP_ACP</span>\n</pre>\n"],["codepage=","WIN32OLE","WIN32OLE.html#method-c-codepage-3D","(p1)","<p>Sets current codepage. The WIN32OLE.codepage is initialized according to\nEncoding.default_internal.  …\n"],["codepoints","ARGF","ARGF.html#method-i-codepoints","()","<p>This is a deprecated alias for <code>each_codepoint</code>.\n"],["codepoints","IO","IO.html#method-i-codepoints","()","<p>This is a deprecated alias for <code>each_codepoint</code>.\n"],["codepoints","String","String.html#method-i-codepoints","()","<p>Returns an array of the <code>Integer</code> ordinals of the characters in\n<em>str</em>.  This is a shorthand for <code>str.each_codepoint.to_a</code>\n…\n"],["codepoints","StringIO","StringIO.html#method-i-codepoints","()","<p>This is a deprecated alias for <code>each_codepoint</code>.\n"],["coerce","BigDecimal","BigDecimal.html#method-i-coerce","(p1)","<p>The coerce method provides support for Ruby type coercion. It is not\nenabled by default.\n<p>This means that …\n"],["coerce","Float","Float.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>float</code>\nrepresented as Float objects.\n<p>This is achieved by converting …\n"],["coerce","Integer","Integer.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>big</code>\nrepresented as Bignum objects.\n<p>This is achieved by converting …\n"],["coerce","Integer","Integer.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>big</code>\nrepresented as Bignum objects.\n<p>This is achieved by converting …\n"],["coerce","Matrix","Matrix.html#method-i-coerce","(other)","<p>The coerce method provides support for Ruby type coercion. This coercion\nmechanism is used by Ruby to …\n"],["coerce","Numeric","Numeric.html#method-i-coerce","(p1)","<p>If a <code>numeric</code> is the same type as <code>num</code>, returns an\narray containing <code>numeric</code> and <code>num</code>. Otherwise,\nreturns …\n"],["coerce","OpenSSL::BN","OpenSSL/BN.html#method-i-coerce","(p1)",""],["coerce","URI::Generic","URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p>v &mdash; URI or String\n\n<p>Description\n"],["coerce","Vector","Vector.html#method-i-coerce","(other)","<p>The coerce method provides support for Ruby type coercion. This coercion\nmechanism is used by Ruby to …\n"],["coerce_other","IPAddr","IPAddr.html#method-i-coerce_other","(other)",""],["cofactor","Matrix","Matrix.html#method-i-cofactor","(row, column)","<p>Returns the (row, column) cofactor which is obtained by multiplying the\nfirst minor by (-1)**(row + column). …\n"],["cofactor","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-cofactor","()","<p>Returns the cofactor of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get_cofactor()\n"],["cofactor_expansion","Matrix","Matrix.html#method-i-cofactor_expansion","(row: nil, column: nil)",""],["collect","Array","Array.html#method-i-collect","()","<p>Invokes the given block once for each element of <code>self</code>.\n<p>Creates a new array containing the values returned …\n"],["collect","Enumerable","Enumerable.html#method-i-collect","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect","()",""],["collect","Matrix","Matrix.html#method-i-collect","()","<p>Returns a matrix that is the result of iteration of the given block over\nall elements of the matrix. …\n"],["collect","REXML::Elements","REXML/Elements.html#method-i-collect","( xpath=nil )",""],["collect","Vector","Vector.html#method-i-collect","()","<p>Like Array#collect.\n"],["collect!","Array","Array.html#method-i-collect-21","()","<p>Invokes the given block once for each element of <code>self</code>,\nreplacing the element with the value returned …\n"],["collect!","Set","Set.html#method-i-collect-21","()","<p>Replaces the elements with ones returned by collect(). Returns an\nenumerator if no block is given.\n"],["collect2","Vector","Vector.html#method-i-collect2","(v)","<p>Collects (as in Enumerable#collect) over the elements of this vector and\n<code>v</code> in conjunction.\n"],["collect_attributes","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-collect_attributes","(tag_name, prefix, attrs, ns, klass)",""],["collect_attrs","RSS::Element","RSS/Element.html#method-i-collect_attrs","()",""],["collect_concat","Enumerable","Enumerable.html#method-i-collect_concat","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running\n<em>block</em> once for every element in …\n"],["collect_method","FileUtils","FileUtils.html#method-c-collect_method","(opt)","<p>Returns an Array of method names which have the option <code>opt</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">collect_method</span>(:<span class=\"ruby-identifier\">preserve</span>) <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["collect_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["column","Matrix","Matrix.html#method-i-column","(j)","<p>Returns column vector number <code>j</code> of the matrix as a Vector\n(starting at 0 like an array).  When a block …\n"],["column","Ripper","Ripper.html#method-i-column","()","<p>Return column number of current parsing line. This number starts from 0.\n"],["column","Ripper::Filter","Ripper/Filter.html#method-i-column","()","<p>The column number of the current token. This value starts from 0. This\nmethod is valid only in event …\n"],["column_vector","Matrix","Matrix.html#method-c-column_vector","(column)","<p>Creates a single-column matrix where the values of that column are as given\nin <code>column</code>.\n\n<pre>Matrix.column_vector([4,5,6]) ...</pre>\n"],["column_vectors","Matrix","Matrix.html#method-i-column_vectors","()","<p>Returns an array of the column vectors of the matrix.  See Vector.\n"],["columns","Matrix","Matrix.html#method-c-columns","(columns)","<p>Creates a matrix using <code>columns</code> as an array of column vectors.\n\n<pre>Matrix.columns([[25, 93], [-1, 66]])\n   ...</pre>\n"],["combination","Array","Array.html#method-i-combination","(p1)","<p>When invoked with a block, yields all combinations of length <code>n</code>\nof elements from the array and then returns …\n"],["comma_breakable","PP::PPMethods","PP/PPMethods.html#method-i-comma_breakable","()","<p>A convenience method which is same as follows:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">text</span> <span class=\"ruby-string\">&#39;,&#39;</span>\n<span class=\"ruby-identifier\">breakable</span>\n</pre>\n"],["command","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command","()",""],["command=","DRb::ExtServManager","DRb/ExtServManager.html#method-c-command-3D","(cmd)",""],["command_names","Gem::CommandManager","Gem/CommandManager.html#method-i-command_names","()","<p>Return a sorted list of all command names as strings.\n"],["commands","FileUtils","FileUtils.html#method-c-commands","()","<p>Returns an Array of method names which have any options.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">commands</span>  <span class=\"ruby-comment\">#=&gt; [&quot;chmod&quot;, &quot;cp&quot;, &quot;cp_r&quot;, ...</span>\n</pre>\n"],["comment","RDoc::TestCase","RDoc/TestCase.html#method-i-comment","(text, top_level = @top_level)","<p>Creates an RDoc::Comment with <code>text</code> which was defined on\n<code>top_level</code>. By default the comment has the &#39;rdoc&#39; …\n"],["comment","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-comment","(comment)","<p>Called when a comment is encountered. @p comment The content of the comment\n"],["comment","REXML::StreamListener","REXML/StreamListener.html#method-i-comment","(comment)","<p>Called when a comment is encountered. @p comment The content of the comment\n"],["comment","Zlib::GzipFile","Zlib/GzipFile.html#method-i-comment","()","<p>Returns comments recorded in the gzip file header, or nil if the comments\nis not present.\n"],["comment=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["comment=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-comment-3D","(p1)","<p>Specify the comment (<code>str</code>) in the gzip header.\n"],["comment?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-comment-3F","()","<p>Content: [ String text ]\n"],["comments","REXML::Element","REXML/Element.html#method-i-comments","()","<p>Get an array of all Comment children. IMMUTABLE\n"],["commercial","Date","Date.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given week date.\n<p>The week and the day of week should be a negative …\n"],["commercial","DateTime","DateTime.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a DateTime object denoting the given week date.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">commercial</span>(<span class=\"ruby-value\">2001</span>) <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: 2001-01-01T00:00:00+00:00 ...</span>\n</pre>\n"],["commit","PStore","PStore.html#method-i-commit","()","<p>Ends the current PStore#transaction, committing any changes to the data\nstore immediately.\n<p>Example:\n\n<pre>require ...</pre>\n"],["common_installer_setup","Gem::TestCase","Gem/TestCase.html#method-i-common_installer_setup","()",""],["common_installer_teardown","Gem::TestCase","Gem/TestCase.html#method-i-common_installer_teardown","()",""],["common_options","Gem::Command","Gem/Command.html#method-c-common_options","()",""],["compact","Array","Array.html#method-i-compact","()","<p>Returns a copy of <code>self</code> with all <code>nil</code> elements\nremoved.\n\n<pre>[ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot;, nil ].compact\n       ...</pre>\n"],["compact","Fiddle::CParser","Fiddle/CParser.html#method-i-compact","(signature)",""],["compact","Hash","Hash.html#method-i-compact","()","<p>Returns a new hash with the nil values/key pairs removed\n\n<pre>h = { a: 1, b: false, c: nil }\nh.compact     ...</pre>\n"],["compact!","Array","Array.html#method-i-compact-21","()","<p>Removes <code>nil</code> elements from the array.\n<p>Returns <code>nil</code> if no changes were made, otherwise returns the\narray. …\n"],["compact!","Hash","Hash.html#method-i-compact-21","()","<p>Removes all nil values from the hash. Returns the hash.\n\n<pre>h = { a: 1, b: false, c: nil }\nh.compact!     ...</pre>\n"],["compact_specs","Gem::Indexer","Gem/Indexer.html#method-i-compact_specs","(specs)","<p>Compacts Marshal output for the specs index data source by using identical\nobjects as much as possible. …\n"],["compare","REXML::XPathParser","REXML/XPathParser.html#method-i-compare","(a, op, b)",""],["compare_by_identity","Hash","Hash.html#method-i-compare_by_identity","()","<p>Makes <em>hsh</em> compare its keys by their identity, i.e. it will\nconsider exact same objects as same keys. …\n"],["compare_by_identity","Set","Set.html#method-i-compare_by_identity","()","<p>Makes the set compare its elements by their identity and returns self. \nThis method may not be supported …\n"],["compare_by_identity?","Hash","Hash.html#method-i-compare_by_identity-3F","()","<p>Returns <code>true</code> if <em>hsh</em> will compare its keys by their\nidentity.  Also see <code>Hash#compare_by_identity</code>.\n"],["compare_by_identity?","Set","Set.html#method-i-compare_by_identity-3F","()","<p>Returns true if the set will compare its elements by their identity.  Also\nsee Set#compare_by_identity …\n"],["compare_file","FileUtils","FileUtils.html#method-i-compare_file","(a, b)","<p>Returns true if the contents of a file A and a file B are identical.\n\n<pre>FileUtils.compare_file(&#39;somefile&#39;, ...</pre>\n"],["compare_file","FileUtils","FileUtils.html#method-c-compare_file","(a, b)","<p>Returns true if the contents of a file A and a file B are identical.\n\n<pre>FileUtils.compare_file(&#39;somefile&#39;, ...</pre>\n"],["compare_language","REXML::Functions","REXML/Functions.html#method-c-compare_language","(lang1, lang2)",""],["compare_stream","FileUtils","FileUtils.html#method-i-compare_stream","(a, b)","<p>Returns true if the contents of a stream <code>a</code> and <code>b</code>\nare identical.\n"],["compare_stream","FileUtils","FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns true if the contents of a stream <code>a</code> and <code>b</code>\nare identical.\n"],["compatible?","Encoding","Encoding.html#method-c-compatible-3F","(p1, p2)","<p>Checks the compatibility of two objects.\n<p>If the objects are both strings they are compatible when they …\n"],["compile","Regexp","Regexp.html#method-c-compile","(*args)","<p>Alias for <code>Regexp.new</code>\n"],["compile","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an\nInstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["compile_error","Ripper","Ripper.html#method-i-compile_error","(msg)","<p>This method is called when the parser found syntax error.\n"],["compile_file","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_file","(p1, *args, p3 = {})","<p>Takes <code>file</code>, a String with the location of a Ruby source file,\nreads, parses and compiles the file, and …\n"],["compile_option","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option","()","<p>Returns a hash of default options used by the Ruby iseq compiler.\n<p>For details, see InstructionSequence.compile_option= …\n"],["compile_option=","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option-3D","(p1)","<p>Sets the default values for various optimizations in the Ruby iseq\ncompiler.\n<p>Possible values for <code>options</code> …\n"],["complain","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-complain","(message)",""],["complete","OptionParser","OptionParser.html#method-i-complete","(typ, opt, icase = false, *pat)","<p>Completes shortened long style option switch and returns pair of canonical\nswitch and switch descriptor …\n"],["complete","OptionParser::Completion","OptionParser/Completion.html#method-i-complete","(key, icase = false, pat = nil)",""],["complete","OptionParser::List","OptionParser/List.html#method-i-complete","(id, opt, icase = false, *pat, &block)","<p>Searches list <code>id</code> for <code>opt</code> and the optional\npatterns for completion <code>pat</code>. If <code>icase</code> is true,\nthe search is …\n"],["complete","RDoc::ClassModule","RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::Store#complete\n"],["complete","RDoc::Store","RDoc/Store.html#method-i-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["completer_quote_characters","Readline","Readline.html#method-c-completer_quote_characters","()","<p>Gets a list of characters which can be used to quote a substring of the\nline.\n<p>Raises NotImplementedError …\n"],["completer_quote_characters=","Readline","Readline.html#method-c-completer_quote_characters-3D","(p1)","<p>Sets a list of characters which can be used to quote a substring of the\nline. Completion occurs on the …\n"],["completer_word_break_characters","Readline","Readline.html#method-c-completer_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for\nrl_complete_internal().\n<p>Raises …\n"],["completer_word_break_characters=","Readline","Readline.html#method-c-completer_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for\nrl_complete_internal(). The default …\n"],["completion_append_character","Readline","Readline.html#method-c-completion_append_character","()","<p>Returns a string containing a character to be appended on completion. The\ndefault is a space (“ …\n"],["completion_append_character=","Readline","Readline.html#method-c-completion_append_character-3D","(p1)","<p>Specifies a character to be appended on completion. Nothing will be\nappended if an empty string (“”) …\n"],["completion_case_fold","Readline","Readline.html#method-c-completion_case_fold","()","<p>Returns true if completion ignores case. If no, returns false.\n<p>NOTE: Returns the same object that is specified …\n"],["completion_case_fold=","Readline","Readline.html#method-c-completion_case_fold-3D","(p1)","<p>Sets whether or not to ignore case on completion.\n"],["completion_proc","Readline","Readline.html#method-c-completion_proc","()","<p>Returns the completion Proc object.\n"],["completion_proc=","Readline","Readline.html#method-c-completion_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine completion behavior.\nIt should take input string and return …\n"],["component","Matrix","Matrix.html#method-i-component","(i, j)",""],["component","URI::Generic","URI/Generic.html#method-i-component","()","<p>Components of the URI in the order.\n"],["component","URI::Generic","URI/Generic.html#method-c-component","()","<p>Components of the URI in the order.\n"],["component","Vector","Vector.html#method-i-component","(i)",""],["component_ary","URI::Generic","URI/Generic.html#method-i-component_ary","()","<p>returns an Array of the components defined from the COMPONENT Array\n"],["compose_sets","Gem::Resolver","Gem/Resolver.html#method-c-compose_sets","(*sets)","<p>Combines <code>sets</code> into a ComposedSet that allows specification\nlookup in a uniform manner.  If one of the …\n"],["compress","Gem::Indexer","Gem/Indexer.html#method-i-compress","(filename, extension)","<p>Compress <code>filename</code> with <code>extension</code>.\n"],["compress_indices","Gem::Indexer","Gem/Indexer.html#method-i-compress_indices","()","<p>Compresses indices on disk\n"],["compute_key","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-compute_key","(p1)","<p>Returns a String containing a shared secret computed from the other\nparty&#39;s public value. See DH_compute_key …\n"],["compute_primes","Prime::EratosthenesSieve","Prime/EratosthenesSieve.html#method-i-compute_primes","()",""],["concat","Array","Array.html#method-i-concat","(*args)","<p>Appends the elements of +other_ary+s to <code>self</code>.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span> ].<span class=\"ruby-identifier\">concat</span>( [<span class=\"ruby-string\">&quot;c&quot;</span>, <span class=\"ruby-string\">&quot;d&quot;</span>] ) <span class=\"ruby-comment\">#=&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ...</span>\n</pre>\n"],["concat","Gem::Requirement","Gem/Requirement.html#method-i-concat","(new)","<p>Concatenates the <code>new</code> requirements onto this requirement.\n"],["concat","REXML::Functions","REXML/Functions.html#method-c-concat","( *objects )","<p>UNTESTED\n"],["concat","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-concat","(*jobs)","<p>Returns a Concat object, for the given <code>jobs</code>\n"],["concat","String","String.html#method-i-concat","(*args)","<p>Append—Concatenates the given object to <em>str</em>. If the object is an\n<code>Integer</code>, it is considered as a codepoint, …\n"],["concat","StringScanner","StringScanner.html#method-i-concat","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not\naffect scan pointer.\n\n<pre>s = StringScanner.new(&quot;Fri ...</pre>\n"],["conf","IRB","IRB.html#method-c-conf","()","<p>Displays current configuration.\n<p>Modifying the configuration is achieved by sending a message to IRB.conf …\n"],["config","DRb","DRb.html#method-i-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config","DRb","DRb.html#method-c-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config_file","Gem","Gem.html#method-c-config_file","()","<p>The path to standard location of the user&#39;s .gemrc file.\n"],["config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-config_file_name","()","<p>The name of the configuration file.\n"],["configuration","Gem","Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile\nprotocol) as the standard configuration …\n"],["configure_connection_for_https","Gem::Request","Gem/Request.html#method-c-configure_connection_for_https","(connection, cert_files)",""],["configure_options","Gem::Command","Gem/Command.html#method-i-configure_options","(header, option_list)",""],["conflicting_dependencies","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-i-conflicting_dependencies","()",""],["conflicting_dependencies","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-conflicting_dependencies","()","<p>Return the 2 dependency objects that conflicted\n"],["conflicts","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-conflicts","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#conflicts)\n"],["conflicts","Gem::Specification","Gem/Specification.html#method-i-conflicts","()","<p>Return any possible conflicts against the currently loaded specs.\n"],["confstr","Etc","Etc.html#method-c-confstr","(p1)","<p>Returns system configuration variable using confstr().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["conj","Complex","Complex.html#method-i-conj","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conj","Matrix","Matrix.html#method-i-conj","()",""],["conj","Numeric","Numeric.html#method-i-conj","()","<p>Returns self.\n"],["conjugate","Complex","Complex.html#method-i-conjugate","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conjugate","Matrix","Matrix.html#method-i-conjugate","()","<p>Returns the conjugate of the matrix.\n\n<pre>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i   i ...</pre>\n"],["conjugate","Numeric","Numeric.html#method-i-conjugate","()","<p>Returns self.\n"],["connect","Addrinfo","Addrinfo.html#method-i-connect","(timeout: nil, &block)","<p>creates a socket connected to the address of self.\n<p>The optional argument <em>opts</em> is options represented by …\n"],["connect","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-connect","(tcp)","<p>Connect to IO <code>tcp</code>, with context of the current certificate\nconfiguration\n"],["connect","Net::FTP","Net/FTP.html#method-i-connect","(host, port = FTP_PORT)","<p>Establishes an FTP connection to host, optionally overriding the default\nport. If the environment variable …\n"],["connect","Net::HTTP","Net/HTTP.html#method-i-connect","()",""],["connect","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-connect","()","<p>Initiates an SSL/TLS handshake with a server.  The handshake may be started\nafter unencrypted data has …\n"],["connect","Socket","Socket.html#method-i-connect","(p1)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>.\nReturns 0 if successful, otherwise an …\n"],["connect","UDPSocket","UDPSocket.html#method-i-connect","(p1, p2)","<p>Connects <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n<p>This makes possible to send without destination address.\n\n<pre>u1 = UDPSocket.new ...</pre>\n"],["connect","WIN32OLE","WIN32OLE.html#method-c-connect","(p1, *args)","<p>Returns running OLE Automation object or WIN32OLE object from moniker. 1st\nargument should be OLE program …\n"],["connect_address","BasicSocket","BasicSocket.html#method-i-connect_address","()","<p>Returns an address of the socket suitable for connect in the local machine.\n<p>This method returns <em>self</em>.local_address, …\n"],["connect_from","Addrinfo","Addrinfo.html#method-i-connect_from","(*args, timeout: nil, &block)","<p>creates a socket connected to the address of self.\n<p>If one or more arguments given as <em>local_addr_args</em>, …\n"],["connect_internal","Addrinfo","Addrinfo.html#method-i-connect_internal","(local_addrinfo, timeout=nil)","<p>creates a new Socket connected to the address of\n<code>local_addrinfo</code>.\n<p>If <em>local_addrinfo</em> is nil, the address …\n"],["connect_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-connect_nonblock","(p1 = {})","<p>Initiates the SSL/TLS handshake as a client in non-blocking manner.\n\n<pre># emulates blocking connect\nbegin ...</pre>\n"],["connect_nonblock","Socket","Socket.html#method-i-connect_nonblock","(addr, exception: true)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>\nafter O_NONBLOCK is set for the underlying …\n"],["connect_to","Addrinfo","Addrinfo.html#method-i-connect_to","(*args, timeout: nil, &block)","<p>creates a socket connected to <em>remote_addr_args</em> and bound to self.\n<p>The optional last argument <em>opts</em> is options …\n"],["connection_for","Gem::Request","Gem/Request.html#method-i-connection_for","(uri)","<p>Creates or an HTTP connection based on <code>uri</code>, or retrieves an\nexisting connection, using a proxy if needed. …\n"],["consider_local?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_local-3F","()","<p>Indicated, based on the requested domain, if local gems should be\nconsidered.\n"],["consider_remote?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_remote-3F","()","<p>Indicated, based on the requested domain, if remote gems should be\nconsidered.\n"],["console","IO","IO.html#method-c-console","(*args)","<p>Returns an File instance opened console.\n<p>If <code>sym</code> is given, it will be sent to the opened console with  …\n"],["const_defined?","Module","Module.html#method-i-const_defined-3F","(*args)","<p>Says whether <em>mod</em> or its ancestors have a constant with the given\nname:\n\n<pre>Float.const_defined?(:EPSILON) ...</pre>\n"],["const_get","Module","Module.html#method-i-const_get","(*args)","<p>Checks for a constant with the given name in <em>mod</em>. If\n<code>inherit</code> is set, the lookup will also search the …\n"],["const_load","WIN32OLE","WIN32OLE.html#method-c-const_load","(p1, p2 = v2)","<p>Defines the constants of OLE Automation server as mod&#39;s constants. The\nfirst argument is WIN32OLE …\n"],["const_missing","Module","Module.html#method-i-const_missing","(p1)","<p>Invoked when a reference is made to an undefined constant in <em>mod</em>.\nIt is passed a symbol for the undefined ...\n"],["const_set","Module","Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates\na new constant if no constant …\n"],["constants","Module","Module.html#method-i-constants","(p1 = v1)","<p>Returns an array of the names of the constants accessible in <em>mod</em>.\nThis includes the names of constants ...\n"],["constants","Module","Module.html#method-c-constants","(*args)","<p>In the first form, returns an array of the names of all constants\naccessible from the point of call. …\n"],["construct","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-c-construct","(hour, minute, second)",""],["consume","REXML::IOSource","REXML/IOSource.html#method-i-consume","( pattern )",""],["consume","REXML::Source","REXML/Source.html#method-i-consume","( pattern )",""],["consume_rbuff","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-consume_rbuff","(size=nil)","<p>Consumes <code>size</code> bytes from the buffer\n"],["contains","REXML::Functions","REXML/Functions.html#method-c-contains","( string, test )","<p>Fixed by Mike Stok\n"],["contains_requirable_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-contains_requirable_file-3F","(file)","<p>Return true if this spec can require <code>file</code>.\n"],["content","REXML::XMLDecl","REXML/XMLDecl.html#method-i-content","(enc)",""],["content=","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-content-3D","(value)",""],["content=","RSS::Maker::ITunesItemModel::ITunesDurationBase","RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-content-3D","(content)",""],["content_encoding","OpenURI::Meta","OpenURI/Meta.html#method-i-content_encoding","()","<p>Returns a list of encodings in Content-Encoding field as an array of\nstrings.\n<p>The encodings are downcased …\n"],["content_is_set?","RSS::Element","RSS/Element.html#method-i-content_is_set-3F","()",""],["content_length","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-content_length","()","<p>The content-length header\n"],["content_length","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_length","()","<p>The content-length header\n"],["content_length=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_length-3D","(len)","<p>Sets the content-length header to <code>len</code>\n"],["content_setup","RSS::Element","RSS/Element.html#method-c-content_setup","(type=nil, disp_name=nil)",""],["content_type","OpenURI::Meta","OpenURI/Meta.html#method-i-content_type","()","<p>returns “type/subtype” which is MIME Content-Type. It is downcased for\ncanonicalization. Content-Type …\n"],["content_type","RSS::Atom::ContentModel::ClassMethods","RSS/Atom/ContentModel/ClassMethods.html#method-i-content_type","()",""],["content_type","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-content_type","()","<p>The content-type header\n"],["content_type","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_type","()","<p>The content-type header\n"],["content_type=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-content_type-3D","(type)","<p>Sets the content-type header to <code>type</code>\n"],["content_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-content_writer","(name, disp_name=name)",""],["contents","Gem::Package","Gem/Package.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["contents","Gem::Package::Old","Gem/Package/Old.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["context","DEBUGGER__","DEBUGGER__.html#method-c-context","(thread=Thread.current)",""],["context","REXML::DocType","REXML/DocType.html#method-i-context","()",""],["context","REXML::ParseException","REXML/ParseException.html#method-i-context","()",""],["context=","REXML::Functions","REXML/Functions.html#method-c-context-3D","(value)",""],["continue?","Net::SMTP::Response","Net/SMTP/Response.html#method-i-continue-3F","()","<p>Determines whether the response received was a Positive Intermediate reply\n(3xx reply code)\n"],["continue_timeout=","Net::HTTP","Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["conv_arg","OptionParser::Switch","OptionParser/Switch.html#method-i-conv_arg","(arg, val = [])","<p>Parses argument, converts and returns <code>arg</code>, <code>block</code>\nand result of conversion. Yields at semi-error condition …\n"],["convert","CSV","CSV.html#method-i-convert","(name = nil, &converter)","<p>You can use this method to install a CSV::Converters built-in, or provide a\nblock that handles a custom …\n"],["convert","Encoding::Converter","Encoding/Converter.html#method-i-convert","(p1)","<p>Convert source_string and return destination_string.\n<p>source_string is assumed as a part of source. i.e. …\n"],["convert","OptionParser::Completion","OptionParser/Completion.html#method-i-convert","(opt = nil, val = nil, *)",""],["convert","RDoc::Markup","RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output\n<code>formatter</code> using a Visitor to render the …\n"],["convert","RSS::Converter","RSS/Converter.html#method-i-convert","(value)",""],["convert","RSS::Element","RSS/Element.html#method-i-convert","(value)",""],["convert","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-c-convert","(version)","<p>Converts <code>version</code> into an HTTPVersion\n"],["convert_attr_reader","RSS::BaseModel","RSS/BaseModel.html#method-i-convert_attr_reader","(*attrs)",""],["convert_fields","CSV","CSV.html#method-i-convert_fields","(fields, headers = false)","<p>Processes <code>fields</code> with <code>@converters</code>, or\n<code>@header_converters</code> if <code>headers</code> is passed as\n<code>true</code>, returning the …\n"],["convert_to_uri","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["converter=","RSS::Element","RSS/Element.html#method-i-converter-3D","(converter)",""],["converters","CSV","CSV.html#method-i-converters","()","<p>Returns the current list of converters in effect.  See CSV::new for\ndetails. Built-in converters will …\n"],["convertible_int","MakeMakefile","MakeMakefile.html#method-i-convertible_int","(type, headers = nil, opts = nil, &b)","<p>Returns the convertible integer type of the given <code>type</code>.  You\nmay optionally specify additional <code>headers</code> …\n"],["convpath","Encoding::Converter","Encoding/Converter.html#method-i-convpath","()","<p>Returns the conversion path of ec.\n<p>The result is an array of conversions.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["cooked","IO","IO.html#method-i-cooked","()","<p>Yields <code>self</code> within cooked mode.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">STDIN</span>.<span class=\"ruby-identifier\">cooked</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">gets</span>)\n</pre>\n<p>will read and return a line with echo back and line …\n"],["cooked!","IO","IO.html#method-i-cooked-21","()","<p>Enables cooked mode.\n<p>If the terminal mode needs to be back, use io.cooked { … }.\n<p>You must require &#39;io/console&#39; …\n"],["copy","FileUtils","FileUtils.html#method-i-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","FileUtils","FileUtils.html#method-c-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","Net::HTTP","Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["copy","Net::IMAP","Net/IMAP.html#method-i-copy","(set, mailbox)","<p>Sends a COPY command to copy the specified message(s) to the end of the\nspecified destination <code>mailbox</code> …\n"],["copy","OpenSSL::BN","OpenSSL/BN.html#method-i-copy","(p1)",""],["copy_entry","FileUtils","FileUtils.html#method-i-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Copies a file system entry <code>src</code> to <code>dest</code>. If\n<code>src</code> is a directory, this method copies its contents\nrecursively. …\n"],["copy_entry","FileUtils","FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Copies a file system entry <code>src</code> to <code>dest</code>. If\n<code>src</code> is a directory, this method copies its contents\nrecursively. …\n"],["copy_file","FileUtils","FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file contents of <code>src</code> to <code>dest</code>. Both of\n<code>src</code> and <code>dest</code> must be a path name.\n"],["copy_file","FileUtils","FileUtils.html#method-i-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file contents of <code>src</code> to <code>dest</code>. Both of\n<code>src</code> and <code>dest</code> must be a path name.\n"],["copy_internal","Net::IMAP","Net/IMAP.html#method-i-copy_internal","(cmd, set, mailbox)",""],["copy_nonce","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-copy_nonce","(p1)","<p>Copies the nonce from <code>request</code> into this response.  Returns 1\non success and 0 on failure.\n"],["copy_stream","FileUtils","FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies stream <code>src</code> to <code>dest</code>. <code>src</code> must\nrespond to #read(n) and <code>dest</code> must respond to #write(str).\n"],["copy_stream","FileUtils","FileUtils.html#method-i-copy_stream","(src, dest)","<p>Copies stream <code>src</code> to <code>dest</code>. <code>src</code> must\nrespond to #read(n) and <code>dest</code> must respond to #write(str).\n"],["copy_stream","IO","IO.html#method-c-copy_stream","(p1, p2, p3 = v3, p4 = v4)","<p>IO.copy_stream copies <em>src</em> to <em>dst</em>. <em>src</em> and\n<em>dst</em> is either a filename or an IO.\n<p>This method returns the number …\n"],["copy_to","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-i-copy_to","(path)",""],["copy_to","Gem::Package","Gem/Package.html#method-i-copy_to","(path)","<p>Copies this package to <code>path</code> (if possible)\n"],["coredump?","Process::Status","Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it\nterminated. Not available on all platforms.\n"],["correct?","Gem::Version","Gem/Version.html#method-c-correct-3F","(version)","<p>True if the <code>version</code> string matches RubyGems&#39; requirements.\n"],["correct_for_windows_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-correct_for_windows_path","(path)",""],["cos","BigMath","BigMath.html#method-i-cos","(x, prec)","<p>Computes the cosine of <code>decimal</code> to the specified number of\ndigits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> is …\n"],["cos","CMath","CMath.html#method-c-cos","(z)","<p>Returns the cosine of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">cos</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.8337300251311491-0.9888977057628651i)</span>\n</pre>\n"],["cos","CMath","CMath.html#method-i-cos","(z)","<p>Returns the cosine of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">cos</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.8337300251311491-0.9888977057628651i)</span>\n</pre>\n"],["cos","Math","Math.html#method-c-cos","(p1)","<p>Computes the cosine of <code>x</code> (expressed in radians). Returns a\nFloat in the range -1.0..1.0.\n<p>Domain: (-INFINITY, …\n"],["cosh","CMath","CMath.html#method-c-cosh","(z)","<p>Returns the hyperbolic cosine of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">cosh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.8337300251311491+0.9888977057628651i)</span>\n</pre>\n"],["cosh","CMath","CMath.html#method-i-cosh","(z)","<p>Returns the hyperbolic cosine of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">cosh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.8337300251311491+0.9888977057628651i)</span>\n</pre>\n"],["cosh","Math","Math.html#method-c-cosh","(p1)","<p>Computes the hyperbolic cosine of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: [1, …\n"],["count","Array","Array.html#method-i-count","(p1)","<p>Returns the number of elements.\n<p>If an argument is given, counts the number of elements which equal\n<code>obj</code> …\n"],["count","Enumerable","Enumerable.html#method-i-count","(p1)","<p>Returns the number of items in <code>enum</code> through enumeration. If an\nargument is given, the number of items …\n"],["count","GC","GC.html#method-c-count","()","<p>The number of times GC occurred.\n<p>It returns the number of times GC occurred since the process started. …\n"],["count","REXML::Functions","REXML/Functions.html#method-c-count","( node_set )","<p>Returns the size of the given list of nodes.\n"],["count","String","String.html#method-i-count","(*args)","<p>Each <code>other_str</code> parameter defines a set of characters to count.\nThe intersection of these sets defines …\n"],["count_imemo_objects","ObjectSpace","ObjectSpace.html#method-c-count_imemo_objects","(*args)","<p>Counts objects for each <code>T_IMEMO</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["count_nodes","ObjectSpace","ObjectSpace.html#method-c-count_nodes","(*args)","<p>Counts nodes for each node type.\n<p>This method is only for MRI developers interested in performance and …\n"],["count_objects","ObjectSpace","ObjectSpace.html#method-c-count_objects","(p1 = v1)","<p>Counts all objects grouped by type.\n<p>It returns a hash, such as:\n\n<pre>{\n  :TOTAL=&gt;10000,\n  :FREE=&gt;3011,\n  :T_OBJECT=&gt;6, ...</pre>\n"],["count_objects_size","ObjectSpace","ObjectSpace.html#method-c-count_objects_size","(*args)","<p>Counts objects size (in bytes) for each type.\n<p>Note that this information is incomplete.  You need to deal …\n"],["count_observers","Observable","Observable.html#method-i-count_observers","()","<p>Return the number of observers associated with this object.\n"],["count_symbols","ObjectSpace","ObjectSpace.html#method-c-count_symbols","(*args)","<p>Counts symbols for each Symbol type.\n<p>This method is only for MRI developers interested in performance …\n"],["count_tdata_objects","ObjectSpace","ObjectSpace.html#method-c-count_tdata_objects","(*args)","<p>Counts objects for each <code>T_DATA</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["covector","Vector","Vector.html#method-i-covector","()","<p>Creates a single-row matrix from this vector.\n"],["cover?","Range","Range.html#method-i-cover-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is between the begin and end\nof the range.\n<p>This tests <code>begin &lt;= obj &lt;= end</code> when …\n"],["coverage_level=","RDoc::Stats","RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["cp","FileUtils","FileUtils.html#method-i-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file content <code>src</code> to <code>dest</code>.  If\n<code>dest</code> is a directory, copies <code>src</code> to\n<code>dest/src</code>.\n<p>If <code>src</code> is a list of …\n"],["cp","FileUtils","FileUtils.html#method-c-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file content <code>src</code> to <code>dest</code>.  If\n<code>dest</code> is a directory, copies <code>src</code> to\n<code>dest/src</code>.\n<p>If <code>src</code> is a list of …\n"],["cp_r","FileUtils","FileUtils.html#method-c-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Copies <code>src</code> to <code>dest</code>. If <code>src</code> is a\ndirectory, this method copies all its contents recursively. If\n<code>dest</code> is …\n"],["cp_r","FileUtils","FileUtils.html#method-i-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Copies <code>src</code> to <code>dest</code>. If <code>src</code> is a\ndirectory, this method copies all its contents recursively. If\n<code>dest</code> is …\n"],["cram_md5_challenge","Net::SMTP::Response","Net/SMTP/Response.html#method-i-cram_md5_challenge","()","<p>Creates a CRAM-MD5 challenge. You can view more information on CRAM-MD5 on\nWikipedia: en.wikipedia.org/wiki/CRAM-MD5 …\n"],["cram_md5_response","Net::SMTP","Net/SMTP.html#method-i-cram_md5_response","(secret, challenge)","<p>CRAM-MD5: [RFC2195]\n"],["cram_secret","Net::SMTP","Net/SMTP.html#method-i-cram_secret","(secret, mask)",""],["crc","Zlib::GzipFile","Zlib/GzipFile.html#method-i-crc","()","<p>Returns CRC value of the uncompressed data.\n"],["crc32","Zlib","Zlib.html#method-c-crc32","(*args)","<p>Calculates CRC checksum for <code>string</code>, and returns updated value\nof <code>crc</code>. If <code>string</code> is omitted, it returns …\n"],["crc32_combine","Zlib","Zlib.html#method-c-crc32_combine","(p1, p2, p3)","<p>Combine two CRC-32 check values in to one.  <code>crc1</code> is the first\nCRC-32 value, <code>crc2</code> is the second CRC-32 …\n"],["crc_table","Zlib","Zlib.html#method-c-crc_table","()","<p>Returns the table for calculating CRC checksum as an array.\n"],["creatable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-creatable-3F","()","<p>Returns <code>true</code> if files may be created in the directory by STOU,\nSTOR, APPE, and RNTO.\n"],["create","Fiddle::CStructBuilder","Fiddle/CStructBuilder.html#method-i-create","(klass, types, members)","<p>Construct a new class given a C:\n<p>class <code>klass</code> (CUnion, CStruct, or other that provide an\n#entity_class …\n"],["create","Fiddle::CStructBuilder","Fiddle/CStructBuilder.html#method-c-create","(klass, types, members)","<p>Construct a new class given a C:\n<p>class <code>klass</code> (CUnion, CStruct, or other that provide an\n#entity_class …\n"],["create","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-c-create","()",""],["create","Gem::Requirement","Gem/Requirement.html#method-c-create","(input)","<p>Factory method to create a Gem::Requirement object.  Input may be a\nVersion, a String, or nil.  Intended …\n"],["create","Gem::Version","Gem/Version.html#method-c-create","(input)","<p>Factory method to create a Version object. Input may be a Version or a\nString. Intended to simplify client …\n"],["create","Net::IMAP","Net/IMAP.html#method-i-create","(mailbox)","<p>Sends a CREATE command to create a new <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["create","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-c-create","(p1, p2)","<p>Creates an OpenSSL::OCSP::Response from <code>status</code> and\n<code>basic_response</code>.\n"],["create","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-c-create","(p1, p2, p3, p4, p5 = v5, p6 = v6, p7 = v7, p8 = v8, p9 = v9, p10 = v10)","<p>Parameters\n<p><code>pass</code> - string\n<p><code>name</code> - A string describing the key.\n"],["create","Psych::Visitors::JSONTree","Psych/Visitors/JSONTree.html#method-c-create","(options = {})",""],["create","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-c-create","()",""],["create","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-c-create","(options = {})",""],["create","Resolv::DNS::Name","Resolv/DNS/Name.html#method-c-create","(arg)","<p>Creates a new DNS name from <code>arg</code>.  <code>arg</code> can be:\n<p>Name &mdash; returns <code>arg</code>.\n<p>String &mdash; Creates a new Name.\n"],["create","Resolv::IPv4","Resolv/IPv4.html#method-c-create","(arg)",""],["create","Resolv::IPv6","Resolv/IPv6.html#method-c-create","(arg)","<p>Creates a new IPv6 address from <code>arg</code> which may be:\n<p>IPv6 &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match one of the IPv6::Regex* …\n"],["create","Resolv::LOC::Alt","Resolv/LOC/Alt.html#method-c-create","(arg)","<p>Creates a new LOC::Alt from <code>arg</code> which may be:\n<p>LOC::Alt &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Alt::Regex …\n"],["create","Resolv::LOC::Coord","Resolv/LOC/Coord.html#method-c-create","(arg)","<p>Creates a new LOC::Coord from <code>arg</code> which may be:\n<p>LOC::Coord &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Coord::Regex …\n"],["create","Resolv::LOC::Size","Resolv/LOC/Size.html#method-c-create","(arg)","<p>Creates a new LOC::Size from <code>arg</code> which may be:\n<p>LOC::Size &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Size::Regex …\n"],["create","Tempfile","Tempfile.html#method-c-create","(basename=\"\", tmpdir=nil, mode: 0, **options)","<p>Creates a temporary file as usual File object (not Tempfile). It\ndoesn&#39;t use finalizer and delegation. …\n"],["create_cert","Gem::Security","Gem/Security.html#method-c-create_cert","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates an unsigned certificate for <code>subject</code> and\n<code>key</code>.  The lifetime of the key is from the current time …\n"],["create_cert_email","Gem::Security","Gem/Security.html#method-c-create_cert_email","(email, key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Creates a self-signed certificate with an issuer and subject from\n<code>email</code>, a subject alternative name of …\n"],["create_cert_self_signed","Gem::Security","Gem/Security.html#method-c-create_cert_self_signed","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates a self-signed certificate with an issuer and subject of\n<code>subject</code> and the given <code>extensions</code> for …\n"],["create_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-create_conflict","()","<p>@return [Conflict] a {Conflict} that reflects the failure to activate\n\n<pre>the {#possibility} in conjunction ...</pre>\n"],["create_entry","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-create_entry","(tuple, sec)",""],["create_ext","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext","(p1, p2, p3 = v3)","<p>Creates a new X509::Extension with passed values. See also\nx509v3_config(5).\n"],["create_ext_from_array","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_array","(ary)",""],["create_ext_from_hash","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_hash","(hash)",""],["create_ext_from_string","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_string","(str)",""],["create_extension","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-create_extension","(*arg)",""],["create_from","REXML::SourceFactory","REXML/SourceFactory.html#method-c-create_from","(arg)","<p>Generates a Source object @param arg Either a String, or an IO @return a\nSource, or nil if a bad argument …\n"],["create_guid","WIN32OLE","WIN32OLE.html#method-c-create_guid","()","<p>Creates GUID.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">create_guid</span> <span class=\"ruby-comment\"># =&gt; {1CB530F1-F6B1-404D-BCE6-1959BF91F4A8}</span>\n</pre>\n"],["create_header","MakeMakefile","MakeMakefile.html#method-i-create_header","(header = \"extconf.h\")","<p>Generates a header file consisting of the various macro definitions\ngenerated by other methods such as …\n"],["create_key","Gem::Security","Gem/Security.html#method-c-create_key","(length = KEY_LENGTH, algorithm = KEY_ALGORITHM)","<p>Creates a new key pair of the specified <code>length</code> and\n<code>algorithm</code>.  The default is a 3072 bit RSA key.\n"],["create_listeners","WEBrick::Utils","WEBrick/Utils.html#method-c-create_listeners","(address, port)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code>\nand returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_listeners","WEBrick::Utils","WEBrick/Utils.html#method-i-create_listeners","(address, port)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code>\nand returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_logfile","Logger::LogDevice","Logger/LogDevice.html#method-i-create_logfile","(filename)",""],["create_makefile","MakeMakefile","MakeMakefile.html#method-i-create_makefile","(target, srcprefix = nil)","<p>Generates the Makefile for your extension, passing along any options and\npreprocessor constants that …\n"],["create_new_id","CGI::Session","CGI/Session.html#method-i-create_new_id","()","<p>Create a new session id.\n<p>The session id is a secure random number by SecureRandom if possible,\notherwise …\n"],["create_option_parser","Gem::Command","Gem/Command.html#method-i-create_option_parser","()","<p>Creates an option parser and fills it in with the help info for the\ncommand.\n"],["create_self_signed_cert","WEBrick::Utils","WEBrick/Utils.html#method-c-create_self_signed_cert","(bits, cn, comment)","<p>Creates a self-signed certificate with the given number of\n<code>bits</code>, the issuer <code>cn</code> and a <code>comment</code> to\nbe stored …\n"],["create_self_signed_cert","WEBrick::Utils","WEBrick/Utils.html#method-i-create_self_signed_cert","(bits, cn, comment)","<p>Creates a self-signed certificate with the given number of\n<code>bits</code>, the issuer <code>cn</code> and a <code>comment</code> to\nbe stored …\n"],["create_ssl_params","Net::IMAP","Net/IMAP.html#method-i-create_ssl_params","(certs = nil, verify = true)",""],["create_ssl_params","Net::POP3","Net/POP3.html#method-c-create_ssl_params","(verify_or_params = {}, certs = nil)","<p>Constructs proper parameters from arguments\n"],["create_tmpdir","Gem::TestCase","Gem/TestCase.html#method-i-create_tmpdir","()","<p>creates a temporary directory with hax TODO: deprecate and remove\n"],["create_value","Fiddle::Importer","Fiddle/Importer.html#method-i-create_value","(ty, val=nil)","<p>Creates a class to wrap the C struct with the value <code>ty</code>\n<p>See also Fiddle::Importer.struct\n"],["created_specs","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-created_specs","()","<p>Returns a Hash of created Specification full names and the corresponding\nSpecification.\n"],["credentials_path","Gem::ConfigFile","Gem/ConfigFile.html#method-i-credentials_path","()","<p>Location of RubyGems.org credentials\n"],["critical","Net::SMTP","Net/SMTP.html#method-i-critical","()",""],["critical=","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-critical-3D","(p1)",""],["critical?","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-critical-3F","()",""],["crl=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-crl-3D","(p1)",""],["crls","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-crls","()",""],["crls=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-crls-3D","(p1)",""],["cross","Vector","Vector.html#method-i-cross","(*vs)",""],["cross_product","Vector","Vector.html#method-i-cross_product","(*vs)","<p>Returns the cross product of this vector with the others.\n\n<pre>Vector[1, 0, 0].cross_product Vector[0, 1, 0] ...</pre>\n"],["crypt","String","String.html#method-i-crypt","(p1)","<p>Applies a one-way cryptographic hash to <em>str</em> by invoking the\nstandard library function <code>crypt(3)</code> with the …\n"],["css","RDoc::Markdown","RDoc/Markdown.html#method-i-css","","<p>Allow style blocks\n"],["csv_attr_reader","RSS::BaseModel","RSS/BaseModel.html#method-i-csv_attr_reader","(*attrs)",""],["csv_integer_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-csv_integer_writer","(name, disp_name=name)",""],["csv_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-csv_writer","(name, disp_name=name)",""],["ctime","Date","Date.html#method-i-ctime","()","<p>Returns a string in asctime(3) format (but without “n0” at the end).  This\nmethod is equivalent …\n"],["ctime","File","File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory\ninformation about the file was …\n"],["ctime","File","File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","File::Stat","File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","Pathname","Pathname.html#method-i-ctime","()","<p>Returns the last change time, using directory information, not the file\nitself.\n<p>See File.ctime.\n"],["ctime","Time","Time.html#method-i-ctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\nTime.now.ctime ...</pre>\n"],["ctrl_cmd","OpenSSL::Engine","OpenSSL/Engine.html#method-i-ctrl_cmd","(p1, p2 = v2)","<p>Send the given <code>command</code> to this engine.\n<p>Raises an EngineError if the <code>command</code> fails.\n"],["current","Fiber","Fiber.html#method-c-current","()","<p>Returns the current fiber. You need to <code>require &#39;fiber&#39;</code>\nbefore using this method. If you are not …\n"],["current","RDoc::RDoc","RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current","Thread","Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401bdf4c run&gt;</span>\n</pre>\n"],["current=","RDoc::RDoc","RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current_cert","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-current_cert","()",""],["current_crl","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-current_crl","()",""],["current_element","RSS::Maker::Base","RSS/Maker/Base.html#method-i-current_element","(feed)",""],["current_group","PrettyPrint","PrettyPrint.html#method-i-current_group","()","<p>Returns the group most recently added to the stack.\n<p>Contrived example:\n\n<pre>out = &quot;&quot;\n=&gt; &quot;&quot;\nq = PrettyPrint.new(out) ...</pre>\n"],["current_line","REXML::IOSource","REXML/IOSource.html#method-i-current_line","()","<p>@return the current line in the source\n"],["current_line","REXML::Source","REXML/Source.html#method-i-current_line","()","<p>@return the current line in the source\n"],["current_section","RDoc::Context","RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If\ntemporary_section is available …\n"],["current_server","DRb","DRb.html#method-c-current_server","()","<p>Get the &#39;current&#39; server.\n<p>In the context of execution taking place within the main thread of a …\n"],["current_server","DRb","DRb.html#method-i-current_server","()","<p>Get the &#39;current&#39; server.\n<p>In the context of execution taking place within the main thread of a …\n"],["curry","Method","Method.html#method-i-curry","(*args)","<p>Returns a curried proc based on the method. When the proc is called with a\nnumber of arguments that is …\n"],["curry","Proc","Proc.html#method-i-curry","(p1 = v1)","<p>Returns a curried proc. If the optional <em>arity</em> argument is given,\nit determines the number of arguments. …\n"],["cursor","IO","IO.html#method-i-cursor","()",""],["cursor=","IO","IO.html#method-i-cursor-3D","(p1)",""],["curve_name","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-curve_name","()","<p>Returns the curve name (sn).\n<p>See the OpenSSL documentation for EC_GROUP_get_curve_name()\n"],["cwday","Date","Date.html#method-i-cwday","()","<p>Returns the day of calendar week (1-7, Monday is 1).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">cwday</span>          <span class=\"ruby-comment\">#=&gt; 6</span>\n</pre>\n"],["cweek","Date","Date.html#method-i-cweek","()","<p>Returns the calendar week number (1-53).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">cweek</span>          <span class=\"ruby-comment\">#=&gt; 5</span>\n</pre>\n"],["cwyear","Date","Date.html#method-i-cwyear","()","<p>Returns the calendar week based year.\n\n<pre>Date.new(2001,2,3).cwyear         #=&gt; 2001\nDate.new(2000,1,1).cwyear ...</pre>\n"],["cycle","Array","Array.html#method-i-cycle","(p1 = v1)","<p>Calls the given block for each element <code>n</code> times or forever if\n<code>nil</code> is given.\n<p>Does nothing if a non-positive …\n"],["cycle","Enumerable","Enumerable.html#method-i-cycle","(p1 = v1)","<p>Calls <em>block</em> for each element of <em>enum</em> repeatedly\n<em>n</em> times or forever if none or <code>nil</code> is given.  If a\nnon-positive …\n"],["d","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-d","()",""],["d_o_s","REXML::XPathParser","REXML/XPathParser.html#method-i-d_o_s","( p, ns, r )",""],["daemon","Process","Process.html#method-c-daemon","(*args)","<p>Detach the process from controlling terminal and run in the background as\nsystem daemon.  Unless the …\n"],["data","Net::SMTP","Net/SMTP.html#method-i-data","(msgstr = nil)","<p>This method sends a message. If <code>msgstr</code> is given, sends it as a\nmessage. If block is given, yield a message …\n"],["data","Resolv::DNS::Resource::TXT","Resolv/DNS/Resource/TXT.html#method-i-data","()","<p>Returns the concatenated string from <code>strings</code>.\n"],["data","Socket::AncillaryData","Socket/AncillaryData.html#method-i-data","()","<p>returns the cmsg data as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-constant\">INET6</span>, :<span class=\"ruby-constant\">IPV6</span>, :<span class=\"ruby-constant\">PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">data</span>\n<span class=\"ruby-comment\">#=&gt; &quot;&quot;</span>\n</pre>\n"],["data","Socket::Option","Socket/Option.html#method-i-data","()","<p>returns the socket option data as a string.\n\n<pre>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).data ...</pre>\n"],["data=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-data-3D","(p1)",""],["data_type","Zlib::ZStream","Zlib/ZStream.html#method-i-data_type","()","<p>Guesses the type of the data which have been inputed into the stream. The\nreturned value is either <code>BINARY</code> …\n"],["datadir","Gem","Gem.html#method-c-datadir","(gem_name)","<p>The path to the data directory specified by the gem name.  If the package\nis not available as a gem, …\n"],["datadir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-datadir","()","<p>The path to the data directory for this gem.\n"],["date","Gem::Specification","Gem/Specification.html#method-i-date","()","<p>The date this gem was created.  Lazily defaults to the current UTC date.\n<p>There is no need to set this …\n"],["date=","Gem::Specification","Gem/Specification.html#method-i-date-3D","(date)","<p>The date this gem was created\n<p>DO NOT set this, it is set automatically when the gem is packaged.\n"],["date=","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-date-3D","(_date)",""],["date=","RSS::Maker::ItemsBase::ItemBase","RSS/Maker/ItemsBase/ItemBase.html#method-i-date-3D","(_date)",""],["date=","RSS::Maker::ItemsBase::ItemBase::SourceBase","RSS/Maker/ItemsBase/ItemBase/SourceBase.html#method-i-date-3D","(_date)",""],["date_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-date_writer","(name, type, disp_name=name)",""],["datetime_format","Logger","Logger.html#method-i-datetime_format","()","<p>Returns the date format being used.  See #datetime_format=\n"],["datetime_format=","Logger","Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Set date-time format.\n<p>datetime_format &mdash; A string suitable for passing to <code>strftime</code>.\n\n"],["day","Date","Date.html#method-i-day","()","<p>Returns the day of the month (1-31).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mday</span>           <span class=\"ruby-comment\">#=&gt; 3</span>\n</pre>\n"],["day","Time","Time.html#method-i-day","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...</pre>\n"],["day_fraction","Date","Date.html#method-i-day_fraction","()","<p>Returns the fractional part of the day.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">12</span>).<span class=\"ruby-identifier\">day_fraction</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n"],["dclone","Array","Array.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object+ types\n"],["dclone","Float","Float.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Integer","Integer.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Integer","Integer.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Object","Object.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Symbol","Symbol.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["deafen","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-deafen","( listener=nil, &blok )",""],["debug","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-debug","(depth = 0, &block)","<p>Calls the {#resolver_ui}&#39;s {UI#debug} method @param [Integer] depth the\ndepth of the {#states} stack …\n"],["debug","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug","Gem::StreamUI","Gem/StreamUI.html#method-i-debug","(statement)","<p>Display a debug message on the same location as error messages.\n"],["debug","Logger","Logger.html#method-i-debug","(progname = nil, &block)","<p>Log a <code>DEBUG</code> message.\n<p>See #info for more information.\n"],["debug","Net::IMAP","Net/IMAP.html#method-c-debug","()","<p>Returns the debug mode.\n"],["debug","OpenSSL","OpenSSL.html#method-c-debug","()",""],["debug","Syslog::Logger","Syslog/Logger.html#method-i-debug","","<p>Logs a <code>message</code> at the debug (syslog debug) log level, or logs\nthe message returned from the block.\n"],["debug","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-debug","(msg)","<p>Shortcut for logging a DEBUG message\n"],["debug=","Net::IMAP","Net/IMAP.html#method-c-debug-3D","(val)","<p>Sets the debug mode.\n"],["debug=","OpenSSL","OpenSSL.html#method-c-debug-3D","(p1)","<p>Turns on or off debug mode. With debug mode, all erros added to the OpenSSL\nerror queue will be printed …\n"],["debug=","Shell","Shell.html#method-c-debug-3D","(val)",""],["debug=","Shell","Shell.html#method-i-debug-3D","(val)",""],["debug?","Gem::Resolver","Gem/Resolver.html#method-i-debug-3F","()",""],["debug?","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-debug-3F","()","<p>Whether or not debug messages should be printed. By default, whether or not\nthe `MOLINILLO_DEBUG` environment …\n"],["debug?","IRB::Context","IRB/Context.html#method-i-debug-3F","()","<p>Whether or not debug mode is enabled, see #debug_level=.\n"],["debug?","Logger","Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>DEBUG</code> messages.\n"],["debug?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-debug-3F","()","<p>Will the logger output DEBUG messages?\n"],["debug_level=","IRB::Context","IRB/Context.html#method-i-debug_level-3D","(value)","<p>Sets the debug level of irb\n<p>Can also be set using the <code>--irb_debug</code> command line option.\n<p>See IRB@Command+line+options …\n"],["debug_output=","Net::SMTP","Net/SMTP.html#method-i-debug_output-3D","(arg)","<p>WARNING: This method causes serious security holes. Use this method for\nonly debugging.\n<p>Set an output …\n"],["debug_thread_info","DEBUGGER__","DEBUGGER__.html#method-c-debug_thread_info","(input, binding)",""],["declare","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-c-declare","(test, repository)","<p>Executes a SpecFetcher setup block.  Yields an instance then creates the\ngems and specifications defined …\n"],["decode","OpenSSL::ASN1","OpenSSL/ASN1.html#method-c-decode","(p1)","<p>Decodes a BER- or DER-encoded value and creates an ASN1Data instance.\n<code>der</code> may be a <code>String</code> or any object …\n"],["decode","REXML::Encoding","REXML/Encoding.html#method-i-decode","(string)",""],["decode","URI::Escape","URI/Escape.html#method-i-decode","(*arg)",""],["decode64","Base64","Base64.html#method-i-decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with RFC 2045. Characters outside the …\n"],["decode_all","OpenSSL::ASN1","OpenSSL/ASN1.html#method-c-decode_all","(p1)","<p>Similar to <code>decode</code> with the difference that <code>decode</code>\nexpects one distinct value represented in <code>der</code>.\n<code>decode_all</code> …\n"],["decode_utf7","Net::IMAP","Net/IMAP.html#method-c-decode_utf7","(s)","<p>Decode a string from modified UTF-7 format to UTF-8.\n<p>UTF-7 is a 7-bit encoding of Unicode [UTF7].  IMAP …\n"],["decode_www_form","URI","URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8, separator: '&', use__charset_: false, isindex: false)","<p>Decode URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and returns …\n"],["decode_www_form_component","URI","URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decode given <code>str</code> of URL-encoded form data.\n<p>This decodes + to SP.\n<p>See URI.encode_www_form_component, URI.decode_www_form …\n"],["decrypt","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-decrypt","(*args)","<p>Initializes the Cipher for decryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["decrypt","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-decrypt","(p1, p2, p3 = v3)",""],["dedent_string","Ripper","Ripper.html#method-c-dedent_string","(p1, p2)",""],["dedent_string","Ripper","Ripper.html#method-i-dedent_string","(p1, p2)",""],["deep_clone","REXML::Parent","REXML/Parent.html#method-i-deep_clone","()","<p>Deeply clones this object.  This creates a complete duplicate of this\nParent, including all descendants. …\n"],["def_array_element","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_array_element","(name, plural=nil, klass_name=nil)",""],["def_atom_persons","RSS::Maker::AtomPersons","RSS/Maker/AtomPersons.html#method-i-def_atom_persons","(klass, name, maker_name, plural=nil)",""],["def_atom_text_construct","RSS::Maker::AtomTextConstruct","RSS/Maker/AtomTextConstruct.html#method-c-def_atom_text_construct","(klass, name, maker_name, klass_name=nil, atom_klass_name=nil)",""],["def_children_accessor","RSS::BaseModel","RSS/BaseModel.html#method-i-def_children_accessor","(accessor_name, plural_name)",""],["def_class","ERB","ERB.html#method-i-def_class","(superklass=Object, methodname='result')","<p>Define unnamed class which has <em>methodname</em> as instance method, and\nreturn it.\n<p>example:\n\n<pre>class MyClass_\n  ...</pre>\n"],["def_class_accessor","RSS::ITunesModelUtils","RSS/ITunesModelUtils.html#method-i-def_class_accessor","(klass, name, type, *args)",""],["def_class_accessor","RSS::Maker::ITunesBaseModel","RSS/Maker/ITunesBaseModel.html#method-i-def_class_accessor","(klass, name, type, *args)",""],["def_classed_element","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_classed_element","(name, class_name=nil, attribute_name=nil)",""],["def_classed_element_without_accessor","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_classed_element_without_accessor","(name, class_name=nil)",""],["def_classed_elements","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_classed_elements","(name, attribute, plural_class_name=nil, plural_name=nil, new_name=nil)",""],["def_convert","RSS::Converter","RSS/Converter.html#method-i-def_convert","(depth=0)",""],["def_corresponded_attr_reader","RSS::Element","RSS/Element.html#method-c-def_corresponded_attr_reader","(name, type=nil)",""],["def_corresponded_attr_writer","RSS::Element","RSS/Element.html#method-c-def_corresponded_attr_writer","(name, type=nil, disp_name=nil)",""],["def_csv_accessor","RSS::Maker::ITunesBaseModel","RSS/Maker/ITunesBaseModel.html#method-i-def_csv_accessor","(klass, full_name)",""],["def_csv_element","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_csv_element","(name, type=nil)",""],["def_delegator","Forwardable","Forwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegator","SingleForwardable","SingleForwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegators","Forwardable","Forwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_delegators","SingleForwardable","SingleForwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_e2message","Exception2MessageMapper","Exception2MessageMapper.html#method-i-def_e2message","(c, m)","<p>def_e2message(c, m)\n\n<pre>    c:  exception\n    m:  message_form\ndefine exception c with message m.</pre>\n"],["def_element_class_accessor","RSS::ITunesModelUtils","RSS/ITunesModelUtils.html#method-i-def_element_class_accessor","(klass, name, full_name, klass_name, recommended_attribute_name=nil)",""],["def_elements_class_accessor","RSS::ITunesModelUtils","RSS/ITunesModelUtils.html#method-i-def_elements_class_accessor","(klass, name, full_name, klass_name, plural_name, recommended_attribute_name=nil)",""],["def_elements_class_accessor","RSS::Maker::ITunesBaseModel","RSS/Maker/ITunesBaseModel.html#method-i-def_elements_class_accessor","(klass, name, full_name, full_plural_name, klass_name, plural_klass_name, recommended_attribute_name=nil)",""],["def_else_enc","RSS::Converter","RSS/Converter.html#method-i-def_else_enc","(to_enc, from_enc)",""],["def_erb_method","ERB::DefMethod","ERB/DefMethod.html#method-i-def_erb_method","(methodname, erb_or_fname)","<p>define <em>methodname</em> as instance method of current module, using ERB\nobject or eRuby file\n"],["def_erb_method","ERB::DefMethod","ERB/DefMethod.html#method-c-def_erb_method","(methodname, erb_or_fname)","<p>define <em>methodname</em> as instance method of current module, using ERB\nobject or eRuby file\n"],["def_exception","Exception2MessageMapper","Exception2MessageMapper.html#method-i-def_exception","(n, m, s = StandardError)","<p>def_exception(n, m, s)\n\n<pre>    n:  exception_name\n    m:  message_form\n    s:  superclass(default: StandardError) ...</pre>\n"],["def_extend_command","IRB::ContextExtender","IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)","<p>Evaluate the given <code>command</code> from the given\n<code>load_file</code> on the Context module.\n<p>Will also define any given …\n"],["def_extend_command","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>Evaluate the given <code>cmd_name</code> on the given\n<code>cmd_class</code> Class.\n<p>Will also define any given <code>aliases</code> for the method. …\n"],["def_get_text_element","RSS::BaseListener","RSS/BaseListener.html#method-c-def_get_text_element","(uri, element_name, file, line)",""],["def_head_option","OptionParser","OptionParser.html#method-i-def_head_option","(*opts, &block)",""],["def_iconv_convert","RSS::Converter","RSS/Converter.html#method-i-def_iconv_convert","(to_enc, from_enc, depth=0)",""],["def_inspector","IRB::Inspector","IRB/Inspector.html#method-c-def_inspector","(key, arg=nil, &block)","<p>Example\n\n<pre>Inspector.def_inspector(key, init_p=nil){|v| v.inspect}\nInspector.def_inspector([key1,..], init_p=nil){|v| ...</pre>\n"],["def_instance_delegator","Forwardable","Forwardable.html#method-i-def_instance_delegator","(accessor, method, ali = method)","<p>Define <code>method</code> as delegator instance method with an optional\nalias name <code>ali</code>. Method calls to <code>ali</code> will …\n"],["def_instance_delegators","Forwardable","Forwardable.html#method-i-def_instance_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for\nusing a different name.  …\n"],["def_method","ERB","ERB.html#method-i-def_method","(mod, methodname, fname='(ERB)')","<p>Define <em>methodname</em> as instance method of <em>mod</em> from compiled\nRuby source.\n<p>example:\n\n<pre>filename = &#39;example.rhtml&#39; ...</pre>\n"],["def_module","ERB","ERB.html#method-i-def_module","(methodname='erb')","<p>Create unnamed module, define <em>methodname</em> as instance method of it,\nand return it.\n<p>example:\n\n<pre>filename = &#39;example.rhtml&#39; ...</pre>\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-i-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with\nthe given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-c-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with\nthe given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-def_notifier","(level, prefix = \"\")","<p>Creates a new LeveledNotifier in the composite #notifiers group.\n<p>The given <code>prefix</code> will be assigned to …\n"],["def_option","OptionParser","OptionParser.html#method-i-def_option","(*opts, &block)",""],["def_other_element","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_other_element","(name)",""],["def_other_element_without_accessor","RSS::Maker::Base","RSS/Maker/Base.html#method-c-def_other_element_without_accessor","(name)",""],["def_post_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_post_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a postfix call to the given\n<code>extend_method</code>.\n"],["def_pre_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_pre_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a prefix call to the given\n<code>extend_method</code>.\n"],["def_same_enc","RSS::Converter","RSS/Converter.html#method-i-def_same_enc","()",""],["def_single_delegator","SingleForwardable","SingleForwardable.html#method-i-def_single_delegator","(accessor, method, ali = method)","<p>Defines a method <em>method</em> which delegates to <em>accessor</em> (i.e.\nit calls the method of the same name in <em>accessor</em> …\n"],["def_single_delegators","SingleForwardable","SingleForwardable.html#method-i-def_single_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for\nusing a different name.  …\n"],["def_system_command","Shell","Shell.html#method-c-def_system_command","(command, path = command)","<p>Convenience method for Shell::CommandProcessor.def_system_command. Defines\nan instance method which will …\n"],["def_system_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-def_system_command","(command, path = command)","<p>Defines a command, registering <code>path</code> as a Shell method for the\ngiven <code>command</code>.\n\n<pre>Shell::CommandProcessor.def_system_command ...</pre>\n"],["def_tail_option","OptionParser","OptionParser.html#method-i-def_tail_option","(*opts, &block)",""],["def_to_euc_jp_from_iso_2022_jp","RSS::Converter","RSS/Converter.html#method-i-def_to_euc_jp_from_iso_2022_jp","()",""],["def_to_euc_jp_from_shift_jis","RSS::Converter","RSS/Converter.html#method-i-def_to_euc_jp_from_shift_jis","()",""],["def_to_euc_jp_from_utf_8","RSS::Converter","RSS/Converter.html#method-i-def_to_euc_jp_from_utf_8","()",""],["def_to_iso_2022_jp_from_euc_jp","RSS::Converter","RSS/Converter.html#method-i-def_to_iso_2022_jp_from_euc_jp","()",""],["def_to_iso_8859_1_from_utf_8","RSS::Converter","RSS/Converter.html#method-i-def_to_iso_8859_1_from_utf_8","()",""],["def_to_shift_jis_from_euc_jp","RSS::Converter","RSS/Converter.html#method-i-def_to_shift_jis_from_euc_jp","()",""],["def_to_shift_jis_from_utf_8","RSS::Converter","RSS/Converter.html#method-i-def_to_shift_jis_from_utf_8","()",""],["def_to_utf_8_from_euc_jp","RSS::Converter","RSS/Converter.html#method-i-def_to_utf_8_from_euc_jp","()",""],["def_to_utf_8_from_iso_8859_1","RSS::Converter","RSS/Converter.html#method-i-def_to_utf_8_from_iso_8859_1","()",""],["def_to_utf_8_from_shift_jis","RSS::Converter","RSS/Converter.html#method-i-def_to_utf_8_from_shift_jis","()",""],["def_uconv_convert_if_can","RSS::Converter","RSS/Converter.html#method-i-def_uconv_convert_if_can","(meth, to_enc, from_enc, nkf_arg)",""],["def_yes_clean_other_accessor","RSS::Maker::ITunesBaseModel","RSS/Maker/ITunesBaseModel.html#method-i-def_yes_clean_other_accessor","(klass, full_name)",""],["def_yes_other_accessor","RSS::Maker::ITunesBaseModel","RSS/Maker/ITunesBaseModel.html#method-i-def_yes_other_accessor","(klass, full_name)",""],["default","Gem::Requirement","Gem/Requirement.html#method-c-default","()","<p>A default “version requirement” can surely <em>only</em> be &#39;&gt;=\n0&#39;.\n"],["default","Hash","Hash.html#method-i-default","(*args)","<p>Returns the default value, the value that would be returned by <em>hsh</em>\nif <em>key</em> did not exist in <em>hsh</em>. See also …\n"],["default","REXML::XMLDecl","REXML/XMLDecl.html#method-c-default","()","<p>Only use this if you do not want the XML declaration to be written; this\nobject is ignored by the XML …\n"],["default","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-default","()","<p>Returns default value. If the default value does not exist, this method\nreturns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["default=","Hash","Hash.html#method-i-default-3D","(p1)","<p>Sets the default value, the value returned for a key that does not exist in\nthe hash. It is not possible …\n"],["default_acl","DRb::DRbServer","DRb/DRbServer.html#method-c-default_acl","(acl)","<p>Set the default access control list to <code>acl</code>.  The default ACL\nis <code>nil</code>.\n<p>See also DRb::ACL and #new()\n"],["default_argc_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_argc_limit","(argc)","<p>Set the default value for the :argc_limit option.\n<p>See #new().  The initial default value is 256.\n"],["default_bindir","Gem","Gem.html#method-c-default_bindir","()","<p>The default directory for binaries\n"],["default_cert_path","Gem","Gem.html#method-c-default_cert_path","()","<p>The default signing certificate chain path\n"],["default_dir","Gem","Gem.html#method-c-default_dir","()","<p>Default home directory path to be used if an alternate value is not\nspecified in the environment\n"],["default_event_sources","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-default_event_sources","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["default_exec_format","Gem","Gem.html#method-c-default_exec_format","()","<p>Deduce Ruby&#39;s –program-prefix and –program-suffix from its install name\n"],["default_ext_dir_for","Gem","Gem.html#method-c-default_ext_dir_for","(base_dir)","<p>Returns binary extensions dir for specified RubyGems base dir or nil if\nsuch directory cannot be determined. …\n"],["default_external","Encoding","Encoding.html#method-c-default_external","()","<p>Returns default external encoding.\n<p>The default external encoding is used by default for strings created …\n"],["default_external=","Encoding","Encoding.html#method-c-default_external-3D","(p1)","<p>Sets default external encoding.  You should not set\nEncoding::default_external in ruby code as strings …\n"],["default_gem?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-default_gem-3F","()",""],["default_gems_use_full_paths?","Gem","Gem.html#method-c-default_gems_use_full_paths-3F","()","<p>Whether to expect full paths in default gems - true for non-MRI ruby\nimplementations\n"],["default_id_conv","DRb::DRbServer","DRb/DRbServer.html#method-c-default_id_conv","(idconv)","<p>Set the default value for the :id_conv option.\n<p>See #new().  The initial default value is a DRbIdConv instance. …\n"],["default_imap_port","Net::IMAP","Net/IMAP.html#method-c-default_imap_port","()",""],["default_imaps_port","Net::IMAP","Net/IMAP.html#method-c-default_imaps_port","()",""],["default_internal","Encoding","Encoding.html#method-c-default_internal","()","<p>Returns default internal encoding.  Strings will be transcoded to the\ndefault internal encoding in the …\n"],["default_internal=","Encoding","Encoding.html#method-c-default_internal-3D","(p1)","<p>Sets default internal encoding or removes default internal encoding when\npassed nil.  You should not …\n"],["default_key_path","Gem","Gem.html#method-c-default_key_path","()","<p>The default signing key path\n"],["default_load_limit","DRb::DRbServer","DRb/DRbServer.html#method-c-default_load_limit","(sz)","<p>Set the default value for the :load_limit option.\n<p>See #new().  The initial default value is 25 MB.\n"],["default_ole_types","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-default_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["default_parser","RSS::Parser","RSS/Parser.html#method-c-default_parser","()",""],["default_parser=","RSS::Parser","RSS/Parser.html#method-c-default_parser-3D","(new_value)","<p>Set @@default_parser to new_value if it is one of the available parsers.\nElse raise NotValidXMLParser …\n"],["default_passive","Net::FTP","Net/FTP.html#method-c-default_passive","()","<p>When <code>true</code>, connections are in passive mode per default.\nDefault: <code>true</code>.\n"],["default_passive=","Net::FTP","Net/FTP.html#method-c-default_passive-3D","(value)","<p>When <code>true</code>, connections are in passive mode per default.\nDefault: <code>true</code>.\n"],["default_path","Gem","Gem.html#method-c-default_path","()","<p>Default gem load path\n"],["default_path","Gem::PathSupport","Gem/PathSupport.html#method-i-default_path","()","<p>Return the default Gem path\n"],["default_pop3_port","Net::POP3","Net/POP3.html#method-c-default_pop3_port","()","<p>The default port for POP3 connections, port 110\n"],["default_pop3s_port","Net::POP3","Net/POP3.html#method-c-default_pop3s_port","()","<p>The default port for POP3S connections, port 995\n"],["default_port","Net::HTTP","Net/HTTP.html#method-c-default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["default_port","Net::IMAP","Net/IMAP.html#method-c-default_port","()","<p>The default port for IMAP connections, port 143\n"],["default_port","Net::POP3","Net/POP3.html#method-c-default_port","()","<p>returns the port for POP3\n"],["default_port","Net::SMTP","Net/SMTP.html#method-c-default_port","()","<p>The default SMTP port number, 25.\n"],["default_port","URI::Generic","URI/Generic.html#method-i-default_port","()","<p>Returns default port\n"],["default_port","URI::Generic","URI/Generic.html#method-c-default_port","()","<p>Returns default port\n"],["default_proc","Hash","Hash.html#method-i-default_proc","()","<p>If <code>Hash::new</code> was invoked with a block, return that block,\notherwise return <code>nil</code>.\n\n<pre>h = Hash.new {|h,k| h[k] ...</pre>\n"],["default_proc=","Hash","Hash.html#method-i-default_proc-3D","(p1)","<p>Sets the default proc to be executed on each failed key lookup.\n\n<pre>h.default_proc = proc do |hash, key|\n ...</pre>\n"],["default_record_separator","Shell","Shell.html#method-c-default_record_separator","()",""],["default_record_separator=","Shell","Shell.html#method-c-default_record_separator-3D","(rs)",""],["default_rubygems_dirs","Gem","Gem.html#method-c-default_rubygems_dirs","()","<p>Paths where RubyGems&#39; .rb files and bin files are installed\n"],["default_safe_level","DRb::DRbServer","DRb/DRbServer.html#method-c-default_safe_level","(level)","<p>Set the default safe level to <code>level</code>.  The default safe level\nis 0\n<p>See #new for more information.\n"],["default_sources","Gem","Gem.html#method-c-default_sources","()","<p>An Array of the default sources that come with RubyGems\n"],["default_spec_cache_dir","Gem","Gem.html#method-c-default_spec_cache_dir","()","<p>Default spec directory path to be used if an alternate value is not\nspecified in the environment\n"],["default_spec_file","Gem::Installer","Gem/Installer.html#method-i-default_spec_file","()","<p>The location of the default spec file for default gems.\n"],["default_specifications_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-default_specifications_dir","()",""],["default_src_encoding","Object","Object.html#method-i-default_src_encoding","()","<p>DO NOT WRITE ANY MAGIC COMMENT HERE.\n"],["default_ssl_context","Net::SMTP","Net/SMTP.html#method-c-default_ssl_context","()",""],["default_ssl_port","Net::IMAP","Net/IMAP.html#method-c-default_ssl_port","()",""],["default_ssl_port","Net::SMTP","Net/SMTP.html#method-c-default_ssl_port","()",""],["default_stubs","Gem::Specification","Gem/Specification.html#method-c-default_stubs","(pattern)",""],["default_submission_port","Net::SMTP","Net/SMTP.html#method-c-default_submission_port","()","<p>The default mail submission port number, 587.\n"],["default_system_path","Shell","Shell.html#method-c-default_system_path","()","<p>Returns the directories in the current shell&#39;s PATH environment\nvariable as an array of directory …\n"],["default_system_path=","Shell","Shell.html#method-c-default_system_path-3D","(path)","<p>Sets the system_path that new instances of Shell should have as their\ninitial system_path.\n<p><code>path</code> should …\n"],["default_title=","RDoc::Options","RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a\nsource file, so that a title …\n"],["default_tls_port","Net::IMAP","Net/IMAP.html#method-c-default_tls_port","()","<p>The default port for IMAPS connections, port 993\n"],["default_tls_port","Net::SMTP","Net/SMTP.html#method-c-default_tls_port","()","<p>The default SMTPS port number, 465.\n"],["default_value","Gem::Specification","Gem/Specification.html#method-i-default_value","(name)","<p>The default value for specification attribute <code>name</code>\n"],["defaults","RDoc::Task","RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults","RDoc::Task","RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults_str","Gem::Command","Gem/Command.html#method-i-defaults_str","()","<p>Override to display the default values of the command options. (similar to\n<code>arguments</code>, but displays the …\n"],["define","Gem::PackageTask","Gem/PackageTask.html#method-i-define","()","<p>Create the Rake tasks and actions specified by this Gem::PackageTask.\n(<code>define</code> is automatically called …\n"],["define","OptionParser","OptionParser.html#method-i-define","(*opts, &block)",""],["define","RDoc::Task","RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define","RDoc::Task","RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define_aliases","Sync_m","Sync_m.html#method-c-define_aliases","(cl)",""],["define_aliases","Sync_m","Sync_m.html#method-c-define_aliases","(cl)",""],["define_by_keywords","OptionParser","OptionParser.html#method-i-define_by_keywords","(options, meth, **opts)",""],["define_finalizer","ObjectSpace","ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was\ndestroyed. The object ID of the <em>obj</em> will be passed …\n"],["define_head","OptionParser","OptionParser.html#method-i-define_head","(*opts, &block)",""],["define_method","Module","Module.html#method-i-define_method","(*args)","<p>Defines an instance method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["define_singleton_method","Object","Object.html#method-i-define_singleton_method","(*args)","<p>Defines a singleton method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["define_tail","OptionParser","OptionParser.html#method-i-define_tail","(*opts, &block)",""],["defined_class","TracePoint","TracePoint.html#method-i-defined_class","()","<p>Return class or module of the method being called.\n\n<pre>class C; def foo; end; end\ntrace = TracePoint.new(:call) ...</pre>\n"],["defined_in?","RDoc::Context","RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","RDoc::Attr","RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt;\nMyClassName</code>\n"],["definition_lists","RDoc::Markdown","RDoc/Markdown.html#method-i-definition_lists","","<p>Allow PHP Markdown Extras style definition lists\n"],["deflate","Gem","Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["deflate","Zlib","Zlib.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are\nZlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","Zlib/Deflate.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are\nZlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","Zlib/Deflate.html#method-i-deflate","(p1, p2 = v2)","<p>Inputs <code>string</code> into the deflate stream and returns the output\nfrom the stream.  On calling this method, …\n"],["degree","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-degree","()","<p>See the OpenSSL documentation for EC_GROUP_get_degree()\n"],["delegate","Forwardable","Forwardable.html#method-i-delegate","(hash)",""],["delegate","SingleForwardable","SingleForwardable.html#method-i-delegate","(hash)",""],["deletable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-deletable-3F","()","<p>Returns <code>true</code> if the file or directory may be deleted by\nDELE/RMD.\n"],["delete","Array","Array.html#method-i-delete","(p1)","<p>Deletes all items from <code>self</code> that are equal to\n<code>obj</code>.\n<p>Returns the last deleted item, or <code>nil</code> if no matching …\n"],["delete","CGI::Session","CGI/Session.html#method-i-delete","()","<p>Delete the session from storage.  Also closes the storage.\n<p>Note that the session&#39;s data is <em>not</em> automatically …\n"],["delete","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-delete","()","<p>Close and delete the session&#39;s FileStore file.\n"],["delete","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-delete","()","<p>Delete the session state.\n"],["delete","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-delete","()","<p>Delete the session state.\n<p>A no-op.\n"],["delete","CGI::Session::PStore","CGI/Session/PStore.html#method-i-delete","()","<p>Close and delete the session&#39;s PStore file.\n"],["delete","CSV::Row","CSV/Row.html#method-i-delete","(header_or_index, minimum_index = 0)","<p>Used to remove a pair from the row by <code>header</code> or\n<code>index</code>.  The pair is located as described in CSV::Row.field() …\n"],["delete","CSV::Table","CSV/Table.html#method-i-delete","(index_or_header)","<p>Removes and returns the indicated column or row.  In the default mixed mode\nindices refer to rows and …\n"],["delete","DBM","DBM.html#method-i-delete","(p1)","<p>Deletes an entry from the database.\n"],["delete","Dir","Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["delete","ENV","ENV.html#method-c-delete","(p1)","<p>Deletes the environment variable with <code>name</code> and returns the\nvalue of the variable.  If a block is given …\n"],["delete","File","File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["delete","GDBM","GDBM.html#method-i-delete","(p1)","<p>Removes the key-value-pair with the specified <em>key</em> from this\ndatabase and returns the corresponding <em>value</em> …\n"],["delete","Gem::SourceList","Gem/SourceList.html#method-i-delete","(source)","<p>Deletes <code>source</code> from the source list which may be a Gem::Source\nor a URI.\n"],["delete","Hash","Hash.html#method-i-delete","(p1)","<p>Deletes the key-value pair and returns the value from <em>hsh</em> whose\nkey is equal to <em>key</em>. If the key is not …\n"],["delete","IRB::JobManager","IRB/JobManager.html#method-i-delete","(key)","<p>Deletes the job at the given <code>key</code>.\n"],["delete","Net::FTP","Net/FTP.html#method-i-delete","(filename)","<p>Deletes a file on the server.\n"],["delete","Net::HTTP","Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["delete","Net::IMAP","Net/IMAP.html#method-i-delete","(mailbox)","<p>Sends a DELETE command to remove the <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["delete","Net::POPMail","Net/POPMail.html#method-i-delete","()","<p>Marks a message for deletion on the server.  Deletion does not actually\noccur until the end of the session; …\n"],["delete","PStore","PStore.html#method-i-delete","(name)","<p>Removes an object hierarchy from the data store, by <em>name</em>.\n<p><strong>WARNING</strong>:  This method is only valid in a\nPStore#transaction …\n"],["delete","Pathname","Pathname.html#method-i-delete","()","<p>Removes a file or directory, using File.unlink if <code>self</code> is a\nfile, or Dir.unlink as necessary.\n"],["delete","REXML::Attributes","REXML/Attributes.html#method-i-delete","( attribute )","<p>Removes an attribute\n<p>attribute &mdash; either a String, which is the name of the attribute to remove – namespaces\n…\n"],["delete","REXML::Elements","REXML/Elements.html#method-i-delete","(element)","<p>Deletes a child Element\n<p>element &mdash; Either an Element, which is removed directly; an xpath, where the first …\n"],["delete","REXML::Parent","REXML/Parent.html#method-i-delete","( object )",""],["delete","Rinda::TupleBag","Rinda/TupleBag.html#method-i-delete","(tuple)","<p>Removes <code>tuple</code> from the TupleBag.\n"],["delete","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-i-delete","(tuple)",""],["delete","SDBM","SDBM.html#method-i-delete","(p1)","<p>Deletes the key-value pair corresponding to the given <code>key</code>. If\nthe <code>key</code> exists, the deleted value will …\n"],["delete","Set","Set.html#method-i-delete","(o)","<p>Deletes the given object from the set and returns self.  Use\n<code>subtract</code> to delete many items at once.\n"],["delete","String","String.html#method-i-delete","(*args)","<p>Returns a copy of <em>str</em> with all characters in the intersection of\nits arguments deleted. Uses the same …\n"],["delete","Tempfile","Tempfile.html#method-i-delete","()",""],["delete","YAML::DBM","YAML/DBM.html#method-i-delete","( key )","<p>Deletes value from database associated with <code>key</code>.\n<p>Returns value or <code>nil</code>.\n"],["delete!","Net::POPMail","Net/POPMail.html#method-i-delete-21","()",""],["delete!","String","String.html#method-i-delete-21","(*args)","<p>Performs a <code>delete</code> operation in place, returning <em>str</em>,\nor <code>nil</code> if <em>str</em> was not modified.\n"],["delete?","Set","Set.html#method-i-delete-3F","(o)","<p>Deletes the given object from the set and returns self.  If the object is\nnot in the set, returns nil. …\n"],["delete_all","Net::POP3","Net/POP3.html#method-i-delete_all","()","<p>Deletes all messages on the server.\n<p>If called with a block, yields each message in turn before deleting …\n"],["delete_all","Net::POP3","Net/POP3.html#method-c-delete_all","(address, port = nil, account = nil, password = nil, isapop = false, &block)","<p>Starts a POP3 session and deletes all messages on the server. If a block is\ngiven, each POPMail object …\n"],["delete_all","REXML::Attributes","REXML/Attributes.html#method-i-delete_all","( name )","<p>Deletes all attributes matching a name.  Namespaces are significant.\n<p>name &mdash; A String; all attributes that …\n"],["delete_all","REXML::Elements","REXML/Elements.html#method-i-delete_all","( xpath )","<p>Removes multiple elements.  Filters for Element children, regardless of\nXPath matching.\n<p>xpath &mdash; all elements …\n"],["delete_at","Array","Array.html#method-i-delete_at","(p1)","<p>Deletes the element at the specified <code>index</code>, returning that\nelement, or <code>nil</code> if the <code>index</code> is out of range. …\n"],["delete_at","REXML::Parent","REXML/Parent.html#method-i-delete_at","( index )",""],["delete_attribute","REXML::Element","REXML/Element.html#method-i-delete_attribute","(key)","<p>Removes an attribute\n<p>key &mdash; either an Attribute or a String.  In either case, the attribute is found by\nmatching …\n"],["delete_edge","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-delete_edge","(edge)","<p>Deletes an {Edge} from the dependency graph @param [Edge] edge @return\n[Void]\n"],["delete_edge","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-delete_edge","(graph, origin_name, destination_name, requirement)","<p>{include:DependencyGraph#delete_edge} @param [Graph] graph the graph to\nperform the action on @param …\n"],["delete_element","REXML::Element","REXML/Element.html#method-i-delete_element","(element)","<p>Deletes a child element.\n<p>element &mdash; Must be an <code>Element</code>, <code>String</code>, or\n<code>Integer</code>.  If Element, the element is removed. …\n"],["delete_field","OpenStruct","OpenStruct.html#method-i-delete_field","(name)","<p>Remove the named field from the object. Returns the value that the field\ncontained if it was defined. …\n"],["delete_first","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-delete_first","(array, item)",""],["delete_if","Array","Array.html#method-i-delete_if","()","<p>Deletes every element of <code>self</code> for which block evaluates to\n<code>true</code>.\n<p>The array is changed instantly every …\n"],["delete_if","CSV::Row","CSV/Row.html#method-i-delete_if","(&block)","<p>The provided <code>block</code> is passed a header and field for each pair\nin the row and expected to return <code>true</code> …\n"],["delete_if","CSV::Table","CSV/Table.html#method-i-delete_if","(&block)","<p>Removes any column or row for which the block returns <code>true</code>. \nIn the default mixed mode or row mode, iteration …\n"],["delete_if","DBM","DBM.html#method-i-delete_if","()","<p>Deletes all entries for which the code block returns true. Returns self.\n"],["delete_if","ENV","ENV.html#method-c-delete_if","()","<p>Deletes every environment variable for which the block evaluates to\n<code>true</code>.\n<p>If no block is given an enumerator …\n"],["delete_if","GDBM","GDBM.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>gdbm</em> for which <em>block</em>\nevaluates to true.\n"],["delete_if","Hash","Hash.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>true</code>.\n<p>If no block is given, an enumerator …\n"],["delete_if","REXML::Parent","REXML/Parent.html#method-i-delete_if","( &block )",""],["delete_if","SDBM","SDBM.html#method-i-delete_if","()","<p>Iterates over the key-value pairs in the database, deleting those for which\nthe block returns <code>true</code>.\n"],["delete_if","Set","Set.html#method-i-delete_if","()","<p>Deletes every element of the set for which block evaluates to true, and\nreturns self. Returns an enumerator …\n"],["delete_if","YAML::DBM","YAML/DBM.html#method-i-delete_if","()","<p>Calls the given block once for each <code>key</code>, <code>value</code>\npair in the database. Deletes all entries for which the …\n"],["delete_legacy_args","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["delete_legacy_args","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["delete_namespace","REXML::Element","REXML/Element.html#method-i-delete_namespace","(namespace=\"xmlns\")","<p>Removes a namespace from this node.  This only works if the namespace is\nactually declared in this node. …\n"],["delete_observer","Observable","Observable.html#method-i-delete_observer","(observer)","<p>Remove <code>observer</code> as an observer on this object so that it will\nno longer receive notifications.\n<p>observer … &mdash; "],["delete_observers","Observable","Observable.html#method-i-delete_observers","()","<p>Remove all observers associated with this object.\n"],["delete_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_text","Readline","Readline.html#method-c-delete_text","(*args)","<p>Delete text between start and end in the current line.\n<p>See GNU Readline&#39;s rl_delete_text function. …\n"],["delete_unless_alive","Rinda::TupleBag","Rinda/TupleBag.html#method-i-delete_unless_alive","()","<p>Delete tuples which dead tuples from the TupleBag, returning the deleted\ntuples.\n"],["deleted?","Net::POPMail","Net/POPMail.html#method-i-deleted-3F","()","<p>True if the mail has been deleted.\n"],["denominator","Complex","Complex.html#method-i-denominator","()","<p>Returns the denominator (lcm of both denominator - real and imag).\n<p>See numerator.\n"],["denominator","Float","Float.html#method-i-denominator","()","<p>Returns the denominator (always positive).  The result is machine\ndependent.\n<p>See numerator.\n"],["denominator","Integer","Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Integer","Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Numeric","Numeric.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n"],["denominator","Rational","Rational.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n\n<pre>Rational(7).denominator             #=&gt; 1\nRational(7, 1).denominator ...</pre>\n"],["dep","Gem::TestCase","Gem/TestCase.html#method-i-dep","(name, *requirements)","<p>Construct a new Gem::Dependency.\n"],["depend_rules","MakeMakefile","MakeMakefile.html#method-i-depend_rules","(depend)","<p>Processes the data contents of the “depend” file.  Each line of this file\nis expected to be …\n"],["dependencies","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Specification","Gem/Specification.html#method-i-dependencies","()","<p>A list of Gem::Dependency objects this gem depends on.\n<p>Use #add_dependency or #add_development_dependency …\n"],["dependencies_for","Gem::Resolver","Gem/Resolver.html#method-i-dependencies_for","(specification)",""],["dependencies_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#dependencies_for)\n"],["dependencies_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>Returns the dependencies of `specification`. @note This method should be\n&#39;pure&#39;, i.e. the return …\n"],["dependency","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-i-dependency","()",""],["dependency_order","Gem::DependencyList","Gem/DependencyList.html#method-i-dependency_order","()","<p>Return a list of the gem specifications in the dependency list, sorted in\norder so that no gemspec in …\n"],["dependency_request","Gem::TestCase","Gem/TestCase.html#method-i-dependency_request","(dep, from_name, from_version, parent = nil)","<p>Constructs a Gem::Resolver::DependencyRequest from a Gem::Dependency\n<code>dep</code>, a <code>from_name</code> and <code>from_version</code> …\n"],["dependent_gems","Gem::Specification","Gem/Specification.html#method-i-dependent_gems","()","<p>Return a list of all gems that have a dependency on this gemspec.  The list\nis structured with entries …\n"],["dependent_specs","Gem::Specification","Gem/Specification.html#method-i-dependent_specs","()","<p>Returns all specs that matches this spec&#39;s runtime dependencies.\n"],["deprecate","Gem::Deprecate","Gem/Deprecate.html#method-c-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it\nup in a dummy method. It warns on each …\n"],["deprecate","Gem::Deprecate","Gem/Deprecate.html#method-i-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it\nup in a dummy method. It warns on each …\n"],["deprecate_constant","Module","Module.html#method-i-deprecate_constant","(*args)","<p>Makes a list of existing constants deprecated.\n"],["depth","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-depth","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#depth)\n"],["deq","Queue","Queue.html#method-i-deq","(*args)",""],["deq","SizedQueue","SizedQueue.html#method-i-deq","(*args)",""],["dequote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-dequote","(str)","<p>Removes quotes and escapes from <code>str</code>\n"],["dequote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-dequote","(str)","<p>Removes quotes and escapes from <code>str</code>\n"],["descend","Pathname","Pathname.html#method-i-descend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in descending order. …\n"],["descendant_or_self","REXML::XPathParser","REXML/XPathParser.html#method-i-descendant_or_self","( path_stack, nodeset )","<p>FIXME The next two methods are BAD MOJO! This is my achilles heel.  If\nanybody thinks of a better way …\n"],["descendent?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-descendent-3F","(other)",""],["description","Gem::Command","Gem/Command.html#method-i-description","()","<p>Override to display a longer description of what this command does.\n"],["description","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-description","()",""],["description=","Gem::Specification","Gem/Specification.html#method-i-description-3D","(str)","<p>A detailed description of this gem.  See also #summary\n"],["deserialize","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-deserialize","(o)",""],["destination_encoding","Encoding::Converter","Encoding/Converter.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an Encoding object.\n"],["destination_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["det","Matrix","Matrix.html#method-i-det","()",""],["det","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-det","()","<p>Returns the determinant of <code>A</code>, calculated efficiently from the\nfactorization.\n"],["det_e","Matrix","Matrix.html#method-i-det_e","()",""],["detach","Process","Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes\nuntil the parent collects that …\n"],["detach_vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-detach_vertex_named","(name)","<p>Detaches the {#vertex_named} `name` {Vertex} from the graph, recursively\nremoving any non-root vertices …\n"],["detach_vertex_named","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-detach_vertex_named","(graph, name)","<p>@macro action\n"],["detached","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-detached","()",""],["detached=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-detached-3D","(p1)",""],["detached?","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-detached-3F","()",""],["detect","Enumerable","Enumerable.html#method-i-detect","(p1 = v1)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["detect","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-detect","(type=:complete)","<p>Return all gem name tuples who&#39;s names match <code>obj</code>\n"],["detect_encoding","REXML::Source","REXML/Source.html#method-i-detect_encoding","()",""],["detect_gemdeps","Gem","Gem.html#method-c-detect_gemdeps","(path = nil)","<p>TODO remove with RubyGems 3.0\n"],["detect_implicit","Psych","Psych.html#method-c-detect_implicit","(thing)",""],["determinant","Matrix","Matrix.html#method-i-determinant","()","<p>Returns the determinant of the matrix.\n<p>Beware that using Float values can yield erroneous results because …\n"],["determinant","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-determinant","()",""],["determinant_bareiss","Matrix","Matrix.html#method-i-determinant_bareiss","()","<p>Private. Use Matrix#determinant\n<p>Returns the determinant of the matrix, using Bareiss&#39; multistep\ninteger-preserving …\n"],["determinant_e","Matrix","Matrix.html#method-i-determinant_e","()","<p>deprecated; use Matrix#determinant\n"],["dev","File::Stat","File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">dev</span>   <span class=\"ruby-comment\">#=&gt; 774</span>\n</pre>\n"],["dev_major","File::Stat","File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).dev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).dev_major ...</pre>\n"],["dev_minor","File::Stat","File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).dev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).dev_minor ...</pre>\n"],["development?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-development-3F","()","<p>Is this activation request for a development dependency?\n"],["development?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-development-3F","()","<p>Is this dependency a development dependency?\n"],["development_dependencies","Gem::Specification","Gem/Specification.html#method-i-development_dependencies","()","<p>List of dependencies that are used for development\n"],["dfdxi","Jacobian","Jacobian.html#method-i-dfdxi","(f,fx,x,i)","<p>Computes the derivative of f at x. fx is the value of f at x.\n"],["dh_compute_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-dh_compute_key","(p1)","<p>See the OpenSSL documentation for ECDH_compute_key()\n"],["diagonal","Matrix","Matrix.html#method-c-diagonal","(*values)","<p>Creates a matrix where the diagonal elements are composed of\n<code>values</code>.\n\n<pre>Matrix.diagonal(9, 5, -3)\n  =&gt;  9 ...</pre>\n"],["diagonal?","Matrix","Matrix.html#method-i-diagonal-3F","()","<p>Returns <code>true</code> if this is a diagonal matrix. Raises an error if\nmatrix is not square.\n"],["diagonalize","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-diagonalize","()","<p>Symmetric tridiagonal QL algorithm.\n"],["difference","Set","Set.html#method-i-difference","(enum)",""],["dig","Array","Array.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <em>idx</em> objects\nby calling <code>dig</code> at each step, returning …\n"],["dig","Hash","Hash.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <em>key</em> objects\nby calling <code>dig</code> at each step, returning …\n"],["dig","OpenStruct","OpenStruct.html#method-i-dig","(name, *names)","<p>Retrieves the value object corresponding to the each <code>name</code>\nobjects repeatedly.\n\n<pre>address = OpenStruct.new(&#39;city&#39; ...</pre>\n"],["dig","Struct","Struct.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <code>key</code>\nobjects by calling <code>dig</code> at each step, returning …\n"],["digest","Digest::Class","Digest/Class.html#method-c-digest","(*args)","<p>Returns the hash value of a given <em>string</em>.  This is equivalent to\nDigest::Class.new(*parameters).digest(string), …\n"],["digest","Digest::Instance","Digest/Instance.html#method-i-digest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest, keeping\nthe digest&#39;s state.\n<p>If a …\n"],["digest","OpenSSL::Digest","OpenSSL/Digest.html#method-c-digest","(name, data)","<p>Return the <code>data</code> hash computed with <code>name</code> Digest.\n<code>name</code> is either the long name or short name of a supported …\n"],["digest","OpenSSL::Engine","OpenSSL/Engine.html#method-i-digest","(p1)","<p>This returns an OpenSSL::Digest by <code>name</code>.\n<p>Will raise an EngineError if the digest is unavailable.\n\n<pre>e = OpenSSL::Engine.by_id(&quot;openssl&quot;) ...</pre>\n"],["digest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-digest","(p1, p2, p3)","<p>Returns the authentication code as a binary string. The <code>digest</code>\nparameter must be an instance of OpenSSL::Digest …\n"],["digest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-digest","()","<p>Returns the authentication code an instance represents as a binary string.\n<p>Example\n\n<pre>instance = OpenSSL::HMAC.new(&#39;key&#39;, ...</pre>\n"],["digest!","Digest::Instance","Digest/Instance.html#method-i-digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["digest_length","Digest::Base","Digest/Base.html#method-i-digest_length","()","<p>Return the length of the hash value in bytes.\n"],["digest_length","Digest::Instance","Digest/Instance.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest.\n<p>This method should be overridden by each implementation …\n"],["digest_length","OpenSSL::Digest","OpenSSL/Digest.html#method-i-digest_length","()","<p>Returns the output size of the digest, i.e. the length in bytes of the\nfinal message digest result.\n<p>Example …\n"],["digits","Integer","Integer.html#method-i-digits","(*args)","<p>Returns the array including the digits extracted by place-value notation\nwith radix <code>base</code> of <code>int</code>.\n<p><code>base</code> …\n"],["digits","Integer","Integer.html#method-i-digits","(*args)","<p>Returns the array including the digits extracted by place-value notation\nwith radix <code>base</code> of <code>int</code>.\n<p><code>base</code> …\n"],["dir","Gem","Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Gem::Installer","Gem/Installer.html#method-i-dir","()","<p>Return the target directory where the gem is to be installed. This\ndirectory is not guaranteed to be …\n"],["dir","Net::FTP","Net/FTP.html#method-i-dir","(*args)",""],["dir_config","MakeMakefile","MakeMakefile.html#method-i-dir_config","(target, idefault=nil, ldefault=nil)","<p>Sets a <code>target</code> name that the user can then use to configure\nvarious “with” options with on the …\n"],["direct_ancestors","RDoc::ClassModule","RDoc/ClassModule.html#method-i-direct_ancestors","()","<p>Ancestors of this class or module only\n"],["direct_ancestors","RDoc::NormalClass","RDoc/NormalClass.html#method-i-direct_ancestors","()",""],["directory?","File","File.html#method-c-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","File::Stat","File/Stat.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","FileTest","FileTest.html#method-i-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-directory-3F","()","<p>Is this tar entry a directory?\n"],["directory?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the entry is a directory (i.e., the value of\nthe type fact is dir, cdir, or pdir).\n"],["directory?","Pathname","Pathname.html#method-i-directory-3F","()","<p>See FileTest.directory?.\n"],["directory_makable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-directory_makable-3F","()","<p>Returns <code>true</code> if the MKD command may be used to create a new\ndirectory within the directory.\n"],["dirname","File","File.html#method-c-dirname","(p1)","<p>Returns all components of the filename given in <em>file_name</em> except\nthe last one. The filename can be formed …\n"],["dirname","Pathname","Pathname.html#method-i-dirname","()","<p>Returns all but the last component of the path.\n<p>See File.dirname.\n"],["dirs","Gem::Specification","Gem/Specification.html#method-c-dirs","()","<p>Return the directories that Specification uses to find specs.\n"],["dirs=","Gem::Specification","Gem/Specification.html#method-c-dirs-3D","(dirs)","<p>Set the directories that Specification uses to find specs. Setting this\nresets the list of known specs. …\n"],["disable","GC","GC.html#method-c-disable","()","<p>Disables garbage collection, returning <code>true</code> if garbage\ncollection was already disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GC</span>.<span class=\"ruby-identifier\">disable</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["disable","GC::Profiler","GC/Profiler.html#method-c-disable","()","<p>Stops the GC profiler.\n"],["disable","TracePoint","TracePoint.html#method-i-disable","()","<p>Deactivates the trace\n<p>Return true if trace was enabled. Return false if trace was disabled.\n\n<pre>trace.enabled? ...</pre>\n"],["disable_close","Fiddle::Handle","Fiddle/Handle.html#method-i-disable_close","()","<p>Disable a call to dlclose() when this handle is garbage collected.\n"],["disable_ssl","Net::POP3","Net/POP3.html#method-c-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","Net/POP3.html#method-i-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::SMTP","Net/SMTP.html#method-i-disable_ssl","()",""],["disable_starttls","Net::SMTP","Net/SMTP.html#method-i-disable_starttls","()","<p>Disables SMTP/TLS (STARTTLS) for this object.  Must be called before the\nconnection is established to …\n"],["disable_tls","Net::SMTP","Net/SMTP.html#method-i-disable_tls","()","<p>Disables SMTP/TLS for this object.  Must be called before the connection is\nestablished to have any effect. …\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disasm","()","<p>Returns the instruction sequence as a <code>String</code> in human readable\nform.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disasm","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with\nthe human readable instructions for <code>body</code> …\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disassemble","()","<p>Returns the instruction sequence as a <code>String</code> in human readable\nform.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disassemble","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with\nthe human readable instructions for <code>body</code> …\n"],["disconnect","Net::IMAP","Net/IMAP.html#method-i-disconnect","()","<p>Disconnects from the server.\n"],["disconnected?","Net::IMAP","Net/IMAP.html#method-i-disconnected-3F","()","<p>Returns true if disconnected from the server.\n"],["disjoint?","Set","Set.html#method-i-disjoint-3F","(set)","<p>Returns true if the set and the given set have no element in common.  This\nmethod is the opposite of …\n"],["dispid","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-dispid","()","<p>Returns dispatch ID.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;)\nmethod ...</pre>\n"],["display","DEBUGGER__","DEBUGGER__.html#method-c-display","()","<p>Returns the display expression list\n<p>See DEBUGGER__ for more usage\n"],["display","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-display","()",""],["display","Object","Object.html#method-i-display","(p1 = v1)","<p>Prints <em>obj</em> on the given port (default <code>$&gt;</code>).\nEquivalent to:\n\n<pre>def display(port=$&gt;)\n  port.write self\n  ...</pre>\n"],["display?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be displayed in output?\n<p>A code object should be displayed if:\n<p>The item didn&#39;t …\n"],["display?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-display-3F","()","<p>Only a TopLevel that contains text file) will be displayed.  See also\nRDoc::CodeObject#display?\n"],["display_header","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-display_header","(type)",""],["div","BigDecimal","BigDecimal.html#method-i-div","(p1, p2 = v2)",""],["div","Integer","Integer.html#method-i-div","(p1)","<p>Performs integer division: returns integer result of dividing\n<code>int</code> by <code>numeric</code>.\n"],["div","Integer","Integer.html#method-i-div","(p1)","<p>Performs integer division: returns integer result of dividing\n<code>int</code> by <code>numeric</code>.\n"],["div","Numeric","Numeric.html#method-i-div","(p1)","<p>Uses <code>/</code> to perform division, then converts the result to an\ninteger. <code>numeric</code> does not define the <code>/</code> operator;\n…\n"],["divide","Set","Set.html#method-i-divide","(&func)","<p>Divides the set into a set of subsets according to the commonality defined\nby the given block.\n<p>If the …\n"],["divmod","BigDecimal","BigDecimal.html#method-i-divmod","(p1)","<p>Divides by the specified value, and returns the quotient and modulus as\nBigDecimal numbers. The quotient …\n"],["divmod","Float","Float.html#method-i-divmod","(p1)","<p>See Numeric#divmod.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">42.0</span>.<span class=\"ruby-identifier\">divmod</span> <span class=\"ruby-value\">6</span> <span class=\"ruby-comment\">#=&gt; [7, 0.0]</span>\n<span class=\"ruby-value\">42.0</span>.<span class=\"ruby-identifier\">divmod</span> <span class=\"ruby-value\">5</span> <span class=\"ruby-comment\">#=&gt; [8, 2.0]</span>\n</pre>\n"],["divmod","Integer","Integer.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Integer","Integer.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Numeric","Numeric.html#method-i-divmod","(p1)","<p>Returns an array containing the quotient and modulus obtained by dividing\n<code>num</code> by <code>numeric</code>.\n<p>If <code>q, r = *</code> …\n"],["dlload","Fiddle::Importer","Fiddle/Importer.html#method-i-dlload","(*libs)","<p>Creates an array of handlers for the given <code>libs</code>, can be an\ninstance of Fiddle::Handle, Fiddle::Importer …\n"],["dlopen","Fiddle","Fiddle.html#method-c-dlopen","(library)","<p>Creates a new handler that opens <code>library</code>, and returns an\ninstance of Fiddle::Handle.\n<p>If <code>nil</code> is given for …\n"],["dlopen","Fiddle","Fiddle.html#method-i-dlopen","(library)","<p>Creates a new handler that opens <code>library</code>, and returns an\ninstance of Fiddle::Handle.\n<p>If <code>nil</code> is given for …\n"],["dlunwrap","Fiddle","Fiddle.html#method-c-dlunwrap","(p1)","<p>Returns the hexadecimal representation of a memory pointer address\n<code>addr</code>\n<p>Example:\n\n<pre>lib = Fiddle.dlopen(&#39;/lib64/libc-2.15.so&#39;) ...</pre>\n"],["dlwrap","Fiddle","Fiddle.html#method-c-dlwrap","(p1)","<p>Returns a memory pointer of a function&#39;s hexadecimal address location\n<code>val</code>\n<p>Example:\n\n<pre>lib = Fiddle.dlopen(&#39;/lib64/libc-2.15.so&#39;) ...</pre>\n"],["dn","URI::LDAP","URI/LDAP.html#method-i-dn","()","<p>returns dn.\n"],["dn=","URI::LDAP","URI/LDAP.html#method-i-dn-3D","(val)","<p>setter for dn <code>val</code>\n"],["do_GET","RDoc::Servlet","RDoc/Servlet.html#method-i-do_GET","(req, res)","<p>GET request entry point.  Fills in <code>res</code> for the path, etc. in\n<code>req</code>.\n"],["do_GET","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_GET","(req, res)","<p>Raises a NotFound exception\n"],["do_GET","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-do_GET","(req, res)","<p>Handles GET requests\n"],["do_HEAD","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_HEAD","(req, res)","<p>Dispatches to do_GET\n"],["do_OPTIONS","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-do_OPTIONS","(req, res)","<p>The default OPTIONS request handler says GET, HEAD, POST and OPTIONS\nrequests are allowed.\n"],["do_OPTIONS","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_OPTIONS","(req, res)","<p>Returns the allowed HTTP request methods\n"],["do_POST","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-do_POST","(req, res)","<p>Handles POST requests\n"],["do_configuration","Gem::GemRunner","Gem/GemRunner.html#method-i-do_configuration","(args)",""],["do_finish","Net::HTTP","Net/HTTP.html#method-i-do_finish","()",""],["do_finish","Net::SMTP","Net/SMTP.html#method-i-do_finish","()",""],["do_helo","Net::SMTP","Net/SMTP.html#method-i-do_helo","(helo_domain)",""],["do_not_reverse_lookup","BasicSocket","BasicSocket.html#method-c-do_not_reverse_lookup","()","<p>Gets the global do_not_reverse_lookup flag.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">BasicSocket</span>.<span class=\"ruby-identifier\">do_not_reverse_lookup</span>  <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["do_not_reverse_lookup","BasicSocket","BasicSocket.html#method-i-do_not_reverse_lookup","()","<p>Gets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre>require &#39;socket&#39;\n\nBasicSocket.do_not_reverse_lookup ...</pre>\n"],["do_not_reverse_lookup=","BasicSocket","BasicSocket.html#method-c-do_not_reverse_lookup-3D","(p1)","<p>Sets the global do_not_reverse_lookup flag.\n<p>The flag is used for initial value of do_not_reverse_lookup …\n"],["do_not_reverse_lookup=","BasicSocket","BasicSocket.html#method-i-do_not_reverse_lookup-3D","(p1)","<p>Sets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre>TCPSocket.open(&quot;www.ruby-lang.org&quot;, 80) {|sock|\n  ...</pre>\n"],["do_not_reverse_lookup=","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-do_not_reverse_lookup-3D","(flag)",""],["do_parse","Racc::Parser","Racc/Parser.html#method-i-do_parse","()","<p>The entry point of the parser. This method is used with #next_token. If\nRacc wants to get token (and …\n"],["do_reply","Rinda::RingServer","Rinda/RingServer.html#method-i-do_reply","()","<p>Pulls lookup tuples out of the TupleSpace and sends their DRb object the\naddress of the local TupleSpace …\n"],["do_start","Net::HTTP","Net/HTTP.html#method-i-do_start","()",""],["do_start","Net::SMTP","Net/SMTP.html#method-i-do_start","(helo_domain, user, secret, authtype)",""],["do_validate","RSS::BaseParser","RSS/BaseParser.html#method-i-do_validate","()",""],["do_validate=","RSS::BaseParser","RSS/BaseParser.html#method-i-do_validate-3D","(new_value)",""],["do_write","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-do_write","(s)","<p>Writes <code>s</code> to the buffer.  When the buffer is full or #sync is\ntrue the buffer is flushed to the underlying …\n"],["do_write","Rinda::RingServer","Rinda/RingServer.html#method-i-do_write","(msg)","<p>Extracts the response URI from <code>msg</code> and adds it to TupleSpace\nwhere it will be picked up by <code>reply_service</code> …\n"],["doc","RDoc::TestCase","RDoc/TestCase.html#method-i-doc","(*contents)","<p>Shortcut for RDoc::Markup::Document.new with <code>contents</code>\n"],["doc_dir","Gem::Specification","Gem/Specification.html#method-i-doc_dir","(type = nil)","<p>Returns the full path to this spec&#39;s documentation directory.  If\n<code>type</code> is given it will be appended …\n"],["doc_root","Gem::Server","Gem/Server.html#method-i-doc_root","(gem_name)",""],["doc_stats","RDoc::Stats","RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in\n<code>collection</code>.\n"],["doctor","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-doctor","()",""],["doctor","Gem::Doctor","Gem/Doctor.html#method-i-doctor","()","<p>Cleans up uninstalled files and invalid gem specifications\n"],["doctype","REXML::Attribute","REXML/Attribute.html#method-i-doctype","()",""],["doctype","REXML::Document","REXML/Document.html#method-i-doctype","()","<p>@return the DocType child of the document, if one exists, and nil\notherwise.\n"],["doctype","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-doctype","(name, pub_sys, long_name, uri)","<p>Handles a doctype declaration. Any attributes of the doctype which are not\nsupplied will be nil.  #  …\n"],["doctype","REXML::StreamListener","REXML/StreamListener.html#method-i-doctype","(name, pub_sys, long_name, uri)","<p>Handles a doctype declaration. Any attributes of the doctype which are not\nsupplied will be nil.  #  …\n"],["doctype","REXML::Text","REXML/Text.html#method-i-doctype","()",""],["doctype?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-doctype-3F","()","<p>Content: [ String name, String pub_sys, String long_name, String uri ]\n"],["doctype_end","REXML::StreamListener","REXML/StreamListener.html#method-i-doctype_end","()","<p>Called when the doctype is done\n"],["document","RDoc::RDoc","RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in\n<code>options</code>.\n<p><code>options</code> can be either …\n"],["document","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish”\nor “ri”) and following …\n"],["document","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish”\nor “ri”) and following …\n"],["document","REXML::Child","REXML/Child.html#method-i-document","()","<p>Returns &mdash; the document this child belongs to, or nil if this child\n\n<p>belongs to no document\n"],["document","REXML::Document","REXML/Document.html#method-i-document","()",""],["document","REXML::Element","REXML/Element.html#method-i-document","()","<p>Evaluates to the document to which this element belongs, or nil if this\nelement doesn&#39;t belong to …\n"],["document_children=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject&#39;s children unless\nit has been turned off by …\n"],["document_order","REXML::XPathParser","REXML/XPathParser.html#method-i-document_order","( array_of_nodes )","<p>Reorders an array of nodes so that they are in document order It tries to\ndo this efficiently.\n<p>FIXME: …\n"],["document_self=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been\nturned off by :enddoc:.  If the …\n"],["document_self_or_methods","RDoc::ClassModule","RDoc/ClassModule.html#method-i-document_self_or_methods","()","<p>Does this ClassModule or any of its methods have document_self set?\n"],["documentation_page","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_page","(store, generator, path, req, res)","<p>Fills in <code>res</code> with the class, module or page for\n<code>req</code> from <code>store</code>.\n<p><code>path</code> is relative to the mount_path and …\n"],["documentation_search","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_search","(store, generator, req, res)","<p>Creates the JSON search index on <code>res</code> for the given\n<code>store</code>.  <code>generator</code> must respond to #json_index to\nbuild. …\n"],["documentation_source","RDoc::Servlet","RDoc/Servlet.html#method-i-documentation_source","(path)","<p>Returns the RDoc::Store and path relative to <code>mount_path</code> for\ndocumentation at <code>path</code>.\n"],["documented?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-documented-3F","()","<p>Does this class or module have a comment with content or is #received_nodoc\ntrue?\n"],["documented?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a\ndocumented class or module.\n"],["documented?","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["done","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-done","()","<p>The silent download reporter won&#39;t tell you when the download is done.\nBecause it is silent.\n"],["done","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-done","()","<p>Does not print anything when complete as this object has taken a vow of\nsilence.\n"],["done","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-done","()","<p>Indicates the download is complete.\n"],["done","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done?","REXML::Validation::Event","REXML/Validation/Event.html#method-i-done-3F","()",""],["done_adding","RDoc::Stats","RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_documenting=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and\n#document_children.\n<p>Once documentation …\n"],["done_installing","Gem","Gem.html#method-c-done_installing","(&hook)","<p>Adds a post-installs hook that will be passed a Gem::DependencyInstaller\nand a list of installed specifications …\n"],["dot","Vector","Vector.html#method-i-dot","(v)",""],["dot_pat","ACL::ACLEntry","ACL/ACLEntry.html#method-i-dot_pat","(str)","<p>Creates a Regexp to match an address.\n"],["dot_pat_str","ACL::ACLEntry","ACL/ACLEntry.html#method-i-dot_pat_str","(str)","<p>Creates a regular expression to match IPv4 addresses\n"],["double_fig","BigDecimal","BigDecimal.html#method-c-double_fig","()","<p>The BigDecimal.double_fig class method returns the number of digits a Float\nnumber is allowed to have. …\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-i-down","(graph)","<p>Reverses the action on the given graph. @param  [DependencyGraph] graph the\ngraph to reverse the action …\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-i-down","(_graph)","<p>(see Action#down)\n"],["downcase","String","String.html#method-i-downcase","(*args)","<p>Returns a copy of <em>str</em> with all uppercase letters replaced with\ntheir lowercase counterparts. Which letters …\n"],["downcase","Symbol","Symbol.html#method-i-downcase","(*args)","<p>Same as <code>sym.to_s.downcase.intern</code>.\n"],["downcase!","String","String.html#method-i-downcase-21","(*args)","<p>Downcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n<p>See String#downcase for meaning …\n"],["download","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)",""],["download","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)","<p>Moves the gem <code>spec</code> from <code>source_uri</code> to the cache\ndir unless it is already there.  If the source_uri is …\n"],["download","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-download","(path)","<p>Downloads a gem at <code>path</code> and returns the file path.\n"],["download","Gem::Source","Gem/Source.html#method-i-download","(spec, dir=Dir.pwd)","<p>Downloads <code>spec</code> and writes it to <code>dir</code>.  See also\nGem::RemoteFetcher#download.\n"],["download","Gem::Source::Installed","Gem/Source/Installed.html#method-i-download","(spec, path)","<p>We don&#39;t need to download an installed gem\n"],["download","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-download","(name, version, dependencies = nil, &block)","<p>Creates a gem with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The created gem is downloaded in to the cache directory\nbut …\n"],["download_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-download_reporter","(*args)","<p>Return a download reporter object chosen from the current verbosity\n"],["download_to_cache","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-download_to_cache","(dependency)",""],["download_to_cache","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download_to_cache","(dependency)","<p>Given a name and requirement, downloads this gem into cache and returns the\nfilename. Returns nil if …\n"],["downto","Date","Date.html#method-i-downto","(p1)","<p>This method is equivalent to step(min, -1){|date| …}.\n"],["downto","Integer","Integer.html#method-i-downto","(p1)","<p>Iterates the given block, passing decreasing values from <code>int</code>\ndown to and including <code>limit</code>.\n<p>If no block …\n"],["downto","Integer","Integer.html#method-i-downto","(p1)","<p>Iterates the given block, passing decreasing values from <code>int</code>\ndown to and including <code>limit</code>.\n<p>If no block …\n"],["dowrite","REXML::XMLDecl","REXML/XMLDecl.html#method-i-dowrite","()",""],["drop","Array","Array.html#method-i-drop","(p1)","<p>Drops first <code>n</code> elements from <code>ary</code> and returns the\nrest of the elements in an array.\n<p>If a negative number …\n"],["drop","Enumerable","Enumerable.html#method-i-drop","(p1)","<p>Drops first n elements from <em>enum</em>, and returns rest elements in an\narray.\n\n<pre>a = [1, 2, 3, 4, 5, 0]\na.drop(3) ...</pre>\n"],["drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop","(p1)",""],["drop_while","Array","Array.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerable","Enumerable.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop_while","()",""],["dsa_sign_asn1","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-dsa_sign_asn1","(p1)","<p>See the OpenSSL documentation for ECDSA_sign()\n"],["dsa_verify_asn1","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-dsa_verify_asn1","(p1, p2)","<p>See the OpenSSL documentation for ECDSA_verify()\n"],["dst?","Time","Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre># CST6CDT:\n  Time.local(2000, ...</pre>\n"],["dstaddr","Socket::Ifaddr","Socket/Ifaddr.html#method-i-dstaddr","()","<p>Returns the destination address of <em>ifaddr</em>. nil is returned if the\nflags doesn&#39;t have IFF_POINTOPOINT …\n"],["dummy?","Encoding","Encoding.html#method-i-dummy-3F","()","<p>Returns true for dummy encodings. A dummy encoding is an encoding for which\ncharacter handling is not …\n"],["dummy_makefile","MakeMakefile","MakeMakefile.html#method-i-dummy_makefile","(srcdir)","<p>creates a stub Makefile.\n"],["dump","JSON","JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO-like …\n"],["dump","JSON::GenericObject","JSON/GenericObject.html#method-c-dump","(obj, *args)",""],["dump","Marshal","Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendant objects. If anIO is specified, the\nserialized data will be written …\n"],["dump","ObjectSpace","ObjectSpace.html#method-c-dump","(p1, p2 = {})","<p>Dump the contents of a ruby object as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["dump","Psych","Psych.html#method-c-dump","(o, io = nil, options = {})","<p>Dump Ruby object <code>o</code> to a YAML string.  Optional\n<code>options</code> may be passed in to control the output format. …\n"],["dump","REXML::Validation::Validator","REXML/Validation/Validator.html#method-i-dump","()",""],["dump","String","String.html#method-i-dump","()","<p>Produces a version of <code>str</code> with all non-printing characters\nreplaced by <code>\\nnn</code> notation and all special …\n"],["dump_all","ObjectSpace","ObjectSpace.html#method-c-dump_all","(p1 = {})","<p>Dump the contents of the ruby heap as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["dump_coder","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_coder","(o)",""],["dump_ivars","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_ivars","(target)",""],["dump_list","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-dump_list","(o)",""],["dump_stream","Psych","Psych.html#method-c-dump_stream","(*objects)","<p>Dump a list of objects as separate documents to a document stream.\n<p>Example:\n\n<pre>Psych.dump_stream(&quot;foo\\n  &quot;, ...</pre>\n"],["dup","Object","Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["dup","Singleton","Singleton.html#method-i-dup","()","<p>Raises a TypeError to prevent duping.\n"],["e2mm_message","Exception2MessageMapper::E2MM","Exception2MessageMapper/E2MM.html#method-c-e2mm_message","(klass, exp)",""],["each","ARGF","ARGF.html#method-i-each","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each","Array","Array.html#method-i-each","()","<p>Calls the given block once for each element in <code>self</code>, passing\nthat element as a parameter.  Returns the …\n"],["each","CSV","CSV.html#method-i-each","()","<p>Yields each row of the data source in turn.\n<p>Support for Enumerable.\n<p>The data source must be open for reading. …\n"],["each","CSV::Row","CSV/Row.html#method-i-each","(&block)","<p>Yields each pair of the row as header and field tuples (much like iterating\nover a Hash). This method …\n"],["each","CSV::Table","CSV/Table.html#method-i-each","(&block)","<p>In the default mixed mode or row mode, iteration is the standard row major\nwalking of rows.  In column …\n"],["each","DBM","DBM.html#method-i-each","()","<p>Calls the block once for each [key, value] pair in the database. Returns\nself.\n"],["each","Dir","Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename\nof each entry as a parameter …\n"],["each","ENV","ENV.html#method-c-each","()","<p>Yields each environment variable <code>name</code> and <code>value</code>.\n<p>If no block is given an Enumerator is returned.\n"],["each","Enumerator","Enumerator.html#method-i-each","(*args)","<p>Iterates over the block according to how this Enumerator was constructed.\nIf no block and no arguments …\n"],["each","GDBM","GDBM.html#method-i-each","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> and the corresponding <em>value</em> as a parameter. …\n"],["each","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each","()","<p>Yields each Tuple in this AvailableSet\n"],["each","Gem::ConfigFile","Gem/ConfigFile.html#method-i-each","(&block)","<p>Delegates to @hash\n"],["each","Gem::DependencyList","Gem/DependencyList.html#method-i-each","(&block)","<p>Iterator over dependency_order\n"],["each","Gem::List","Gem/List.html#method-i-each","()",""],["each","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each","()","<p>Iterates over files in the tarball yielding each entry\n"],["each","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-each","()","<p>Enumerates through the vertices of the graph. @return [Array&lt;Vertex&gt;]\nThe graph&#39;s vertices. …\n"],["each","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-each","()","<p>@!visibility private Enumerates each action in the log @yield [Action]\n"],["each","Gem::SourceList","Gem/SourceList.html#method-i-each","()","<p>Yields each source URI in the list.\n"],["each","Gem::Specification","Gem/Specification.html#method-c-each","()","<p>Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of\nspecs.\n"],["each","GetoptLong","GetoptLong.html#method-i-each","()","<p>Iterator version of `get&#39;.\n<p>The block is called repeatedly with two arguments: The first is the option\n…\n"],["each","Hash","Hash.html#method-i-each","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each","IO","IO.html#method-i-each","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each","Matrix","Matrix.html#method-i-each","(which = :all)","<p>Yields all elements of the matrix, starting with those of the first row, or\nreturns an Enumerator if …\n"],["each","Net::POP3","Net/POP3.html#method-i-each","()",""],["each","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each","OpenSSL::ASN1::Constructive","OpenSSL/ASN1/Constructive.html#method-i-each","()","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as parameter <code>asn1</code>. If no block is given, …\n"],["each","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-each","(eol=$/)","<p>Executes the block for every line in the stream where lines are separated\nby <code>eol</code>.\n<p>See also #gets\n"],["each","OpenSSL::Config","OpenSSL/Config.html#method-i-each","()","<p>For a block.\n<p>Receive the section and its pairs for the current configuration.\n\n<pre>config.each do |section, ...</pre>\n"],["each","Prime","Prime.html#method-i-each","(ubound = nil, generator = EratosthenesGenerator.new, &block)","<p>Iterates the given block over all prime numbers.\n<p>Parameters\n<p>ubound &mdash; Optional. An arbitrary positive number. …\n"],["each","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-each","()","<p>Iterates the given block for each prime number.\n"],["each","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-each","(&block)","<p>Iterate over each node in the tree. Yields each node to <code>block</code>\ndepth first.\n"],["each","REXML::AttlistDecl","REXML/AttlistDecl.html#method-i-each","(&block)","<p>Iterate over the key/value pairs:\n\n<pre>attlist_decl.each { |attribute_name, attribute_value| ... }</pre>\n"],["each","REXML::Attributes","REXML/Attributes.html#method-i-each","()","<p>Iterates over each attribute of an Element, yielding the expanded name and\nvalue as a pair of Strings …\n"],["each","REXML::Elements","REXML/Elements.html#method-i-each","( xpath=nil )","<p>Iterates through all of the child Elements, optionally filtering them by a\ngiven XPath\n<p>xpath &mdash; optional. …\n\n"],["each","REXML::Light::Node","REXML/Light/Node.html#method-i-each","()",""],["each","REXML::Parent","REXML/Parent.html#method-i-each","(&block)",""],["each","REXML::Parsers::PullParser","REXML/Parsers/PullParser.html#method-i-each","()",""],["each","REXML::QuickPath","REXML/QuickPath.html#method-c-each","(element, path, namespaces=EMPTY_HASH, &block)",""],["each","REXML::SyncEnumerator","REXML/SyncEnumerator.html#method-i-each","()","<p>Enumerates rows of the Enumerable objects.\n"],["each","REXML::XPath","REXML/XPath.html#method-c-each","(element, path=nil, namespaces=nil, variables={})","<p>Iterates over nodes that match the given path, calling the supplied block\nwith the match.\n<p>element &mdash; The …\n"],["each","RSS::XML::Element","RSS/XML/Element.html#method-i-each","(&block)",""],["each","Range","Range.html#method-i-each","()","<p>Iterates over the elements of range, passing each in turn to the block.\n<p>The <code>each</code> method can only be used …\n"],["each","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-i-each","()","<p>Yields event/tuple pairs until this NotifyTemplateEntry expires.\n"],["each","Rinda::RingFinger","Rinda/RingFinger.html#method-i-each","()","<p>Iterates over all discovered TupleSpaces starting with the primary.\n"],["each","Rinda::Tuple","Rinda/Tuple.html#method-i-each","()","<p>Iterate through the tuple, yielding the index or key, and the value, thus\nensuring arrays are iterated …\n"],["each","SDBM","SDBM.html#method-i-each","()","<p>Iterates over each key-value pair in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each","Set","Set.html#method-i-each","(&block)","<p>Calls the given block once for each element in the set, passing the element\nas parameter.  Returns an …\n"],["each","Shell::Cat","Shell/Cat.html#method-i-each","(rs = nil)",""],["each","Shell::Concat","Shell/Concat.html#method-i-each","(rs = nil)",""],["each","Shell::Echo","Shell/Echo.html#method-i-each","(rs = nil)",""],["each","Shell::Filter","Shell/Filter.html#method-i-each","(rs = nil)","<p>Iterates a block for each line.\n"],["each","Shell::Glob","Shell/Glob.html#method-i-each","(rs = nil)",""],["each","Shell::SystemCommand","Shell/SystemCommand.html#method-i-each","(rs = nil)",""],["each","Shell::Tee","Shell/Tee.html#method-i-each","(rs = nil)",""],["each","Shell::Void","Shell/Void.html#method-i-each","(rs = nil)",""],["each","StringIO","StringIO.html#method-i-each","(*args)","<p>See IO#each.\n"],["each","Struct","Struct.html#method-i-each","()","<p>Yields the value of each struct member in order.  If no block is given an\nenumerator is returned.\n\n<pre>Customer ...</pre>\n"],["each","Vector","Vector.html#method-i-each","(&block)","<p>Iterate over the elements of this vector\n"],["each","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-each","()","<p>Iterates over the request headers\n"],["each","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-each","()","<p>Iterates over each header in the response\n"],["each","WIN32OLE","WIN32OLE.html#method-i-each","()","<p>Iterates over each item of OLE collection which has IEnumVARIANT interface.\n\n<pre>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...</pre>\n"],["each","YAML::DBM","YAML/DBM.html#method-i-each","()",""],["each","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each2","Vector","Vector.html#method-i-each2","(v)","<p>Iterate over the elements of this vector and <code>v</code> in conjunction.\n"],["each_active_object","Shell::ProcessController","Shell/ProcessController.html#method-c-each_active_object","()",""],["each_address","Resolv","Resolv.html#method-c-each_address","(name, &block)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv","Resolv.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv::DNS","Resolv/DNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the DNS\nresolver.\n<p><code>name</code> can be a Resolv::DNS::Name …\n"],["each_address","Resolv::Hosts","Resolv/Hosts.html#method-i-each_address","(name, &proc)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the\nhosts file.\n"],["each_address","Resolv::MDNS","Resolv/MDNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the\nmDNS resolver, provided name ends with “local”. …\n"],["each_ancestor","RDoc::ClassModule","RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an\nRDoc::ClassModule exists.\n"],["each_attribute","RDoc::Context","RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_attribute","REXML::Attributes","REXML/Attributes.html#method-i-each_attribute","()","<p>Iterates over the attributes of an Element.  Yields actual Attribute nodes,\nnot String values.\n\n<pre>doc = Document.new ...</pre>\n"],["each_byte","ARGF","ARGF.html#method-i-each_byte","()","<p>Iterates over each byte of each file in <code>ARGV</code>. A byte is\nreturned as an <code>Integer</code> in the range 0..255.\n<p>This …\n"],["each_byte","IO","IO.html#method-i-each_byte","()","<p>Calls the given block once for each byte (0..255) in <em>ios</em>, passing\nthe byte as an argument. The stream …\n"],["each_byte","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-each_byte","()","<p>Calls the given block once for each byte in the stream.\n"],["each_byte","String","String.html#method-i-each_byte","()","<p>Passes each byte in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre>&quot;hello&quot;.each_byte ...</pre>\n"],["each_byte","StringIO","StringIO.html#method-i-each_byte","()","<p>See IO#each_byte.\n"],["each_byte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_byte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-each_certificate","()","<p>Enumerates trusted certificates.\n"],["each_char","ARGF","ARGF.html#method-i-each_char","()","<p>Iterates over each character of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_char","IO","IO.html#method-i-each_char","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["each_char","String","String.html#method-i-each_char","()","<p>Passes each character in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre>&quot;hello&quot;.each_char ...</pre>\n"],["each_char","StringIO","StringIO.html#method-i-each_char","()","<p>See IO#each_char.\n"],["each_char","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_char","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_child","Pathname","Pathname.html#method-i-each_child","(with_directory=true, &b)","<p>Iterates over the children of the directory (files and subdirectories, not\nrecursive).\n<p>It yields Pathname …\n"],["each_child","REXML::Parent","REXML/Parent.html#method-i-each_child","(&block)",""],["each_classmodule","RDoc::Context","RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_codepoint","ARGF","ARGF.html#method-i-each_codepoint","()","<p>Iterates over each codepoint of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_codepoint","IO","IO.html#method-i-each_codepoint","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>ios</em>,\npassing the codepoint as an argument. The stream …\n"],["each_codepoint","String","String.html#method-i-each_codepoint","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>str</em>,\nalso known as a <em>codepoint</em> when applied to Unicode …\n"],["each_codepoint","StringIO","StringIO.html#method-i-each_codepoint","()","<p>See IO#each_codepoint.\n"],["each_cons","Enumerable","Enumerable.html#method-i-each_cons","(p1)","<p>Iterates the given block for each array of consecutive &lt;n&gt; elements. \nIf no block is given, returns …\n"],["each_const","OptionParser","OptionParser.html#method-c-each_const","(path, base = ::Object)",""],["each_constant","RDoc::Context","RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_data","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-each_data","()","<p>Yields each entry in this FormData\n"],["each_element","REXML::Element","REXML/Element.html#method-i-each_element","( xpath=nil )","<p>Synonym for Element.elements.each\n"],["each_element_with_attribute","REXML::Element","REXML/Element.html#method-i-each_element_with_attribute","( key, value=nil, max=0, name=nil )","<p>Iterates through the child elements, yielding for each Element that has a\nparticular attribute set.\n<p>key … &mdash; "],["each_element_with_text","REXML::Element","REXML/Element.html#method-i-each_element_with_text","( text=nil, max=0, name=nil )","<p>Iterates through the children, yielding for each Element that has a\nparticular text set.\n<p>text &mdash; the text …\n"],["each_entry","Enumerable","Enumerable.html#method-i-each_entry","(*args)","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as a parameter, converting multiple values …\n"],["each_entry","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each_entry","()",""],["each_entry","Pathname","Pathname.html#method-i-each_entry","()","<p>Iterates over the entries (files and subdirectories) in the directory,\nyielding a Pathname object for …\n"],["each_entry","Rinda::TupleBag","Rinda/TupleBag.html#method-i-each_entry","(&blk)",""],["each_extend","RDoc::Context","RDoc/Context.html#method-i-each_extend","()","<p>Iterator for extension modules\n"],["each_filename","Pathname","Pathname.html#method-i-each_filename","()","<p>Iterates over each component of the path.\n\n<pre>Pathname.new(&quot;/usr/bin/ruby&quot;).each_filename {|filename| ... ...</pre>\n"],["each_include","RDoc::Context","RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_index","Array","Array.html#method-i-each_index","()","<p>Same as Array#each, but passes the <code>index</code> of the element\ninstead of the element itself.\n<p>An Enumerator is …\n"],["each_index","REXML::Parent","REXML/Parent.html#method-i-each_index","( &block )",""],["each_key","DBM","DBM.html#method-i-each_key","()","<p>Calls the block once for each key string in the database. Returns self.\n"],["each_key","ENV","ENV.html#method-c-each_key","()","<p>Yields each environment variable name.\n<p>An Enumerator is returned if no block is given.\n"],["each_key","GDBM","GDBM.html#method-i-each_key","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> as a parameter.\n"],["each_key","Hash","Hash.html#method-i-each_key","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key as\na parameter.\n<p>If no block is given, an enumerator …\n"],["each_key","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_key","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_key","SDBM","SDBM.html#method-i-each_key","()","<p>Iterates over each <code>key</code> in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each_line","ARGF","ARGF.html#method-i-each_line","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each_line","IO","IO.html#method-i-each_line","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each_line","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-each_line","(eol=$/)",""],["each_line","Pathname","Pathname.html#method-i-each_line","(p1 = v1, p2 = v2, p3 = v3)","<p>Iterates over each line in the file and yields a String object for each.\n"],["each_line","String","String.html#method-i-each_line","(*args)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["each_line","StringIO","StringIO.html#method-i-each_line","(*args)","<p>See IO#each.\n"],["each_line","Zlib::GzipReader","Zlib/GzipReader.html#method-i-each_line","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_localized_path","IRB::Locale","IRB/Locale.html#method-i-each_localized_path","(dir, file)",""],["each_mail","Net::POP3","Net/POP3.html#method-i-each_mail","()","<p>Yields each message to the passed-in block in turn. Equivalent to:\n\n<pre>pop3.mails.each do |popmail|\n  .... ...</pre>\n"],["each_method","RDoc::Context","RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name","Resolv","Resolv.html#method-c-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv","Resolv.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv::DNS","Resolv/DNS.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code> retrieved from the DNS\nresolver.\n<p><code>address</code> must be a Resolv::IPv4 …\n"],["each_name","Resolv::Hosts","Resolv/Hosts.html#method-i-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code> retrieved from the\nhosts file.\n"],["each_object","ObjectSpace","ObjectSpace.html#method-c-each_object","(p1 = v1)","<p>Calls the block once for each living, nonimmediate object in this Ruby\nprocess. If <em>module</em> is specified, …\n"],["each_option","GetoptLong","GetoptLong.html#method-i-each_option","()","<p>`each_option&#39; is an alias of `each&#39;.\n"],["each_option","OptionParser::List","OptionParser/List.html#method-i-each_option","(&block)","<p>Iterates over each option, passing the option to the <code>block</code>.\n"],["each_pair","DBM","DBM.html#method-i-each_pair","()","<p>Calls the block once for each [key, value] pair in the database. Returns\nself.\n"],["each_pair","ENV","ENV.html#method-c-each_pair","()","<p>Yields each environment variable <code>name</code> and <code>value</code>.\n<p>If no block is given an Enumerator is returned.\n"],["each_pair","GDBM","GDBM.html#method-i-each_pair","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> and the corresponding <em>value</em> as a parameter. …\n"],["each_pair","Hash","Hash.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each_pair","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_pair","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_pair","OpenStruct","OpenStruct.html#method-i-each_pair","()","<p>Yields all attributes (as a symbol) along with the corresponding values or\nreturns an enumerator if not …\n"],["each_pair","SDBM","SDBM.html#method-i-each_pair","()","<p>Iterates over each key-value pair in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each_pair","Struct","Struct.html#method-i-each_pair","()","<p>Yields the name and value of each struct member in order.  If no block is\ngiven an enumerator is returned. …\n"],["each_pair","YAML::DBM","YAML/DBM.html#method-i-each_pair","()","<p>Calls the given block once for each <code>key</code>, <code>value</code>\npair in the database.\n<p>Returns <code>self</code>.\n"],["each_parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also\nRDoc::ClassModule#each_ancestor\n"],["each_prime","Integer","Integer.html#method-c-each_prime","(ubound)","<p>Iterates the given block over all prime numbers.\n<p>See <code>Prime</code>#each for more details.\n"],["each_prime","Integer","Integer.html#method-c-each_prime","(ubound)","<p>Iterates the given block over all prime numbers.\n<p>See <code>Prime</code>#each for more details.\n"],["each_recursive","REXML::Node","REXML/Node.html#method-i-each_recursive","()","<p>Visit all subnodes of <code>self</code> recursively\n"],["each_resource","Resolv::DNS","Resolv/DNS.html#method-i-each_resource","(name, typeclass, &proc)","<p>Iterates over all <code>typeclass</code> DNS resources for\n<code>name</code>.  See #getresource for argument details.\n"],["each_response_header","Net::HTTPResponse","Net/HTTPResponse.html#method-c-each_response_header","(sock)",""],["each_section","RDoc::Context","RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section&#39;s contents sorted by title.  The\n<code>section</code>, the section&#39;s <code>constants</code> and …\n"],["each_slice","Enumerable","Enumerable.html#method-i-each_slice","(p1)","<p>Iterates the given block for each slice of &lt;n&gt; elements.  If no block\nis given, returns an enumerator. …\n"],["each_source","Gem::SourceList","Gem/SourceList.html#method-i-each_source","(&b)","<p>Yields each source in the list.\n"],["each_spec","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each_spec","()","<p>Yields the Gem::Specification for each Tuple in this AvailableSet\n"],["each_strongly_connected_component","TSort","TSort.html#method-i-each_strongly_connected_component","()","<p>The iterator version of the #strongly_connected_components method.\n<code><em>obj</em>.each_strongly_connected_component</code> …\n"],["each_strongly_connected_component","TSort","TSort.html#method-c-each_strongly_connected_component","(each_node, each_child)","<p>The iterator version of the TSort.strongly_connected_components method.\n<p>The graph is represented by <em>each_node</em> …\n"],["each_strongly_connected_component_from","TSort","TSort.html#method-c-each_strongly_connected_component_from","(node, each_child, id_map={}, stack=[])","<p>Iterates over strongly connected components in a graph. The graph is\nrepresented by <em>node</em> and <em>each_child</em> …\n"],["each_strongly_connected_component_from","TSort","TSort.html#method-i-each_strongly_connected_component_from","(node, id_map={}, stack=[])","<p>Iterates over strongly connected component in the subgraph reachable from\n<em>node</em>.\n<p>Return value is unspecified. …\n"],["each_sublocale","IRB::Locale","IRB/Locale.html#method-i-each_sublocale","()",""],["each_value","DBM","DBM.html#method-i-each_value","()","<p>Calls the block once for each value string in the database. Returns self.\n"],["each_value","ENV","ENV.html#method-c-each_value","()","<p>Yields each environment variable <code>value</code>.\n<p>An Enumerator is returned if no block was given.\n"],["each_value","GDBM","GDBM.html#method-i-each_value","()","<p>Executes <em>block</em> for each key in the database, passing the\ncorresponding <em>value</em> as a parameter.\n"],["each_value","Hash","Hash.html#method-i-each_value","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the value\nas a parameter.\n<p>If no block is given, an enumerator …\n"],["each_value","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_value","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_value","SDBM","SDBM.html#method-i-each_value","()","<p>Iterates over each <code>value</code> in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each_value","YAML::DBM","YAML/DBM.html#method-i-each_value","()","<p>Calls the given block for each value in database.\n<p>Returns <code>self</code>.\n"],["each_with_index","Enumerable","Enumerable.html#method-i-each_with_index","(*args)","<p>Calls <em>block</em> with two arguments, the item and its index, for each\nitem in <em>enum</em>.  Given arguments are passed …\n"],["each_with_index","Enumerator","Enumerator.html#method-i-each_with_index","()","<p>Same as Enumerator#with_index(0), i.e. there is no starting offset.\n<p>If no block is given, a new Enumerator …\n"],["each_with_index","Matrix","Matrix.html#method-i-each_with_index","(which = :all)","<p>Same as #each, but the row index and column index in addition to the\nelement\n\n<pre>Matrix[ [1,2], [3,4] ].each_with_index ...</pre>\n"],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object given,\nand returns the initially given …\n"],["each_with_object","Enumerator","Enumerator.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["each_with_something","REXML::Element","REXML/Element.html#method-i-each_with_something","( test, max=0, name=nil )","<p>A private helper method\n"],["ecdh_curves=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ecdh_curves-3D","(p1)","<p>Sets the list of “supported elliptic curves” for this context.\n<p>For a TLS client, the list is …\n"],["echo","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-echo","(*strings)","<p>Returns a Echo object, for the given <code>strings</code>\n"],["echo=","IO","IO.html#method-i-echo-3D","(p1)","<p>Enables/disables echo back. On some platforms, all combinations of this\nflags and raw/cooked mode may …\n"],["echo?","IO","IO.html#method-i-echo-3F","()","<p>Returns <code>true</code> if echo back is enabled.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["edit_path","Net::HTTP","Net/HTTP.html#method-i-edit_path","(path)",""],["egd","OpenSSL::Random","OpenSSL/Random.html#method-c-egd","(p1)","<p>Same as ::egd_bytes but queries 255 bytes by default.\n"],["egd_bytes","OpenSSL::Random","OpenSSL/Random.html#method-c-egd_bytes","(p1, p2)","<p>Queries the entropy gathering daemon EGD on socket path given by\n<code>filename</code>.\n<p>Fetches <code>length</code> number of bytes …\n"],["egid","Process","Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["egid=","Process","Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all\nplatforms.\n"],["ehlo","Net::SMTP","Net/SMTP.html#method-i-ehlo","(domain)",""],["eid","Process::GID","Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["eid","Process::UID","Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["eigen","Matrix","Matrix.html#method-i-eigen","()",""],["eigensystem","Matrix","Matrix.html#method-i-eigensystem","()","<p>Returns the Eigensystem of the matrix; see\n<code>EigenvalueDecomposition</code>.\n\n<pre>m = Matrix[[1, 2], [3, 4]]\nv, d, v_inv ...</pre>\n"],["eigenvalue_matrix","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvalue_matrix","()","<p>Returns the block diagonal eigenvalue matrix <code>D</code>\n"],["eigenvalues","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvalues","()","<p>Returns the eigenvalues in an array\n"],["eigenvector_matrix","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix","()","<p>Returns the eigenvector matrix <code>V</code>\n"],["eigenvector_matrix_inv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix_inv","()","<p>Returns the inverse of the eigenvector matrix <code>V</code>\n"],["eigenvectors","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-eigenvectors","()","<p>Returns an array of the eigenvectors\n"],["element","Matrix","Matrix.html#method-i-element","(i, j)",""],["element","Vector","Vector.html#method-i-element","(i)",""],["element=","REXML::Attribute","REXML/Attribute.html#method-i-element-3D","( element )","<p>Sets the element of which this object is an attribute.  Normally, this is\nnot directly called.\n<p>Returns …\n"],["element_initialize_arguments?","RSS::Utils","RSS/Utils.html#method-i-element_initialize_arguments-3F","(args)","<p>This method is used inside of several different objects to determine if\nspecial behavior is needed in …\n"],["elementdecl","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-elementdecl","(content)","<p>&lt;!ELEMENT …&gt;\n"],["elementdecl","REXML::StreamListener","REXML/StreamListener.html#method-i-elementdecl","(content)","<p>&lt;!ELEMENT …&gt;\n"],["elementdecl?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-elementdecl-3F","()","<p>Content: [ String text ]\n"],["elements","Vector","Vector.html#method-c-elements","(array, copy = true)","<p>Creates a vector from an Array.  The optional second argument specifies\nwhether the array itself or a …\n"],["elements_to_f","Matrix","Matrix.html#method-i-elements_to_f","()",""],["elements_to_f","Vector","Vector.html#method-i-elements_to_f","()",""],["elements_to_i","Matrix","Matrix.html#method-i-elements_to_i","()",""],["elements_to_i","Vector","Vector.html#method-i-elements_to_i","()",""],["elements_to_r","Matrix","Matrix.html#method-i-elements_to_r","()",""],["elements_to_r","Vector","Vector.html#method-i-elements_to_r","()",""],["emacs_editing_mode","Readline","Readline.html#method-c-emacs_editing_mode","()","<p>Specifies Emacs editing mode. The default is this mode. See the manual of\nGNU Readline for details of …\n"],["emacs_editing_mode?","Readline","Readline.html#method-c-emacs_editing_mode-3F","()","<p>Returns true if emacs mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["email_to_name","Gem::Security","Gem/Security.html#method-c-email_to_name","(email_address)","<p>Turns <code>email_address</code> into an OpenSSL::X509::Name\n"],["emit_coder","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-emit_coder","(c, o)",""],["emphasis","RDoc::Markdown","RDoc/Markdown.html#method-i-emphasis","(text)","<p>Wraps <code>text</code> in emphasis for rdoc inline formatting\n"],["empty","Gem::Resolver::Molinillo::ResolutionState","Gem/Resolver/Molinillo/ResolutionState.html#method-c-empty","()","<p>Returns an empty resolution state @return [ResolutionState] an empty state\n"],["empty","Matrix","Matrix.html#method-c-empty","(row_count = 0, column_count = 0)","<p>Creates a empty matrix of <code>row_count</code> x\n<code>column_count</code>. At least one of <code>row_count</code> or\n<code>column_count</code> must be …\n"],["empty","Psych::Handler","Psych/Handler.html#method-i-empty","()","<p>Called when an empty event happens. (Which, as far as I can tell, is\nnever).\n"],["empty?","Array","Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <code>self</code> contains no elements.\n\n<pre class=\"ruby\">[].<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["empty?","DBM","DBM.html#method-i-empty-3F","()","<p>Returns true if the database is empty, false otherwise.\n"],["empty?","Dir","Dir.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file is an empty directory,\n<code>false</code> if it is not a directory or non-empty.\n"],["empty?","ENV","ENV.html#method-c-empty-3F","()","<p>Returns true when there are no environment variables\n"],["empty?","File","File.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","FileTest","FileTest.html#method-i-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","GDBM","GDBM.html#method-i-empty-3F","()","<p>Returns true if the database is empty.\n"],["empty?","Gem::AvailableSet","Gem/AvailableSet.html#method-i-empty-3F","()",""],["empty?","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-empty-3F","()","<p>Is the tar entry empty?\n"],["empty?","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-empty-3F","()",""],["empty?","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","Gem::SourceList","Gem/SourceList.html#method-i-empty-3F","()","<p>Returns true if there are no sources in this SourceList.\n"],["empty?","Hash","Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>hsh</em> contains no key-value pairs.\n\n<pre class=\"ruby\">{}.<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["empty?","Matrix","Matrix.html#method-i-empty-3F","()","<p>Returns <code>true</code> if this is an empty matrix, i.e. if the number of\nrows or the number of columns is 0.\n"],["empty?","Pathname","Pathname.html#method-i-empty-3F","()","<p>Tests the file is empty.\n<p>See Dir#empty? and FileTest.empty?.\n"],["empty?","Queue","Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","RDoc::Comment","RDoc/Comment.html#method-i-empty-3F","()","<p>A comment is empty if its text String is empty.\n"],["empty?","REXML::Elements","REXML/Elements.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no <code>Element</code> children,\n<code>false</code> otherwise\n"],["empty?","REXML::IOSource","REXML/IOSource.html#method-i-empty-3F","()",""],["empty?","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-empty-3F","()","<p>Returns true if there are no more events\n"],["empty?","REXML::Source","REXML/Source.html#method-i-empty-3F","()","<p>@return true if the Source is exhausted\n"],["empty?","REXML::Text","REXML/Text.html#method-i-empty-3F","()",""],["empty?","SDBM","SDBM.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the database is empty.\n"],["empty?","Set","Set.html#method-i-empty-3F","()","<p>Returns true if the set contains no elements.\n"],["empty?","String","String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>str</em> has a length of zero.\n\n<pre>&quot;hello&quot;.empty?   #=&gt; false\n&quot; &quot;.empty?       #=&gt; false\n&quot;&quot;.empty? ...</pre>\n"],["empty?","StringScanner","StringScanner.html#method-i-empty-3F","()","<p>Equivalent to #eos?. This method is obsolete, use #eos? instead.\n"],["empty?","Symbol","Symbol.html#method-i-empty-3F","()","<p>Returns that <em>sym</em> is :“” or not.\n"],["empty?","ThreadsWait","ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty?","ThreadsWait","ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty_content?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-empty_content-3F","()",""],["empty_content?","RSS::Element","RSS/Element.html#method-i-empty_content-3F","()",""],["empty_marshal_checksum","PStore","PStore.html#method-i-empty_marshal_checksum","()",""],["empty_marshal_data","PStore","PStore.html#method-i-empty_marshal_data","()",""],["enable","GC","GC.html#method-c-enable","()","<p>Enables garbage collection, returning <code>true</code> if garbage\ncollection was previously disabled.\n\n<pre>GC.disable  ...</pre>\n"],["enable","GC::Profiler","GC/Profiler.html#method-c-enable","()","<p>Starts the GC profiler.\n"],["enable","TracePoint","TracePoint.html#method-i-enable","()","<p>Activates the trace\n<p>Return true if trace was enabled. Return false if trace was disabled.\n\n<pre>trace.enabled? ...</pre>\n"],["enable_close","Fiddle::Handle","Fiddle/Handle.html#method-i-enable_close","()","<p>Enable a call to dlclose() when this handle is garbage collected.\n"],["enable_config","MakeMakefile","MakeMakefile.html#method-i-enable_config","(config, default=nil)","<p>Tests for the presence of an <code>--enable-</code><em>config</em> or\n<code>--disable-</code><em>config</em> option. Returns <code>true</code> if\nthe enable option …\n"],["enable_shared","Gem::TestCase","Gem/TestCase.html#method-i-enable_shared","(value)","<p>Sets the ENABLE_SHARED entry in RbConfig::CONFIG to <code>value</code> and\nrestores the original value when the block …\n"],["enable_ssl","Net::POP3","Net/POP3.html#method-i-enable_ssl","(verify_or_params = {}, certs = nil, port = nil)","<p>Enables SSL for this instance.  Must be called before the connection is\nestablished to have any effect. …\n"],["enable_ssl","Net::POP3","Net/POP3.html#method-c-enable_ssl","(*args)","<p>Enable SSL for all new instances. <code>params</code> is passed to\nOpenSSL::SSLContext#set_params.\n"],["enable_ssl","Net::SMTP","Net/SMTP.html#method-i-enable_ssl","(context = SMTP.default_ssl_context)",""],["enable_starttls","Net::SMTP","Net/SMTP.html#method-i-enable_starttls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object. <code>context</code> is a\nOpenSSL::SSL::SSLContext object.\n"],["enable_starttls_auto","Net::SMTP","Net/SMTP.html#method-i-enable_starttls_auto","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object if server accepts.\n<code>context</code> is a OpenSSL::SSL::SSLContext …\n"],["enable_tls","Net::SMTP","Net/SMTP.html#method-i-enable_tls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (SMTPS: SMTP over direct TLS connection) for this object. \nMust be called before the …\n"],["enabled?","GC::Profiler","GC/Profiler.html#method-c-enabled-3F","()","<p>The current status of GC profile mode.\n"],["enabled?","TracePoint","TracePoint.html#method-i-enabled-3F","()","<p>The current status of the trace\n"],["enc_key","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-i-enc_key","()",""],["enclose","ThreadGroup","ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving\nThreadGroup.\n<p>New threads can still …\n"],["enclosed?","ThreadGroup","ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if the <code>thgrp</code> is enclosed. See also\nThreadGroup#enclose.\n"],["encode","REXML::Encoding","REXML/Encoding.html#method-i-encode","(string)",""],["encode","String","String.html#method-i-encode","(*args)","<p>The first form returns a copy of <code>str</code> transcoded to encoding\n<code>encoding</code>. The second form returns a copy …\n"],["encode","URI::Escape","URI/Escape.html#method-i-encode","(*arg)",""],["encode!","String","String.html#method-i-encode-21","(*args)","<p>The first form transcodes the contents of <em>str</em> from str.encoding to\n<code>encoding</code>. The second form transcodes …\n"],["encode64","Base64","Base64.html#method-i-encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with RFC 2045. Line feeds are added to …\n"],["encode_fallback","RDoc::Text","RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a\n<code>fallback</code> character.\n"],["encode_multipart_form_data","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-encode_multipart_form_data","(out, params, opt)",""],["encode_re","CSV","CSV.html#method-i-encode_re","(*chunks)","<p>Builds a regular expression in <code>@encoding</code>.  All\n<code>chunks</code> will be transcoded to that encoding.\n"],["encode_str","CSV","CSV.html#method-i-encode_str","(*chunks)","<p>Builds a String in <code>@encoding</code>.  All <code>chunks</code> will be\ntranscoded to that encoding.\n"],["encode_utf7","Net::IMAP","Net/IMAP.html#method-c-encode_utf7","(s)","<p>Encode a string from UTF-8 format to modified UTF-7.\n"],["encode_www_form","URI","URI.html#method-c-encode_www_form","(enum, enc=nil)","<p>Generate URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","URI","URI.html#method-c-encode_www_form_component","(str, enc=nil)","<p>Encode given <code>str</code> to URL-encoded form data.\n<p>This method doesn&#39;t convert *, -, ., 0-9, A-Z, _, a-z, …\n"],["encoding","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","REXML::Document","REXML/Document.html#method-i-encoding","()","<p>@return the XMLDecl encoding of this document as an Encoding object. If no\nXMLDecl has been set, returns …\n"],["encoding","Regexp","Regexp.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Ripper","Ripper.html#method-i-encoding","()","<p>Return encoding of the source.\n"],["encoding","String","String.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Symbol","Symbol.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of <em>sym</em>.\n"],["encoding=","REXML::Encoding","REXML/Encoding.html#method-i-encoding-3D","(encoding)",""],["encoding=","REXML::Source","REXML/Source.html#method-i-encoding-3D","(enc)","<p>Inherited from Encoding Overridden to support optimized en/decoding\n"],["encoding=","REXML::XMLDecl","REXML/XMLDecl.html#method-i-encoding-3D","( enc )",""],["encoding_updated","REXML::IOSource","REXML/IOSource.html#method-i-encoding_updated","()",""],["encoding_updated","REXML::Source","REXML/Source.html#method-i-encoding_updated","()",""],["encrypt","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-encrypt","(*args)","<p>Initializes the Cipher for encryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["encrypt","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-encrypt","(p1, p2, p3 = v3, p4 = v4)",""],["end","MatchData","MatchData.html#method-i-end","(p1)","<p>Returns the offset of the character immediately following the end of the\n<em>n</em>th element of the match array …\n"],["end","Range","Range.html#method-i-end","()","<p>Returns the object that defines the end of the range.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>    <span class=\"ruby-comment\">#=&gt; 10</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>   <span class=\"ruby-comment\">#=&gt; 10</span>\n</pre>\n"],["end","Zlib::ZStream","Zlib/ZStream.html#method-i-end","()","<p>Closes the stream. All operations on the closed stream will raise an\nexception.\n"],["endElement","RSS::REXMLLikeXMLParser","RSS/REXMLLikeXMLParser.html#method-i-endElement","(name)",""],["end_document","Psych::Handler","Psych/Handler.html#method-i-end_document","(implicit)","<p>Called with the document ends.  <code>implicit</code> is a boolean value\nindicating whether or not the document has …\n"],["end_document","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-end_document","(implicit_end = !streaming?)","<p>Handles end_document events with <code>version</code>,\n<code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["end_document","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-end_document","()",""],["end_element","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-end_element","(uri, localname, qname)",""],["end_element?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-end_element-3F","()","<p>Content: [ String tag_name ]\n"],["end_mapping","Psych::Handler","Psych/Handler.html#method-i-end_mapping","()","<p>Called when a map ends\n"],["end_prefix_mapping","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-end_prefix_mapping","(prefix)",""],["end_resolution","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-end_resolution","()","<p>Ends the resolution process @return [void]\n"],["end_seen?","Ripper","Ripper.html#method-i-end_seen-3F","()","<p>Return true if parsed source ended by +_<em>END</em>_+.\n"],["end_sequence","Psych::Handler","Psych/Handler.html#method-i-end_sequence","()","<p>Called when a sequence ends.\n"],["end_stream","Psych::Handler","Psych/Handler.html#method-i-end_stream","()","<p>Called when the YAML stream ends\n"],["end_stream","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-end_stream","()",""],["end_transport","Net::HTTP","Net/HTTP.html#method-i-end_transport","(req, res)",""],["end_with?","String","String.html#method-i-end_with-3F","(*args)","<p>Returns true if <code>str</code> ends with one of the <code>suffixes</code>\ngiven.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">end_with?</span>(<span class=\"ruby-string\">&quot;ello&quot;</span>)               <span class=\"ruby-comment\">#=&gt; true ...</span>\n</pre>\n"],["ended?","Zlib::ZStream","Zlib/ZStream.html#method-i-ended-3F","()","<p>Returns true if the stream is closed.\n"],["endgrent","Etc","Etc.html#method-c-endgrent","()","<p>Ends the process of scanning through the /etc/group file begun by\n::getgrent, and closes the file.\n"],["endpwent","Etc","Etc.html#method-c-endpwent","()","<p>Ends the process of scanning through the /etc/passwd file begun with\n::getpwent, and closes the file. …\n"],["engines","OpenSSL::Engine","OpenSSL/Engine.html#method-c-engines","()","<p>Returns an array of currently loaded engines.\n"],["england","Date","Date.html#method-i-england","()","<p>This method is equivalent to new_start(Date::ENGLAND).\n"],["enq","Queue","Queue.html#method-i-enq","(p1)",""],["enq","SizedQueue","SizedQueue.html#method-i-enq","(*args)",""],["ensure_default_gem_subdirectories","Gem","Gem.html#method-c-ensure_default_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper\nsubdirectories for handling default gems. …\n"],["ensure_dependency","Gem::Installer","Gem/Installer.html#method-i-ensure_dependency","(spec, dependency)","<p>Ensure that the dependency is satisfied by the current installation of gem.\nIf it is not an exception …\n"],["ensure_gem_subdirectories","Gem","Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper\nsubdirectories.  If we can&#39;t create …\n"],["ensure_loadable_spec","Gem::Installer","Gem/Installer.html#method-i-ensure_loadable_spec","()","<p>Ensures the Gem::Specification written out for this gem is loadable upon\ninstallation.\n"],["ensure_number","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-ensure_number","(num)","<p>Ensure argument is &#39;number&#39; or raise DataFormatError\n"],["ensure_nz_number","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-ensure_nz_number","(num)","<p>Ensure argument is &#39;nz_number&#39; or raise DataFormatError\n"],["ensure_xml_content","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-ensure_xml_content","(content)",""],["enterable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-enterable-3F","()","<p>Returns <code>true</code> if the directory may be entered by CWD/CDUP.\n"],["entity","Net::HTTPResponse","Net/HTTPResponse.html#method-i-entity","()",""],["entity","REXML::DocType","REXML/DocType.html#method-i-entity","( name )",""],["entity","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-entity","( reference, entities )",""],["entity","REXML::StreamListener","REXML/StreamListener.html#method-i-entity","(content)","<p>Called when %foo; is encountered in a doctype declaration. @p content “foo”\n"],["entity","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-entity","(ref)",""],["entity?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-entity-3F","()","<p>Content: [ String text ]\n"],["entity_class","Fiddle::CStruct","Fiddle/CStruct.html#method-c-entity_class","()","<p>accessor to Fiddle::CStructEntity\n"],["entity_class","Fiddle::CUnion","Fiddle/CUnion.html#method-c-entity_class","()","<p>accessor to Fiddle::CUnionEntity\n"],["entity_expansion_limit","REXML::Document","REXML/Document.html#method-c-entity_expansion_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10000.\n<p>Deprecated. Use REXML::Security.entity_expansion_limit= …\n"],["entity_expansion_limit","REXML::Security","REXML/Security.html#method-c-entity_expansion_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10000.\n"],["entity_expansion_limit=","REXML::Document","REXML/Document.html#method-c-entity_expansion_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10000.\n<p>Deprecated. Use REXML::Security.entity_expansion_limit= …\n"],["entity_expansion_limit=","REXML::Security","REXML/Security.html#method-c-entity_expansion_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10000.\n"],["entity_expansion_text_limit","REXML::Document","REXML/Document.html#method-c-entity_expansion_text_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10240.\n<p>Deprecated. Use REXML::Security.entity_expansion_text_limit …\n"],["entity_expansion_text_limit","REXML::Security","REXML/Security.html#method-c-entity_expansion_text_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10240.\n"],["entity_expansion_text_limit=","REXML::Document","REXML/Document.html#method-c-entity_expansion_text_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10240.\n<p>Deprecated. Use REXML::Security.entity_expansion_text_limit= …\n"],["entity_expansion_text_limit=","REXML::Security","REXML/Security.html#method-c-entity_expansion_text_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10240.\n"],["entitydecl","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-entitydecl","(declaration)","<p>&lt;!ENTITY …&gt; The argument passed to this method is an array of the\nentity declaration.  It can …\n"],["entitydecl","REXML::StreamListener","REXML/StreamListener.html#method-i-entitydecl","(content)","<p>&lt;!ENTITY …&gt; The argument passed to this method is an array of the\nentity declaration.  It can …\n"],["entitydecl?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-entitydecl-3F","()","<p>Due to the wonders of DTDs, an entity declaration can be just about\nanything.  There&#39;s no way to …\n"],["entries","Dir","Dir.html#method-c-entries","(*args)","<p>Returns an array containing all of the filenames in the given directory.\nWill raise a <code>SystemCallError</code> …\n"],["entries","Enumerable","Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">to_a</span>                       <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5, 6, ...</span>\n</pre>\n"],["entries","Pathname","Pathname.html#method-i-entries","()","<p>Return the entries (files and subdirectories) in the directory, each as a\nPathname object.\n<p>The results …\n"],["entry_details","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-entry_details","(entry, detail_tuple, specs, platforms)",""],["entry_versions","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-entry_versions","(entry, name_tuples, platforms, specs)",""],["enum_for","Enumerator::Lazy","Enumerator/Lazy.html#method-i-enum_for","(*args)","<p>Similar to Kernel#to_enum, except it returns a lazy enumerator. This makes\nit easy to define Enumerable …\n"],["enum_for","Object","Object.html#method-i-enum_for","(*args)","<p>Creates a new Enumerator which will enumerate by calling\n<code>method</code> on <code>obj</code>, passing <code>args</code> if any.\n<p>If a block …\n"],["env_requirement","Gem","Gem.html#method-c-env_requirement","(gem_name)",""],["env_table","CGI","CGI.html#method-i-env_table","()","<p>Synonym for ENV.\n"],["environment","OptionParser","OptionParser.html#method-i-environment","(env = File.basename($0, '.*'))","<p>Parses environment variable <code>env</code> or its uppercase with\nsplitting like a shell.\n<p><code>env</code> defaults to the basename …\n"],["eof","ARGF","ARGF.html#method-i-eof","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof","IO","IO.html#method-i-eof","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-eof","()",""],["eof","StringIO","StringIO.html#method-i-eof","()","<p>Returns true if <strong>strio</strong> is at end of file. The stringio must\nbe opened for reading or an <code>IOError</code> will be …\n"],["eof","Zlib::GzipReader","Zlib/GzipReader.html#method-i-eof","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has\nreached the end.\n"],["eof?","ARGF","ARGF.html#method-i-eof-3F","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-eof-3F","()","<p>Are we at the end of the tar entry?\n"],["eof?","IO","IO.html#method-i-eof-3F","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof?","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-eof-3F","()","<p>Returns true if the stream is at file which means there is no more data to\nbe read.\n"],["eof?","StringIO","StringIO.html#method-i-eof-3F","()","<p>Returns true if <strong>strio</strong> is at end of file. The stringio must\nbe opened for reading or an <code>IOError</code> will be …\n"],["eof?","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-eof-3F","()","<p>Whether there are any expressions left in this printer.\n"],["eof?","Zlib::GzipReader","Zlib/GzipReader.html#method-i-eof-3F","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has\nreached the end.\n"],["eos?","StringScanner","StringScanner.html#method-i-eos-3F","()","<p>Returns <code>true</code> if the scan pointer is at the end of the string.\n\n<pre>s = StringScanner.new(&#39;test string&#39;)\np s.eos? ...</pre>\n"],["eql?","Array","Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other</code> are\nthe same object, or are both arrays with the same content (according …\n"],["eql?","BigDecimal","BigDecimal.html#method-i-eql-3F","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["eql?","Fiddle::Pointer","Fiddle/Pointer.html#method-i-eql-3F","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["eql?","Float","Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Float with the same\nvalue as <code>float</code>. Contrast this with Float#==, which …\n"],["eql?","Gem::NameTuple","Gem/NameTuple.html#method-i-eql-3F","(other)",""],["eql?","Gem::Platform","Gem/Platform.html#method-i-eql-3F","(other)",""],["eql?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-eql-3F","(other)",""],["eql?","Gem::Version","Gem/Version.html#method-i-eql-3F","(other)","<p>A Version is only eql? to another version if it&#39;s specified to the same\nprecision. Version “1.0” …\n"],["eql?","Hash","Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>hash</em> and <em>other</em> are both\nhashes with the same content. The orders of each hashes are not …\n"],["eql?","IPAddr","IPAddr.html#method-i-eql-3F","(other)","<p>Checks equality used by Hash.\n"],["eql?","MatchData","MatchData.html#method-i-eql-3F","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["eql?","Matrix","Matrix.html#method-i-eql-3F","(other)",""],["eql?","Method","Method.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["eql?","Numeric","Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>num</code> and <code>numeric</code> are\nthe same type and have equal values.  Contrast this with\n<code>Numeric#==</code> …\n"],["eql?","Object","Object.html#method-i-eql-3F","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["eql?","OpenSSL::BN","OpenSSL/BN.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a\n<code>OpenSSL::BN</code> with the same value as <em>big</em>. Contrast this\nwith OpenSSL::BN#==, …\n"],["eql?","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-eql-3F","(p1)","<p>Returns true if the two groups use the same curve and have the same\nparameters, false otherwise.\n"],["eql?","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-eql-3F","(p1)",""],["eql?","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-eql-3F","(p1)","<p>Returns true if <code>name</code> and <code>other</code> refer to the same\nhash key.\n"],["eql?","OpenStruct","OpenStruct.html#method-i-eql-3F","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is\neql? to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["eql?","Pathname","Pathname.html#method-i-eql-3F","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["eql?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["eql?","Range","Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Range, has\nequivalent begin and end items (by comparing them with <code>eql?</code> …\n"],["eql?","Regexp","Regexp.html#method-i-eql-3F","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["eql?","String","String.html#method-i-eql-3F","(p1)","<p>Two strings are equal if they have the same length and content.\n"],["eql?","Struct","Struct.html#method-i-eql-3F","(p1)","<p>Hash equality—<code>other</code> and <code>struct</code> refer to the same\nhash key if they have the same struct subclass and …\n"],["eql?","Time","Time.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>time</em> and <code>other_time</code> are\nboth Time objects with the same seconds and fractional seconds. …\n"],["eql?","URI::Generic","URI/Generic.html#method-i-eql-3F","(oth)",""],["eql?","UnboundMethod","UnboundMethod.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["eql?","Vector","Vector.html#method-i-eql-3F","(other)",""],["equal?","BasicObject","BasicObject.html#method-i-equal-3F","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["equality_relational_compare","REXML::XPathParser","REXML/XPathParser.html#method-i-equality_relational_compare","( set1, op, set2 )",""],["erf","Math","Math.html#method-c-erf","(p1)","<p>Calculates the error function of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-1, 1)\n"],["erfc","Math","Math.html#method-c-erfc","(p1)","<p>Calculates the complementary error function of x.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (0, 2)\n"],["errno","SystemCallError","SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError&#39;s error number.\n"],["error","Gem::MockGemUi","Gem/MockGemUi.html#method-i-error","()",""],["error","Logger","Logger.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message.\n<p>See #info for more information.\n"],["error","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error","()",""],["error","RDoc::RDoc","RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error","RDoc::Servlet","RDoc/Servlet.html#method-i-error","(exception, req, res)","<p>Generates an error page for the <code>exception</code> while handling\n<code>req</code> on <code>res</code>.\n"],["error","Syslog::Logger","Syslog/Logger.html#method-i-error","","<p>Logs a <code>message</code> at the error (syslog warning) log level, or\nlogs the message returned from the block. …\n"],["error","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-error","(msg)","<p>Shortcut for logging an ERROR message\n"],["error=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error-3D","(p1)",""],["error?","Logger","Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>ERROR</code> messages.\n"],["error?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-error-3F","()",""],["error?","Ripper","Ripper.html#method-i-error-3F","()","<p>Return true if parsed source has errors.\n"],["error?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-error-3F","()","<p>Will the logger output ERROR messages?\n"],["error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["error_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-error_bytes","()","<p>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["error_char","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-error_char","()","<p>Returns the one-character string which cause\nEncoding::UndefinedConversionError.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["error_depth","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error_depth","()",""],["error_message","GetoptLong","GetoptLong.html#method-i-error_message","()","<p>Return the appropriate error message in POSIX-defined format. If no error\nhas occurred, returns nil. …\n"],["error_print","DRb::DRbServer","DRb/DRbServer.html#method-i-error_print","(exception)",""],["error_string","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-error_string","()","<p>Returns the error string corresponding to the error code retrieved by\n#error.\n"],["errors","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-errors","()",""],["errors","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-errors","()","<p>Errors encountered while resolving gems\n"],["errors","OpenSSL","OpenSSL.html#method-c-errors","()","<p>See any remaining errors held in queue.\n<p>Any errors you see here are probably due to a bug in ruby&#39;s …\n"],["escape","CGI::Util","CGI/Util.html#method-i-escape","(string)","<p>URL-encode a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">url_encoded_string</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">escape</span>(<span class=\"ruby-string\">&quot;&#39;Stop!&#39; said Fred&quot;</span>)\n   <span class=\"ruby-comment\"># =&gt; &quot;%27Stop%21%27+said+Fred&quot;</span>\n</pre>\n"],["escape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-escape","()","<p>Escapes the #uri for use as a CGI parameter\n"],["escape","Regexp","Regexp.html#method-c-escape","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["escape","Shellwords","Shellwords.html#method-c-escape","(str)",""],["escape","URI::Escape","URI/Escape.html#method-i-escape","(*arg)","<p>Synopsis\n\n<pre>URI.escape(str [, unsafe])</pre>\n<p>Args\n"],["escape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p>str &mdash; String to make safe\n<p>unsafe &mdash; Regexp to apply. Defaults to self.regexp\n"],["escape","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-escape","(data)","<p>Escapes control characters in <code>data</code>\n"],["escape","WEBrick::HTMLUtils","WEBrick/HTMLUtils.html#method-i-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["escape","WEBrick::HTMLUtils","WEBrick/HTMLUtils.html#method-c-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["escape","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape","(str)","<p>Escapes HTTP reserved and unwise characters in <code>str</code>\n"],["escape8bit","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape8bit","(str)","<p>Escapes 8 bit characters in <code>str</code>\n"],["escapeElement","CGI::Util","CGI/Util.html#method-i-escapeElement","(string, *elements)","<p>Escape only the tags of certain HTML elements in <code>string</code>.\n<p>Takes an element or elements or array of elements. …\n"],["escapeHTML","CGI::Util","CGI/Util.html#method-i-escapeHTML","(string)","<p>Escape special characters in HTML, namely &#39;&amp;&quot;&lt;&gt;\n\n<pre>CGI::escapeHTML(&#39;Usage: foo &quot;bar&quot; ...</pre>\n"],["escape_element","CGI::Util","CGI/Util.html#method-i-escape_element","(string, *elements)","<p>Synonym for CGI::escapeElement(str)\n"],["escape_form","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape_form","(str)","<p>Escapes form reserved characters in <code>str</code>\n"],["escape_html","CGI::Util","CGI/Util.html#method-i-escape_html","(string)","<p>Synonym for CGI::escapeHTML(str)\n"],["escape_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-escape_path","(str)","<p>Escapes path <code>str</code>\n"],["escape_re","CSV","CSV.html#method-i-escape_re","(str)","<p>This method is an encoding safe version of Regexp::escape().  It will\nescape any characters that would …\n"],["escape_userpass","URI::Generic","URI/Generic.html#method-i-escape_userpass","(v)","<p>escapes &#39;user:password&#39; <code>v</code> based on RFC 1738 section\n3.1\n"],["euid","Process","Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["euid=","Process","Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all\nplatforms.\n"],["eval","Binding","Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the\n<em>binding</em>&#39;s context.  If the optional <em>filename</em> and …\n"],["eval","Kernel","Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is\ngiven, which must be a <code>Binding</code> object, the …\n"],["eval","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-eval","()","<p>Evaluates the instruction sequence and returns the result.\n\n<pre>RubyVM::InstructionSequence.compile(&quot;1 + 2&quot;).eval ...</pre>\n"],["eval_history=","IRB::Context","IRB/Context.html#method-i-eval_history-3D","(no)","<p>Sets command result history limit.\n<p><code>no</code> is an Integer or <code>nil</code>.\n<p>Returns <code>no</code> of history items if greater than …\n"],["eval_input","IRB::Irb","IRB/Irb.html#method-i-eval_input","()","<p>Evaluates input for this session.\n"],["evaluate","IRB::WorkSpace","IRB/WorkSpace.html#method-i-evaluate","(context, statements, file = nil, line = nil)","<p>Evaluate the context of this workspace and use the Tracer library to output\nthe exact lines of code are …\n"],["evaluate","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-i-evaluate","(erb, servlet_request, servlet_response)","<p>Evaluates <code>erb</code> providing <code>servlet_request</code> and\n<code>servlet_response</code> as local variables.\n"],["even?","Integer","Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <code>int</code> is an even number.\n"],["even?","Integer","Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <code>int</code> is an even number.\n"],["event","TracePoint","TracePoint.html#method-i-event","()","<p>Type of event\n<p>See TracePoint@Events for more information.\n"],["event?","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-event-3F","()","<p>Returns true if the method is event.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...</pre>\n"],["event_interface","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-event_interface","()","<p>Returns event interface name if the method is event.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["event_type","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-event_type","()",""],["exact?","Gem::Requirement","Gem/Requirement.html#method-i-exact-3F","()","<p>true if the requirement is for only an exact version\n"],["examine","Net::IMAP","Net/IMAP.html#method-i-examine","(mailbox)","<p>Sends a EXAMINE command to select a <code>mailbox</code> so that messages\nin the <code>mailbox</code> can be accessed.  Behaves …\n"],["exception","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-exception","()","<p>Create a DRbUnknownError exception containing this object.\n"],["exception","Exception","Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception","Exception","Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception","Timeout::Error","Timeout/Error.html#method-i-exception","(*)",""],["exception","Timeout::Error","Timeout/Error.html#method-i-exception","(*)",""],["exception","Timeout::Error","Timeout/Error.html#method-i-exception","(*)",""],["exception_class","Net::SMTP::Response","Net/SMTP/Response.html#method-i-exception_class","()","<p>Determines whether there was an error and raises the appropriate error\nbased on the reply code of the …\n"],["exclude_end?","Range","Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if the range excludes its end value.\n\n<pre>(1..5).exclude_end?     #=&gt; false\n(1...5).exclude_end? ...</pre>\n"],["exclusive","Thread","Thread.html#method-c-exclusive","()","<p>Wraps the block in a single, VM-global Mutex.synchronize, returning the\nvalue of the block. A thread …\n"],["exec","Kernel","Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>, which can take one of the following …\n"],["exec","Process","Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>, which can take one of the following …\n"],["exec_format","Gem::Installer","Gem/Installer.html#method-c-exec_format","()","<p>Defaults to use Ruby&#39;s program prefix and suffix.\n"],["exec_if","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-exec_if","()","<p>Execute the given block if notifications are enabled.\n"],["executable","Gem::Specification","Gem/Specification.html#method-i-executable","()","<p>Singular accessor for #executables\n"],["executable=","Gem::Specification","Gem/Specification.html#method-i-executable-3D","(o)","<p>Singular accessor for #executables\n"],["executable?","File","File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser and group id of this process. See …\n"],["executable?","File::Stat","File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the\noperating system doesn&#39;t distinguish executable files …\n"],["executable?","FileTest","FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser and group id of this process. See …\n"],["executable?","Pathname","Pathname.html#method-i-executable-3F","()","<p>See FileTest.executable?.\n"],["executable_real?","File","File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nand group id of this process. See access(3). …\n"],["executable_real?","File::Stat","File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the\nprocess.\n"],["executable_real?","FileTest","FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nand group id of this process. See access(3). …\n"],["executable_real?","Pathname","Pathname.html#method-i-executable_real-3F","()","<p>See FileTest.executable_real?.\n"],["executables","Gem::Specification","Gem/Specification.html#method-i-executables","()","<p>Executables included in the gem.\n<p>For example, the rake gem has rake as an executable. You don’t specify …\n"],["executables=","Gem::Specification","Gem/Specification.html#method-i-executables-3D","(value)","<p>Sets executables to <code>value</code>, ensuring it is an array. Don&#39;t\nuse this, push onto the array instead. …\n"],["execute","Gem::Command","Gem/Command.html#method-i-execute","()","<p>Override to provide command handling.\n<p>#options will be filled in with your parsed options, unparsed options …\n"],["execute","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-execute","()",""],["execute","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-execute","()",""],["execute","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-execute","()",""],["execute","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-i-execute","()",""],["execute","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-i-execute","()",""],["execute","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-execute","()",""],["execute","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-execute","()",""],["execute","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-execute","()",""],["execute","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-i-execute","()",""],["execute","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-execute","()",""],["execute","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-execute","()",""],["execute","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-execute","()",""],["exist?","Dir","Dir.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n"],["exist?","File","File.html#method-c-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","FileTest","FileTest.html#method-i-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","Pathname","Pathname.html#method-i-exist-3F","()","<p>See FileTest.exist?.\n"],["exist?","StringScanner","StringScanner.html#method-i-exist-3F","(p1)","<p>Looks <em>ahead</em> to see if the <code>pattern</code> exists\n<em>anywhere</em> in the string, without advancing the scan pointer. …\n"],["exists?","Dir","Dir.html#method-c-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exists?","File","File.html#method-c-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exists?","FileTest","FileTest.html#method-i-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exit","IRB::Context","IRB/Context.html#method-i-exit","(ret = 0)","<p>Exits the current session, see IRB.irb_exit\n"],["exit","Kernel","Kernel.html#method-i-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Process","Process.html#method-c-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Thread","Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be\nrun.\n<p>If this thread is already …\n"],["exit","Thread","Thread.html#method-i-exit","()","<p>Terminates <code>thr</code> and schedules another thread to be run.\n<p>If this thread is already marked to be killed, …\n"],["exit!","Kernel","Kernel.html#method-i-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit!","Process","Process.html#method-c-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit_value","LocalJumpError","LocalJumpError.html#method-i-exit_value","()","<p>Returns the exit value associated with this <code>LocalJumpError</code>.\n"],["exited?","Process::Status","Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example\nusing an <code>exit()</code> call or finishing the program).\n"],["exitstatus","Process::Status","Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of\n<em>stat</em>. Only available if <code>exited?</code> is <code>true</code>\n…\n"],["exp","BigMath","BigMath.html#method-c-exp","(p1, p2)","<p>Computes the value of e (the base of natural logarithms) raised to the\npower of <code>decimal</code>, to the specified …\n"],["exp","CMath","CMath.html#method-i-exp","(z)","<p>Math::E raised to the <code>z</code> power\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">exp</span>(<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">i</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span>) <span class=\"ruby-comment\">#=&gt; (-1.0+1.2246467991473532e-16i)</span>\n</pre>\n"],["exp","CMath","CMath.html#method-c-exp","(z)","<p>Math::E raised to the <code>z</code> power\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">exp</span>(<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">i</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span>) <span class=\"ruby-comment\">#=&gt; (-1.0+1.2246467991473532e-16i)</span>\n</pre>\n"],["exp","Math","Math.html#method-c-exp","(p1)","<p>Returns e**x.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (0, INFINITY)\n"],["expand","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-expand","( path )",""],["expand","REXML::Text","REXML/Text.html#method-c-expand","(ref, doctype, filter)",""],["expand_hexstring","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_hexstring","(str)",""],["expand_pair","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_pair","(str)",""],["expand_path","File","File.html#method-c-expand_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["expand_path","Pathname","Pathname.html#method-i-expand_path","(p1 = v1)","<p>Returns the absolute path for the file.\n<p>See File.expand_path.\n"],["expand_path","Shell","Shell.html#method-i-expand_path","(path)",""],["expand_path","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-expand_path","(path)","<p>CommandProcessor#expand_path(path)\n\n<pre>  path:   String\n  return: String\nreturns the absolute path for &lt;path&gt;</pre>\n"],["expand_ref_in","REXML::Validation::State","REXML/Validation/State.html#method-i-expand_ref_in","( arry, ind )",""],["expand_tabs","RDoc::Text","RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["expand_value","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_value","(str1, str2, str3)",""],["expanded_name","REXML::Document","REXML/Document.html#method-i-expanded_name","()","<p>According to the XML spec, a root node has no expanded name\n"],["expect","IO","IO.html#method-i-expect","(pat,timeout=9999999)","<p>Reads from the IO until the given <code>pattern</code> matches or the\n<code>timeout</code> is over.\n<p>It returns an array with the …\n"],["expected","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-expected","()",""],["expected","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-i-expected","()",""],["expected","REXML::Validation::OneOrMore","REXML/Validation/OneOrMore.html#method-i-expected","()",""],["expected","REXML::Validation::Optional","REXML/Validation/Optional.html#method-i-expected","()",""],["expected","REXML::Validation::State","REXML/Validation/State.html#method-i-expected","()",""],["expected","REXML::Validation::ZeroOrMore","REXML/Validation/ZeroOrMore.html#method-i-expected","()",""],["expired?","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-expired-3F","()","<p>Has this tuple expired? (true/false).\n<p>A tuple has expired when its expiry timer based on the <code>sec</code>\nargument …\n"],["expires","WEBrick::Cookie","WEBrick/Cookie.html#method-i-expires","()","<p>Retrieves the expiration time as a Time\n"],["expires=","WEBrick::Cookie","WEBrick/Cookie.html#method-i-expires-3D","(t)","<p>Sets the cookie expiration to the time <code>t</code>.  The expiration time\nmay be a false value to disable expiration …\n"],["explain","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explain","()","<p>A string explanation of the conflict.\n"],["explanation","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explanation","()","<p>Explanation of the conflict used by exceptions to print useful messages\n"],["explicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-explicit-3F","()","<p>Indicate that the request is for a gem explicitly requested by the user\n"],["exponent","BigDecimal","BigDecimal.html#method-i-exponent","()","<p>Returns the exponent of the BigDecimal number, as an Integer.\n<p>If the number can be represented as 0.xxxxxx …\n"],["export","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-export","()","<p>Encodes this DH to its PEM encoding. Note that any existing per-session\npublic/private keys will <strong>not</strong> …\n"],["export","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Encodes this DSA to its PEM encoding.\n<p>Parameters\n<p><code>cipher</code> is an OpenSSL::Cipher.\n"],["export","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-export","(p1 = v1, p2 = v2)","<p>Outputs the EC key in PEM encoding.  If <code>cipher</code> and\n<code>pass_phrase</code> are given they will be used to encrypt …\n"],["export","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Outputs this keypair in PEM encoding.  If <code>cipher</code> and\n<code>pass_phrase</code> are given they will be used to encrypt …\n"],["expr","REXML::XPathParser","REXML/XPathParser.html#method-i-expr","( path_stack, nodeset, context=nil )",""],["expunge","Net::IMAP","Net/IMAP.html#method-i-expunge","()","<p>Sends a EXPUNGE command to permanently remove from the currently selected\nmailbox all messages that have …\n"],["extend","Object","Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a\nparameter.\n\n<pre>module Mod\n  def hello\n    &quot;Hello ...</pre>\n"],["extend_object","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)","<p>Installs alias methods for the default irb commands on the given object\nusing #install_alias_method. …\n"],["extend_object","Module","Module.html#method-i-extend_object","(p1)","<p>Extends the specified object by adding this module&#39;s constants and\nmethods (which are added as singleton …\n"],["extend_object","MonitorMixin","MonitorMixin.html#method-c-extend_object","(obj)",""],["extend_object","OptionParser::Arguable","OptionParser/Arguable.html#method-c-extend_object","(obj)","<p>Initializes instance variable.\n"],["extend_object","Sync_m","Sync_m.html#method-c-extend_object","(obj)",""],["extend_object","Sync_m","Sync_m.html#method-c-extend_object","(obj)",""],["extended","Module","Module.html#method-i-extended","(p1)","<p>The equivalent of <code>included</code>, but for extended modules.\n\n<pre>module A\n  def self.extended(mod)\n    puts &quot;#{self} ...</pre>\n"],["extension","RDoc::Markdown","RDoc/Markdown.html#method-i-extension","(name, enable)","<p>Enables or disables the extension with <code>name</code>\n"],["extension","RDoc::Markdown","RDoc/Markdown.html#method-c-extension","(name)","<p>Creates extension methods for the <code>name</code> extension to enable and\ndisable\nthe extension and to query if ...\n"],["extension?","RDoc::Markdown","RDoc/Markdown.html#method-i-extension-3F","(name)","<p>Is the extension <code>name</code> enabled?\n"],["extension_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extension_dir","()","<p>Returns full path to the directory where gem&#39;s extensions are\ninstalled.\n"],["extensions","Gem::Specification","Gem/Specification.html#method-i-extensions","()","<p>Extensions to build when installing the gem, specifically the paths to\nextconf.rb-style files used to …\n"],["extensions","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","URI::LDAP","URI/LDAP.html#method-i-extensions","()","<p>returns extensions.\n"],["extensions=","Gem::Specification","Gem/Specification.html#method-i-extensions-3D","(extensions)","<p>Sets extensions to <code>extensions</code>, ensuring it is an array.\nDon&#39;t use this, push onto the array instead. …\n"],["extensions=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-extensions-3D","(p1)",""],["extensions=","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","URI::LDAP","URI/LDAP.html#method-i-extensions-3D","(val)","<p>setter for extensions <code>val</code>\n"],["extensions_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extensions_dir","()","<p>Returns path to the extensions directory.\n"],["extern","Fiddle::Importer","Fiddle/Importer.html#method-i-extern","(signature, *opts)","<p>Creates a global method from the given C <code>signature</code>.\n"],["external_encoding","ARGF","ARGF.html#method-i-external_encoding","()","<p>Returns the external encoding for files read from <code>ARGF</code> as an\n<code>Encoding</code> object. The external encoding is …\n"],["external_encoding","IO","IO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If\n<em>io</em> is in write mode and no encoding …\n"],["external_encoding","StringIO","StringIO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If\nstrio is write mode and no encoding …\n"],["external_encoding","Zlib::GzipReader","Zlib/GzipReader.html#method-i-external_encoding","()","<p>See Zlib::GzipReader documentation for a description.\n"],["extname","File","File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <code>path</code>\nstarting from the last period).\n<p>If <code>path</code> is a dotfile, …\n"],["extname","Pathname","Pathname.html#method-i-extname","()","<p>Returns the file&#39;s extension.\n<p>See File.extname.\n"],["extra_args","Gem::Command","Gem/Command.html#method-c-extra_args","()",""],["extra_args=","Gem::Command","Gem/Command.html#method-c-extra_args-3D","(value)",""],["extra_rdoc_files","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files","()","<p>Extra files to add to RDoc such as README or doc/examples.txt\n<p>When the user elects to generate the RDoc …\n"],["extra_rdoc_files=","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files-3D","(files)","<p>Sets extra_rdoc_files to <code>files</code>, ensuring it is an array.\nDon&#39;t use this, push onto the array instead. …\n"],["extract","URI","URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre>URI::extract(str[, schemes][,&amp;blk])</pre>\n<p>Args\n"],["extract","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p>str &mdash; String to search\n<p>schemes &mdash; Patterns to apply to <code>str</code>\n"],["extract_bin","Gem::Installer","Gem/Installer.html#method-i-extract_bin","()","<p>Extracts only the bin/ files from the gem into the gem directory. This is\nused by default gems to allow …\n"],["extract_call_seq","RDoc::Comment","RDoc/Comment.html#method-i-extract_call_seq","(method)","<p>Look for a &#39;call-seq&#39; in the comment to override the normal\nparameter handling.  The :call-seq: …\n"],["extract_files","Gem::Installer","Gem/Installer.html#method-i-extract_files","()","<p>Reads the file index and extracts each file into the gem directory.\n<p>Ensures that files can&#39;t be installed …\n"],["extract_files","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-i-extract_files","(destination_dir, pattern = '*')",""],["extract_files","Gem::Package","Gem/Package.html#method-i-extract_files","(destination_dir, pattern = \"*\")","<p>Extracts the files in this package into <code>destination_dir</code>\n<p>If <code>pattern</code> is specified, only entries matching …\n"],["extract_files","Gem::Package::Old","Gem/Package/Old.html#method-i-extract_files","(destination_dir)","<p>Extracts the files in this package into <code>destination_dir</code>\n"],["extract_reference","OpenSSL::Config","OpenSSL/Config.html#method-c-extract_reference","(value)",""],["facility","Syslog","Syslog.html#method-c-facility","()","<p>Returns the facility number used in the last call to open()\n"],["fail","Exception2MessageMapper","Exception2MessageMapper.html#method-i-fail","(err = nil, *rest)",""],["fail","Kernel","Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["false","REXML::Functions","REXML/Functions.html#method-c-false","( )","<p>UNTESTED\n"],["family","Socket::AncillaryData","Socket/AncillaryData.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).family ...</pre>\n"],["family","Socket::Option","Socket/Option.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).family ...</pre>\n"],["family_addrinfo","Addrinfo","Addrinfo.html#method-i-family_addrinfo","(*args)","<p>creates an Addrinfo object from the arguments.\n<p>The arguments are interpreted as similar to self.\n\n<pre>Addrinfo.tcp(&quot;0.0.0.0&quot;, ...</pre>\n"],["fast_generate","JSON","JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. This method disables the checks …\n"],["fastmode=","GDBM","GDBM.html#method-i-fastmode-3D","(p1)","<p>Turns the database&#39;s fast mode on or off. If fast mode is turned on,\ngdbm does not wait for writes …\n"],["fatal","Logger","Logger.html#method-i-fatal","(progname = nil, &block)","<p>Log a <code>FATAL</code> message.\n<p>See #info for more information.\n"],["fatal","Syslog::Logger","Syslog/Logger.html#method-i-fatal","","<p>Logs a <code>message</code> at the fatal (syslog err) log level, or logs\nthe message returned from the block.\n"],["fatal","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-fatal","(msg)","<p>Shortcut for logging a FATAL message\n"],["fatal?","Logger","Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>FATAL</code> messages.\n"],["fatal?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-fatal-3F","()","<p>Will the logger output FATAL messages?\n"],["fcntl","IO","IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query\nfile-oriented I/O streams. Arguments …\n"],["fcntl","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-fcntl","(*args)",""],["fcntl","StringIO","StringIO.html#method-i-fcntl","(*args)","<p>Raises NotImplementedError.\n"],["fdatasync","IO","IO.html#method-i-fdatasync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk.\n<p>If the underlying operating system does not support …\n"],["fdiv","Complex","Complex.html#method-i-fdiv","(p1)","<p>Performs division as each part is a float, never returns a float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">11</span>, <span class=\"ruby-value\">22</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; (3.6666666666666665+7.333333333333333i)</span>\n</pre>\n"],["fdiv","Float","Float.html#method-i-fdiv","(p1)","<p>Returns <code>float / numeric</code>, same as Float#/.\n"],["fdiv","Integer","Integer.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <code>integer</code> by\n<code>numeric</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">654321</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; 47.6528293642124 ...</span>\n</pre>\n"],["fdiv","Integer","Integer.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <code>integer</code> by\n<code>numeric</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">654321</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; 47.6528293642124 ...</span>\n</pre>\n"],["fdiv","Numeric","Numeric.html#method-i-fdiv","(p1)","<p>Returns float division.\n"],["fdiv","Rational","Rational.html#method-i-fdiv","(p1)","<p>Performs division and returns the value as a float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">1</span>)       <span class=\"ruby-comment\">#=&gt; 0.6666666666666666 ...</span>\n</pre>\n"],["feed","Enumerator","Enumerator.html#method-i-feed","(p1)","<p>Sets the value to be returned by the next yield inside <code>e</code>.\n<p>If the value is not set, the yield returns nil. …\n"],["feed_info","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-feed_info","()",""],["fetch","Array","Array.html#method-i-fetch","(p1, p2 = v2)","<p>Tries to return the element at position <code>index</code>, but throws an\nIndexError exception if the referenced  …\n"],["fetch","CSV::Row","CSV/Row.html#method-i-fetch","(header, *varargs)","<p>This method will fetch the field value by <code>header</code>. It has the\nsame behavior as Hash#fetch: if there is …\n"],["fetch","DBM","DBM.html#method-i-fetch","(p1, p2 = v2)","<p>Return a value from the database by locating the key string provided.  If\nthe key is not found, returns …\n"],["fetch","ENV","ENV.html#method-c-fetch","(*args)","<p>Retrieves the environment variable <code>name</code>.\n<p>If the given name does not exist and neither <code>default</code> nor a\nblock …\n"],["fetch","GDBM","GDBM.html#method-i-fetch","(p1, p2 = v2)","<p>Retrieves the <em>value</em> corresponding to <em>key</em>. If there is no\nvalue associated with <em>key</em>, <em>default</em> will be returned …\n"],["fetch","Gem::Request","Gem/Request.html#method-i-fetch","()",""],["fetch","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)","<p>The silent download reporter does not display <code>filename</code> or care\nabout <code>filesize</code> because it is silent.\n"],["fetch","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-fetch","(file_name, total_bytes)","<p>Tells the download reporter that the <code>file_name</code> is being\nfetched and contains <code>total_bytes</code>.\n"],["fetch","Hash","Hash.html#method-i-fetch","(*args)","<p>Returns a value from the hash for the given key. If the key can&#39;t be\nfound, there are several options: …\n"],["fetch","Net::IMAP","Net/IMAP.html#method-i-fetch","(set, attr)","<p>Sends a FETCH command to retrieve data associated with a message in the\nmailbox.\n<p>The <code>set</code> parameter is …\n"],["fetch","PStore","PStore.html#method-i-fetch","(name, default=PStore::Error)","<p>This method is just like PStore#[], save that you may also provide a\n<em>default</em> value for the object.   …\n"],["fetch","Rinda::Tuple","Rinda/Tuple.html#method-i-fetch","(k)","<p>Fetches item <code>k</code> from the tuple.\n"],["fetch","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-fetch","(key)","<p>Fetches <code>key</code> from the tuple.\n"],["fetch","SDBM","SDBM.html#method-i-fetch","(p1, p2 = v2)","<p>Returns the <code>value</code> in the database associated with the given\n<code>key</code> string.\n<p>If a block is provided, the block …\n"],["fetch","YAML::DBM","YAML/DBM.html#method-i-fetch","( keystr, ifnone = nil )","<p>Return value associated with <code>key</code>.\n<p>If there is no value for <code>key</code> and no block is given, returns\n<code>ifnone</code>. …\n"],["fetch_file","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_file","(uri, *_)","<p>File Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_http","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>HTTP Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_https","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_https","(uri, last_modified = nil, head = false, depth = 0)",""],["fetch_internal","Net::IMAP","Net/IMAP.html#method-i-fetch_internal","(cmd, set, attr)",""],["fetch_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-fetch_path","(path, mtime = nil, head = false)",""],["fetch_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_path","(uri, mtime = nil, head = false)","<p>Downloads <code>uri</code> and returns it as a String.\n"],["fetch_resource","Resolv::DNS","Resolv/DNS.html#method-i-fetch_resource","(name, typeclass)",""],["fetch_s3","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_s3","(uri, mtime = nil, head = false)",""],["fetch_server","DRb","DRb.html#method-c-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["fetch_server","DRb","DRb.html#method-i-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["fetch_size","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-fetch_size","(path)",""],["fetch_size","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_size","(uri)","<p>Returns the size of <code>uri</code> in bytes.\n"],["fetch_spec","Gem::Source","Gem/Source.html#method-i-fetch_spec","(name_tuple)","<p>Fetches a specification for the given <code>name_tuple</code>.\n"],["fetch_spec","Gem::Source::Lock","Gem/Source/Lock.html#method-i-fetch_spec","(name_tuple)","<p>Delegates to the wrapped source&#39;s fetch_spec method.\n"],["fetch_values","Hash","Hash.html#method-i-fetch_values","(*args)","<p>Returns an array containing the values associated with the given keys but\nalso raises <code>KeyError</code> when one …\n"],["fetcher","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher","()","<p>Cached RemoteFetcher instance.\n"],["fetcher","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-fetcher","()","<p>Default fetcher instance.  Use this instead of ::new to reduce object\nallocation.\n"],["fetcher=","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher-3D","(fetcher)",""],["field","CSV::Row","CSV/Row.html#method-i-field","(header_or_index, minimum_index = 0)","<p>This method will return the field value by <code>header</code> or\n<code>index</code>.  If a field is not found, <code>nil</code> is returned.\n…\n"],["field?","CSV::Row","CSV/Row.html#method-i-field-3F","(data)","<p>Returns <code>true</code> if <code>data</code> matches a field in this row,\nand <code>false</code> otherwise.\n"],["field_row?","CSV::Row","CSV/Row.html#method-i-field_row-3F","()","<p>Returns <code>true</code> if this is a field row.\n"],["fields","CSV::Row","CSV/Row.html#method-i-fields","(*headers_and_or_indices)","<p>This method accepts any number of arguments which can be headers, indices,\nRanges of either, or two-element …\n"],["file","ARGF","ARGF.html#method-i-file","()","<p>Returns the current file as an <code>IO</code> or <code>File</code> object.\n<code>#&lt;IO:&lt;STDIN&gt;&gt;</code> is returned when the current …\n"],["file","Digest::Class","Digest/Class.html#method-c-file","(name, *args)","<p>Creates a digest object and reads a given file, <em>name</em>. Optional\narguments are passed to the constructor …\n"],["file","Digest::Instance","Digest/Instance.html#method-i-file","(name)","<p>Updates the digest with the contents of a given file <em>name</em> and\nreturns self.\n"],["file?","File","File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a\nregular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","File::Stat","File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device\nfile, pipe, socket, etc.).\n\n<pre>File.stat(&quot;testfile&quot;).file? ...</pre>\n"],["file?","FileTest","FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a\nregular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-file-3F","()","<p>Is this tar entry a file?\n"],["file?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-file-3F","()","<p>Returns <code>true</code> if the entry is a file (i.e., the value of the\ntype fact is file).\n"],["file?","Pathname","Pathname.html#method-i-file-3F","()","<p>See FileTest.file?.\n"],["file_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-file_field","(name = \"\", size = 20, maxlength = nil)","<p>Generate an File Upload Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["file_input?","IRB::Context","IRB/Context.html#method-i-file_input-3F","()","<p>Whether #io uses a File for the <code>input_method</code> passed when\ncreating the current context, see ::new\n"],["file_name","Gem::Specification","Gem/Specification.html#method-i-file_name","()","<p>The default (generated) file name of the gem.  See also #spec_name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">file_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gem&quot;</span>\n</pre>\n"],["file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["filename","ARGF","ARGF.html#method-i-filename","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["filename","Ripper","Ripper.html#method-i-filename","()","<p>Return current parsing filename.\n"],["filename","Ripper::Filter","Ripper/Filter.html#method-i-filename","()","<p>The file name of the input.\n"],["filename_quote_characters","Readline","Readline.html#method-c-filename_quote_characters","()","<p>Gets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["filename_quote_characters=","Readline","Readline.html#method-c-filename_quote_characters-3D","(p1)","<p>Sets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["fileno","ARGF","ARGF.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["fileno","Dir","Dir.html#method-i-fileno","()","<p>Returns the file descriptor used in <em>dir</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-comment\">#=&gt; 8</span>\n</pre>\n<p>This method uses dirfd() function …\n"],["fileno","IO","IO.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n<pre>$stdin.fileno    #=&gt; 0\n$stdout.fileno ...</pre>\n"],["fileno","StringIO","StringIO.html#method-i-fileno","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["files","Gem::Specification","Gem/Specification.html#method-i-files","()","<p>Files included in this gem.  You cannot append to this accessor, you must\nassign to it.\n<p>Only add files …\n"],["files=","Gem::Specification","Gem/Specification.html#method-i-files-3D","(files)","<p>Sets files to <code>files</code>, ensuring it is an array.\n"],["files_hash","RDoc::Store","RDoc/Store.html#method-i-files_hash","()","<p>Hash of all files known to RDoc\n"],["files_in","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in","(spec)",""],["files_in_default_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_default_gem","(spec)",""],["files_in_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_gem","(spec)",""],["fill","Array","Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>The first three forms set the selected elements of <code>self</code> (which\nmay be the entire array) to <code>obj</code>.\n<p>A <code>start</code> …\n"],["fill_breakable","PrettyPrint","PrettyPrint.html#method-i-fill_breakable","(sep=' ', width=sep.length)","<p>This is similar to #breakable except the decision to break or not is\ndetermined individually.\n<p>Two #fill_breakable …\n"],["fill_rbuff","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-fill_rbuff","()","<p>Fills the buffer from the underlying SSLSocket\n"],["filter","CSV","CSV.html#method-c-filter","(*args)","<p>This method is a convenience for building Unix-like filters for CSV data.\nEach row is yielded to the …\n"],["filter","REXML::QuickPath","REXML/QuickPath.html#method-c-filter","(elements, path)","<p>Given an array of nodes it filters the array based on the path. The result\nis that when this method returns, …\n"],["filter","URI::LDAP","URI/LDAP.html#method-i-filter","()","<p>returns filter.\n"],["filter=","URI::LDAP","URI/LDAP.html#method-i-filter-3D","(val)","<p>setter for filter <code>val</code>\n"],["filter_backtrace","IRB::WorkSpace","IRB/WorkSpace.html#method-i-filter_backtrace","(bt)","<p>error message manipulator\n"],["filter_backtrace","OptionParser::ParseError","OptionParser/ParseError.html#method-c-filter_backtrace","(array)",""],["final","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-final","()","<p>Returns the remaining data held in the cipher object. Further calls to\nCipher#update or Cipher#final …\n"],["finalize","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-finalize","(p1)",""],["find","Encoding","Encoding.html#method-c-find","(p1)","<p>Search the encoding with specified <em>name</em>. <em>name</em> should be a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">find</span>(<span class=\"ruby-string\">&quot;US-ASCII&quot;</span>)  <span class=\"ruby-comment\">#=&gt; #&lt;Encoding:US-ASCII&gt;</span>\n</pre>\n"],["find","Enumerable","Enumerable.html#method-i-find","(p1 = v1)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["find","Find","Find.html#method-i-find","(*paths, ignore_error: true)","<p>Calls the associated block with the name of every file and directory listed\nas arguments, then recursively …\n"],["find","Find","Find.html#method-c-find","(*paths, ignore_error: true)","<p>Calls the associated block with the name of every file and directory listed\nas arguments, then recursively …\n"],["find","IRB::Locale","IRB/Locale.html#method-i-find","(file , paths = $:)",""],["find","Pathname","Pathname.html#method-i-find","(ignore_error: true)","<p>Iterates over the directory tree in a depth first manner, yielding a\nPathname for each file under “this” …\n"],["find","Psych::ClassLoader::Restricted","Psych/ClassLoader/Restricted.html#method-i-find","(klassname)",""],["find","Rinda::TupleBag","Rinda/TupleBag.html#method-i-find","(template)","<p>Finds a live tuple that matches <code>template</code>.\n"],["find","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-i-find","()",""],["find_active_stub_by_path","Gem::Specification","Gem/Specification.html#method-c-find_active_stub_by_path","(path)",""],["find_all","Enumerable","Enumerable.html#method-i-find_all","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>If no …\n"],["find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-find_all","()",""],["find_all","Gem::AvailableSet","Gem/AvailableSet.html#method-i-find_all","(req)","<p>Used by the Resolver, the protocol to use a AvailableSet as a search Set.\n"],["find_all","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-find_all","(req)","<p>Return an array of APISpecification objects matching DependencyRequest\n<code>req</code>.\n"],["find_all","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-find_all","(req)","<p>Finds all specs matching <code>req</code> in all sets.\n"],["find_all","Gem::Resolver::CurrentSet","Gem/Resolver/CurrentSet.html#method-i-find_all","(req)",""],["find_all","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-find_all","(req)","<p>Finds all git gems matching <code>req</code>\n"],["find_all","Gem::Resolver::IndexSet","Gem/Resolver/IndexSet.html#method-i-find_all","(req)","<p>Return an array of IndexSpecification objects matching DependencyRequest\n<code>req</code>.\n"],["find_all","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-find_all","(req)","<p>Returns an array of IndexSpecification objects matching DependencyRequest\n<code>req</code>.\n"],["find_all","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-i-find_all","(req)","<p>Returns an Array of IndexSpecification objects matching the\nDependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-find_all","(req)","<p>The find_all method must be implemented.  It returns all Resolver\nSpecification objects matching the …\n"],["find_all","Gem::Resolver::VendorSet","Gem/Resolver/VendorSet.html#method-i-find_all","(req)","<p>Returns an Array of VendorSpecification objects matching the\nDependencyRequest <code>req</code>.\n"],["find_all","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-find_all","(dep)","<p>Finds all gems matching <code>dep</code> in this set.\n"],["find_all","Rinda::TupleBag","Rinda/TupleBag.html#method-i-find_all","(template)","<p>Finds all live tuples that match <code>template</code>.\n"],["find_all_by_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_name","(name, *requirements)","<p>Returns every spec that matches <code>name</code> and optional\n<code>requirements</code>.\n"],["find_all_satisfiers","Gem::Specification","Gem/Specification.html#method-i-find_all_satisfiers","(dep)","<p>Finds all gems that satisfy <code>dep</code>\n"],["find_all_template","Rinda::TupleBag","Rinda/TupleBag.html#method-i-find_all_template","(tuple)","<p>Finds all tuples in the TupleBag which when treated as templates, match\n<code>tuple</code> and are alive.\n"],["find_ancestor_local_symbol","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_attribute","RDoc::Context","RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_by_name","Gem::Specification","Gem/Specification.html#method-c-find_by_name","(name, *requirements)","<p>Find the best specification matching a <code>name</code> and\n<code>requirements</code>. Raises if the dependency doesn&#39;t resolve …\n"],["find_by_path","Gem::Specification","Gem/Specification.html#method-c-find_by_path","(path)","<p>Return the best specification that contains the file matching\n<code>path</code>.\n"],["find_c_enclosure","RDoc::Store","RDoc/Store.html#method-i-find_c_enclosure","(variable)","<p>Finds the enclosure (namespace) for the given C <code>variable</code>.\n"],["find_class_method_named","RDoc::Context","RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its\ndescendants\n"],["find_class_named","RDoc::Store","RDoc/Store.html#method-i-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::Store","RDoc/Store.html#method-i-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace\n<code>from</code>\n"],["find_class_or_module","RDoc::Store","RDoc/Store.html#method-i-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_class_or_module","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command","(cmd_name)",""],["find_command_possibilities","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command_possibilities","(cmd_name)",""],["find_constant_named","RDoc::Context","RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_data","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-find_data","(path)",""],["find_enclosing_module_named","RDoc::Context","RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_encoding","REXML::Encoding","REXML/Encoding.html#method-i-find_encoding","(name)",""],["find_executable","MakeMakefile","MakeMakefile.html#method-i-find_executable","(bin, path = nil)","<p>Searches for the executable <code>bin</code> on <code>path</code>.  The\ndefault path is your <code>PATH</code> environment variable. If that …\n"],["find_external_alias","RDoc::Context","RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::Store","RDoc/Store.html#method-i-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_files","Gem","Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a\ngem to pick up features from other gems. …\n"],["find_files_for_gem","Gem::Validator","Gem/Validator.html#method-i-find_files_for_gem","(gem_directory)",""],["find_first_recursive","REXML::Node","REXML/Node.html#method-i-find_first_recursive","()","<p>Find (and return) first subnode (recursively) for which the block evaluates\nto true. Returns <code>nil</code> if none …\n"],["find_header","MakeMakefile","MakeMakefile.html#method-i-find_header","(header, *paths)","<p>Instructs mkmf to search for the given <code>header</code> in any of the\n<code>paths</code> provided, and returns whether or not …\n"],["find_home","Gem","Gem.html#method-c-find_home","()","<p>Finds the user&#39;s home directory.\n"],["find_in_cache","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-find_in_cache","(filename)","<p>Find cached filename in Gem.path. Returns nil if the file cannot be found.\n"],["find_in_unresolved","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved","(path)","<p>Return currently unresolved specs that contain the file matching\n<code>path</code>.\n"],["find_in_unresolved_tree","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved_tree","(path)","<p>Search through all unresolved deps and sub-dependencies and return specs\nthat contain the file matching …\n"],["find_inactive_by_path","Gem::Specification","Gem/Specification.html#method-c-find_inactive_by_path","(path)","<p>Return the best specification that contains the file matching\n<code>path</code> amongst the specs that are not activated. …\n"],["find_index","Array","Array.html#method-i-find_index","(*args)","<p>Returns the <em>index</em> of the first object in <code>ary</code> such\nthat the object is <code>==</code> to <code>obj</code>.\n<p>If a block is given instead …\n"],["find_index","Enumerable","Enumerable.html#method-i-find_index","(p1)","<p>Compares each entry in <em>enum</em> with <em>value</em> or passes to\n<em>block</em>.  Returns the index for the first for which …\n"],["find_index","Matrix","Matrix.html#method-i-find_index","(*args)",""],["find_instance_method_named","RDoc::Context","RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_ivars","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-find_ivars","(target, is_primitive=false)","<p>FIXME: remove this method once “to_yaml_properties” is removed\n"],["find_latest_files","Gem","Gem.html#method-c-find_latest_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> from the latest gems\nthat can be used by a gem to pick up features …\n"],["find_library","MakeMakefile","MakeMakefile.html#method-i-find_library","(lib, func, *paths, &b)","<p>Returns whether or not the entry point <code>func</code> can be found\nwithin the library <code>lib</code> in one of the <code>paths</code>\nspecified, …\n"],["find_local_symbol","RDoc::Context","RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named\n<code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_method","RDoc::Context","RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_method_named","RDoc::Context","RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_module_named","RDoc::Context","RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby&#39;s scoping rules\n"],["find_module_named","RDoc::Store","RDoc/Store.html#method-i-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_name","Gem::DependencyList","Gem/DependencyList.html#method-i-find_name","(full_name)",""],["find_paths","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-find_paths","(package_name, dirs)",""],["find_proxy","URI::Generic","URI/Generic.html#method-i-find_proxy","(env=ENV)","<p>returns a proxy URI. The proxy URI is obtained from environment variables\nsuch as http_proxy, ftp_proxy …\n"],["find_response","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-find_response","(p1)","<p>Returns a SingleResponse whose CertId matches with\n<code>certificate_id</code>, or nil if this BasicResponse does …\n"],["find_spec","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-find_spec","(dep)","<p>Finds <code>dep</code> in this set.\n"],["find_spec_by_name_and_version","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-find_spec_by_name_and_version","(gem_name, version = Gem::Requirement.default, prerelease = false)","<p>Finds a spec and the source_uri it came from for gem <code>gem_name</code>\nand <code>version</code>.  Returns an Array of specs …\n"],["find_spec_for_exe","Gem","Gem.html#method-c-find_spec_for_exe","(name, exec_name, requirements)",""],["find_state_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-find_state_for","(requirement)","<p>@return [ResolutionState] the state whose `requirement` is the given\n\n<pre>`requirement`.</pre>\n"],["find_symbol","RDoc::Context","RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_system_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-find_system_command","(command)","<p>private functions\n"],["find_text_page","RDoc::Store","RDoc/Store.html#method-i-find_text_page","(file_name)","<p>Returns the RDoc::TopLevel that is a text file and has the given\n<code>file_name</code>\n"],["find_type","MakeMakefile","MakeMakefile.html#method-i-find_type","(type, opt, *headers, &b)","<p>Returns where the static type <code>type</code> is defined.\n<p>You may also pass additional flags to <code>opt</code> which are then …\n"],["find_unique","RDoc::Store","RDoc/Store.html#method-i-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns\nthem as an array. Performs the alias updates …\n"],["find_unresolved_default_spec","Gem","Gem.html#method-c-find_unresolved_default_spec","(path)","<p>Find a Gem::Specification of default gem from <code>path</code>\n"],["finger","Rinda::RingFinger","Rinda/RingFinger.html#method-c-finger","()","<p>Creates a singleton RingFinger and looks for a RingServer.  Returns the\ncreated RingFinger.\n"],["finish","Digest::Instance","Digest/Instance.html#method-i-finish","()","<p>Finishes the digest and returns the resulting hash value.\n<p>This method is overridden by each implementation …\n"],["finish","Encoding::Converter","Encoding/Converter.html#method-i-finish","()","<p>Finishes the converter. It returns the last part of the converted string.\n\n<pre>ec = Encoding::Converter.new(&quot;utf-8&quot;, ...</pre>\n"],["finish","Net::HTTP","Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if\nthe session has not been started. …\n"],["finish","Net::POP3","Net/POP3.html#method-i-finish","()","<p>Finishes a POP3 session and closes TCP connection.\n"],["finish","Net::SMTP","Net/SMTP.html#method-i-finish","()","<p>Finishes the SMTP session and closes TCP connection. Raises IOError if not\nstarted.\n"],["finish","OpenSSL::Digest","OpenSSL/Digest.html#method-i-finish","(p1 = v1)",""],["finish","OpenSSL::Engine","OpenSSL/Engine.html#method-i-finish","()","<p>Releases all internal structural references for this engine.\n<p>May raise an EngineError if the engine is …\n"],["finish","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-finish","()",""],["finish","RDoc::Options","RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for\nexistent files, creating a regexp …\n"],["finish","Zlib::GzipFile","Zlib/GzipFile.html#method-i-finish","()","<p>Closes the GzipFile object. Unlike Zlib::GzipFile#close, this method never\ncalls the close method of …\n"],["finish","Zlib::ZStream","Zlib/ZStream.html#method-i-finish","()","<p>Finishes the stream and flushes output buffer.  If a block is given each\nchunk is yielded to the block …\n"],["finish_page_dir","RDoc::Options","RDoc/Options.html#method-i-finish_page_dir","()","<p>Fixes the page_dir to be relative to the root_dir and adds the page_dir to\nthe files list.\n"],["finish_resolve","Gem","Gem.html#method-c-finish_resolve","(request_set=Gem::RequestSet.new)",""],["finished?","ThreadsWait","ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","ThreadsWait","ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","Zlib::ZStream","Zlib/ZStream.html#method-i-finished-3F","()","<p>Returns true if the stream is finished.\n"],["finite?","BigDecimal","BigDecimal.html#method-i-finite-3F","()","<p>Returns True if the value is finite (not NaN or infinite).\n"],["finite?","Complex","Complex.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>cmp</code>&#39;s magnitude is finite\nnumber, oterwise returns <code>false</code>.\n"],["finite?","Float","Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>float</code> is a valid IEEE floating\npoint number (it is not infinite, and Float#nan? is <code>false</code> …\n"],["finite?","Numeric","Numeric.html#method-i-finite-3F","()","<p>Return true if <code>num</code> is finite number, oterwise returns false.\n"],["fips_mode=","OpenSSL","OpenSSL.html#method-c-fips_mode-3D","(p1)","<p>Turns FIPS mode on or off. Turning on FIPS mode will obviously only have an\neffect for FIPS-capable installations …\n"],["first","Array","Array.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\narray. If the array is empty, the first form …\n"],["first","Enumerable","Enumerable.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\nenumerable. If the enumerable is empty, the …\n"],["first","Gem::SourceList","Gem/SourceList.html#method-i-first","()","<p>Returns the first source in the list.\n"],["first","REXML::QuickPath","REXML/QuickPath.html#method-c-first","(element, path, namespaces=EMPTY_HASH)",""],["first","REXML::XPath","REXML/XPath.html#method-c-first","(element, path=nil, namespaces=nil, variables={})","<p>Finds and returns the first node that matches the supplied xpath.\n<p>element &mdash; The context element\n<p>path &mdash; The …\n"],["first","REXML::XPathParser","REXML/XPathParser.html#method-i-first","( path_stack, node )","<p>Performs a depth-first (document order) XPath search, and returns the first\nmatch.  This is the fastest, …\n"],["first","Range","Range.html#method-i-first","(p1)","<p>Returns the first object in the range, or an array of the first\n<code>n</code> elements.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">10</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">20</span>).<span class=\"ruby-identifier\">first</span>     <span class=\"ruby-comment\">#=&gt; 10 ...</span>\n</pre>\n"],["first?","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-first-3F","()","<p>This is used as a predicate, and ought to be called first.\n"],["first_lineno","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-first_lineno","()","<p>Returns the number of the first source line where the instruction sequence\nwas loaded from.\n<p>For example, …\n"],["first_minor","Matrix","Matrix.html#method-i-first_minor","(row, column)","<p>Returns the submatrix obtained by deleting the specified row and column.\n\n<pre>Matrix.diagonal(9, 5, -3, 4).first_minor(1, ...</pre>\n"],["fix","BigDecimal","BigDecimal.html#method-i-fix","()","<p>Return the integer part of the number, as a BigDecimal.\n"],["fix_basic_object_inheritance","RDoc::Store","RDoc/Store.html#method-i-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["fixed_encoding?","Regexp","Regexp.html#method-i-fixed_encoding-3F","()","<p>Returns false if rxp is applicable to a string with any ASCII compatible\nencoding. Returns true otherwise. …\n"],["fixup_swapped_children","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-fixup_swapped_children","(vertex)","<p>Ensures there are no orphaned successors to the given {vertex}. @param\n[DependencyGraph::Vertex] vertex …\n"],["flags","Socket::Ifaddr","Socket/Ifaddr.html#method-i-flags","()","<p>Returns the flags of <em>ifaddr</em>.\n"],["flags=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-flags-3D","(p1)","<p>Sets <code>flag</code> to the Store. <code>flag</code> consists of zero or\nmore of the constants defined in with name V_FLAG_* …\n"],["flags=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-flags-3D","(p1)","<p>Sets the verification flags to the context. See Store#flags=.\n"],["flat_map","Enumerable","Enumerable.html#method-i-flat_map","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running\n<em>block</em> once for every element in …\n"],["flatten","Array","Array.html#method-i-flatten","(p1 = v1)","<p>Returns a new array that is a one-dimensional flattening of\n<code>self</code> (recursively).\n<p>That is, for every element …\n"],["flatten","Hash","Hash.html#method-i-flatten","(*args)","<p>Returns a new array that is a one-dimensional flattening of this hash. That\nis, for every key or value …\n"],["flatten","Set","Set.html#method-i-flatten","()","<p>Returns a new set that is a copy of the set, flattening each containing set\nrecursively.\n"],["flatten!","Array","Array.html#method-i-flatten-21","(p1 = v1)","<p>Flattens <code>self</code> in place.\n<p>Returns <code>nil</code> if no modifications were made (i.e., the array\ncontains no subarrays.) …\n"],["flatten!","Set","Set.html#method-i-flatten-21","()","<p>Equivalent to Set#flatten, but replaces the receiver with the result in\nplace.  Returns nil if no modifications …\n"],["flock","File","File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical\n<em>or</em> of the values in the table below). …\n"],["floor","BigDecimal","BigDecimal.html#method-i-floor","(p1 = v1)","<p>Return the largest integer less than or equal to the value, as a\nBigDecimal.\n\n<pre>BigDecimal(&#39;3.14159&#39;).floor ...</pre>\n"],["floor","Float","Float.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>float</code> in\ndecimal digits (default 0 digits).\n<p>Precision …\n"],["floor","Integer","Integer.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>int</code> in\ndecimal digits (default 0 digits).\n<p>Precision may …\n"],["floor","Integer","Integer.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>int</code> in\ndecimal digits (default 0 digits).\n<p>Precision may …\n"],["floor","Numeric","Numeric.html#method-i-floor","(*args)","<p>Returns the largest integer less than or equal to <code>num</code>.\n<p>Numeric implements this by converting an Integer …\n"],["floor","REXML::Functions","REXML/Functions.html#method-c-floor","( number )",""],["floor","Rational","Rational.html#method-i-floor","(*args)","<p>Returns the truncated value (toward negative infinity).\n\n<pre>Rational(3).floor      #=&gt; 3\nRational(2, 3).floor ...</pre>\n"],["flush","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-flush","()","<p>Flushes the TarWriter&#39;s IO\n"],["flush","IO","IO.html#method-i-flush","()","<p>Flushes any buffered data within <em>ios</em> to the underlying operating\nsystem (note that this is Ruby internal …\n"],["flush","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-flush","()","<p>Flushes buffered data to the SSLSocket.\n"],["flush","PrettyPrint","PrettyPrint.html#method-i-flush","()","<p>outputs buffered data.\n"],["flush","Shell::SystemCommand","Shell/SystemCommand.html#method-i-flush","()",""],["flush","StringIO","StringIO.html#method-i-flush","()","<p>Returns <strong>strio</strong> itself.  Just for compatibility to IO.\n"],["flush","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-flush","(output=nil)","<p>Flush the group database.  If <code>output</code> is given the database\nwill be written there instead of to the original …\n"],["flush","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","Zlib::Deflate","Zlib/Deflate.html#method-i-flush","(p1 = v1)","<p>This method is equivalent to <code>deflate(&#39;&#39;, flush)</code>. This\nmethod is just provided to improve the …\n"],["flush","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-flush","(p1 = v1)","<p>Flushes all the internal buffers of the GzipWriter object.  The meaning of\n<code>flush</code> is same as in Zlib::Deflate#deflate …\n"],["flush_buffer","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-flush_buffer","(out, buf, chunked_p)",""],["flush_left","RDoc::Text","RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["flush_next_in","Zlib::ZStream","Zlib/ZStream.html#method-i-flush_next_in","()",""],["flush_next_out","Zlib::ZStream","Zlib/ZStream.html#method-i-flush_next_out","()","<p>Flushes output buffer and returns all data in that buffer.  If a block is\ngiven each chunk is yielded …\n"],["flush_sessions","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-flush_sessions","(p1 = v1)","<p>Removes sessions in the internal cache that have expired at\n<code>time</code>.\n"],["fnmatch","File","File.html#method-c-fnmatch","(p1, p2, p3 = v3)","<p>Returns true if <code>path</code> matches against <code>pattern</code>. \nThe pattern is not a regular expression; instead it follows …\n"],["fnmatch","Pathname","Pathname.html#method-i-fnmatch","(p1, p2 = v2)","<p>Return <code>true</code> if the receiver matches the given pattern.\n<p>See File.fnmatch.\n"],["fnmatch?","File","File.html#method-c-fnmatch-3F","(p1, p2, p3 = v3)","<p>Returns true if <code>path</code> matches against <code>pattern</code>. \nThe pattern is not a regular expression; instead it follows …\n"],["fnmatch?","Pathname","Pathname.html#method-i-fnmatch-3F","(p1, p2 = v2)","<p>Return <code>true</code> if the receiver matches the given pattern.\n<p>See File.fnmatch.\n"],["following","REXML::XPathParser","REXML/XPathParser.html#method-i-following","( node )",""],["following_node_of","REXML::XPathParser","REXML/XPathParser.html#method-i-following_node_of","( node )",""],["for","RDoc::Parser","RDoc/Parser.html#method-c-for","(top_level, file_name, content, options, stats)","<p>Finds and instantiates the correct parser for the given\n<code>file_name</code> and <code>content</code>.\n"],["for_cache","Gem::Specification","Gem/Specification.html#method-i-for_cache","()","<p>Creates a duplicate spec without large blobs that aren&#39;t used at\nruntime.\n"],["for_current_gems","Gem::Resolver","Gem/Resolver.html#method-c-for_current_gems","(needed)","<p>Creates a Resolver that queries only against the already installed gems for\nthe <code>needed</code> dependencies. …\n"],["for_fd","BasicSocket","BasicSocket.html#method-c-for_fd","(p1)","<p>Returns a socket object which contains the file descriptor, <em>fd</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># If invoked by inetd, STDIN/STDOUT/STDERR ...</span>\n</pre>\n"],["for_fd","IO","IO.html#method-c-for_fd","(*args)","<p>Synonym for <code>IO.new</code>.\n"],["for_spec","Gem::Installer","Gem/Installer.html#method-c-for_spec","(spec, options = {})","<p>Construct an installer object for an ephemeral gem (one where we don&#39;t\nactually have a .gem file, …\n"],["for_spec?","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-for_spec-3F","(spec)","<p>Returns true if the conflicting dependency&#39;s name matches\n<code>spec</code>.\n"],["force_documentation=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned\noff by :enddoc:\n"],["force_encoding","RDoc::Comment","RDoc/Comment.html#method-i-force_encoding","(encoding)","<p>HACK dubious\n"],["force_encoding","String","String.html#method-i-force_encoding","(p1)","<p>Changes the encoding to <code>encoding</code> and returns self.\n"],["force_quotes?","CSV","CSV.html#method-i-force_quotes-3F","()","<p>Returns <code>true</code> if all output fields are quoted. See CSV::new for\ndetails.\n"],["force_zone!","Time","Time.html#method-c-force_zone-21","(t, zone, offset=nil)",""],["foreach","Addrinfo","Addrinfo.html#method-c-foreach","(nodename, service, family=nil, socktype=nil, protocol=nil, flags=nil, &block)","<p>iterates over the list of Addrinfo objects obtained by\nAddrinfo.getaddrinfo.\n\n<pre>Addrinfo.foreach(nil, 80) ...</pre>\n"],["foreach","CSV","CSV.html#method-c-foreach","(path, options = Hash.new, &block)","<p>This method is intended as the primary interface for reading CSV files. \nYou pass a <code>path</code> and any <code>options</code> …\n"],["foreach","Dir","Dir.html#method-c-foreach","(*args)","<p>Calls the block once for each entry in the named directory, passing the\nfilename of each entry as a parameter …\n"],["foreach","IO","IO.html#method-c-foreach","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Executes the block for every line in the named I/O port, where lines are\nseparated by <em>sep</em>.\n<p>If no block …\n"],["foreach","Net::POP3","Net/POP3.html#method-c-foreach","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Starts a POP3 session and iterates over each POPMail object, yielding it to\nthe <code>block</code>. This method is …\n"],["foreach","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-foreach","(path = nil, *rs)","<p>See IO.foreach when <code>path</code> is a file.\n<p>See Dir.foreach when <code>path</code> is a directory.\n"],["fork","Kernel","Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Process","Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Thread","Thread.html#method-c-fork","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then\ncalling <code>start</code> in that subclass …\n"],["form","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-form","(method = \"post\", action = script_name, enctype = \"application/x-www-form-urlencoded\")","<p>Generate a Form element as a string.\n<p><code>method</code> should be either “get” or “post”, and …\n"],["format","Benchmark::Tms","Benchmark/Tms.html#method-i-format","(format = nil, *args)","<p>Returns the contents of this Tms object as a formatted string, according to\na <code>format</code> string like that …\n"],["format","IRB::Locale","IRB/Locale.html#method-i-format","(*opts)",""],["format","Kernel","Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format ...\n"],["format","PrettyPrint","PrettyPrint.html#method-c-format","(output=''.dup, maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})","<p>This is a convenience method which is same as follows:\n\n<pre>begin\n  q = PrettyPrint.new(output, maxwidth, newline, ...</pre>\n"],["format","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-format","(format_string, params)","<p>Formats <code>params</code> according to <code>format_string</code> which\nis described in setup_params.\n"],["format","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-format","(arg)","<p>Formats <code>arg</code> for the logger\n<p>If <code>arg</code> is an Exception, it will format the error message and\nthe back trace. …\n"],["format=","RDoc::Comment","RDoc/Comment.html#method-i-format-3D","(format)","<p>Sets the format of this comment and resets any parsed document\n"],["format_date","Net::IMAP","Net/IMAP.html#method-c-format_date","(time)","<p>Formats <code>time</code> as an IMAP-style date.\n"],["format_datetime","Logger::Formatter","Logger/Formatter.html#method-i-format_datetime","(time)",""],["format_datetime","Net::IMAP","Net/IMAP.html#method-c-format_datetime","(time)","<p>Formats <code>time</code> as an IMAP-style date-time.\n"],["format_message","Logger","Logger.html#method-i-format_message","(severity, datetime, progname, msg)",""],["format_severity","Logger","Logger.html#method-i-format_severity","(severity)",""],["format_text","Gem::Text","Gem/Text.html#method-i-format_text","(text, wrap, indent=0)","<p>Wraps <code>text</code> to <code>wrap</code> characters and optionally\nindents by <code>indent</code> characters\n"],["format_time","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-format_time","(time)","<p>This is ported over from the yaml_tree in 1.9.3\n"],["format_time","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-format_time","(time)",""],["formatted_program_filename","Gem::Installer","Gem/Installer.html#method-i-formatted_program_filename","(filename)","<p>Prefix and suffix the program filename the same as ruby.\n"],["frac","BigDecimal","BigDecimal.html#method-i-frac","()","<p>Return the fractional part of the number, as a BigDecimal.\n"],["fragment=","URI::Generic","URI/Generic.html#method-i-fragment-3D","(v)","<p>check the fragment <code>v</code> component against the URI::Parser Regexp\nfor :FRAGMENT\n<p>Args\n<p>v &mdash; String\n"],["free","Fiddle","Fiddle.html#method-c-free","(p1)","<p>Free the memory at address <code>addr</code>\n"],["free","Fiddle::Pointer","Fiddle/Pointer.html#method-i-free","()","<p>Get the free function for this pointer.\n<p>Returns a new instance of Fiddle::Function.\n<p>See Fiddle::Function.new …\n"],["free=","Fiddle::Pointer","Fiddle/Pointer.html#method-i-free-3D","(p1)","<p>Set the free function for this pointer to <code>function</code> in the\ngiven Fiddle::Function.\n"],["freeze","Delegator","Delegator.html#method-i-freeze","","<p>Freeze both the object returned by _<em>getobj</em>_ and self.\n"],["freeze","Module","Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n<p>This method returns self.\n"],["freeze","Object","Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A <code>RuntimeError</code>\nwill be raised if modification is attempted. There …\n"],["freeze","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-freeze","()",""],["freeze","OpenStruct","OpenStruct.html#method-i-freeze","()",""],["freeze","Pathname","Pathname.html#method-i-freeze","()","<p>Freezes this Pathname.\n<p>See Object.freeze.\n"],["freeze","String","String.html#method-i-freeze","()",""],["frexp","Math","Math.html#method-c-frexp","(p1)","<p>Returns a two-element array containing the normalized fraction (a Float)\nand exponent (an Integer) of …\n"],["friday?","Date","Date.html#method-i-friday-3F","()","<p>Returns true if the date is Friday.\n"],["friday?","Time","Time.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Friday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1987</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">18</span>)     <span class=\"ruby-comment\">#=&gt; 1987-12-18 00:00:00 -0600 ...</span>\n</pre>\n"],["friendly_path","RDoc::Store","RDoc/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-from","(stream)","<p>Creates a tar header from IO <code>stream</code>\n"],["from","Gem::SourceList","Gem/SourceList.html#method-c-from","(ary)","<p>Creates a new SourceList from an array of sources.\n"],["from_file","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-c-from_file","(file)",""],["from_hash","JSON::GenericObject","JSON/GenericObject.html#method-c-from_hash","(object)",""],["from_list","Gem::NameTuple","Gem/NameTuple.html#method-c-from_list","(list)","<p>Turn an array of [name, version, platform] into an array of NameTuple\nobjects.\n"],["from_module","RDoc::ClassModule","RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy\nof module <code>module</code>. Used to promote modules …\n"],["from_name","Process::GID","Process/GID.html#method-c-from_name","(p1)","<p>Get the group ID by the <em>name</em>. If the group is not found,\n<code>ArgumentError</code> will be raised.\n\n<pre>Process::GID.from_name(&quot;wheel&quot;) ...</pre>\n"],["from_name","Process::UID","Process/UID.html#method-c-from_name","(p1)","<p>Get the user ID by the <em>name</em>. If the user is not found,\n<code>ArgumentError</code> will be raised.\n\n<pre>Process::UID.from_name(&quot;root&quot;) ...</pre>\n"],["from_prime_division","Integer","Integer.html#method-c-from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>See Prime#int_from_prime_division for more …\n"],["from_prime_division","Integer","Integer.html#method-c-from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>See Prime#int_from_prime_division for more …\n"],["from_specs","Gem::DependencyList","Gem/DependencyList.html#method-c-from_specs","()","<p>Creates a DependencyList from the current specs.\n"],["from_yaml","Gem::Specification","Gem/Specification.html#method-c-from_yaml","(input)","<p>Special loader for YAML files.  When a Specification object is loaded from\na YAML file, it bypasses the …\n"],["front","DRb","DRb.html#method-i-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb","DRb.html#method-c-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb::ExtServ","DRb/ExtServ.html#method-i-front","()",""],["frozen?","Array","Array.html#method-i-frozen-3F","()","<p>Return <code>true</code> if this array is frozen (or temporarily frozen\nwhile being sorted). See also Object#frozen? …\n"],["frozen?","Object","Object.html#method-i-frozen-3F","()","<p>Returns the freeze status of <em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">freeze</span>    <span class=\"ruby-comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">frozen?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["fsync","IO","IO.html#method-i-fsync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk. Note that\n<code>fsync</code> differs from using <code>IO#sync=</code>. The …\n"],["fsync","StringIO","StringIO.html#method-i-fsync","()","<p>Returns 0.  Just for compatibility to IO.\n"],["ftype","File","File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, …\n"],["ftype","File::Stat","File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of:\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, “ …\n"],["ftype","Pathname","Pathname.html#method-i-ftype","()","<p>Returns “type” of file (“file”, “directory”, etc).\n<p>See File.ftype.\n"],["fu_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_blksize","(st)",""],["fu_default_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_default_blksize","()",""],["fu_stream_blksize","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_stream_blksize","(*streams)",""],["fu_windows?","FileUtils::StreamUtils_","FileUtils/StreamUtils_.html#method-i-fu_windows-3F","()",""],["full_gem_path","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_gem_path","()","<p>The full path to the gem (install path + full name).\n"],["full_name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is\nincluded (name-version-platform) …\n"],["full_name","Gem::NameTuple","Gem/NameTuple.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is\nincluded if it is not the …\n"],["full_name","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-full_name","()","<p>Full name of the tar entry\n"],["full_name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_name","()","<p>The full name of the specification to be activated.\n"],["full_name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Specification","Gem/Specification.html#method-i-full_name","()",""],["full_name","RDoc::ClassModule","RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Constant","RDoc/Constant.html#method-i-full_name","()","<p>Full constant name including namespace\n"],["full_name","RDoc::Context","RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::Mixin","RDoc/Mixin.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name","RSS::Element","RSS/Element.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesImage","RSS/ITunesChannelModel/ITunesImage.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesOwner","RSS/ITunesChannelModel/ITunesOwner.html#method-i-full_name","()",""],["full_name","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-full_name","()",""],["full_name","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-i-full_name","()",""],["full_name","RSS::ImageItemModel::ImageItem","RSS/ImageItemModel/ImageItem.html#method-i-full_name","()",""],["full_name","RSS::RDF","RSS/RDF.html#method-i-full_name","()",""],["full_name","RSS::RDF::Bag","RSS/RDF/Bag.html#method-i-full_name","()",""],["full_name","RSS::RDF::Bag","RSS/RDF/Bag.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Seq","RSS/RDF/Seq.html#method-i-full_name","()",""],["full_name","RSS::RDF::Seq","RSS/RDF/Seq.html#method-i-full_name","()",""],["full_name","RSS::TaxonomyTopicModel::TaxonomyTopic","RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-full_name","()",""],["full_name","RSS::TaxonomyTopicsModel::TaxonomyTopics","RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-full_name","()",""],["full_name","RSS::XML::Element","RSS/XML/Element.html#method-i-full_name","()",""],["full_name=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc&#39;s cached value\n"],["full_old_name","RDoc::Alias","RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["full_require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_require_paths","()","<p>Full paths in the gem to add to <code>$LOAD_PATH</code> when this gem is\nactivated.\n"],["full_spec","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_spec","()","<p>The Gem::Specification for this activation request.\n"],["fully_documented?","RDoc::Context","RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn&#39;t …\n"],["fully_documented?","RDoc::Stats","RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%,\n<code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["fully_expanded_name","REXML::Namespace","REXML/Namespace.html#method-i-fully_expanded_name","()","<p>Fully expand the name, even if the prefix wasn&#39;t specified in the\nsource file.\n"],["function","REXML::QuickPath","REXML/QuickPath.html#method-c-function","( elements, fname, rest )",""],["gamma","Math","Math.html#method-c-gamma","(p1)","<p>Calculates the gamma function of x.\n<p>Note that gamma(n) is same as fact(n-1) for integer n &gt; 0. However …\n"],["garbage_collect","GC","GC.html#method-i-garbage_collect","(p1 = {})","<p>Initiates garbage collection, unless manually disabled.\n<p>This method is defined with keyword arguments …\n"],["garbage_collect","ObjectSpace","ObjectSpace.html#method-c-garbage_collect","(p1 = {})","<p>Initiates garbage collection, unless manually disabled.\n<p>This method is defined with keyword arguments …\n"],["gather_files","RDoc::RDoc","RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in\n<code>files</code>.\n"],["gcd","Integer","Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor (always positive).  0.gcd(x) and\nx.gcd(0) return abs(x).\n\n<pre>2.gcd(2) ...</pre>\n"],["gcd","Integer","Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor (always positive).  0.gcd(x) and\nx.gcd(0) return abs(x).\n\n<pre>2.gcd(2) ...</pre>\n"],["gcd","OpenSSL::BN","OpenSSL/BN.html#method-i-gcd","(p1)",""],["gcdlcm","Integer","Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array; [int.gcd(int2), int.lcm(int2)].\n\n<pre>2.gcdlcm(2)                    #=&gt; [2, 2]\n3.gcdlcm(-7) ...</pre>\n"],["gcdlcm","Integer","Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array; [int.gcd(int2), int.lcm(int2)].\n\n<pre>2.gcdlcm(2)                    #=&gt; [2, 2]\n3.gcdlcm(-7) ...</pre>\n"],["gem","Gem::RequestSet","Gem/RequestSet.html#method-i-gem","(name, *reqs)","<p>Declare that a gem of name <code>name</code> with <code>reqs</code>\nrequirements is needed.\n"],["gem","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gem","(name, *requirements)","<p>Specifies a gem dependency with the given <code>name</code> and\n<code>requirements</code>.  You may also supply <code>options</code>\nfollowing …\n"],["gem","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-gem","(name, version, dependencies = nil, &block)","<p>Creates a gem with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The created gem can be downloaded and installed.\n<p>The specification …\n"],["gem","Kernel","Kernel.html#method-i-gem","(gem_name, *requirements)","<p>Use Kernel#gem to activate a specific version of <code>gem_name</code>.\n<p><code>requirements</code> is a list of version requirements …\n"],["gem_contents","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_contents","(name)",""],["gem_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gem_dir","()","<p>Returns the full path to this spec&#39;s gem directory. eg:\n/usr/local/lib/ruby/1.8/gems/mygem-1.0\n"],["gem_dir","Gem::Installer","Gem/Installer.html#method-i-gem_dir","()","<p>Lazy accessor for the spec&#39;s gem directory.\n"],["gem_file_list","Gem::Indexer","Gem/Indexer.html#method-i-gem_file_list","()","<p>List of gem file names to index.\n"],["gem_install_dir","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_install_dir","(name)",""],["gem_original_require","Kernel","Kernel.html#method-i-gem_original_require","(path)","<p>The Kernel#require from before RubyGems was loaded.\n"],["gem_repository?","Gem::Doctor","Gem/Doctor.html#method-i-gem_repository-3F","()","<p>Are we doctoring a gem repository?\n"],["gems_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gems_dir","()","<p>Returns the full path to the gems directory containing this spec&#39;s gem\ndirectory. eg: /usr/local/lib/ruby/1.8/gems …\n"],["gems_dir","Gem::Specification","Gem/Specification.html#method-i-gems_dir","()",""],["gemspec","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gemspec","(options = {})","<p>Loads dependencies from a gemspec file.\n<p><code>options</code> include:\n<p>name:  &mdash; The name portion of the gemspec file.  …\n"],["gemspec_stubs_in","Gem::Specification","Gem/Specification.html#method-c-gemspec_stubs_in","(dir, pattern)",""],["gen_random","Random::Formatter","Random/Formatter.html#method-i-gen_random","(n)",""],["gen_random","SecureRandom","SecureRandom.html#method-c-gen_random","(n)",""],["generate","CSV","CSV.html#method-c-generate","(*args)","<p>This method wraps a String you provide, or an empty default String, in a\nCSV object which is passed to …\n"],["generate","JSON","JSON.html#method-i-generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. <em>state</em> is * a JSON::State object, …\n"],["generate","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-c-generate","(p1, p2 = v2)","<p>Creates a new DH instance from scratch by generating the private and public\ncomponents alike.\n<p>Parameters …\n"],["generate","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-c-generate","(p1)","<p>Creates a new DSA instance by generating a private/public key pair from\nscratch.\n<p>Parameters\n<p><code>size</code> is an …\n"],["generate","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-c-generate","(p1)","<p>Creates a new EC instance with a new random private and public key.\n"],["generate","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-c-generate","(p1, p2 = v2)","<p>Generates an RSA keypair.  <code>size</code> is an integer representing the\ndesired key size.  Keys smaller than 1024 …\n"],["generate","RDoc::RDoc","RDoc/RDoc.html#method-i-generate","()","<p>Generates documentation for <code>file_info</code> (from #parse_files) into\nthe output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate_bin_script","Gem::Installer","Gem/Installer.html#method-i-generate_bin_script","(filename, bindir)","<p>Creates the scripts to run the applications in the gem.\n"],["generate_bin_symlink","Gem::Installer","Gem/Installer.html#method-i-generate_bin_symlink","(filename, bindir)","<p>Creates the symlinks to run the applications in the gem.  Moves the symlink\nif the gem being installed …\n"],["generate_default_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_dirs","(install_destdir)",""],["generate_event","REXML::Validation::State","REXML/Validation/State.html#method-i-generate_event","( event )",""],["generate_index","Gem::Indexer","Gem/Indexer.html#method-i-generate_index","()","<p>Builds and installs indices.\n"],["generate_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-generate_key","()",""],["generate_key!","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-generate_key-21","()","<p>Generates a private and public key unless a private key already exists. If\nthis DH instance was generated …\n"],["generate_key!","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-generate_key-21","()","<p>Generates a new random private and public key.\n<p>See also the OpenSSL documentation for EC_KEY_generate_key …\n"],["generate_line","CSV","CSV.html#method-c-generate_line","(row, options = Hash.new)","<p>This method is a shortcut for converting a single row (Array) into a CSV\nString.\n<p>The <code>options</code> parameter …\n"],["generate_prime","OpenSSL::BN","OpenSSL/BN.html#method-c-generate_prime","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates a random prime number of bit length <code>bits</code>. If\n<code>safe</code> is true, generates a safe prime. If <code>add</code> is …\n"],["generate_tag","Net::IMAP","Net/IMAP.html#method-i-generate_tag","()",""],["generate_windows_script","Gem::Installer","Gem/Installer.html#method-i-generate_windows_script","(filename, bindir)","<p>Creates windows .bat files for easy running of commands\n"],["generation_hook","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in\n<code>specs</code>\n"],["generation_hook","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in\n<code>specs</code>\n"],["generator","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-generator","()","<p>Returns the generator of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get0_generator()\n"],["generator_descriptions","RDoc::Options","RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["generator_for","RDoc::Servlet","RDoc/Servlet.html#method-i-generator_for","(store)","<p>Instantiates a Darkfish generator for <code>store</code>\n"],["get","GetoptLong","GetoptLong.html#method-i-get","()","<p>Get next option name and its argument, as an Array of two elements.\n<p>The option name is always converted …\n"],["get","Net::FTP","Net/FTP.html#method-i-get","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in whatever mode the session is set (text\nor binary).  See #gettextfile and #getbinaryfile …\n"],["get","Net::HTTP","Net/HTTP.html#method-i-get","(path, initheader = nil, dest = nil)","<p>Retrieves data from <code>path</code> on the connected-to host which may be\nan absolute path String or a URI to extract …\n"],["get","Net::HTTP","Net/HTTP.html#method-c-get","(uri_or_host, path = nil, port = nil)","<p>Sends a GET request to the target and returns the HTTP response as a\nstring.  The target can either be …\n"],["get2","Net::HTTP","Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get_all_gem_names","Gem::Command","Gem/Command.html#method-i-get_all_gem_names","()","<p>Get all gem names from the command line.\n"],["get_all_gem_names_and_versions","Gem::Command","Gem/Command.html#method-i-get_all_gem_names_and_versions","()","<p>Get all [gem, version] from the command line.\n<p>An argument in the form gem:ver is pull apart into the gen …\n"],["get_attribute","REXML::Attributes","REXML/Attributes.html#method-i-get_attribute","( name )","<p>Fetches an attribute\n<p>name &mdash; the name by which to search for the attribute.  Can be a\n<code>prefix:name</code> namespace …\n"],["get_attribute_ns","REXML::Attributes","REXML/Attributes.html#method-i-get_attribute_ns","(namespace, name)","<p>The <code>get_attribute_ns</code> method retrieves a method by its\nnamespace and name. Thus it is possible to reliably …\n"],["get_attributes","RSS::Element","RSS/Element.html#method-c-get_attributes","()",""],["get_byte","StringScanner","StringScanner.html#method-i-get_byte","()","<p>Scans one byte and returns it. This method is not multibyte character\nsensitive. See also: #getch.\n\n<pre>s = ...</pre>\n"],["get_candidate_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_candidate_gems","()",""],["get_cert_files","Gem::Request","Gem/Request.html#method-c-get_cert_files","()",""],["get_definition","OpenSSL::Config","OpenSSL/Config.html#method-c-get_definition","(io)",""],["get_elements","REXML::Element","REXML/Element.html#method-i-get_elements","( xpath )","<p>Synonym for Element.to_a This is a little slower than calling elements.each\ndirectly.\n<p>xpath &mdash; any XPath …\n"],["get_env_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-get_env_editor","()",""],["get_file_and_line_from_caller","RSS::Utils","RSS/Utils.html#method-i-get_file_and_line_from_caller","(i=0)","<p>Returns an array of two elements: the filename where the calling method is\nlocated, and the line number …\n"],["get_first","REXML::XPathParser","REXML/XPathParser.html#method-i-get_first","(path, nodeset)",""],["get_gems_to_cleanup","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_gems_to_cleanup","()",""],["get_group","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-get_group","(string)","<p>get_group( &#39;[foo]bar&#39; ) -&gt; [&#39;bar&#39;, &#39;[foo]&#39;]\n"],["get_instance","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-c-get_instance","(server, *options)","<p>Factory for servlet instances that will handle a request from\n<code>server</code> using <code>options</code> from the mount point. …\n"],["get_key_string","OpenSSL::Config","OpenSSL/Config.html#method-i-get_key_string","(section, key)",""],["get_line","OpenSSL::Config","OpenSSL/Config.html#method-c-get_line","(io)",""],["get_listeners","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-get_listeners","( symbol, name )",""],["get_metadata","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_metadata","(path)","<p>Extracts the Gem::Specification and raw metadata from the .gem file at\n<code>path</code>.\n"],["get_namespace","REXML::Functions","REXML/Functions.html#method-c-get_namespace","( node_set = nil )","<p>Helper method.\n"],["get_namespace","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-get_namespace","( prefix )",""],["get_namespace","REXML::XPathParser","REXML/XPathParser.html#method-i-get_namespace","( node, prefix )","<p>Returns a String namespace for a node, given a prefix The rules are:\n\n<pre>1. Use the supplied namespace mapping ...</pre>\n"],["get_nth_prime","Prime::EratosthenesSieve","Prime/EratosthenesSieve.html#method-i-get_nth_prime","(n)",""],["get_one_gem_name","Gem::Command","Gem/Command.html#method-i-get_one_gem_name","()","<p>Get a single gem name from the command line.  Fail if there is no gem name\nor if there is more than one …\n"],["get_one_optional_argument","Gem::Command","Gem/Command.html#method-i-get_one_optional_argument","()","<p>Get a single optional argument from the command line.  If more than one\nargument is given, return only …\n"],["get_option","GetoptLong","GetoptLong.html#method-i-get_option","()","<p>`get_option&#39; is an alias of `get&#39;.\n"],["get_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-get_passwd","(realm, user, reload_db=false)","<p>Retrieves a password in <code>realm</code> for <code>user</code> for the\nauth_type of this database.  <code>reload_db</code> is a dummy value. …\n"],["get_path","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_path","(dependency)","<p>Return the full path to the cached gem file matching the given name and\nversion requirement.  Returns …\n"],["get_platform_from_requirements","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-get_platform_from_requirements","(requirements)",""],["get_primary_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_primary_gems","()",""],["get_print","Net::HTTP","Net/HTTP.html#method-c-get_print","(uri_or_host, path = nil, port = nil)","<p>Gets the body text from the target and outputs it to $stdout.  The target\ncan either be specified as …\n"],["get_procs","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-get_procs","( symbol, name )","<p>The following methods are duplicates, but it is faster than using a helper\n"],["get_proxy_from_env","Gem::Request","Gem/Request.html#method-c-get_proxy_from_env","(scheme = 'http')","<p>Returns a proxy URI for the given <code>scheme</code> if one is set in the\nenvironment variables.\n"],["get_relative_path","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-get_relative_path","(path)",""],["get_renewer","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-get_renewer","(it)","<p>Returns a valid argument to make_expires and the renewer or nil.\n<p>Given <code>true</code>, <code>nil</code>, or Numeric, returns …\n"],["get_response","Net::HTTP","Net/HTTP.html#method-c-get_response","(uri_or_host, path = nil, port = nil, &block)","<p>Sends a GET request to the target and returns the HTTP response as a\nNet::HTTPResponse object.  The target …\n"],["get_response","Net::IMAP","Net/IMAP.html#method-i-get_response","()",""],["get_response","Net::SMTP","Net/SMTP.html#method-i-get_response","(reqline)",""],["get_screen_size","Readline","Readline.html#method-c-get_screen_size","()","<p>Returns the terminal&#39;s rows and columns.\n<p>See GNU Readline&#39;s rl_get_screen_size function.\n<p>Raises …\n"],["get_set","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-i-get_set","(name)",""],["get_tagged_response","Net::IMAP","Net/IMAP.html#method-i-get_tagged_response","(tag, cmd)",""],["get_text","REXML::Element","REXML/Element.html#method-i-get_text","(path = nil)","<p>Returns the first child Text node, if any, or <code>nil</code> otherwise.\nThis method returns the actual <code>Text</code> node, …\n"],["get_thread","DEBUGGER__","DEBUGGER__.html#method-c-get_thread","(num)",""],["get_value","OpenSSL::Config","OpenSSL/Config.html#method-i-get_value","(section, key)","<p>Gets the value of <code>key</code> from the given <code>section</code>\n<p>Given the following configurating file being loaded:\n\n<pre>config ...</pre>\n"],["get_version_from_requirements","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-get_version_from_requirements","(requirements)",""],["getacl","Net::IMAP","Net/IMAP.html#method-i-getacl","(mailbox)","<p>Send the GETACL command along with a specified <code>mailbox</code>. If\nthis mailbox exists, an array containing objects …\n"],["getaddress","IPSocket","IPSocket.html#method-c-getaddress","(p1)","<p>Lookups the IP address of <em>host</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;socket&#39;</span>\n\n<span class=\"ruby-constant\">IPSocket</span>.<span class=\"ruby-identifier\">getaddress</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>)     <span class=\"ruby-comment\">#=&gt; &quot;127.0.0.1&quot; ...</span>\n</pre>\n"],["getaddress","Resolv","Resolv.html#method-i-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv","Resolv.html#method-c-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv::DNS","Resolv/DNS.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddress","Resolv::Hosts","Resolv/Hosts.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the hosts file.\n"],["getaddress_orig","IPSocket","IPSocket.html#method-c-getaddress_orig","(p1)",""],["getaddresses","Resolv","Resolv.html#method-c-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv","Resolv.html#method-i-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv::DNS","Resolv/DNS.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddresses","Resolv::Hosts","Resolv/Hosts.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the hosts file.\n"],["getaddrinfo","Addrinfo","Addrinfo.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>returns a list of addrinfo objects as an array.\n<p>This method converts nodename (hostname) and service (port) …\n"],["getaddrinfo","Socket","Socket.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Obtains address information for <em>nodename</em>:<em>servname</em>.\n<p><em>family</em> should be an address family such as: :INET, …\n"],["getbinaryfile","Net::FTP","Net/FTP.html#method-i-getbinaryfile","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in binary mode, storing the result in\n<code>localfile</code>. If <code>localfile</code> is nil, returns retrieved\n…\n"],["getbyte","ARGF","ARGF.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <code>ARGF</code>. Returns\n<code>nil</code> if called at the end of the stream.\n<p>For example: …\n"],["getbyte","IO","IO.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n<code>nil</code> if called at end of file.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["getbyte","String","String.html#method-i-getbyte","(p1)","<p>returns the <em>index</em>th byte as an integer.\n"],["getbyte","StringIO","StringIO.html#method-i-getbyte","()","<p>See IO#getbyte.\n"],["getbyte","StringScanner","StringScanner.html#method-i-getbyte","()","<p>Equivalent to #get_byte. This method is obsolete; use #get_byte instead.\n"],["getbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-getbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc","ARGF","ARGF.html#method-i-getc","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Returns <code>nil</code> at the end of the stream. …\n"],["getc","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-getc","()","<p>Read one byte from the tar entry\n"],["getc","IO","IO.html#method-i-getc","()","<p>Reads a one-character string from <em>ios</em>. Returns <code>nil</code> if\ncalled at end of file.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["getc","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-getc","()","<p>Reads one character from the stream.  Returns nil if called at end of file.\n"],["getc","StringIO","StringIO.html#method-i-getc","()","<p>See IO#getc.\n"],["getc","Zlib::GzipReader","Zlib/GzipReader.html#method-i-getc","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getch","IO","IO.html#method-i-getch","(*args)","<p>Reads and returns a character in raw mode.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["getch","IO::generic_readable","IO/generic_readable.html#method-i-getch","(*args)","<p>See IO#getch.\n"],["getch","StringScanner","StringScanner.html#method-i-getch","()","<p>Scans one character and returns it. This method is multibyte character\nsensitive.\n\n<pre>s = StringScanner.new(&quot;ab&quot;) ...</pre>\n"],["getdir","Net::FTP","Net/FTP.html#method-i-getdir","()",""],["getegid","Process::Sys","Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["geteuid","Process::Sys","Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getgid","Process::Sys","Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["getgm","Time","Time.html#method-i-getgm","()","<p>Returns a new Time object representing <em>time</em> in UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; 2000-01-01 ...</span>\n</pre>\n"],["getgrent","Etc","Etc.html#method-c-getgrent","()","<p>Returns an entry from the /etc/group file.\n<p>The first time it is called it opens the file and returns the …\n"],["getgrgid","Etc","Etc.html#method-c-getgrgid","(p1 = v1)","<p>Returns information about the group with specified integer\n<code>group_id</code>, as found in /etc/group.\n<p>The information …\n"],["getgrnam","Etc","Etc.html#method-c-getgrnam","(p1)","<p>Returns information about the group with specified <code>name</code>, as\nfound in /etc/group.\n<p>The information is returned …\n"],["gethostbyaddr","Socket","Socket.html#method-c-gethostbyaddr","(p1, p2 = v2)","<p>Obtains the host information for <em>address</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">gethostbyaddr</span>([<span class=\"ruby-value\">221</span>,<span class=\"ruby-value\">186</span>,<span class=\"ruby-value\">184</span>,<span class=\"ruby-value\">68</span>].<span class=\"ruby-identifier\">pack</span>(<span class=\"ruby-string\">&quot;CCCC&quot;</span>))\n<span class=\"ruby-comment\">#=&gt; [&quot;carbon.ruby-lang.org&quot;, ...</span>\n</pre>\n"],["gethostbyname","Socket","Socket.html#method-c-gethostbyname","(p1)","<p>Obtains the host information for <em>hostname</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">gethostbyname</span>(<span class=\"ruby-string\">&quot;hal&quot;</span>) <span class=\"ruby-comment\">#=&gt; [&quot;localhost&quot;, [&quot;hal&quot;], 2, ...</span>\n</pre>\n"],["gethostbyname","TCPSocket","TCPSocket.html#method-c-gethostbyname","(p1)","<p>Lookups host information by <em>hostname</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">TCPSocket</span>.<span class=\"ruby-identifier\">gethostbyname</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; [&quot;localhost&quot;, [&quot;hal&quot;], ...</span>\n</pre>\n"],["gethostname","Socket","Socket.html#method-c-gethostname","()","<p>Returns the hostname.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">gethostname</span> <span class=\"ruby-comment\">#=&gt; &quot;hal&quot;</span>\n</pre>\n<p>Note that it is not guaranteed to be able to convert …\n"],["getifaddrs","Socket","Socket.html#method-c-getifaddrs","()","<p>Returns an array of interface addresses. An element of the array is an\ninstance of Socket::Ifaddr.\n<p>This …\n"],["getlocal","Time","Time.html#method-i-getlocal","(p1 = v1)","<p>Returns a new Time object representing <em>time</em> in local time (using\nthe local time zone in effect for this …\n"],["getlogin","Etc","Etc.html#method-c-getlogin","()","<p>Returns the short user name of the currently logged in user. Unfortunately,\nit is often rather easy to …\n"],["getname","Resolv","Resolv.html#method-c-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv","Resolv.html#method-i-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv::DNS","Resolv/DNS.html#method-i-getname","(address)","<p>Gets the hostname for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or a …\n"],["getname","Resolv::Hosts","Resolv/Hosts.html#method-i-getname","(address)","<p>Gets the hostname of <code>address</code> from the hosts file.\n"],["getnameinfo","Addrinfo","Addrinfo.html#method-i-getnameinfo","(p1 = v1)","<p>returns nodename and service as a pair of strings. This converts struct\nsockaddr in addrinfo to textual …\n"],["getnameinfo","Socket","Socket.html#method-c-getnameinfo","(p1, p2 = v2)","<p>Obtains name information for <em>sockaddr</em>.\n<p><em>sockaddr</em> should be one of follows.\n<p>packed sockaddr string such as …\n"],["getnames","Resolv","Resolv.html#method-i-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv","Resolv.html#method-c-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv::DNS","Resolv/DNS.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or …\n"],["getnames","Resolv::Hosts","Resolv/Hosts.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the hosts file.\n"],["getok","Net::SMTP","Net/SMTP.html#method-i-getok","(reqline)",""],["getopts","OptionParser","OptionParser.html#method-i-getopts","(*args)","<p>Wrapper method for getopts.rb.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">params</span> = <span class=\"ruby-constant\">ARGV</span>.<span class=\"ruby-identifier\">getopts</span>(<span class=\"ruby-string\">&quot;ab:&quot;</span>, <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar:&quot;</span>, <span class=\"ruby-string\">&quot;zot:Z;zot option&quot;</span>)\n<span class=\"ruby-comment\"># params[:a] ...</span>\n</pre>\n"],["getopts","OptionParser","OptionParser.html#method-c-getopts","(*args)","<p>See #getopts.\n"],["getopts","OptionParser::Arguable","OptionParser/Arguable.html#method-i-getopts","(*args)","<p>Substitution of getopts is possible as follows. Also see\nOptionParser#getopts.\n\n<pre>def getopts(*args)\n  ($OPT ...</pre>\n"],["getpass","IO","IO.html#method-i-getpass","(*args)","<p>Reads and returns a line without echo back. Prints <code>prompt</code>\nunless it is <code>nil</code>.\n<p>You must require &#39;io/console&#39; …\n"],["getpass","IO::generic_readable","IO/generic_readable.html#method-i-getpass","(*args)","<p>See IO#getpass.\n"],["getpeereid","BasicSocket","BasicSocket.html#method-i-getpeereid","()","<p>Returns the user and group on the peer of the UNIX socket. The result is a\ntwo element array which contains …\n"],["getpeername","BasicSocket","BasicSocket.html#method-i-getpeername","()","<p>Returns the remote address of the socket as a sockaddr string.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 1440) {|serv| ...</pre>\n"],["getpgid","Process","Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all\nplatforms.\n\n<pre>Process.getpgid(Process.ppid()) ...</pre>\n"],["getpgrp","Process","Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getpriority","Process","Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user.\n<em>kind</em> indicates the kind of …\n"],["getpty","PTY","PTY.html#method-c-getpty","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the\nalias ::getpty.\n<p>The command&#39;s …\n"],["getpwent","Etc","Etc.html#method-c-getpwent","()","<p>Returns an entry from the /etc/passwd file.\n<p>The first time it is called it opens the file and returns …\n"],["getpwnam","Etc","Etc.html#method-c-getpwnam","(p1)","<p>Returns the /etc/passwd information for the user with specified login\n<code>name</code>.\n<p>The information is returned …\n"],["getpwuid","Etc","Etc.html#method-c-getpwuid","(p1 = v1)","<p>Returns the /etc/passwd information for the user with the given integer\n<code>uid</code>.\n<p>The information is returned …\n"],["getquota","Net::IMAP","Net/IMAP.html#method-i-getquota","(mailbox)","<p>Sends the GETQUOTA command along with specified <code>mailbox</code>. If\nthis mailbox exists, then an array containing …\n"],["getquotaroot","Net::IMAP","Net/IMAP.html#method-i-getquotaroot","(mailbox)","<p>Sends the GETQUOTAROOT command along with the specified\n<code>mailbox</code>. This command is generally available …\n"],["getresource","Resolv::DNS","Resolv/DNS.html#method-i-getresource","(name, typeclass)","<p>Look up the <code>typeclass</code> DNS resource of <code>name</code>.\n<p><code>name</code> must be a Resolv::DNS::Name or a String.\n<p><code>typeclass</code> should …\n"],["getresources","Resolv::DNS","Resolv/DNS.html#method-i-getresources","(name, typeclass)","<p>Looks up all <code>typeclass</code> DNS resources for <code>name</code>. \nSee #getresource for argument details.\n"],["getrlimit","Process","Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["gets","ARGF","ARGF.html#method-i-gets","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by  …\n"],["gets","CSV","CSV.html#method-i-gets","()",""],["gets","IO","IO.html#method-i-gets","(*args)","<p>Reads the next “line&#39;&#39; from the I/O stream; lines are separated by\n<em>sep</em>. A separator of <code>nil</code> reads …\n"],["gets","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::InputMethod","IRB/InputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::Locale","IRB/Locale.html#method-i-gets","(*rs)",""],["gets","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","Kernel","Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of\nfiles in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["gets","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-gets","(eol=$/, limit=nil)","<p>Reads the next “line” from the stream.  Lines are separated by\n<code>eol</code>.  If <code>limit</code> is provided the …\n"],["gets","StringIO","StringIO.html#method-i-gets","(*args)","<p>See IO#gets.\n"],["gets","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-gets","()","<p>Reads the next expression from this printer.\n<p>See IO#gets for more information.\n"],["gets","Zlib::GzipReader","Zlib/GzipReader.html#method-i-gets","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["getservbyname","Socket","Socket.html#method-c-getservbyname","(p1, p2 = v2)","<p>Obtains the port number for <em>service_name</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre>Socket.getservbyname(&quot;smtp&quot;) ...</pre>\n"],["getservbyport","Socket","Socket.html#method-c-getservbyport","(p1, p2 = v2)","<p>Obtains the port number for <em>port</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre>Socket.getservbyport(80) ...</pre>\n"],["getservername","WEBrick::Utils","WEBrick/Utils.html#method-c-getservername","()","<p>The server hostname\n"],["getservername","WEBrick::Utils","WEBrick/Utils.html#method-i-getservername","()","<p>The server hostname\n"],["getsid","Process","Process.html#method-c-getsid","(*args)","<p>Returns the session ID for the given process id. If not given, return\ncurrent process sid. Not available …\n"],["getsockname","BasicSocket","BasicSocket.html#method-i-getsockname","()","<p>Returns the local address of the socket as a sockaddr string.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 15120) {|serv| ...</pre>\n"],["getsockopt","BasicSocket","BasicSocket.html#method-i-getsockopt","(p1, p2)","<p>Gets a socket option. These are protocol and system specific, see your\nlocal system documentation for …\n"],["getsockopt","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-getsockopt","(level, optname)",""],["getter","RSS::BaseListener","RSS/BaseListener.html#method-c-getter","(uri, tag_name)",""],["gettextfile","Net::FTP","Net/FTP.html#method-i-gettextfile","(remotefile, localfile = File.basename(remotefile))","<p>Retrieves <code>remotefile</code> in ASCII (text) mode, storing the result\nin <code>localfile</code>. If <code>localfile</code> is nil, returns …\n"],["getuid","Process::Sys","Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getutc","Time","Time.html#method-i-getutc","()","<p>Returns a new Time object representing <em>time</em> in UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; 2000-01-01 ...</span>\n</pre>\n"],["getwd","Dir","Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getwd","FileUtils","FileUtils.html#method-i-getwd","()",""],["getwd","FileUtils","FileUtils.html#method-c-getwd","()",""],["getwd","Pathname","Pathname.html#method-c-getwd","()","<p>Returns the current working directory as a Pathname.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">getwd</span>\n    <span class=\"ruby-comment\">#=&gt; #&lt;Pathname:/home/zzak/projects/ruby&gt;</span>\n</pre>\n"],["gid","File::Stat","File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid","Process","Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid=","Process","Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["git","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git","(repository)","<p>Block form for specifying gems from a git <code>repository</code>.\n\n<pre>git &#39;https://github.com/rails/rails.git&#39; do\n  gem ...</pre>\n"],["git_gem","Gem::TestCase","Gem/TestCase.html#method-i-git_gem","(name = 'a', version = 1)","<p>A git_gem is used with a gem dependencies file.  The gem created here has\nno files, just a gem specification …\n"],["git_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git_source","(name, &callback)","<p>Defines a custom git source that uses <code>name</code> to expand git\nrepositories for use in gems built from git …\n"],["github","RDoc::Markdown","RDoc/Markdown.html#method-i-github","","<p>Allow Github Flavored Markdown\n"],["glob","Dir","Dir.html#method-c-glob","(p1, p2 = v2)","<p>Expands <code>pattern</code>, which is an Array of patterns or a pattern\nString, and returns the results as <code>matches</code> …\n"],["glob","Pathname","Pathname.html#method-c-glob","(p1, p2 = v2)","<p>Returns or yields Pathname objects.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">glob</span>(<span class=\"ruby-string\">&quot;config/&quot;</span> <span class=\"ruby-string\">&quot;*.rb&quot;</span>)\n    <span class=\"ruby-comment\">#=&gt; [#&lt;Pathname:config/environment.rb&gt;, ...</span>\n</pre>\n"],["glob","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-glob","(pattern)","\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">sort</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">filenames</span>)\n  <span class=\"ruby-constant\">Sort</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-keyword\">self</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">filenames</span>)\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>Returns a Glob filter object, with the given <code>pattern</code> …\n"],["global_variables","Kernel","Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">global_variables</span>.<span class=\"ruby-identifier\">grep</span> <span class=\"ruby-regexp\">/std/</span>   <span class=\"ruby-comment\">#=&gt; [:$stdin, :$stdout, ...</span>\n</pre>\n"],["gm","Time","Time.html#method-c-gm","(*args)","<p>Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other …\n"],["gmt?","Time","Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>                        <span class=\"ruby-comment\">#=&gt; 2007-11-19 ...</span>\n</pre>\n"],["gmt_offset","Time","Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["gmtime","Time","Time.html#method-i-gmtime","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...</pre>\n"],["gmtoff","Time","Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["goto","IO","IO.html#method-i-goto","(p1, p2)",""],["grant_privilege","Process::GID","Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the\nprocess to the given <em>group</em>. Returns …\n"],["grant_privilege","Process::UID","Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the\nprocess to the given <em>user</em>. Returns …\n"],["great_job","RDoc::Stats","RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["gregorian","Date","Date.html#method-i-gregorian","()","<p>This method is equivalent to new_start(Date::GREGORIAN).\n"],["gregorian?","Date","Date.html#method-i-gregorian-3F","()","<p>Returns true if the date is on or after the day of calendar reform.\n\n<pre>Date.new(1582,10,15).gregorian?   ...</pre>\n"],["gregorian_leap?","Date","Date.html#method-c-gregorian_leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Gregorian\ncalendar.\n\n<pre>Date.gregorian_leap?(1900) ...</pre>\n"],["grep","Enumerable","Enumerable.html#method-i-grep","(p1)","<p>Returns an array of every element in <em>enum</em> for which <code>Pattern\n=== element</code>. If the optional <em>block</em> is supplied, …\n"],["grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep","(p1)",""],["grep_v","Enumerable","Enumerable.html#method-i-grep_v","(p1)","<p>Inverted version of Enumerable#grep. Returns an array of every element in\n<em>enum</em> for which not <code>Pattern</code> …\n"],["grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep_v","(p1)",""],["group","Etc","Etc.html#method-c-group","()","<p>Provides a convenient Ruby iterator which executes a block for each entry\nin the /etc/group file.\n<p>The …\n"],["group","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-group","(*groups)","<p>Block form for placing a dependency in the given <code>groups</code>.\n\n<pre>group :development do\n  gem &#39;debugger&#39;\nend\n\ngroup ...</pre>\n"],["group","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-group","()","<p>Returns the EC::Group that the key is associated with. Modifying the\nreturned group does not affect  …\n"],["group","PrettyPrint","PrettyPrint.html#method-i-group","(indent=0, open_obj='', close_obj='', open_width=open_obj.length, close_width=close_obj.length)","<p>Groups line break hints added in the block. The line break hints are all to\nbe used or not.\n<p>If <code>indent</code> …\n"],["group","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-group","(indent=nil, open_obj='', close_obj='', open_width=nil, close_width=nil)","<p>Opens a block for grouping objects to be pretty printed.\n<p>Arguments:\n<p><code>indent</code> - noop argument. Present for …\n"],["group","Thread","Thread.html#method-i-group","()","<p>Returns the ThreadGroup which contains the given thread, or returns\n<code>nil</code> if <code>thr</code> is not a member of any …\n"],["group=","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-group-3D","(p1)","<p>Sets the EC::Group for the key. The group structure is internally copied so\nmodification to <code>group</code> after …\n"],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>Groups the collection by result of the block.  Returns a hash where the\nkeys are the evaluated result …\n"],["group_sub","PrettyPrint","PrettyPrint.html#method-i-group_sub","()","<p>Takes a block and queues a new group that is indented 1 level further.\n"],["groups","Process","Process.html#method-c-groups","()","<p>Get an <code>Array</code> of the gids of groups in the supplemental group\naccess list for this process.\n\n<pre>Process.groups ...</pre>\n"],["groups=","Process","Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given <code>Array</code> of\ngroup IDs.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>   <span class=\"ruby-comment\">#=&gt; [0, 1, 2, ...</span>\n</pre>\n"],["grpowned?","File","File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","File::Stat","File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the\ngroup id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","Pathname","Pathname.html#method-i-grpowned-3F","()","<p>See FileTest.grpowned?.\n"],["gsub","Kernel","Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> will be\nupdated if substitution occurs. Available only when …\n"],["gsub","String","String.html#method-i-gsub","(*args)","<p>Returns a copy of <em>str</em> with the <em>all</em> occurrences of\n<em>pattern</em> substituted for the second argument. The <em>pattern</em>\n…\n"],["gsub!","String","String.html#method-i-gsub-21","(*args)","<p>Performs the substitutions of <code>String#gsub</code> in place, returning\n<em>str</em>, or <code>nil</code> if no substitutions were performed. …\n"],["guard_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-guard_inspect_key","()","<p>Yields to a block and preserves the previous set of objects being printed.\n"],["guess","Kconv","Kconv.html#method-c-guess","(str)","<p>Guess input encoding by NKF.guess\n"],["guess","Kconv","Kconv.html#method-i-guess","(str)","<p>Guess input encoding by NKF.guess\n"],["guess","NKF","NKF.html#method-c-guess","(p1)","<p>Returns guessed encoding of <em>str</em> by nkf routine.\n"],["guess","OptionParser::Switch","OptionParser/Switch.html#method-c-guess","(arg)","<p>Guesses argument style from <code>arg</code>.  Returns corresponding\nOptionParser::Switch class (OptionalArgument, …\n"],["guess_type","RSS::XMLStyleSheet","RSS/XMLStyleSheet.html#method-i-guess_type","(filename)",""],["guess_type_if_need","RSS::Maker::XMLStyleSheets::XMLStyleSheet","RSS/Maker/XMLStyleSheets/XMLStyleSheet.html#method-i-guess_type_if_need","(xss)",""],["guid","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-guid","()","<p>Returns GUID.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;)\nputs tobj.guid ...</pre>\n"],["guid","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-guid","()","<p>Returns guid string which specifies type library.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["gunzip","Gem","Gem.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gunzip","Gem::Util","Gem/Util.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gunzip","Zlib","Zlib.html#method-c-gunzip","(p1)","<p>Decode the given gzipped <code>string</code>.\n<p>This method is almost equivalent to the following code:\n\n<pre>def gunzip(string) ...</pre>\n"],["gzip","Gem","Gem.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Gem::Indexer","Gem/Indexer.html#method-i-gzip","(filename)","<p>Zlib::GzipWriter wrapper that gzips <code>filename</code> on disk.\n"],["gzip","Gem::Util","Gem/Util.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Zlib","Zlib.html#method-c-gzip","(p1)","<p>Gzip the given <code>string</code>. Valid values of level are\nZlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["gzip_to","Gem::Package","Gem/Package.html#method-i-gzip_to","(io)","<p>Gzips content written to <code>gz_io</code> to <code>io</code>.\n"],["h","CGI::Util","CGI/Util.html#method-i-h","(string)",""],["h","ERB::Util","ERB/Util.html#method-i-h","(s)",""],["h","ERB::Util","ERB/Util.html#method-c-h","(s)",""],["h","RSS::Utils","RSS/Utils.html#method-i-h","(s)",""],["handle","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-handle","( symbol, *arguments )",""],["handle_arguments","Gem::ConfigFile","Gem/ConfigFile.html#method-i-handle_arguments","(arg_list)","<p>Handle the command arguments.\n"],["handle_entitydecl","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-handle_entitydecl","( event )",""],["handle_interrupt","Thread","Thread.html#method-c-handle_interrupt","(p1)","<p>Changes asynchronous interrupt timing.\n<p><em>interrupt</em> means asynchronous event and corresponding procedure …\n"],["handle_missing_or_push_dependency_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-handle_missing_or_push_dependency_state","(state)","<p>Pushes a new {DependencyState}. If the {#specification_provider} says to\n{SpecificationProvider#allow_missing?} …\n"],["handle_options","Gem::Command","Gem/Command.html#method-i-handle_options","(args)","<p>Handle the given list of arguments by parsing them and recording the\nresults.\n"],["handle_pipe","RDoc::RDoc","RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handler","Fiddle::Importer","Fiddle/Importer.html#method-i-handler","()","<p>The Fiddle::CompositeHandler instance\n<p>Will raise an error if no handlers are open.\n"],["handler","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-i-handler","()","<p>returns handler object.\n"],["handler=","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-i-handler-3D","(p1)","<p>sets event handler object. If handler object has onXXX method according to\nXXX event, then onXXX method …\n"],["handlers","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-i-handlers","()","<p>Array of the currently loaded libraries.\n"],["handles?","Gem::Command","Gem/Command.html#method-i-handles-3F","(args)","<p>True if the command handles the given argument list.\n"],["hangul_comp_one","UnicodeNormalize","UnicodeNormalize.html#method-c-hangul_comp_one","(string)",""],["hangul_decomp_one","UnicodeNormalize","UnicodeNormalize.html#method-c-hangul_decomp_one","(target)","<p>Hangul Algorithm\n"],["hard_break","RDoc::TestCase","RDoc/TestCase.html#method-i-hard_break","()","<p>Shortcut for RDoc::Markup::HardBreak.new\n"],["has_attributes?","REXML::Element","REXML/Element.html#method-i-has_attributes-3F","()","<p>Evaluates to <code>true</code> if this element has any attributes set,\nfalse otherwise.\n"],["has_conflicts?","Gem::Specification","Gem/Specification.html#method-i-has_conflicts-3F","()","<p>Return true if there are possible conflicts against the currently loaded\nspecs.\n"],["has_elements?","REXML::Element","REXML/Element.html#method-i-has_elements-3F","()","<p>Evaluates to <code>true</code> if this element has at least one child\nElement\n\n<pre>doc = Document.new &quot;&lt;a&gt;&lt;b/&gt;&lt;c&gt;Text&lt;/c&gt;&lt;/a&gt;&quot; ...</pre>\n"],["has_expires?","Rinda::TupleBag","Rinda/TupleBag.html#method-i-has_expires-3F","()","<p><code>true</code> if the TupleBag to see if it has any expired entries.\n"],["has_key?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-has_key-3F","(*args)","<p>Returns true if a given query string parameter exists.\n"],["has_key?","CSV::Row","CSV/Row.html#method-i-has_key-3F","(header)","<p>Returns <code>true</code> if there is a field with the given\n<code>header</code>.\n"],["has_key?","DBM","DBM.html#method-i-has_key-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["has_key?","ENV","ENV.html#method-c-has_key-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["has_key?","GDBM","GDBM.html#method-i-has_key-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["has_key?","Hash","Hash.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["has_key?","SDBM","SDBM.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["has_name?","REXML::Light::Node","REXML/Light/Node.html#method-i-has_name-3F","( name, namespace = '' )",""],["has_name?","REXML::Namespace","REXML/Namespace.html#method-i-has_name-3F","( other, ns=nil )","<p>Compares names optionally WITH namespaces\n"],["has_next?","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-has_next-3F","()","<p>Returns true if there are more events.  Synonymous with !empty?\n"],["has_text?","REXML::Element","REXML/Element.html#method-i-has_text-3F","()","<p>Evaluates to <code>true</code> if this element has at least one Text child\n"],["has_value?","DBM","DBM.html#method-i-has_value-3F","(p1)","<p>Returns true if the database contains the specified string value, false\notherwise.\n"],["has_value?","ENV","ENV.html#method-c-has_value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["has_value?","GDBM","GDBM.html#method-i-has_value-3F","(p1)","<p>Returns true if the given value <em>v</em> exists within the database.\nReturns false otherwise.\n"],["has_value?","Hash","Hash.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.value?(100) ...</pre>\n"],["has_value?","SDBM","SDBM.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>value</code>.\n"],["has_value?","YAML::DBM","YAML/DBM.html#method-i-has_value-3F","( val )","<p>Returns true if specified <code>value</code> is found in the database.\n"],["hash","Array","Array.html#method-i-hash","()","<p>Compute a hash-code for this array.\n<p>Two arrays with the same content will have the same hash code (and …\n"],["hash","BigDecimal","BigDecimal.html#method-i-hash","()","<p>Creates a hash for this BigDecimal.\n<p>Two BigDecimals with equal sign, fractional part and exponent have …\n"],["hash","Float","Float.html#method-i-hash","()","<p>Returns a hash code for this float.\n<p>See also Object#hash.\n"],["hash","Gem::NameTuple","Gem/NameTuple.html#method-i-hash","()",""],["hash","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-hash","()","<p>@return [Fixnum] a hash for the vertex based upon its {#name}\n"],["hash","Hash","Hash.html#method-i-hash","()","<p>Compute a hash-code for this hash. Two hashes with the same content will\nhave the same hash code (and …\n"],["hash","IPAddr","IPAddr.html#method-i-hash","()","<p>Returns a hash value used by Hash, Set, and Array classes\n"],["hash","MatchData","MatchData.html#method-i-hash","()","<p>Produce a hash based on the target string, regexp and matched positions of\nthis matchdata.\n<p>See also Object#hash …\n"],["hash","Matrix","Matrix.html#method-i-hash","()","<p>Returns a hash-code for the matrix.\n"],["hash","Method","Method.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash","Object","Object.html#method-i-hash","()","<p>Generates an Integer hash value for this object.  This function must have\nthe property that <code>a.eql?(b)</code> …\n"],["hash","OpenSSL::BN","OpenSSL/BN.html#method-i-hash","()","<p>Returns a hash code for this object.\n<p>See also Object#hash.\n"],["hash","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-hash","()","<p>The hash value returned is suitable for use as a certificate&#39;s filename\nin a CA path.\n"],["hash","OpenStruct","OpenStruct.html#method-i-hash","()","<p>Compute a hash-code for this OpenStruct. Two hashes with the same content\nwill have the same hash code …\n"],["hash","Proc","Proc.html#method-i-hash","()","<p>Returns a hash value corresponding to proc body.\n<p>See also Object#hash.\n"],["hash","RDoc::TopLevel","RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same relative_name\n"],["hash","REXML::Attribute","REXML/Attribute.html#method-i-hash","()","<p>Creates (and returns) a hash from both the name and value\n"],["hash","Range","Range.html#method-i-hash","()","<p>Compute a hash-code for this range. Two ranges with equal begin and end\npoints (using <code>eql?</code>), and the …\n"],["hash","Regexp","Regexp.html#method-i-hash","()","<p>Produce a hash based on the text and options of this regular expression.\n<p>See also Object#hash.\n"],["hash","String","String.html#method-i-hash","()","<p>Return a hash based on the string&#39;s length, content and encoding.\n<p>See also Object#hash.\n"],["hash","Struct","Struct.html#method-i-hash","()","<p>Returns a hash value based on this struct&#39;s contents.\n<p>See also Object#hash.\n"],["hash","Time","Time.html#method-i-hash","()","<p>Returns a hash code for this Time object.\n<p>See also Object#hash.\n"],["hash","URI::Generic","URI/Generic.html#method-i-hash","()",""],["hash","UnboundMethod","UnboundMethod.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash","Vector","Vector.html#method-i-hash","()","<p>Returns a hash-code for the vector.\n"],["hash?","Rinda::Tuple","Rinda/Tuple.html#method-i-hash-3F","(ary_or_hash)",""],["hash_algorithm","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-hash_algorithm","()","<p>Returns the ln (long name) of the hash algorithm used to generate the\nissuerNameHash and the issuerKeyHash …\n"],["hash_old","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-hash_old","()","<p>Returns an MD5 based hash used in OpenSSL 0.9.X.\n"],["have_author?","RSS::Atom::Entry","RSS/Atom/Entry.html#method-i-have_author-3F","()","<p>Returns where there are any authors present or there is a source with an\nauthor.\n"],["have_author?","RSS::Atom::Feed","RSS/Atom/Feed.html#method-i-have_author-3F","()","<p>Returns true if there are any authors for the feed or any of the Entry\nchild elements have an author …\n"],["have_author?","RSS::Atom::Feed::Entry","RSS/Atom/Feed/Entry.html#method-i-have_author-3F","(check_parent=true)","<p>Returns whether any of the following are true:\n<p>There are any authors in the feed\n<p>If the parent element …\n"],["have_author?","RSS::Atom::Feed::Entry::Source","RSS/Atom/Feed/Entry/Source.html#method-i-have_author-3F","()","<p>Returns true if the Source element has an author.\n"],["have_children_elements","RSS::Element","RSS/Element.html#method-c-have_children_elements","()",""],["have_const","MakeMakefile","MakeMakefile.html#method-i-have_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.  You may\noptionally pass the <code>type</code> of <code>const</code> as  …\n"],["have_content?","RSS::Element","RSS/Element.html#method-c-have_content-3F","()",""],["have_extensions?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-have_extensions-3F","()",""],["have_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-have_file-3F","(file, suffixes)",""],["have_framework","MakeMakefile","MakeMakefile.html#method-i-have_framework","(fw, &b)","<p>Returns whether or not the given <code>framework</code> can be found on\nyour system. If found, a macro is passed as …\n"],["have_func","MakeMakefile","MakeMakefile.html#method-i-have_func","(func, headers = nil, opt = \"\", &b)","<p>Returns whether or not the function <code>func</code> can be found in the\ncommon header files, or within any <code>headers</code> …\n"],["have_git?","Gem::TestCase","Gem/TestCase.html#method-i-have_git-3F","()","<p>Skips this test unless you have a git executable\n"],["have_header","MakeMakefile","MakeMakefile.html#method-i-have_header","(header, preheaders = nil, opt = \"\", &b)","<p>Returns whether or not the given <code>header</code> file can be found on\nyour system. If found, a macro is passed …\n"],["have_library","MakeMakefile","MakeMakefile.html#method-i-have_library","(lib, func = nil, headers = nil, opt = \"\", &b)","<p>Returns whether or not the given entry point <code>func</code> can be found\nwithin <code>lib</code>.  If <code>func</code> is <code>nil</code>, the\n<code>main()</code> …\n"],["have_macro","MakeMakefile","MakeMakefile.html#method-i-have_macro","(macro, headers = nil, opt = \"\", &b)","<p>Returns whether or not <code>macro</code> is defined either in the common\nheader files or within any <code>headers</code> you provide. …\n"],["have_option?","FileUtils","FileUtils.html#method-c-have_option-3F","(mid, opt)","<p>Returns true if the method <code>mid</code> have an option\n<code>opt</code>.\n\n<pre>p FileUtils.have_option?(:cp, :noop)     #=&gt; true\np ...</pre>\n"],["have_rdoc_4_plus?","Gem::Server","Gem/Server.html#method-i-have_rdoc_4_plus-3F","()",""],["have_required_elements?","RSS::Atom::Entry","RSS/Atom/Entry.html#method-i-have_required_elements-3F","()",""],["have_required_elements?","RSS::Atom::Feed","RSS/Atom/Feed.html#method-i-have_required_elements-3F","()",""],["have_required_elements?","RSS::Atom::Feed::Entry","RSS/Atom/Feed/Entry.html#method-i-have_required_elements-3F","()",""],["have_required_elements?","RSS::Element","RSS/Element.html#method-i-have_required_elements-3F","()",""],["have_required_values?","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::Atom::Feed::Items::Item","RSS/Maker/Atom/Feed/Items/Item.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::Base","RSS/Maker/Base.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ImageFaviconModel::ImageFaviconBase","RSS/Maker/ImageFaviconModel/ImageFaviconBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ImageItemModel::ImageItemBase","RSS/Maker/ImageItemModel/ImageItemBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::RSS10::Image","RSS/Maker/RSS10/Image.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::RSS10::Textinput","RSS/Maker/RSS10/Textinput.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase","RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase/TaxonomyTopicBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html#method-i-have_required_values-3F","()",""],["have_struct_member","MakeMakefile","MakeMakefile.html#method-i-have_struct_member","(type, member, headers = nil, opt = \"\", &b)","<p>Returns whether or not the struct of type <code>type</code> contains\n<code>member</code>.  If it does not, or the struct type can&#39;t …\n"],["have_type","MakeMakefile","MakeMakefile.html#method-i-have_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.  You\nmay optionally pass additional <code>headers</code> to …\n"],["have_var","MakeMakefile","MakeMakefile.html#method-i-have_var","(var, headers = nil, opt = \"\", &b)","<p>Returns whether or not the variable <code>var</code> can be found in the\ncommon header files, or within any <code>headers</code> …\n"],["have_xml_content?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-have_xml_content-3F","()","<p>Returns true if the element has inline XML content.\n"],["have_xml_content?","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-i-have_xml_content-3F","()","<p>Returns true if type is “xhtml”.\n"],["have_xml_content?","RSS::Element","RSS/Element.html#method-i-have_xml_content-3F","()",""],["head","Net::HTTP","Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host.\n<code>header</code> is a Hash like { &#39;Accept&#39; =&gt; …\n"],["head","RDoc::TestCase","RDoc/TestCase.html#method-i-head","(level, text)","<p>Shortcut for RDoc::Markup::Heading.new with <code>level</code> and\n<code>text</code>\n"],["head2","Net::HTTP","Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["header","CGI","CGI.html#method-i-header","(options='text/html')","<p>This method is an alias for #http_header, when HTML5 tag maker is inactive.\n<p>NOTE: use #http_header to …\n"],["header","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-header","(checksum = @checksum)",""],["header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-header","(type, fname, dname, length, mode, mtime, checksum = nil, linkname = \"\")",""],["header","Net::POPMail","Net/POPMail.html#method-i-header","(dest = '')","<p>Fetches the message header.\n<p>The optional <code>dest</code> argument is obsolete.\n<p>This method raises a POPError if an …\n"],["header?","CSV::Row","CSV/Row.html#method-i-header-3F","(name)","<p>Returns <code>true</code> if <code>name</code> is a header for this row,\nand <code>false</code> otherwise.\n"],["header_convert","CSV","CSV.html#method-i-header_convert","(name = nil, &converter)","<p>Identical to CSV#convert(), but for header rows.\n<p>Note that this method must be called before header rows …\n"],["header_converters","CSV","CSV.html#method-i-header_converters","()","<p>Returns the current list of converters in effect for headers.  See CSV::new\nfor details.  Built-in converters …\n"],["header_row?","CSV","CSV.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if the next row read will be a header row.\n"],["header_row?","CSV::Row","CSV/Row.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if this is a header row.\n"],["headers","CSV","CSV.html#method-i-headers","()","<p>Returns <code>nil</code> if headers will not be used, <code>true</code> if\nthey will but have not yet been read, or the actual …\n"],["headers","CSV::Row","CSV/Row.html#method-i-headers","()","<p>Returns the headers of this row.\n"],["headers","CSV::Table","CSV/Table.html#method-i-headers","()","<p>Returns the headers for the first row of this table (assumed to match all\nother rows).  An empty Array …\n"],["headers=","URI::MailTo","URI/MailTo.html#method-i-headers-3D","(v)","<p>setter for headers <code>v</code>\n"],["helo","Net::SMTP","Net/SMTP.html#method-i-helo","(domain)",""],["help","Net::FTP","Net/FTP.html#method-i-help","(arg = nil)","<p>Issues the HELP command.\n"],["help","OptionParser","OptionParser.html#method-i-help","()","<p>Returns option summary string.\n"],["helpcontext","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-helpcontext","()","<p>Returns help context.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;)\nmethod ...</pre>\n"],["helpcontext","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-helpcontext","()","<p>Returns helpcontext. If helpcontext is not found, then returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["helpfile","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-helpfile","()","<p>Returns help file. If help file is not found, then the method returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["helpfile","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-helpfile","()","<p>Returns helpfile path. If helpfile is not found, then returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["helpstring","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-helpstring","()","<p>Returns help string of OLE method. If the help string is not found, then\nthe method returns nil.\n\n<pre>tobj ...</pre>\n"],["helpstring","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-helpstring","()","<p>Returns help string.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Internet Controls&#39;, &#39;IWebBrowser&#39;)\nputs tobj.helpstring ...</pre>\n"],["here?","DRb","DRb.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb","DRb.html#method-c-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb::DRbServer","DRb/DRbServer.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for this server?\n"],["hermitian?","Matrix","Matrix.html#method-i-hermitian-3F","()","<p>Returns <code>true</code> if this is an hermitian matrix. Raises an error\nif matrix is not square.\n"],["hessenberg_to_real_schur","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-hessenberg_to_real_schur","()","<p>Nonsymmetric reduction from Hessenberg to real Schur form.\n"],["hex","Random::Formatter","Random/Formatter.html#method-i-hex","(n=nil)","<p>SecureRandom.hex generates a random hexadecimal string.\n<p>The argument <em>n</em> specifies the length, in bytes, …\n"],["hex","String","String.html#method-i-hex","()","<p>Treats leading characters from <em>str</em> as a string of hexadecimal\ndigits (with an optional sign and an optional …\n"],["hexdigest","Digest::Class","Digest/Class.html#method-c-hexdigest","(*args)","<p>Returns the hex-encoded hash value of a given <em>string</em>.  This is\nalmost equivalent to Digest.hexencode …\n"],["hexdigest","Digest::Instance","Digest/Instance.html#method-i-hexdigest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest in a\nhex-encoded form, keeping the digest&#39;s …\n"],["hexdigest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-hexdigest","(p1, p2, p3)","<p>Returns the authentication code as a hex-encoded string. The\n<code>digest</code> parameter must be an instance of …\n"],["hexdigest","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-hexdigest","()","<p>Returns the authentication code an instance represents as a hex-encoded\nstring.\n"],["hexdigest!","Digest::Instance","Digest/Instance.html#method-i-hexdigest-21","()","<p>Returns the resulting hash value in a hex-encoded form and resets the\ndigest to the initial state.\n"],["hexencode","Digest","Digest.html#method-c-hexencode","(p1)","<p>Generates a hex-encoded version of a given <em>string</em>.\n"],["hidden","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-hidden","(name = \"\", value = nil)","<p>Generate a Hidden Input element as a string.\n<p>The attributes of the element can be specified as two arguments, …\n"],["hierarchical?","URI::Generic","URI/Generic.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path\n"],["hierarchical?","URI::LDAP","URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path For URI::LDAP this will return <code>false</code>\n"],["history_file","IRB::Context","IRB/Context.html#method-i-history_file","()","<p>A copy of the default <code>IRB.conf[:HISTORY_FILE]</code>\n"],["history_file=","IRB::Context","IRB/Context.html#method-i-history_file-3D","(hist)","<p>Set <code>IRB.conf[:HISTORY_FILE]</code> to the given <code>hist</code>.\n"],["hmac_md5","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-i-hmac_md5","(text, key)",""],["home","Dir","Dir.html#method-c-home","(*args)","<p>Returns the home directory of the current user or the named user if given.\n"],["home_workspace","IRB::Context","IRB/Context.html#method-i-home_workspace","()","<p>Inherited from <code>TOPLEVEL_BINDING</code>.\n"],["host","Gem","Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally\n<code>https://rubygems.org</code>.\n"],["host","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-host","()","<p>The host to connect to either from the RUBYGEMS_HOST environment variable\nor from the user&#39;s configuration …\n"],["host","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-host","()","<p>The host this request is for\n"],["host=","Gem","Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["host=","URI::Generic","URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["hostname","URI::Generic","URI/Generic.html#method-i-hostname","()","<p>extract the host part of the URI and unwrap brackets for IPv6 addresses.\n<p>This method is same as URI::Generic#host …\n"],["hostname=","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-hostname-3D","(p1)","<p>Sets the server hostname used for SNI. This needs to be set before\nSSLSocket#connect.\n"],["hostname=","URI::Generic","URI/Generic.html#method-i-hostname-3D","(v)","<p>set the host part of the URI as the argument with brackets for IPv6\naddresses.\n<p>This method is same as …\n"],["hour","Date","Date.html#method-i-hour","()","<p>Returns the hour (0-23).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">hour</span>         <span class=\"ruby-comment\">#=&gt; 4</span>\n</pre>\n"],["hour","Time","Time.html#method-i-hour","()","<p>Returns the hour of the day (0..23) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:26:20 -0600\nt.hour     ...</pre>\n"],["hour=","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-hour-3D","(hour)",""],["hour=","RSS::Maker::ITunesItemModel::ITunesDurationBase","RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-hour-3D","(hour)",""],["href=","RSS::XMLStyleSheet","RSS/XMLStyleSheet.html#method-i-href-3D","(value)",""],["hstack","Matrix","Matrix.html#method-i-hstack","(*matrices)","<p>Returns a new matrix resulting by stacking horizontally the receiver with\nthe given matrices\n\n<pre>x = Matrix[[1, ...</pre>\n"],["hstack","Matrix","Matrix.html#method-c-hstack","(x, *matrices)","<p>Create a matrix by stacking matrices horizontally\n\n<pre>x = Matrix[[1, 2], [3, 4]]\ny = Matrix[[5, 6], [7, 8]] ...</pre>\n"],["html","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-html","(attributes = {})","<p>Generate a top-level HTML element as a string.\n<p>The attributes of the element are specified as a hash. …\n"],["html","RDoc::Markdown","RDoc/Markdown.html#method-i-html","","<p>Allow HTML\n"],["html_escape","ERB::Util","ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters in <em>s</em>.\n\n<pre>require &quot;erb&quot;\ninclude ERB::Util\n\nputs html_escape(&quot;is ...</pre>\n"],["html_escape","ERB::Util","ERB/Util.html#method-i-html_escape","(s)","<p>A utility method for escaping HTML tag characters in <em>s</em>.\n\n<pre>require &quot;erb&quot;\ninclude ERB::Util\n\nputs html_escape(&quot;is ...</pre>\n"],["html_escape","RSS::Utils","RSS/Utils.html#method-i-html_escape","(s)","<p>Takes a string <code>s</code> with some HTML in it, and escapes\n&#39;&amp;&#39;, &#39;“&#39;, &#39;&lt;&#39; …\n"],["html_name","RDoc::Alias","RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["hton","IPAddr","IPAddr.html#method-i-hton","()","<p>Returns a network byte ordered string form of the IP address.\n"],["http_default_port","Net::HTTP","Net/HTTP.html#method-c-http_default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["http_header","CGI","CGI.html#method-i-http_header","(options='text/html')","<p>Create an HTTP header block as a string.\n<p>Includes the empty line that ends the header block.\n<p>content_type_string … &mdash; "],["http_url","RDoc::Context","RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["httpdate","Date","Date.html#method-i-httpdate","()","<p>This method is equivalent to strftime(&#39;%a, %d %b %Y %T GMT&#39;). See\nalso RFC 2616.\n"],["httpdate","Date","Date.html#method-c-httpdate","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some RFC\n2616 format.\n\n<pre>Date.httpdate(&#39;Sat, ...</pre>\n"],["httpdate","DateTime","DateTime.html#method-c-httpdate","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\nRFC 2616 format.\n\n<pre>DateTime.httpdate(&#39;Sat, ...</pre>\n"],["httpdate","Time","Time.html#method-i-httpdate","()","<p>Returns a string which represents the time as RFC 1123 date of HTTP-date\ndefined by RFC 2616:\n\n<pre>day-of-week, ...</pre>\n"],["httpdate","Time","Time.html#method-c-httpdate","(date)","<p>Parses <code>date</code> as an HTTP-date defined by RFC 2616 and converts\nit to a Time object.\n<p>ArgumentError is raised …\n"],["httponly=","CGI::Cookie","CGI/Cookie.html#method-i-httponly-3D","(val)","<p>Set whether the Cookie is a httponly cookie or not.\n<p><code>val</code> must be a boolean.\n"],["https?","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-https-3F","(uri)",""],["https_default_port","Net::HTTP","Net/HTTP.html#method-c-https_default_port","()","<p>The default port to use for HTTPS requests; defaults to 443.\n"],["hypot","Math","Math.html#method-c-hypot","(p1, p2)","<p>Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with\nsides <code>x</code> and <code>y</code>.\n\n<pre>Math.hypot(3, ...</pre>\n"],["i","Numeric","Numeric.html#method-i-i","()","<p>Returns the corresponding imaginary number. Not available for complex\nnumbers.\n"],["icon","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-icon","()",""],["icon=","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-icon-3D","(url)",""],["iconv","JSON","JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using Ruby&#39;s <em>String.encode</em>\n"],["id","OpenSSL::Engine","OpenSSL/Engine.html#method-i-id","()","<p>Get the id for this engine\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">load</span>\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">engines</span> <span class=\"ruby-comment\">#=&gt; [#&lt;OpenSSL::Engine#&gt;, ...] ...</span>\n</pre>\n"],["id","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-id","()","<p>Returns the Session ID.\n"],["id","REXML::Functions","REXML/Functions.html#method-c-id","( object )","<p>Since REXML is non-validating, this method is not implemented as it\nrequires a DTD\n"],["id2name","Symbol","Symbol.html#method-i-id2name","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">id2name</span>   <span class=\"ruby-comment\">#=&gt; &quot;fred&quot;</span>\n</pre>\n"],["ident","Syslog","Syslog.html#method-c-ident","()","<p>Returns the identity string used in the last call to open()\n"],["identical?","File","File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre>open(&quot;a&quot;, &quot;w&quot;) {} ...</pre>\n"],["identical?","FileTest","FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre>open(&quot;a&quot;, &quot;w&quot;) {} ...</pre>\n"],["identical?","FileUtils","FileUtils.html#method-i-identical-3F","(a, b)",""],["identical?","FileUtils","FileUtils.html#method-c-identical-3F","(a, b)",""],["identity","Matrix","Matrix.html#method-c-identity","(n)","<p>Creates an <code>n</code> by <code>n</code> identity matrix.\n\n<pre>Matrix.identity(2)\n  =&gt; 1 0\n     0 1</pre>\n"],["idle","Net::IMAP","Net/IMAP.html#method-i-idle","(timeout = nil, &response_handler)","<p>Sends an IDLE command that waits for notifications of new or expunged\nmessages.  Yields responses from …\n"],["idle_done","Net::IMAP","Net/IMAP.html#method-i-idle_done","()","<p>Leaves IDLE.\n"],["if_modified_since","RDoc::Servlet","RDoc/Servlet.html#method-i-if_modified_since","(req, res, path = nil)","<p>Handles the If-Modified-Since HTTP header on <code>req</code> for\n<code>path</code>.  If the file has not been modified a Not  …\n"],["ifindex","Socket::Ifaddr","Socket/Ifaddr.html#method-i-ifindex","()","<p>Returns the interface index of <em>ifaddr</em>.\n"],["iflush","IO","IO.html#method-i-iflush","()","<p>Flushes input buffer in kernel.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["ignore","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again\n(#record_location is called). …\n"],["ignore_unknown_element","RSS::BaseParser","RSS/BaseParser.html#method-i-ignore_unknown_element","()",""],["ignore_unknown_element=","RSS::BaseParser","RSS/BaseParser.html#method-i-ignore_unknown_element-3D","(new_value)",""],["ignore_whitespace_nodes","REXML::Element","REXML/Element.html#method-i-ignore_whitespace_nodes","()",""],["ignored?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n<p>See also #ignore\n"],["imag","Complex","Complex.html#method-i-imag","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imag","Matrix","Matrix.html#method-i-imag","()",""],["imag","Numeric","Numeric.html#method-i-imag","()","<p>Returns zero.\n"],["image","RSS::Rss","RSS/Rss.html#method-i-image","()",""],["image_button","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-image_button","(src = \"\", name = nil, alt = nil)","<p>Generate an Image Button Input element as a string.\n<p><code>src</code> is the URL of the image to use for the button. …\n"],["image_size=","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-i-image_size-3D","(new_value)",""],["imaginary","Complex","Complex.html#method-i-imaginary","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imaginary","Matrix","Matrix.html#method-i-imaginary","()","<p>Returns the imaginary part of the matrix.\n\n<pre>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i ...</pre>\n"],["imaginary","Numeric","Numeric.html#method-i-imaginary","()","<p>Returns zero.\n"],["img","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-img","(src = \"\", alt = \"\", width = nil, height = nil)","<p>Generate an Image element as a string.\n<p><code>src</code> is the URL of the image.  <code>alt</code> is the\nalternative text for the …\n"],["implemented_ole_types","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-implemented_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["implicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-implicit-3F","()","<p>Indicate that the request is for a gem requested as a dependency of another\ngem\n"],["import","Gem::RequestSet","Gem/RequestSet.html#method-i-import","(deps)","<p>Add <code>deps</code> Gem::Dependency objects to the set.\n"],["import_function","Fiddle::Importer","Fiddle/Importer.html#method-i-import_function","(name, ctype, argtype, call_type = nil)","<p>Returns a new Fiddle::Function instance at the memory address of the given\n<code>name</code> function.\n<p>Raises a DLError …\n"],["import_symbol","Fiddle::Importer","Fiddle/Importer.html#method-i-import_symbol","(name)","<p>Returns a new Fiddle::Pointer instance at the memory address of the given\n<code>name</code> symbol.\n<p>Raises a DLError …\n"],["import_value","Fiddle::Importer","Fiddle/Importer.html#method-i-import_value","(ty, addr)","<p>Returns a new instance of the C struct with the value <code>ty</code> at\nthe <code>addr</code> address.\n"],["in6_addr","IPAddr","IPAddr.html#method-i-in6_addr","(left)",""],["in_addr","IPAddr","IPAddr.html#method-i-in_addr","(addr)",""],["in_transaction","PStore","PStore.html#method-i-in_transaction","()","<p>Raises PStore::Error if the calling code is not in a PStore#transaction.\n"],["in_transaction_wr","PStore","PStore.html#method-i-in_transaction_wr","()","<p>Raises PStore::Error if the calling code is not in a PStore#transaction or\nif the code is in a read-only …\n"],["inactivate","Shell::ProcessController","Shell/ProcessController.html#method-c-inactivate","(pc)",""],["inc","OptionParser","OptionParser.html#method-i-inc","(*args)",""],["inc","OptionParser","OptionParser.html#method-c-inc","(arg, default = nil)","<p>Returns an incremented value of <code>default</code> according to\n<code>arg</code>.\n"],["include","Module","Module.html#method-i-include","(*args)","<p>Invokes <code>Module.append_features</code> on each parameter in reverse\norder.\n"],["include?","Array","Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given <code>object</code> is present in\n<code>self</code> (that is, if any element <code>==</code>\n<code>object</code>), otherwise returns …\n"],["include?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-include-3F","(*args)",""],["include?","CSV::Row","CSV/Row.html#method-i-include-3F","(header)",""],["include?","DBM","DBM.html#method-i-include-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["include?","ENV","ENV.html#method-c-include-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["include?","Enumerable","Enumerable.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre>IO.constants.include? :SEEK_SET ...</pre>\n"],["include?","GDBM","GDBM.html#method-i-include-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["include?","Gem::SourceList","Gem/SourceList.html#method-i-include-3F","(other)","<p>Returns true if this source list includes <code>other</code> which may be a\nGem::Source or a source URI.\n"],["include?","Hash","Hash.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["include?","IPAddr","IPAddr.html#method-i-include-3F","(other)","<p>Returns true if the given ipaddr is in the range.\n<p>e.g.:\n\n<pre>require &#39;ipaddr&#39;\nnet1 = IPAddr.new(&quot;192.168.2.0/24&quot;) ...</pre>\n"],["include?","Module","Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included in <em>mod</em> or\none of <em>mod</em>&#39;s ancestors.\n\n<pre>module A\nend\nclass B\n  include ...</pre>\n"],["include?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["include?","REXML::AttlistDecl","REXML/AttlistDecl.html#method-i-include-3F","(key)","<p>Whether an attlist declaration includes the given attribute definition\n\n<pre>if attlist_decl.include? &quot;xmlns:foobar&quot;</pre>\n"],["include?","Range","Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.  If begin and end are numeric, comparison …\n"],["include?","SDBM","SDBM.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["include?","Set","Set.html#method-i-include-3F","(o)","<p>Returns true if the set contains the given object.\n<p>Note that <code>include?</code> and <code>member?</code> do not test member\nequality …\n"],["include?","String","String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>str</em> contains the given string or\ncharacter.\n\n<pre>&quot;hello&quot;.include? &quot;lo&quot;   #=&gt; true\n&quot;hello&quot;.include? ...</pre>\n"],["included","Exception2MessageMapper","Exception2MessageMapper.html#method-c-included","(mod)",""],["included","Module","Module.html#method-i-included","(p1)","<p>Callback invoked whenever the receiver is included in another module or\nclass. This should be used in …\n"],["included","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-c-included","(base)",""],["included","Singleton","Singleton.html#method-c-included","(klass)",""],["included","Syslog::Constants","Syslog/Constants.html#method-c-included","(p1)",""],["included","Syslog::Macros","Syslog/Macros.html#method-c-included","(p1)",""],["included_modules","Module","Module.html#method-i-included_modules","()","<p>Returns the list of modules included in <em>mod</em>.\n\n<pre>module Mixin\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules ...</pre>\n"],["incompatible_argument_styles","OptionParser::Switch","OptionParser/Switch.html#method-c-incompatible_argument_styles","(arg, t)",""],["incompatible_argument_styles","OptionParser::Switch::NoArgument","OptionParser/Switch/NoArgument.html#method-c-incompatible_argument_styles","(*)",""],["incomplete_input?","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F","()","<p>Returns true if the invalid byte sequence error is caused by premature end\nof string.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["indent","REXML::Node","REXML/Node.html#method-i-indent","(to, ind)",""],["indent_text","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-indent_text","(string, level=1, style=\"\\t\", indentfirstline=true)",""],["indent_text","REXML::Text","REXML/Text.html#method-i-indent_text","(string, level=1, style=\"\\t\", indentfirstline=true)",""],["independent?","Vector","Vector.html#method-c-independent-3F","(*vs)","<p>Returns <code>true</code> iff all of vectors are linearly independent.\n\n<pre>Vector.independent?(Vector[1,0], Vector[0,1]) ...</pre>\n"],["independent?","Vector","Vector.html#method-i-independent-3F","(*vs)","<p>Returns <code>true</code> iff all of vectors are linearly independent.\n\n<pre>Vector[1,0].independent?(Vector[0,1])\n  =&gt; true ...</pre>\n"],["index","Array","Array.html#method-i-index","(*args)","<p>Returns the <em>index</em> of the first object in <code>ary</code> such\nthat the object is <code>==</code> to <code>obj</code>.\n<p>If a block is given instead …\n"],["index","CSV::Row","CSV/Row.html#method-i-index","(header, minimum_index = 0)","<p>This method will return the index of a field with the provided\n<code>header</code>. The <code>offset</code> can be used to locate …\n"],["index","ENV","ENV.html#method-c-index","(p1)","<p>Deprecated method that is equivalent to ENV.key\n"],["index","Matrix","Matrix.html#method-i-index","(*args)","<p>The index method is specialized to return the index as [row, column] It\nalso accepts an optional <code>selector</code> …\n"],["index","REXML::Elements","REXML/Elements.html#method-i-index","(element)","<p>Returns the index of the supplied child (starting at 1), or -1 if the\nelement is not a child\n<p>element &mdash; "],["index","REXML::Parent","REXML/Parent.html#method-i-index","( child )","<p>Fetches the index of a given child @param child the child to get the index\nof @return the index of the …\n"],["index","String","String.html#method-i-index","(p1, p2 = v2)","<p>Returns the index of the first occurrence of the given <em>substring</em>\nor pattern (<em>regexp</em>) in <em>str</em>. Returns …\n"],["index","YAML::DBM","YAML/DBM.html#method-i-index","( keystr )","<p>Deprecated, used YAML::DBM#key instead.\n<p>Note: YAML::DBM#index makes warning from internal of ::DBM#index …\n"],["index_in_parent","REXML::Node","REXML/Node.html#method-i-index_in_parent","()","<p>Returns the position that <code>self</code> holds in its parent&#39;s\narray, indexed from 1.\n"],["indicate_progress","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-indicate_progress","()","<p>Indicates progress roughly once every second @return [void]\n"],["indicate_progress","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-indicate_progress","()","<p>Called roughly every {#progress_rate}, this method should convey progress\nto the user.\n<p>@return [void] …\n"],["infinite?","BigDecimal","BigDecimal.html#method-i-infinite-3F","()","<p>Returns nil, -1, or +1 depending on whether the value is finite, -Infinity,\nor +Infinity.\n"],["infinite?","Complex","Complex.html#method-i-infinite-3F","()","<p>Returns values corresponding to the value of <code>cmp</code>&#39;s\nmagnitude:\n<p>finite &mdash; <code>nil</code>\n<p>+Infinity &mdash; +<code>1</code>\n"],["infinite?","Float","Float.html#method-i-infinite-3F","()","<p>Return values corresponding to the value of <code>float</code>:\n<p>finite &mdash; <code>nil</code>\n<p>-Infinity &mdash; <code>-1</code>\n"],["infinite?","Numeric","Numeric.html#method-i-infinite-3F","()","<p>Returns values corresponding to the value of <code>num</code>&#39;s\nmagnitude:\n<p>finite &mdash; <code>nil</code>\n<p>-Infinity &mdash; <code>-1</code>\n"],["infinity?","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-infinity-3F","()",""],["inflate","Gem","Gem.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inflate","Gem::Util","Gem/Util.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inflate","Zlib","Zlib.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a\npreset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","Zlib/Inflate.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a\npreset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","Zlib/Inflate.html#method-i-inflate","(p1)","<p>Inputs <code>deflate_string</code> into the inflate stream and returns the\noutput from the stream.  Calling this method, …\n"],["info","Logger","Logger.html#method-i-info","(progname = nil, &block)","<p>Log an <code>INFO</code> message.\n<p>message &mdash; The message to log; does not need to be a String.\n<p>progname &mdash; In the block form, …\n"],["info","Syslog::Logger","Syslog/Logger.html#method-i-info","","<p>Logs a <code>message</code> at the info (syslog info) log level, or logs\nthe message returned from the block.\n"],["info","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-info","(msg)","<p>Shortcut for logging an INFO message\n"],["info?","Logger","Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>INFO</code> messages.\n"],["info?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-info-3F","()","<p>Will the logger output INFO messages?\n"],["info?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["info?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["inherit_convert_attr_reader","RSS::BaseModel","RSS/BaseModel.html#method-i-inherit_convert_attr_reader","(*attrs)",""],["inherited","Class","Class.html#method-i-inherited","(p1)","<p>Callback invoked whenever a subclass of the current class is created.\n<p>Example:\n\n<pre>class Foo\n  def self.inherited(subclass) ...</pre>\n"],["inherited","RSS::Element","RSS/Element.html#method-c-inherited","(klass)",""],["inherited","RSS::Maker::Base","RSS/Maker/Base.html#method-c-inherited","(subclass)",""],["inherited_array_reader","RSS::Utils::InheritedReader","RSS/Utils/InheritedReader.html#method-i-inherited_array_reader","(constant_name)",""],["inherited_base","RSS::Element","RSS/Element.html#method-c-inherited_base","()",""],["inherited_base","RSS::Maker::Base","RSS/Maker/Base.html#method-c-inherited_base","()",""],["inherited_hash_reader","RSS::Utils::InheritedReader","RSS/Utils/InheritedReader.html#method-i-inherited_hash_reader","(constant_name)",""],["inherited_reader","RSS::Utils::InheritedReader","RSS/Utils/InheritedReader.html#method-i-inherited_reader","(constant_name)",""],["init","Gem::PackageTask","Gem/PackageTask.html#method-i-init","(gem)","<p>Initialization tasks without the “yield self” or define operations.\n"],["init","IRB::Inspector","IRB/Inspector.html#method-i-init","()","<p>Proc to call when the inspector is activated, good for requiring dependent\nlibraries.\n"],["init_comments","CSV","CSV.html#method-i-init_comments","(options)","<p>Stores the pattern of comments to skip from the provided options.\n<p>The pattern must respond to <code>.match</code>, …\n"],["init_converters","CSV","CSV.html#method-i-init_converters","(options, field_name = :converters)","<p>Loads any converters requested during construction.\n<p>If <code>field_name</code> is set <code>:converters</code> (the default)\nfield …\n"],["init_headers","CSV","CSV.html#method-i-init_headers","(options)","<p>Stores header row settings and loads header converters, if needed.\n"],["init_parsers","CSV","CSV.html#method-i-init_parsers","(options)","<p>Pre-compiles parsers and stores them by name for access during reads.\n"],["init_separators","CSV","CSV.html#method-i-init_separators","(options)","<p>Stores the indicated separators for later use.\n<p>If auto-discovery was requested for <code>@row_sep</code>, this method …\n"],["init_with","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-init_with","(o, h, node)",""],["init_with_ary","Rinda::Tuple","Rinda/Tuple.html#method-i-init_with_ary","(ary)","<p>Munges <code>ary</code> into a valid Tuple.\n"],["init_with_hash","Rinda::Tuple","Rinda/Tuple.html#method-i-init_with_hash","(hash)","<p>Ensures <code>hash</code> is a valid Tuple.\n"],["initgroups","Process","Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group\ndatabase and using all groups …\n"],["initial_start_RDF","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-initial_start_RDF","(tag_name, prefix, attrs, ns)",""],["initial_start_entry","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-initial_start_entry","(tag_name, prefix, attrs, ns)",""],["initial_start_feed","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-initial_start_feed","(tag_name, prefix, attrs, ns)",""],["initial_start_rss","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-initial_start_rss","(tag_name, prefix, attrs, ns)",""],["initial_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-initial_state","()","<p>Creates the initial state for the resolution, based upon the {#requested}\ndependencies @return [DependencyState] …\n"],["initialize","Gem::Package","Gem/Package.html#method-i-initialize","(gem, security_policy)","<p>Creates a new package that will read or write to the file <code>gem</code>.\n"],["initialize","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-initialize","()",""],["initialize_clone","Set","Set.html#method-i-initialize_clone","(orig)","<p>Clone internal hash.\n"],["initialize_copy","Array","Array.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<code>other_ary</code>, truncating or expanding if necessary.\n\n<pre>a ...</pre>\n"],["initialize_copy","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-initialize_copy","(other)","<p>Initializes a copy of a {DependencyGraph}, ensuring that all {#vertices}\nare properly copied. @param …\n"],["initialize_copy","Gem::Specification","Gem/Specification.html#method-i-initialize_copy","(other_spec)","<p>Duplicates array_attributes from <code>other_spec</code> so state isn&#39;t\nshared.\n"],["initialize_copy","Numeric","Numeric.html#method-i-initialize_copy","(p1)","<p>Numerics are immutable values, which should not be copied.\n<p>Any attempt to use this method on a Numeric …\n"],["initialize_copy","OpenSSL::Config","OpenSSL/Config.html#method-i-initialize_copy","(other)",""],["initialize_copy","OpenStruct","OpenStruct.html#method-i-initialize_copy","(orig)","<p>Duplicate an OpenStruct object members.\n"],["initialize_copy","String","String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre>s = &quot;hello&quot;  ...</pre>\n"],["initialize_copy","StringScanner","StringScanner.html#method-i-initialize_copy","(p1)","<p>Duplicates a StringScanner object.\n"],["initialize_copy","Zlib::Deflate","Zlib/Deflate.html#method-i-initialize_copy","(p1)","<p>Duplicates the deflate stream.\n"],["initialize_dup","Set","Set.html#method-i-initialize_dup","(orig)","<p>Dup internal hash.\n"],["initialize_have_children_elements","RSS::Element","RSS/Element.html#method-i-initialize_have_children_elements","()",""],["initialize_http_header","Net::HTTPHeader","Net/HTTPHeader.html#method-i-initialize_http_header","(initheader)",""],["initialize_methods_etc","RDoc::Context","RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["initialize_pattern","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns\n"],["initialize_query","CGI::QueryExtension","CGI/QueryExtension.html#method-i-initialize_query","()","<p>A wrapper class to use a StringIO object as the body and switch to a\nTempFile when the passed threshold …\n"],["initialize_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp&#39;s\n"],["initialize_tracer","IRB","IRB.html#method-c-initialize_tracer","()","<p>initialize tracing function\n"],["initialize_variables","RSS::Element","RSS/Element.html#method-i-initialize_variables","(attrs)",""],["initialize_variables","RSS::Maker::Base","RSS/Maker/Base.html#method-i-initialize_variables","()",""],["inject","Enumerable","Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["inject","REXML::Elements","REXML/Elements.html#method-i-inject","( xpath=nil, initial=nil )",""],["inject_into_list","Gem::AvailableSet","Gem/AvailableSet.html#method-i-inject_into_list","(dep_list)",""],["inline_html?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_html-3F","()","<p>Returns true if the element contains inline content that has a HTML media\ntype.\n"],["inline_html?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_html-3F","()",""],["inline_other?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_other-3F","()","<p>Returns true if the element contains inline content that has a MIME media\ntype.\n"],["inline_other?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other-3F","()",""],["inline_other_base64?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_base64-3F","()","<p>Returns true if the element contains inline content encoded in base64.\n"],["inline_other_base64?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other_base64-3F","()",""],["inline_other_text?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_text-3F","()","<p>Returns true if the element contains inline content that has a text media\ntype.\n"],["inline_other_text?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other_text-3F","()",""],["inline_other_xml?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_xml-3F","()","<p>Returns true if the element contains inline content that has a XML media\ntype.\n"],["inline_other_xml?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other_xml-3F","()",""],["inline_text?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_text-3F","()","<p>Returns true if the element contains inline content that has a text or HTML\nmedia type, or no media type …\n"],["inline_text?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_text-3F","()",""],["inline_xhtml?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-inline_xhtml-3F","()","<p>Returns true if the element contains inline content that has a XHTML media\ntype.\n"],["inline_xhtml?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_xhtml-3F","()",""],["inner_product","Vector","Vector.html#method-i-inner_product","(v)","<p>Returns the inner product of this vector with the other.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Vector</span>[<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">7</span>].<span class=\"ruby-identifier\">inner_product</span> <span class=\"ruby-constant\">Vector</span>[<span class=\"ruby-value\">10</span>,<span class=\"ruby-value\">1</span>]  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">47</span>\n</pre>\n"],["ino","File::Stat","File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">ino</span>   <span class=\"ruby-comment\">#=&gt; 1083669</span>\n</pre>\n"],["inplace_mode","ARGF","ARGF.html#method-i-inplace_mode","()","<p>Returns the file extension appended to the names of modified files under\nin-place edit mode. This value …\n"],["inplace_mode=","ARGF","ARGF.html#method-i-inplace_mode-3D","(p1)","<p>Sets the filename extension for in-place editing mode to the given String.\nEach file being edited has …\n"],["input","Gem::MockGemUi","Gem/MockGemUi.html#method-i-input","()",""],["input=","Readline","Readline.html#method-c-input-3D","(p1)","<p>Specifies a File object <code>input</code> that is input stream for\nReadline.readline method.\n"],["input=","Shell::AppendFile","Shell/AppendFile.html#method-i-input-3D","(filter)",""],["input=","Shell::AppendIO","Shell/AppendIO.html#method-i-input-3D","(filter)",""],["input=","Shell::Filter","Shell/Filter.html#method-i-input-3D","(filter)",""],["input=","Shell::SystemCommand","Shell/SystemCommand.html#method-i-input-3D","(inp)",""],["input?","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-input-3F","()","<p>Returns true if the parameter is input.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["insecure_method?","DRb::DRbServer","DRb/DRbServer.html#method-i-insecure_method-3F","(msg_id)","<p>Has a method been included in the list of insecure methods?\n"],["insert","Array","Array.html#method-i-insert","(*args)","<p>Inserts the given values before the element with the given\n<code>index</code>.\n<p>Negative indices count backwards from …\n"],["insert","IRB::JobManager","IRB/JobManager.html#method-i-insert","(irb)","<p>Add the given <code>irb</code> session to the jobs Array.\n"],["insert","String","String.html#method-i-insert","(p1, p2)","<p>Inserts <em>other_str</em> before the character at the given\n<em>index</em>, modifying <em>str</em>. Negative indices count from …\n"],["insert_after","REXML::Parent","REXML/Parent.html#method-i-insert_after","( child1, child2 )","<p>Inserts an child after another child @param child1 this is either an xpath\nor an Element.  If an Element …\n"],["insert_before","REXML::Parent","REXML/Parent.html#method-i-insert_before","( child1, child2 )","<p>Inserts an child before another child @param child1 this is either an xpath\nor an Element.  If an Element …\n"],["insert_output","Encoding::Converter","Encoding/Converter.html#method-i-insert_output","(p1)","<p>Inserts string into the encoding converter. The string will be converted to\nthe destination encoding …\n"],["insert_text","Readline","Readline.html#method-c-insert_text","(p1)","<p>Insert text into the line at the current cursor position.\n<p>See GNU Readline&#39;s rl_insert_text function. …\n"],["inspect","ARGF","ARGF.html#method-i-inspect","()",""],["inspect","Addrinfo","Addrinfo.html#method-i-inspect","()","<p>returns a string which shows addrinfo in human-readable form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["inspect","Array","Array.html#method-i-inspect","()","<p>Creates a string representation of <code>self</code>.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ].<span class=\"ruby-identifier\">to_s</span>     <span class=\"ruby-comment\">#=&gt; &quot;[\\&quot;a\\&quot;, \\&quot;b\\&quot;, \\&quot;c\\&quot;]&quot;</span>\n</pre>\n"],["inspect","BigDecimal","BigDecimal.html#method-i-inspect","()","<p>Returns debugging information about the value as a string of\ncomma-separated values in angle brackets …\n"],["inspect","CGI::Cookie","CGI/Cookie.html#method-i-inspect","()","<p>A summary of cookie string.\n"],["inspect","CSV","CSV.html#method-i-inspect","()","<p>Returns a simplified description of the key CSV attributes in an ASCII\ncompatible String.\n"],["inspect","CSV::Row","CSV/Row.html#method-i-inspect","()","<p>A summary of fields, by header, in an ASCII compatible String.\n"],["inspect","CSV::Table","CSV/Table.html#method-i-inspect","()","<p>Shows the mode and size of this table in a US-ASCII String.\n"],["inspect","Complex","Complex.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre>Complex(2).inspect                       #=&gt; &quot;(2+0i)&quot;\nComplex(&#39;-8/6&#39;).inspect ...</pre>\n"],["inspect","Date","Date.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">inspect</span>\n          <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Date: 2001-02-03 ...</span>\n</pre>\n"],["inspect","Digest::Instance","Digest/Instance.html#method-i-inspect","()","<p>Creates a printable version of the digest object.\n"],["inspect","Dir","Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","ENV","ENV.html#method-c-inspect","()","<p>Returns the contents of the environment as a String.\n"],["inspect","Encoding","Encoding.html#method-i-inspect","()","<p>Returns a string which represents the encoding for programmers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">inspect</span>       <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Encoding:UTF-8&gt;&quot; ...</span>\n</pre>\n"],["inspect","Encoding::Converter","Encoding/Converter.html#method-i-inspect","()","<p>Returns a printable version of <em>ec</em>\n\n<pre>ec = Encoding::Converter.new(&quot;iso-8859-1&quot;, &quot;utf-8&quot;)\nputs ec.inspect ...</pre>\n"],["inspect","Enumerator","Enumerator.html#method-i-inspect","()","<p>Creates a printable version of <em>e</em>.\n"],["inspect","Exception","Exception.html#method-i-inspect","()","<p>Return this exception&#39;s class name and message\n"],["inspect","FalseClass","FalseClass.html#method-i-inspect","()",""],["inspect","Fiddle::Pointer","Fiddle/Pointer.html#method-i-inspect","()","<p>Returns a string formatted with an easily readable representation of the\ninternal state of the pointer. …\n"],["inspect","File::Stat","File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/etc/passwd&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;File::Stat ...</span>\n</pre>\n"],["inspect","Float","Float.html#method-i-inspect","()",""],["inspect","Gem::Platform","Gem/Platform.html#method-i-inspect","()",""],["inspect","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Hash","Hash.html#method-i-inspect","()","<p>Return the contents of this hash as a string.\n\n<pre>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; =&gt; 300  } ...</pre>\n"],["inspect","IO","IO.html#method-i-inspect","()","<p>Return a string describing this IO object.\n"],["inspect","IPAddr","IPAddr.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the ipaddr.\n(“#&lt;IPAddr: family:address/mask&gt;”) …\n"],["inspect","IRB::Irb","IRB/Irb.html#method-i-inspect","()","<p>Outputs the local variables to this current session, including\n#signal_status and #context, using IRB::Locale …\n"],["inspect","IRB::JobManager","IRB/JobManager.html#method-i-inspect","()","<p>Outputs a list of jobs, see the irb command <code>irb_jobs</code>, or\n<code>jobs</code>.\n"],["inspect","Integer","Integer.html#method-i-inspect","(*args)",""],["inspect","Integer","Integer.html#method-i-inspect","(*args)",""],["inspect","MatchData","MatchData.html#method-i-inspect","()","<p>Returns a printable version of <em>mtch</em>.\n\n<pre>puts /.$/.match(&quot;foo&quot;).inspect\n#=&gt; #&lt;MatchData &quot;o&quot;&gt;\n\nputs /(.)(.)(.)/.match(&quot;foo&quot;).inspect ...</pre>\n"],["inspect","Matrix","Matrix.html#method-i-inspect","()","<p>Overrides Object#inspect\n"],["inspect","Method","Method.html#method-i-inspect","()","<p>Returns the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["inspect","Module","Module.html#method-i-inspect","()",""],["inspect","Net::HTTP","Net/HTTP.html#method-i-inspect","()",""],["inspect","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-inspect","()",""],["inspect","Net::HTTPResponse","Net/HTTPResponse.html#method-i-inspect","()",""],["inspect","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-i-inspect","()",""],["inspect","Net::POP3","Net/POP3.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::POPMail","Net/POPMail.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::SMTP","Net/SMTP.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","NilClass","NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of\n<em>obj</em>. The default <code>inspect</code> shows the object&#39;s …\n"],["inspect","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-inspect","()","<p>See Object#inspect.\n"],["inspect","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-inspect","()",""],["inspect","OpenSSL::Config","OpenSSL/Config.html#method-i-inspect","()","<p>String representation of this configuration object, including the class\nname and its sections.\n"],["inspect","OpenSSL::Engine","OpenSSL/Engine.html#method-i-inspect","()","<p>Pretty print this engine\n"],["inspect","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-inspect","()",""],["inspect","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-inspect","()",""],["inspect","OpenStruct","OpenStruct.html#method-i-inspect","()","<p>Returns a string containing a detailed summary of the keys and values.\n"],["inspect","OptionParser::ParseError","OptionParser/ParseError.html#method-i-inspect","()",""],["inspect","Proc","Proc.html#method-i-inspect","()",""],["inspect","Process::Status","Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Process::Status: pid 12861 exit 1&gt;&quot;</span>\n</pre>\n"],["inspect","REXML::Attribute","REXML/Attribute.html#method-i-inspect","()",""],["inspect","REXML::Element","REXML/Element.html#method-i-inspect","()",""],["inspect","REXML::Instruction","REXML/Instruction.html#method-i-inspect","()",""],["inspect","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-inspect","()",""],["inspect","REXML::Text","REXML/Text.html#method-i-inspect","()",""],["inspect","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-inspect","()",""],["inspect","REXML::Validation::Event","REXML/Validation/Event.html#method-i-inspect","()",""],["inspect","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-i-inspect","()",""],["inspect","REXML::Validation::Ref","REXML/Validation/Ref.html#method-i-inspect","()",""],["inspect","REXML::Validation::State","REXML/Validation/State.html#method-i-inspect","()",""],["inspect","REXML::XMLDecl","REXML/XMLDecl.html#method-i-inspect","()",""],["inspect","Range","Range.html#method-i-inspect","()","<p>Convert this range object to a printable form (using <code>inspect</code>\nto convert the begin and end objects).\n"],["inspect","Rational","Rational.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre>Rational(2).inspect      #=&gt; &quot;(2/1)&quot;\nRational(-8, 6).inspect ...</pre>\n"],["inspect","Regexp","Regexp.html#method-i-inspect","()","<p>Produce a nicely formatted string-version of <em>rxp</em>. Perhaps\nsurprisingly, <code>#inspect</code> actually produces the …\n"],["inspect","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-inspect","()","<p>Returns a human-readable string representation of this instruction\nsequence, including the #label and …\n"],["inspect","Set","Set.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the set.\n(“#&lt;Set: {element1, element2, …\n"],["inspect","Shell","Shell.html#method-i-inspect","()",""],["inspect","Shell::Filter","Shell/Filter.html#method-i-inspect","()",""],["inspect","Socket::AncillaryData","Socket/AncillaryData.html#method-i-inspect","()","<p>returns a string which shows ancillarydata in human-readable form.\n\n<pre>p Socket::AncillaryData.new(:INET6, ...</pre>\n"],["inspect","Socket::Ifaddr","Socket/Ifaddr.html#method-i-inspect","()","<p>Returns a string to show contents of <em>ifaddr</em>.\n"],["inspect","Socket::Option","Socket/Option.html#method-i-inspect","()","<p>Returns a string which shows sockopt in human-readable form.\n\n<pre>p Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, ...</pre>\n"],["inspect","String","String.html#method-i-inspect","()","<p>Returns a printable version of <em>str</em>, surrounded by quote marks,\nwith special characters escaped.\n\n<pre>str = ...</pre>\n"],["inspect","StringScanner","StringScanner.html#method-i-inspect","()","<p>Returns a string that represents the StringScanner object, showing:\n<p>the current position\n<p>the size of the …\n"],["inspect","Struct","Struct.html#method-i-inspect","()","<p>Returns a description of this struct as a string.\n"],["inspect","Symbol","Symbol.html#method-i-inspect","()","<p>Returns the representation of <em>sym</em> as a symbol literal.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;:fred&quot;</span>\n</pre>\n"],["inspect","Syslog","Syslog.html#method-c-inspect","()","<p>Returns an inspect() string summarizing the object state.\n"],["inspect","Thread","Thread.html#method-i-inspect","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["inspect","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-inspect","()","<p>Returns the same as calling <code>inspect</code> on the string\nrepresentation of #to_str\n"],["inspect","Time","Time.html#method-i-inspect","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n#strftime with the appropriate format string. …\n"],["inspect","TracePoint","TracePoint.html#method-i-inspect","()","<p>Return a string containing a human-readable TracePoint status.\n"],["inspect","TrueClass","TrueClass.html#method-i-inspect","()",""],["inspect","URI::Generic","URI/Generic.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-inspect","()",""],["inspect","UnboundMethod","UnboundMethod.html#method-i-inspect","()","<p>Returns the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["inspect","Vector","Vector.html#method-i-inspect","()","<p>Overrides Object#inspect\n"],["inspect","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-inspect","()","<p>Returns the method name with class name.\n"],["inspect","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-inspect","()","<p>Returns the parameter name with class name. If the parameter has default\nvalue, then returns name=value …\n"],["inspect","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-i-inspect","()","<p>Returns the OLE struct name and member name and the value of member\n<p>If COM server in VB.NET ComServer …\n"],["inspect","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-inspect","()","<p>Returns the type name with class name.\n\n<pre>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;)\nie.ole_type.inspect ...</pre>\n"],["inspect","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-inspect","()","<p>Returns the type library name with class name.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["inspect","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-inspect","()","<p>Returns the OLE variable name and the value with class name.\n"],["inspect","Zlib::GzipFile::Error","Zlib/GzipFile/Error.html#method-i-inspect","()","<p>Constructs a String of the GzipFile Error\n"],["inspect?","IRB::Context","IRB/Context.html#method-i-inspect-3F","()","<p>Whether #inspect_mode is set or not, see #inspect_mode= for more detail.\n"],["inspect_mode=","IRB::Context","IRB/Context.html#method-i-inspect_mode-3D","(opt)","<p>Specifies the inspect mode with <code>opt</code>:\n<p>true &mdash; display <code>inspect</code>\n<p>false &mdash; display <code>to_s</code>\n"],["inspect_sockaddr","Addrinfo","Addrinfo.html#method-i-inspect_sockaddr","()","<p>returns a string which shows the sockaddr in <em>addrinfo</em> with\nhuman-readable form.\n\n<pre>Addrinfo.tcp(&quot;localhost&quot;, ...</pre>\n"],["inspect_value","IRB::Inspector","IRB/Inspector.html#method-i-inspect_value","(v)","<p>Proc to call when the input is evaluated and output in irb.\n"],["install","FileUtils","FileUtils.html#method-c-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>If <code>src</code> is not same as <code>dest</code>, copies it and changes\nthe permission mode to <code>mode</code>.  If <code>dest</code> is a\ndirectory, …\n"],["install","FileUtils","FileUtils.html#method-i-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>If <code>src</code> is not same as <code>dest</code>, copies it and changes\nthe permission mode to <code>mode</code>.  If <code>dest</code> is a\ndirectory, …\n"],["install","Gem","Gem.html#method-c-install","(name, version = Gem::Requirement.default, *options)","<p>Top level install helper method. Allows you to install gems interactively:\n\n<pre>% irb\n&gt;&gt; Gem.install &quot;minitest&quot; ...</pre>\n"],["install","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-install","(dep_or_name, version = Gem::Requirement.default)","<p>Installs the gem <code>dep_or_name</code> and all its dependencies. \nReturns an Array of installed gem specifications. …\n"],["install","Gem::Installer","Gem/Installer.html#method-i-install","()","<p>Installs the gem and returns a loaded Gem::Specification for the installed\ngem.\n<p>The gem will be installed …\n"],["install","Gem::RequestSet","Gem/RequestSet.html#method-i-install","(options, &block)","<p>Installs gems for this RequestSet using the Gem::Installer\n<code>options</code>.\n<p>If a <code>block</code> is given an activation …\n"],["install","Gem::Resolver::GitSpecification","Gem/Resolver/GitSpecification.html#method-i-install","(options = {})","<p>Installing a git gem only involves building the extensions and generating\nthe executables.\n"],["install","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-install","(options = {})","<p>This is a null install as this specification is already installed.\n<code>options</code> are ignored.\n"],["install","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-install","(options = {})","<p>This is a null install as a locked specification is considered installed.\n<code>options</code> are ignored.\n"],["install","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-install","(options = {})","<p>Installs this specification using the Gem::Installer <code>options</code>. \nThe install method yields a Gem::Installer …\n"],["install","Gem::Resolver::VendorSpecification","Gem/Resolver/VendorSpecification.html#method-i-install","(options = {})","<p>This is a null install as this gem was unpacked into a directory.\n<code>options</code> are ignored.\n"],["install_accessor_base","RSS::BaseListener","RSS/BaseListener.html#method-c-install_accessor_base","(uri, tag_name, accessor_base)","<p>set the accessor for the uri, tag_name pair\n"],["install_acl","DRb","DRb.html#method-c-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_acl","DRb","DRb.html#method-i-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_alias_method","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>Installs alias methods for the default irb commands, see\n::install_extend_commands.\n"],["install_class_name","RSS::BaseListener","RSS/BaseListener.html#method-c-install_class_name","(uri, tag_name, class_name)","<p>record class_name for the supplied uri and tag_name\n"],["install_date_element","RSS::BaseModel","RSS/BaseModel.html#method-i-install_date_element","(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil)",""],["install_default_gems","Gem::TestCase","Gem/TestCase.html#method-i-install_default_gems","(*specs)","<p>Installs the provided default specs including writing the spec file\n"],["install_default_specs","Gem::TestCase","Gem/TestCase.html#method-i-install_default_specs","(*specs)","<p>Install the provided default specs\n"],["install_dublin_core","RSS::Maker::DublinCoreModel","RSS/Maker/DublinCoreModel.html#method-c-install_dublin_core","(klass)",""],["install_element","RSS::BaseModel","RSS/BaseModel.html#method-i-install_element","(name, postfix=\"\")",""],["install_executables","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_executables","(bin_dir)",""],["install_extend_commands","IRB::ContextExtender","IRB/ContextExtender.html#method-c-install_extend_commands","()","<p>Installs the default context extensions as irb commands:\n<p>Context#eval_history= &mdash; <code>irb/ext/history.rb</code>\n<p>Context#use_tracer= … &mdash; "],["install_extend_commands","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()","<p>Installs the default irb commands:\n<p>irb_current_working_workspace &mdash; Context#main\n<p>irb_change_workspace &mdash; Context#change_workspace …\n"],["install_file","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_file","(file, dest_dir)",""],["install_from_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-install_from_gemdeps","(options, &block)","<p>Installs from the gem dependencies files in the <code>:gemdeps</code>\noption in <code>options</code>, yielding to the <code>block</code> as …\n"],["install_gem","Gem::TestCase","Gem/TestCase.html#method-i-install_gem","(spec, options = {})","<p>Builds and installs the Gem::Specification <code>spec</code>\n"],["install_gem_user","Gem::TestCase","Gem/TestCase.html#method-i-install_gem_user","(spec)","<p>Builds and installs the Gem::Specification <code>spec</code> into the user\ndir\n"],["install_get_attribute","RSS::Element","RSS/Element.html#method-c-install_get_attribute","(name, uri, required=true, type=nil, disp_name=nil, element_name=nil)",""],["install_get_text_element","RSS::BaseListener","RSS/BaseListener.html#method-c-install_get_text_element","(uri, name, accessor_base)",""],["install_have_attribute_element","RSS::BaseModel","RSS/BaseModel.html#method-i-install_have_attribute_element","(tag_name, uri, occurs, name=nil, type=nil)",""],["install_have_child_element","RSS::BaseModel","RSS/BaseModel.html#method-i-install_have_child_element","(tag_name, uri, occurs, name=nil, type=nil)",""],["install_have_children_element","RSS::BaseModel","RSS/BaseModel.html#method-i-install_have_children_element","(tag_name, uri, occurs, name=nil, plural_name=nil)",""],["install_id_conv","DRb","DRb.html#method-i-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_id_conv","DRb","DRb.html#method-c-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_image_favicon","RSS::Maker::ImageFaviconModel","RSS/Maker/ImageFaviconModel.html#method-c-install_image_favicon","(klass)",""],["install_image_item","RSS::Maker::ImageItemModel","RSS/Maker/ImageItemModel.html#method-c-install_image_item","(klass)",""],["install_indices","Gem::Indexer","Gem/Indexer.html#method-i-install_indices","()","<p>Install generated indices into the destination directory.\n"],["install_into","Gem::RequestSet","Gem/RequestSet.html#method-i-install_into","(dir, force = true, options = {})",""],["install_lib","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_lib","(lib_dir)",""],["install_list","ACL","ACL.html#method-i-install_list","(list)","<p>Adds <code>list</code> of ACL entries to this ACL.\n"],["install_model","RSS::Element","RSS/Element.html#method-c-install_model","(tag, uri, occurs=nil, getter=nil, plural=false)",""],["install_must_call_validator","RSS::Element","RSS/Element.html#method-c-install_must_call_validator","(prefix, uri)",""],["install_ns","RSS::Element","RSS/Element.html#method-c-install_ns","(prefix, uri)",""],["install_rdoc","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_rdoc","()",""],["install_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["install_specs","Gem::TestCase","Gem/TestCase.html#method-i-install_specs","(*specs)","<p>Install the provided specs\n"],["install_system_commands","Shell","Shell.html#method-c-install_system_commands","(pre = \"sys_\")","<p>Convenience method for Shell::CommandProcessor.install_system_commands.\nDefines instance methods representing …\n"],["install_taxo_topic","RSS::Maker::TaxonomyTopicModel","RSS/Maker/TaxonomyTopicModel.html#method-c-install_taxo_topic","(klass)",""],["install_taxo_topics","RSS::Maker::TaxonomyTopicsModel","RSS/Maker/TaxonomyTopicsModel.html#method-c-install_taxo_topics","(klass)",""],["install_text_element","RSS::BaseModel","RSS/BaseModel.html#method-i-install_text_element","(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil)",""],["install_update_defaults_str","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_defaults_str","()","<p>Default options for the gem install command.\n"],["installable?","Gem::Platform","Gem/Platform.html#method-c-installable-3F","(spec)",""],["installable_platform?","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current\nplatform.\n"],["installable_platform?","Gem::Resolver::LocalSpecification","Gem/Resolver/LocalSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current\nplatform.\n"],["installable_platform?","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-installable_platform-3F","()","<p>Returns true if this specification is installable on this platform.\n"],["installation_satisfies_dependency?","Gem::Installer","Gem/Installer.html#method-i-installation_satisfies_dependency-3F","(dependency)","<p>True if the gems in the system satisfy <code>dependency</code>.\n"],["installed?","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-installed-3F","(name, req = Gem::Requirement.default)","<p>Check if gem <code>name</code> version <code>version</code> is installed.\n"],["installed?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-installed-3F","()","<p>True if the requested gem has already been installed.\n"],["installed_docs","RDoc::Servlet","RDoc/Servlet.html#method-i-installed_docs","()","<p>Returns an Array of installed documentation.\n<p>Each entry contains the documentation name (gem name, &#39;Ruby …\n"],["installed_specs","Gem::Installer","Gem/Installer.html#method-i-installed_specs","()","<p>Return an Array of Specifications contained within the gem_home we&#39;ll\nbe installing into.\n"],["installed_stubs","Gem::Specification","Gem/Specification.html#method-c-installed_stubs","(dirs, pattern)",""],["instance","CSV","CSV.html#method-c-instance","(data = $stdout, options = Hash.new)","<p>This method will return a CSV instance, just like CSV::new(), but the\ninstance will be cached and returned …\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-c-instance","()","<p>Return the authoritative instance of the command manager.\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-i-instance","()","<p>Returns self. Allows a CommandManager instance to stand in for the class\nitself.\n"],["instance","Syslog","Syslog.html#method-c-instance","()","<p>Returns self, for backward compatibility.\n"],["instance_attributes","RDoc::Context","RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_delegate","Forwardable","Forwardable.html#method-i-instance_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols. \nThese symbols correspond …\n"],["instance_eval","BasicObject","BasicObject.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver …\n"],["instance_exec","BasicObject","BasicObject.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>).\nIn order to set the context, the variable …\n"],["instance_method","Module","Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance\nmethod in <em>mod</em>.\n\n<pre>class Interpreter\n  def do_a() ...</pre>\n"],["instance_method_list","RDoc::Context","RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_methods","Module","Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of the public and protected instance\nmethods in the receiver.  ...\n"],["instance_methods","RDoc::Store","RDoc/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance\nmethods (not full name).\n"],["instance_of?","Object","Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given\nclass. See also <code>Object#kind_of?</code>.\n\n<pre>class A;     end\nclass ...</pre>\n"],["instance_variable_defined?","Object","Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in\n<em>obj</em>. String arguments are converted to symbols. …\n"],["instance_variable_get","Object","Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance\nvariable is not set. The <code>@</code> part …\n"],["instance_variable_set","Object","Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable named by <em>symbol</em> to the given object,\nthereby frustrating the efforts of the …\n"],["instance_variables","Object","Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that\nsimply defining an accessor does ...\n"],["instruction","REXML::StreamListener","REXML/StreamListener.html#method-i-instruction","(name, instruction)","<p>Called when an instruction is encountered.  EG: &lt;?xsl\nsheet=&#39;foo&#39;?&gt; @p name the instruction …\n"],["instruction","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-instruction","(name, content)",""],["instruction?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-instruction-3F","()","<p>Content: [ String text ]\n"],["instructions","REXML::Element","REXML/Element.html#method-i-instructions","()","<p>Get an array of all Instruction children. IMMUTABLE\n"],["int","Socket::AncillaryData","Socket/AncillaryData.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::AncillaryData object which contains a int as data.\n<p>The size and endian is dependent …\n"],["int","Socket::AncillaryData","Socket/AncillaryData.html#method-i-int","()","<p>Returns the data in <em>ancillarydata</em> as an int.\n<p>The size and endian is dependent on the host.\n\n<pre>ancdata = Socket::AncillaryData.int(:UNIX, ...</pre>\n"],["int","Socket::Option","Socket/Option.html#method-i-int","()","<p>Returns the data in <em>sockopt</em> as an int.\n<p>The size and endian is dependent on the platform.\n\n<pre>sockopt = Socket::Option.int(:INET, ...</pre>\n"],["int","Socket::Option","Socket/Option.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains an int as data.\n<p>The size and endian is dependent on …\n"],["int_from_prime_division","Prime","Prime.html#method-i-int_from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>Parameters\n<p>pd &mdash; Array of pairs of integers. The …\n"],["integer?","Integer","Integer.html#method-i-integer-3F","()","<p>Since <code>int</code> is already an Integer, this always returns\n<code>true</code>.\n"],["integer?","Integer","Integer.html#method-i-integer-3F","()","<p>Since <code>int</code> is already an Integer, this always returns\n<code>true</code>.\n"],["integer?","Numeric","Numeric.html#method-i-integer-3F","()","<p>Returns <code>true</code> if <code>num</code> is an Integer.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1.0</span>).<span class=\"ruby-identifier\">integer?</span> <span class=\"ruby-comment\">#=&gt; false</span>\n(<span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">integer?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["integer_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-integer_writer","(name, disp_name=name)",""],["intern","String","String.html#method-i-intern","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> ...\n"],["intern","Symbol","Symbol.html#method-i-intern","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["internal_class_of","ObjectSpace","ObjectSpace.html#method-c-internal_class_of","(p1)","<p>MRI specific feature &mdash; Return internal class of obj.\n\n<p>obj can be an instance of InternalObjectWrapper.\n<p>Note …\n"],["internal_encoding","ARGF","ARGF.html#method-i-internal_encoding","()","<p>Returns the internal encoding for strings read from <code>ARGF</code> as an\n<code>Encoding</code> object.\n<p>If <code>ARGF.set_encoding</code> has …\n"],["internal_encoding","IO","IO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns <code>nil</code>.\n"],["internal_encoding","StringIO","StringIO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns nil.\n"],["internal_object_id","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-internal_object_id","()","<p>Returns the Object#object_id of the internal object.\n"],["internal_super_of","ObjectSpace","ObjectSpace.html#method-c-internal_super_of","(p1)","<p>MRI specific feature &mdash; Return internal super class of cls (Class or Module).\n\n<p>obj can be an instance of  …\n"],["interrupt","DEBUGGER__","DEBUGGER__.html#method-c-interrupt","()",""],["interrupt","WEBrick","WEBrick.html#method-i-interrupt","(thread, id, exception)","<p>Interrupts the timeout handler <code>id</code> and raises\n<code>exception</code>\n"],["intersect?","Set","Set.html#method-i-intersect-3F","(set)","<p>Returns true if the set and the given set have at least one element in\ncommon.\n<p>e.g.:\n\n<pre>require &#39;set&#39;\nSet[1, ...</pre>\n"],["intersection","Set","Set.html#method-i-intersection","(enum)",""],["inv","Matrix","Matrix.html#method-i-inv","()",""],["invalidate_memoized_attributes","Gem::Specification","Gem/Specification.html#method-i-invalidate_memoized_attributes","()","<p>Expire memoized instance variables that can incorrectly generate, replace\nor miss files due changes in …\n"],["inverse","Matrix","Matrix.html#method-i-inverse","()","<p>Returns the inverse of the matrix.\n\n<pre>Matrix[[-1, -1], [0, -1]].inverse\n  =&gt; -1  1\n      0 -1</pre>\n"],["invert","DBM","DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding …\n"],["invert","ENV","ENV.html#method-c-invert","()","<p>Returns a new hash created by using environment variable names as values\nand values as names.\n"],["invert","GDBM","GDBM.html#method-i-invert","()","<p>Returns a hash created by using <em>gdbm</em>&#39;s values as keys, and the\nkeys as values.\n"],["invert","Hash","Hash.html#method-i-invert","()","<p>Returns a new hash created by using <em>hsh</em>&#39;s values as keys, and\nthe keys as values. If a key with the …\n"],["invert","SDBM","SDBM.html#method-i-invert","()","<p>Returns a Hash in which the key-value pairs have been inverted.\n<p>Example:\n\n<pre>require &#39;sdbm&#39;\n\nSDBM.open &#39;my_database&#39; ...</pre>\n"],["invert","YAML::DBM","YAML/DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding …\n"],["invert!","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-invert-21","()",""],["invkind","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-invkind","()","<p>Returns the method invoke kind.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...</pre>\n"],["invoke","Gem::Command","Gem/Command.html#method-i-invoke","(*args)","<p>Invoke the command with the given list of arguments.\n"],["invoke","WIN32OLE","WIN32OLE.html#method-i-invoke","(*args)","<p>Runs OLE method. The first argument specifies the method name of OLE\nAutomation object. The others specify …\n"],["invoke_kind","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-invoke_kind","()","<p>Returns the method kind string. The string is “UNKNOWN” or “PROPERTY” or\n“PROPERTY” …\n"],["invoke_service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_service","(name)",""],["invoke_service_command","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_service_command","(name, command)",""],["invoke_thread","DRb::ExtServManager","DRb/ExtServManager.html#method-i-invoke_thread","()",""],["invoke_with_build_args","Gem::Command","Gem/Command.html#method-i-invoke_with_build_args","(args, build_args)","<p>Invoke the command with the given list of normal arguments and additional\nbuild arguments.\n"],["ioctl","IO","IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query I/O\ndevices. Arguments and results …\n"],["ioflush","IO","IO.html#method-i-ioflush","()","<p>Flushes input and output buffers in kernel.\n<p>You must require &#39;io/console&#39; to use this method. …\n"],["ip","Addrinfo","Addrinfo.html#method-c-ip","(p1)","<p>returns an addrinfo object for IP address.\n<p>The port, socktype, protocol of the result is filled by zero. …\n"],["ip6_arpa","IPAddr","IPAddr.html#method-i-ip6_arpa","()","<p>Returns a string for DNS reverse lookup compatible with RFC3172.\n"],["ip6_int","IPAddr","IPAddr.html#method-i-ip6_int","()","<p>Returns a string for DNS reverse lookup compatible with RFC1886.\n"],["ip?","Addrinfo","Addrinfo.html#method-i-ip-3F","()","<p>returns true if addrinfo is internet (IPv4/IPv6) address. returns false\notherwise.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, ...</pre>\n"],["ip_address","Addrinfo","Addrinfo.html#method-i-ip_address","()","<p>Returns the IP address as a string.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_address    #=&gt; &quot;127.0.0.1&quot;\nAddrinfo.tcp(&quot;::1&quot;, ...</pre>\n"],["ip_address_list","Socket","Socket.html#method-c-ip_address_list","()","<p>Returns local IP addresses as an array.\n<p>The array contains Addrinfo objects.\n\n<pre>pp Socket.ip_address_list ...</pre>\n"],["ip_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-c-ip_pktinfo","(p1, p2, p3 = v3)","<p>Returns new ancillary data for IP_PKTINFO.\n<p>If spec_dst is not given, addr is used.\n<p>IP_PKTINFO is not standard. …\n"],["ip_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ip_pktinfo","()","<p>Extracts addr, ifindex and spec_dst from IP_PKTINFO ancillary data.\n<p>IP_PKTINFO is not standard.\n<p>Supported …\n"],["ip_port","Addrinfo","Addrinfo.html#method-i-ip_port","()","<p>Returns the port number as an integer.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_port    #=&gt; 80\nAddrinfo.tcp(&quot;::1&quot;, ...</pre>\n"],["ip_unpack","Addrinfo","Addrinfo.html#method-i-ip_unpack","()","<p>Returns the IP address and port number as 2-element array.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_unpack    ...</pre>\n"],["ipv4?","Addrinfo","Addrinfo.html#method-i-ipv4-3F","()","<p>returns true if addrinfo is IPv4 address. returns false otherwise.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ipv4? ...</pre>\n"],["ipv4?","IPAddr","IPAddr.html#method-i-ipv4-3F","()","<p>Returns true if the ipaddr is an IPv4 address.\n"],["ipv4_compat","IPAddr","IPAddr.html#method-i-ipv4_compat","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-compatible IPv6 address. …\n"],["ipv4_compat?","IPAddr","IPAddr.html#method-i-ipv4_compat-3F","()","<p>Returns true if the ipaddr is an IPv4-compatible IPv6 address.\n"],["ipv4_loopback?","Addrinfo","Addrinfo.html#method-i-ipv4_loopback-3F","()","<p>Returns true for IPv4 loopback address (127.0.0.0/8). It returns false\notherwise.\n"],["ipv4_mapped","IPAddr","IPAddr.html#method-i-ipv4_mapped","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-mapped IPv6 address.\n"],["ipv4_mapped?","IPAddr","IPAddr.html#method-i-ipv4_mapped-3F","()","<p>Returns true if the ipaddr is an IPv4-mapped IPv6 address.\n"],["ipv4_multicast?","Addrinfo","Addrinfo.html#method-i-ipv4_multicast-3F","()","<p>Returns true for IPv4 multicast address (224.0.0.0/4). It returns false\notherwise.\n"],["ipv4_multicast_loop","Socket::Option","Socket/Option.html#method-i-ipv4_multicast_loop","()","<p>Returns the ipv4_multicast_loop data in <em>sockopt</em> as an integer.\n\n<pre>sockopt = Socket::Option.ipv4_multicast_loop(10) ...</pre>\n"],["ipv4_multicast_loop","Socket::Option","Socket/Option.html#method-c-ipv4_multicast_loop","(p1)","<p>Creates a new Socket::Option object for IP_MULTICAST_LOOP.\n<p>The size is dependent on the platform.\n\n<pre>sockopt ...</pre>\n"],["ipv4_multicast_ttl","Socket::Option","Socket/Option.html#method-c-ipv4_multicast_ttl","(p1)","<p>Creates a new Socket::Option object for IP_MULTICAST_TTL.\n<p>The size is dependent on the platform.\n\n<pre>p Socket::Option.ipv4_multicast_ttl(10) ...</pre>\n"],["ipv4_multicast_ttl","Socket::Option","Socket/Option.html#method-i-ipv4_multicast_ttl","()","<p>Returns the ipv4_multicast_ttl data in <em>sockopt</em> as an integer.\n\n<pre>sockopt = Socket::Option.ipv4_multicast_ttl(10) ...</pre>\n"],["ipv4_private?","Addrinfo","Addrinfo.html#method-i-ipv4_private-3F","()","<p>Returns true for IPv4 private address (10.0.0.0/8, 172.16.0.0/12,\n192.168.0.0/16). It returns false otherwise. …\n"],["ipv6?","Addrinfo","Addrinfo.html#method-i-ipv6-3F","()","<p>returns true if addrinfo is IPv6 address. returns false otherwise.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ipv6? ...</pre>\n"],["ipv6?","IPAddr","IPAddr.html#method-i-ipv6-3F","()","<p>Returns true if the ipaddr is an IPv6 address.\n"],["ipv6_linklocal?","Addrinfo","Addrinfo.html#method-i-ipv6_linklocal-3F","()","<p>Returns true for IPv6 link local address (ff80::/10). It returns false\notherwise.\n"],["ipv6_loopback?","Addrinfo","Addrinfo.html#method-i-ipv6_loopback-3F","()","<p>Returns true for IPv6 loopback address (::1). It returns false otherwise.\n"],["ipv6_mc_global?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_global-3F","()","<p>Returns true for IPv6 multicast global scope address. It returns false\notherwise.\n"],["ipv6_mc_linklocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_linklocal-3F","()","<p>Returns true for IPv6 multicast link-local scope address. It returns false\notherwise.\n"],["ipv6_mc_nodelocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_nodelocal-3F","()","<p>Returns true for IPv6 multicast node-local scope address. It returns false\notherwise.\n"],["ipv6_mc_orglocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_orglocal-3F","()","<p>Returns true for IPv6 multicast organization-local scope address. It\nreturns false otherwise.\n"],["ipv6_mc_sitelocal?","Addrinfo","Addrinfo.html#method-i-ipv6_mc_sitelocal-3F","()","<p>Returns true for IPv6 multicast site-local scope address. It returns false\notherwise.\n"],["ipv6_multicast?","Addrinfo","Addrinfo.html#method-i-ipv6_multicast-3F","()","<p>Returns true for IPv6 multicast address (ff00::/8). It returns false\notherwise.\n"],["ipv6_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ipv6_pktinfo","()","<p>Extracts addr and ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre>addr = ...</pre>\n"],["ipv6_pktinfo","Socket::AncillaryData","Socket/AncillaryData.html#method-c-ipv6_pktinfo","(p1, p2)","<p>Returns new ancillary data for IPV6_PKTINFO.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre>addr = Addrinfo.ip(&quot;::1&quot;) ...</pre>\n"],["ipv6_pktinfo_addr","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ipv6_pktinfo_addr","()","<p>Extracts addr from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre>addr = Addrinfo.ip(&quot;::1&quot;) ...</pre>\n"],["ipv6_pktinfo_ifindex","Socket::AncillaryData","Socket/AncillaryData.html#method-i-ipv6_pktinfo_ifindex","()","<p>Extracts ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre>addr = Addrinfo.ip(&quot;::1&quot;) ...</pre>\n"],["ipv6_sitelocal?","Addrinfo","Addrinfo.html#method-i-ipv6_sitelocal-3F","()","<p>Returns true for IPv6 site local address (ffc0::/10). It returns false\notherwise.\n"],["ipv6_to_ipv4","Addrinfo","Addrinfo.html#method-i-ipv6_to_ipv4","()","<p>Returns IPv4 address of IPv4 mapped/compatible IPv6 address. It returns nil\nif <code>self</code> is not IPv4 mapped/compatible …\n"],["ipv6_unique_local?","Addrinfo","Addrinfo.html#method-i-ipv6_unique_local-3F","()","<p>Returns true for IPv6 unique local address (fc00::/7, RFC4193). It returns\nfalse otherwise.\n"],["ipv6_unspecified?","Addrinfo","Addrinfo.html#method-i-ipv6_unspecified-3F","()","<p>Returns true for IPv6 unspecified address (::). It returns false otherwise.\n"],["ipv6_v4compat?","Addrinfo","Addrinfo.html#method-i-ipv6_v4compat-3F","()","<p>Returns true for IPv4-compatible IPv6 address (::/80). It returns false\notherwise.\n"],["ipv6_v4mapped?","Addrinfo","Addrinfo.html#method-i-ipv6_v4mapped-3F","()","<p>Returns true for IPv4-mapped IPv6 address (::ffff:0:0/80). It returns false\notherwise.\n"],["ipv6only!","Socket","Socket.html#method-i-ipv6only-21","()","<p>enable the socket option IPV6_V6ONLY if IPV6_V6ONLY is available.\n"],["irb","IRB","IRB.html#method-c-irb","(file = nil, *main)","<p>Creates a new IRB session, see Irb.new.\n<p>The optional <code>file</code> argument is given to Context.new, along with\n…\n"],["irb","IRB::JobManager","IRB/JobManager.html#method-i-irb","(key)","<p>Returns the irb session for the given <code>key</code> object, see #search\nfor more information.\n"],["irb_abort","IRB","IRB.html#method-c-irb_abort","(irb, exception = Abort)","<p>Aborts then interrupts irb.\n<p>Will raise an Abort exception, or the given <code>exception</code>.\n"],["irb_at_exit","IRB","IRB.html#method-c-irb_at_exit","()","<p>Calls each event hook of IRB.conf when the current session quits.\n"],["irb_context","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_context","()","<p>Displays current configuration.\n<p>Modifing the configuration is achieved by sending a message to IRB.conf …\n"],["irb_exit","IRB","IRB.html#method-c-irb_exit","(irb, ret)","<p>Quits irb\n"],["irb_exit","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)","<p>Quits the current irb context\n<p><code>ret</code> is the optional signal or message to send to Context#exit\n<p>Same as <code>IRB.CurrentContext.exit</code> …\n"],["irb_level","IRB::Context","IRB/Context.html#method-i-irb_level","()","<p>Size of the current WorkSpace stack\n"],["irb_load","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)","<p>Loads the given file similarly to Kernel#load, see IrbLoader#irb_load\n"],["irb_load","IRB::IrbLoader","IRB/IrbLoader.html#method-i-irb_load","(fn, priv = nil)","<p>Loads the given file similarly to Kernel#load\n"],["irb_require","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)","<p>Loads the given file similarly to Kernel#require\n"],["isEqual","Jacobian","Jacobian.html#method-i-isEqual","(a,b,zero=0.0,e=1.0e-8)","<p>Determines the equality of two numbers by comparing to zero, or using the\nepsilon value\n"],["is_a?","Object","Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["is_alias_for","RDoc::Constant","RDoc/Constant.html#method-i-is_alias_for","()","<p>The module or class this constant is an alias for\n"],["is_reachable_from?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-is_reachable_from-3F","(other)",""],["is_version_1_2?","Net::HTTP","Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["isatty","IO","IO.html#method-i-isatty","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre>File.new(&quot;testfile&quot;).isatty ...</pre>\n"],["isatty","StringIO","StringIO.html#method-i-isatty","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["isdst","Time","Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre># CST6CDT:\n  Time.local(2000, ...</pre>\n"],["iseuc","Kconv","Kconv.html#method-i-iseuc","(str)","<p>Returns whether input encoding is EUC-JP or not.\n<p><strong>Note</strong> don&#39;t expect this return value is MatchData …\n"],["iseuc","Kconv","Kconv.html#method-c-iseuc","(str)","<p>Returns whether input encoding is EUC-JP or not.\n<p><strong>Note</strong> don&#39;t expect this return value is MatchData …\n"],["iseuc","String","String.html#method-i-iseuc","()","<p>Returns whether <code>self</code>&#39;s encoding is EUC-JP or not.\n"],["isjis","Kconv","Kconv.html#method-i-isjis","(str)","<p>Returns whether input encoding is ISO-2022-JP or not.\n"],["isjis","Kconv","Kconv.html#method-c-isjis","(str)","<p>Returns whether input encoding is ISO-2022-JP or not.\n"],["isjis","String","String.html#method-i-isjis","()","<p>Returns whether <code>self</code>&#39;s encoding is ISO-2022-JP or not.\n"],["iso8601","Date","Date.html#method-i-iso8601","()","<p>This method is equivalent to strftime(&#39;%F&#39;).\n"],["iso8601","Date","Date.html#method-c-iso8601","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical ISO 8601 formats.\n\n<pre>Date.iso8601(&#39;2001-02-03&#39;) ...</pre>\n"],["iso8601","DateTime","DateTime.html#method-i-iso8601","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T&#39;).  The optional\nargument <code>n</code> is the number of digits …\n"],["iso8601","DateTime","DateTime.html#method-c-iso8601","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical ISO 8601 formats.\n\n<pre>DateTime.iso8601(&#39;2001-02-03T04:05:06+07:00&#39;) ...</pre>\n"],["iso8601","Time","Time.html#method-i-iso8601","(fraction_digits=0)",""],["iso8601","Time","Time.html#method-c-iso8601","(date)",""],["issetugid","Process::Sys","Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an\nexecve(2) system call which had either of the …\n"],["issjis","Kconv","Kconv.html#method-i-issjis","(str)","<p>Returns whether input encoding is Shift_JIS or not.\n"],["issjis","Kconv","Kconv.html#method-c-issjis","(str)","<p>Returns whether input encoding is Shift_JIS or not.\n"],["issjis","String","String.html#method-i-issjis","()","<p>Returns whether <code>self</code>&#39;s encoding is Shift_JIS or not.\n"],["issuer","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-issuer","()",""],["issuer=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-issuer-3D","(p1)",""],["issuer=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-issuer-3D","(p1)",""],["issuer_certificate=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-issuer_certificate-3D","(p1)",""],["issuer_key_hash","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-issuer_key_hash","()","<p>Returns the issuerKeyHash of this certificate ID, the hash of the\nissuer&#39;s public key.\n"],["issuer_name_hash","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-issuer_name_hash","()","<p>Returns the issuerNameHash of this certificate ID, the hash of the\nissuer&#39;s distinguished name calculated …\n"],["issuer_of","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-issuer_of","(certificate)","<p>Returns the issuer certificate of the given <code>certificate</code> if it\nexists in the trust directory.\n"],["isutf8","Kconv","Kconv.html#method-i-isutf8","(str)","<p>Returns whether input encoding is UTF-8 or not.\n"],["isutf8","Kconv","Kconv.html#method-c-isutf8","(str)","<p>Returns whether input encoding is UTF-8 or not.\n"],["isutf8","String","String.html#method-i-isutf8","()","<p>Returns whether <code>self</code>&#39;s encoding is UTF-8 or not.\n"],["italy","Date","Date.html#method-i-italy","()","<p>This method is equivalent to new_start(Date::ITALY).\n"],["item","RDoc::TestCase","RDoc/TestCase.html#method-i-item","(label = nil, *parts)","<p>Shortcut for RDoc::Markup::ListItem.new with <code>label</code> and\n<code>parts</code>\n"],["items","RSS::Atom::Entry","RSS/Atom/Entry.html#method-i-items","()","<p>Returns the Entry in an array.\n"],["items","RSS::Rss","RSS/Rss.html#method-i-items","()",""],["iteration!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-iteration-21","()",""],["iterator?","Kernel","Kernel.html#method-i-iterator-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["itself","Object","Object.html#method-i-itself","()","<p>Returns <em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&#39;my string&#39;</span> <span class=\"ruby-comment\">#=&gt; &quot;my string&quot;</span>\n<span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">itself</span>.<span class=\"ruby-identifier\">object_id</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">object_id</span> <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["iv=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-iv-3D","(p1)","<p>Sets the cipher IV. Please note that since you should never be using ECB\nmode, an IV is always explicitly …\n"],["iv_len","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-iv_len","()","<p>Returns the expected length in bytes for an IV for this Cipher.\n"],["iv_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-iv_len-3D","(p1)","<p>Sets the IV/nonce length of the Cipher. Normally block ciphers don&#39;t\nallow changing the IV length, …\n"],["j","Kernel","Kernel.html#method-i-j","(*objs)","<p>Outputs <em>objs</em> to STDOUT as JSON strings in the shortest form, that\nis in one line.\n"],["jacobian","Jacobian","Jacobian.html#method-i-jacobian","(f,fx,x)","<p>Computes the Jacobian of f at x. fx is the value of f at x.\n"],["jd","Date","Date.html#method-i-jd","()","<p>Returns the Julian day number.  This is a whole number, which is adjusted\nby the offset as the local …\n"],["jd","Date","Date.html#method-c-jd","(p1 = v1, p2 = v2)","<p>Creates a date object denoting the given chronological Julian day number.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">jd</span>(<span class=\"ruby-value\">2451944</span>)          <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["jd","DateTime","DateTime.html#method-c-jd","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>Creates a DateTime object denoting the given chronological Julian day\nnumber.\n\n<pre>DateTime.jd(2451944)    ...</pre>\n"],["jisx0301","Date","Date.html#method-i-jisx0301","()","<p>Returns a string in a JIS X 0301 format.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">jisx0301</span>       <span class=\"ruby-comment\">#=&gt; &quot;H13.02.03&quot;</span>\n</pre>\n"],["jisx0301","Date","Date.html#method-c-jisx0301","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical JIS X 0301 formats.\n\n<pre>Date.jisx0301(&#39;H13.02.03&#39;) ...</pre>\n"],["jisx0301","DateTime","DateTime.html#method-c-jisx0301","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical JIS X 0301 formats. …\n"],["jisx0301","DateTime","DateTime.html#method-i-jisx0301","(*args)","<p>Returns a string in a JIS X 0301 format.  The optional argument n is length\nof fractional seconds.\n\n<pre>DateTime.parse(&#39;2001-02-03T04:05:06.123456789+07:00&#39;).jisx0301(9) ...</pre>\n"],["jj","Kernel","Kernel.html#method-i-jj","(*objs)","<p>Outputs <em>objs</em> to STDOUT as JSON strings in a pretty format, with\nindentation and over many lines.\n"],["jobs","Shell","Shell.html#method-i-jobs","()","<p>Returns a list of scheduled jobs.\n"],["jobs","Shell::ProcessController","Shell/ProcessController.html#method-i-jobs","()",""],["jobs_exist?","Shell::ProcessController","Shell/ProcessController.html#method-i-jobs_exist-3F","()",""],["join","Array","Array.html#method-i-join","(p1 = v1)","<p>Returns a string created by converting each element of the array to a\nstring, separated by the given …\n"],["join","File","File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using\n<code>File::SEPARATOR</code>.\n\n<pre>File.join(&quot;usr&quot;, &quot;mail&quot;, &quot;gumby&quot;) ...</pre>\n"],["join","Pathname","Pathname.html#method-i-join","(*args)","<p>Joins the given pathnames onto <code>self</code> to create a new Pathname\nobject.\n\n<pre>path0 = Pathname.new(&quot;/usr&quot;)     ...</pre>\n"],["join","Shellwords","Shellwords.html#method-c-join","(array)",""],["join","Thread","Thread.html#method-i-join","(p1 = v1)","<p>The calling thread will suspend execution and run this <code>thr</code>.\n<p>Does not return until <code>thr</code> exits or until the …\n"],["join","ThreadsWait","ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","ThreadsWait","ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","URI","URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre>URI::join(str[, str, ...])</pre>\n<p>Args\n"],["join","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p>uris &mdash; an Array of Strings\n\n<p>Description\n"],["join_nowait","ThreadsWait","ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["join_nowait","ThreadsWait","ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["json_creatable?","Class","Class.html#method-i-json_creatable-3F","()","<p>Returns true if this class can be used to create an instance from a\nserialised JSON string. The class …\n"],["json_creatable?","JSON::GenericObject","JSON/GenericObject.html#method-c-json_creatable-3F","()",""],["json_create","BigDecimal","BigDecimal.html#method-c-json_create","(object)","<p>Import a JSON Marshalled object.\n<p>method used for JSON marshalling support.\n"],["json_create","Complex","Complex.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Real value <code>r</code>, imaginary\nvalue <code>i</code>, to a Complex object.\n"],["json_create","Date","Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> to …\n"],["json_create","DateTime","DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset <code>of</code> …\n"],["json_create","Exception","Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message\n<code>m</code> and backtrace <code>b</code> serialized …\n"],["json_create","JSON::GenericObject","JSON/GenericObject.html#method-c-json_create","(data)",""],["json_create","OpenStruct","OpenStruct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>t</code> serialized by <code>to_json</code>.\n"],["json_create","Range","Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments\n<code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","Rational.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting numerator value <code>n</code>,\ndenominator value <code>d</code>, to a Rational object. …\n"],["json_create","Regexp","Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source\n<code>s</code> (Regexp or String) and options …\n"],["json_create","Struct","Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored\nin the object to a Symbol\n"],["json_create","Time","Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["julian","Date","Date.html#method-i-julian","()","<p>This method is equivalent to new_start(Date::JULIAN).\n"],["julian?","Date","Date.html#method-i-julian-3F","()","<p>Returns true if the date is before the day of calendar reform.\n\n<pre>Date.new(1582,10,15).julian?           ...</pre>\n"],["julian_leap?","Date","Date.html#method-c-julian_leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Julian\ncalendar.\n\n<pre>Date.julian_leap?(1900) ...</pre>\n"],["kconv","Kconv","Kconv.html#method-i-kconv","(str, to_enc, from_enc=nil)","<p>Convert <code>str</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["kconv","Kconv","Kconv.html#method-c-kconv","(str, to_enc, from_enc=nil)","<p>Convert <code>str</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["kconv","String","String.html#method-i-kconv","(to_enc, from_enc=nil)","<p>Convert <code>self</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["keep_alive?","Net::HTTP","Net/HTTP.html#method-i-keep_alive-3F","(req, res)",""],["keep_alive?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-keep_alive-3F","()","<p>Should the connection this request was made on be kept alive?\n"],["keep_alive?","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-keep_alive-3F","()","<p>Will this response&#39;s connection be kept alive?\n"],["keep_clean","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-keep_clean","()","<p>Removes dead tuples.\n"],["keep_if","Array","Array.html#method-i-keep_if","()","<p>Deletes every element of <code>self</code> for which the given block\nevaluates to <code>false</code>.\n<p>See also Array#select!\n<p>If no …\n"],["keep_if","ENV","ENV.html#method-c-keep_if","()","<p>Deletes every environment variable where the block evaluates to\n<code>false</code>.\n<p>Returns an enumerator if no block …\n"],["keep_if","Hash","Hash.html#method-i-keep_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to false.\n<p>If no block is given, an enumerator …\n"],["keep_if","Set","Set.html#method-i-keep_if","()","<p>Deletes every element of the set for which block evaluates to false, and\nreturns self. Returns an enumerator …\n"],["key","DBM","DBM.html#method-i-key","(p1)","<p>Returns the key for the specified value.\n"],["key","ENV","ENV.html#method-c-key","(p1)","<p>Returns the name of the environment variable with <code>value</code>.  If\nthe value is not found <code>nil</code> is returned. …\n"],["key","GDBM","GDBM.html#method-i-key","(p1)","<p>Returns the <em>key</em> for a given <em>value</em>. If several keys may\nmap to the same value, the key that is found first …\n"],["key","Hash","Hash.html#method-i-key","(p1)","<p>Returns the key of an occurrence of a given value. If the value is not\nfound, returns <code>nil</code>.\n\n<pre>h = { &quot;a&quot; =&gt; ...</pre>\n"],["key","SDBM","SDBM.html#method-i-key","(p1)","<p>Returns the <code>key</code> associated with the given <code>value</code>.\nIf more than one <code>key</code> corresponds to the given\n<code>value</code> …\n"],["key","YAML::DBM","YAML/DBM.html#method-i-key","( keystr )","<p>Returns the key for the specified value.\n"],["key=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-key-3D","(p1)","<p>Sets the cipher key. To generate a key, you should either use a secure\nrandom byte string or, if the …\n"],["key?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-key-3F","(*args)",""],["key?","CSV::Row","CSV/Row.html#method-i-key-3F","(header)",""],["key?","DBM","DBM.html#method-i-key-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["key?","ENV","ENV.html#method-c-key-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["key?","GDBM","GDBM.html#method-i-key-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["key?","Hash","Hash.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["key?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["key?","SDBM","SDBM.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["key?","Thread","Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nfiber-local variable.\n\n<pre>me = Thread.current\nme[:oliver] ...</pre>\n"],["key_len","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-key_len","()","<p>Returns the key length in bytes of the Cipher.\n"],["key_len=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-key_len-3D","(p1)","<p>Sets the key length of the cipher.  If the cipher is a fixed length cipher\nthen attempting to set the …\n"],["key_path","Gem::TestCase","Gem/TestCase.html#method-c-key_path","(key_name)","<p>Returns the path to the key named <code>key_name</code> from\n<code>test/rubygems</code>\n"],["keys","CGI::QueryExtension","CGI/QueryExtension.html#method-i-keys","(*args)","<p>Return all query parameter names as an array of String.\n"],["keys","DBM","DBM.html#method-i-keys","()","<p>Returns an array of all the string keys in the database.\n"],["keys","ENV","ENV.html#method-c-keys","()","<p>Returns every environment variable name in an Array\n"],["keys","GDBM","GDBM.html#method-i-keys","()","<p>Returns an array of all keys of this database.\n"],["keys","Hash","Hash.html#method-i-keys","()","<p>Returns a new array populated with the keys from this hash. See also\n<code>Hash#values</code>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</pre>\n"],["keys","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-keys","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["keys","SDBM","SDBM.html#method-i-keys","()","<p>Returns a new Array containing the keys in the database.\n"],["keys","Thread","Thread.html#method-i-keys","()","<p>Returns an array of the names of the fiber-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current[:cat] ...</pre>\n"],["keys_with_inspector","IRB::Inspector","IRB/Inspector.html#method-c-keys_with_inspector","(inspector)","<p>Determines the inspector to use where <code>inspector</code> is one of the\nkeys passed during inspector definition. …\n"],["kill","IRB::JobManager","IRB/JobManager.html#method-i-kill","(*keys)","<p>Terminates the irb sessions specified by the given <code>keys</code>.\n<p>Raises an IrbAlreadyDead exception if one of …\n"],["kill","Process","Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s) if <em>pid</em> is\npositive. If <em>pid</em> is zero <em>signal</em> is sent ...\n"],["kill","Shell","Shell.html#method-i-kill","(sig, command)","<p>Sends the given <code>signal</code> to the given <code>job</code>\n"],["kill","Shell::SystemCommand","Shell/SystemCommand.html#method-i-kill","(sig)",""],["kill","Thread","Thread.html#method-c-kill","(p1)","<p>Causes the given <code>thread</code> to exit, see also Thread::exit.\n\n<pre>count = 0\na = Thread.new { loop { count += 1 } ...</pre>\n"],["kill","Thread","Thread.html#method-i-kill","()","<p>Terminates <code>thr</code> and schedules another thread to be run.\n<p>If this thread is already marked to be killed, …\n"],["kill_job","Shell::ProcessController","Shell/ProcessController.html#method-i-kill_job","(sig, command)","<p>kill a job\n"],["kind_of?","Object","Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["known_class?","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-known_class-3F","(target_class, class_name)",""],["l","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-l","()",""],["label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-label","()","<p>Returns the label of this instruction sequence.\n<p><code>&lt;main&gt;</code> if it&#39;s at the top level,\n<code>&lt;compiled&gt;</code> …\n"],["label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-label","()","<p>Returns the label of this frame.\n<p>Usually consists of method, class, module, etc names with decoration. …\n"],["lambda","Kernel","Kernel.html#method-i-lambda","()","<p>Equivalent to <code>Proc.new</code>, except the resulting Proc objects\ncheck the number of parameters passed when …\n"],["lambda?","Proc","Proc.html#method-i-lambda-3F","()","<p>Returns <code>true</code> for a Proc object for which argument handling is\nrigid. Such procs are typically generated …\n"],["lang","REXML::Functions","REXML/Functions.html#method-c-lang","( language )","<p>UNTESTED\n"],["laplace_expansion","Matrix","Matrix.html#method-i-laplace_expansion","(row: nil, column: nil)","<p>Returns the Laplace expansion along given row or column.\n\n<pre>Matrix[[7,6], [3,9]].laplace_expansion(column: ...</pre>\n"],["last","Array","Array.html#method-i-last","(*args)","<p>Returns the last element(s) of <code>self</code>. If the array is empty,\nthe first form returns <code>nil</code>.\n<p>See also Array#first …\n"],["last","REXML::Functions","REXML/Functions.html#method-c-last","( )","<p>Returns the last node of the given list of nodes.\n"],["last","Range","Range.html#method-i-last","(*args)","<p>Returns the last object in the range, or an array of the last\n<code>n</code> elements.\n<p>Note that with no arguments …\n"],["lastBuildDate=","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-lastBuildDate-3D","(_date)",""],["last_error","Encoding::Converter","Encoding/Converter.html#method-i-last_error","()","<p>Returns an exception object for the last conversion. Returns nil if the\nlast conversion did not produce …\n"],["last_error","Fiddle","Fiddle.html#method-c-last_error","()","<p>Returns the last <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["last_error=","Fiddle","Fiddle.html#method-c-last_error-3D","(error)","<p>Sets the last <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["last_match","Regexp","Regexp.html#method-c-last_match","(p1 = v1)","<p>The first form returns the MatchData object generated by the last\nsuccessful pattern match.  Equivalent …\n"],["last_modified","OpenURI::Meta","OpenURI/Meta.html#method-i-last_modified","()","<p>returns a Time that represents the Last-Modified field.\n"],["last_modified","RDoc::TopLevel","RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["last_update","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-last_update","()",""],["last_update=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-last_update-3D","(p1)",""],["latest_gc_info","GC","GC.html#method-c-latest_gc_info","(p1 = v1)","<p>Returns information about the most recent garbage collection.\n"],["latest_rubygems_version","Gem","Gem.html#method-c-latest_rubygems_version","()","<p>Returns the latest release version of RubyGems.\n"],["latest_spec_for","Gem","Gem.html#method-c-latest_spec_for","(name)","<p>Returns the latest release-version specification for the gem\n<code>name</code>.\n"],["latest_specs","Gem::Server","Gem/Server.html#method-i-latest_specs","(req, res)",""],["latest_specs","Gem::Specification","Gem/Specification.html#method-c-latest_specs","(prerelease = false)","<p>Return the latest specs, optionally including prerelease specs if\n<code>prerelease</code> is true.\n"],["latest_version?","Gem::Dependency","Gem/Dependency.html#method-i-latest_version-3F","()","<p>Is this dependency simply asking for the latest version of a gem?\n"],["latest_version_for","Gem","Gem.html#method-c-latest_version_for","(name)","<p>Returns the version of the latest release-version of gem <code>name</code>\n"],["launch","Gem::Server","Gem/Server.html#method-i-launch","()",""],["lazy","Enumerable","Enumerable.html#method-i-lazy","()","<p>Returns a lazy enumerator, whose methods map/collect,\nflat_map/collect_concat, select/find_all, reject, …\n"],["lazy","Enumerator::Lazy","Enumerator/Lazy.html#method-i-lazy","()",""],["lchmod","File","File.html#method-c-lchmod","(*args)","<p>Equivalent to <code>File::chmod</code>, but does not follow symbolic links\n(so it will change the permissions associated …\n"],["lchmod","Pathname","Pathname.html#method-i-lchmod","(p1)","<p>Same as Pathname.chmod, but does not follow symbolic links.\n<p>See File.lchmod.\n"],["lchown","File","File.html#method-c-lchown","(*args)","<p>Equivalent to <code>File::chown</code>, but does not follow symbolic links\n(so it will change the owner associated …\n"],["lchown","Pathname","Pathname.html#method-i-lchown","(p1, p2)","<p>Same as Pathname.chown, but does not follow symbolic links.\n<p>See File.lchown.\n"],["lcm","Integer","Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple (always positive).  0.lcm(x) and x.lcm(0)\nreturn zero.\n\n<pre>2.lcm(2)     ...</pre>\n"],["lcm","Integer","Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple (always positive).  0.lcm(x) and x.lcm(0)\nreturn zero.\n\n<pre>2.lcm(2)     ...</pre>\n"],["ld","Date","Date.html#method-i-ld","()","<p>Returns the Lilian day number.  This is a whole number, which is adjusted\nby the offset as the local …\n"],["ldexp","Math","Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <code>fraction</code>*(2**<code>exponent</code>).\n\n<pre>fraction, exponent = Math.frexp(1234)\nMath.ldexp(fraction, ...</pre>\n"],["leap?","Date","Date.html#method-c-leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Gregorian\ncalendar.\n\n<pre>Date.gregorian_leap?(1900) ...</pre>\n"],["leap?","Date","Date.html#method-i-leap-3F","()","<p>Returns true if the year is a leap year.\n\n<pre>Date.new(2000).leap?      #=&gt; true\nDate.new(2001).leap?      ...</pre>\n"],["legacy_platform","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-legacy_platform","()","<p>Creates a legacy platform spec with the name &#39;pl&#39; and version 1\n"],["length","Array","Array.html#method-i-length","()","<p>Returns the number of elements in <code>self</code>. May be zero.\n\n<pre>[ 1, 2, 3, 4, 5 ].length   #=&gt; 5\n[].length       ...</pre>\n"],["length","DBM","DBM.html#method-i-length","()","<p>Returns the number of entries in the database.\n"],["length","Digest::Instance","Digest/Instance.html#method-i-length","()","<p>Returns digest_obj.digest_length().\n"],["length","ENV","ENV.html#method-c-length","()","<p>Returns the number of environment variables.\n"],["length","GDBM","GDBM.html#method-i-length","()","<p>Returns the number of key-value pairs in this database.\n"],["length","Hash","Hash.html#method-i-length","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...</pre>\n"],["length","MatchData","MatchData.html#method-i-length","()","<p>Returns the number of elements in the match array.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</pre>\n"],["length","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-length","()",""],["length","Queue","Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","REXML::Attributes","REXML/Attributes.html#method-i-length","()","<p>Returns the number of attributes the owning Element contains.\n\n<pre>doc = Document &quot;&lt;a x=&#39;1&#39; y=&#39;2&#39; foo:x=&#39;3&#39;/&gt;&quot; ...</pre>\n"],["length","REXML::Parent","REXML/Parent.html#method-i-length","()",""],["length","REXML::SyncEnumerator","REXML/SyncEnumerator.html#method-i-length","()","<p>Returns the number of enumerated Enumerable objects, i.e. the size of each\nrow.\n"],["length","SDBM","SDBM.html#method-i-length","()","<p>Returns the number of keys in the database.\n"],["length","Set","Set.html#method-i-length","()",""],["length","String","String.html#method-i-length","()","<p>Returns the character length of <em>str</em>.\n"],["length","StringIO","StringIO.html#method-i-length","()","<p>Returns the size of the buffer string.\n"],["length","Struct","Struct.html#method-i-length","()","<p>Returns the number of struct members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["length","Symbol","Symbol.html#method-i-length","()","<p>Same as <code>sym.to_s.length</code>.\n"],["length","Tempfile","Tempfile.html#method-i-length","()",""],["level","Socket::AncillaryData","Socket/AncillaryData.html#method-i-level","()","<p>returns the cmsg level as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-constant\">INET6</span>, :<span class=\"ruby-constant\">IPV6</span>, :<span class=\"ruby-constant\">PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">level</span>\n<span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["level","Socket::Option","Socket/Option.html#method-i-level","()","<p>returns the socket level as an integer.\n\n<pre>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).level ...</pre>\n"],["level","Zlib::GzipFile","Zlib/GzipFile.html#method-i-level","()","<p>Returns compression level.\n"],["level=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level-3D","(value)",""],["level=","Logger","Logger.html#method-i-level-3D","(severity)","<p>Set logging severity threshold.\n<p>severity &mdash; The Severity of the log message.\n\n"],["level_notifier=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level_notifier-3D","(value)","<p>Sets the leveled notifier for this object.\n<p>When the given <code>value</code> is an instance of AbstractNotifier,\n#level_notifier …\n"],["levenshtein_distance","Gem::Text","Gem/Text.html#method-i-levenshtein_distance","(str1, str2)","<p>This code is based directly on the Text gem implementation Returns a value\nrepresenting the “cost” …\n"],["lex","Ripper","Ripper.html#method-c-lex","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of an array, which is\nformatted like <code>[[lineno, column],</code> …\n"],["lgamma","Math","Math.html#method-c-lgamma","(p1)","<p>Calculates the logarithmic gamma of <code>x</code> and the sign of gamma of\n<code>x</code>.\n<p>Math.lgamma(x) is same as\n\n<pre>[Math.log(Math.gamma(x).abs), ...</pre>\n"],["lib_dirs_glob","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-lib_dirs_glob","()","<p>Returns a string usable in Dir.glob to match all requirable paths for this\nspec.\n"],["lib_files","Gem::Specification","Gem/Specification.html#method-i-lib_files","()","<p>Files in the Gem under one of the require_paths\n"],["liberal_parsing?","CSV","CSV.html#method-i-liberal_parsing-3F","()","<p>Returns <code>true</code> if illegal input is handled. See CSV::new for\ndetails.\n"],["library_name","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-library_name","()","<p>Returns library name. If the method fails to access library name,\nWIN32OLERuntimeError is raised.\n\n<pre>tlib ...</pre>\n"],["libyaml_version","Psych","Psych.html#method-c-libyaml_version","()","<p>Returns the version of libyaml being used\n"],["license","Gem::Specification","Gem/Specification.html#method-i-license","()","<p>Singular accessor for #licenses\n"],["license=","Gem::Specification","Gem/Specification.html#method-i-license-3D","(o)","<p>The license for this gem.\n<p>The license must be no more than 64 characters.\n<p>This should just be the name …\n"],["licenses","Gem::Specification","Gem/Specification.html#method-i-licenses","()","<p>Plural accessor for setting licenses\n<p>See #license= for details\n"],["licenses=","Gem::Specification","Gem/Specification.html#method-i-licenses-3D","(licenses)","<p>The license(s) for the library.\n<p>Each license must be a short name, no more than 64 characters.\n<p>This should …\n"],["limit","BigDecimal","BigDecimal.html#method-c-limit","(p1 = v1)","<p>Limit the number of significant digits in newly created BigDecimal numbers\nto the specified value. Rounding …\n"],["line","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","REXML::ParseException","REXML/ParseException.html#method-i-line","()",""],["line_buffer","Readline","Readline.html#method-c-line_buffer","()","<p>Returns the full line that is being edited. This is useful from within the\ncomplete_proc for determining …\n"],["line_trace_all","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-line_trace_all","()","<p><strong>Experimental MRI specific feature, only available as C level\napi.</strong>\n<p>Returns all <code>specified_line</code> events.\n"],["line_trace_specify","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-line_trace_specify","(p1, p2)","<p><strong>Experimental MRI specific feature, only available as C level\napi.</strong>\n<p>Set a <code>specified_line</code> event at the given …\n"],["lineno","ARGF","ARGF.html#method-i-lineno","()","<p>Returns the current line number of ARGF as a whole. This value can be set\nmanually with <code>ARGF.lineno=</code> …\n"],["lineno","IO","IO.html#method-i-lineno","()","<p>Returns the current line number in <em>ios</em>.  The stream must be opened\nfor reading. <code>lineno</code> counts the number …\n"],["lineno","Ripper","Ripper.html#method-i-lineno","()","<p>Return line number of current parsing line. This number starts from 1.\n"],["lineno","Ripper::Filter","Ripper/Filter.html#method-i-lineno","()","<p>The line number of the current token. This value starts from 1. This method\nis valid only in event handlers. …\n"],["lineno","StringIO","StringIO.html#method-i-lineno","()","<p>Returns the current line number in <strong>strio</strong>. The stringio\nmust be opened for reading. <code>lineno</code> counts the …\n"],["lineno","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-lineno","()","<p>Returns the line number of this frame.\n<p>For example, using <code>caller_locations.rb</code> from\nThread::Backtrace::Location …\n"],["lineno","TracePoint","TracePoint.html#method-i-lineno","()","<p>Line number of the event\n"],["lineno","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lineno","()","<p>The line number of the last row read from this file.\n"],["lineno=","ARGF","ARGF.html#method-i-lineno-3D","(p1)","<p>Sets the line number of <code>ARGF</code> as a whole to the given\n<code>Integer</code>.\n<p><code>ARGF</code> sets the line number automatically …\n"],["lineno=","IO","IO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["lineno=","StringIO","StringIO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n"],["lineno=","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lineno-3D","(p1)","<p>Specify line number of the last row read from this file.\n"],["lines","ARGF","ARGF.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["lines","IO","IO.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["lines","String","String.html#method-i-lines","(*args)","<p>Returns an array of lines in <em>str</em> split using the supplied record\nseparator (<code>$/</code> by default).  This is …\n"],["lines","StringIO","StringIO.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["lines","Zlib::GzipReader","Zlib/GzipReader.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["linger","Socket::Option","Socket/Option.html#method-i-linger","()","<p>Returns the linger data in <em>sockopt</em> as a pair of boolean and\ninteger.\n\n<pre>sockopt = Socket::Option.linger(true, ...</pre>\n"],["linger","Socket::Option","Socket/Option.html#method-c-linger","(p1, p2)","<p>Creates a new Socket::Option object for SOL_SOCKET/SO_LINGER.\n<p><em>onoff</em> should be an integer or a boolean. …\n"],["link","File","File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not\noverwrite <em>new_name</em> if it already …\n"],["link","FileUtils","FileUtils.html#method-i-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","FileUtils","FileUtils.html#method-c-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","RSS::Maker::ImageBase","RSS/Maker/ImageBase.html#method-i-link","()",""],["link_to","RDoc::Markdown","RDoc/Markdown.html#method-i-link_to","(content, label = content, text = nil)","<p>Finds a link reference for <code>label</code> and creates a new link to it\nwith\n<code>content</code> as the link text. If <code>label</code> ...\n"],["list","Encoding","Encoding.html#method-c-list","()","<p>Returns the list of loaded encodings.\n\n<pre>Encoding.list\n#=&gt; [#&lt;Encoding:ASCII-8BIT&gt;, #&lt;Encoding:UTF-8&gt;,\n  ...</pre>\n"],["list","Net::FTP","Net/FTP.html#method-i-list","(*args)","<p>Returns an array of file information in the directory (the output is like\n`ls -l`).  If a block is given, …\n"],["list","Net::IMAP","Net/IMAP.html#method-i-list","(refname, mailbox)","<p>Sends a LIST command, and returns a subset of names from the complete set\nof all names available to the …\n"],["list","RDoc::TestCase","RDoc/TestCase.html#method-i-list","(type = nil, *items)","<p>Shortcut for RDoc::Markup::List.new with <code>type</code> and\n<code>items</code>\n"],["list","Signal","Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying\nsignal numbers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Signal</span>.<span class=\"ruby-identifier\">list</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["list","Thread","Thread.html#method-c-list","()","<p>Returns an array of Thread objects for all threads that are either runnable\nor stopped.\n\n<pre>Thread.new { sleep(200) ...</pre>\n"],["list","ThreadGroup","ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing Thread objects that belong to this group.\n\n<pre>ThreadGroup::Default.list  ...</pre>\n"],["list","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-list","()","<p>Returns all the FormData as an Array\n"],["list_files_in_directory","RDoc::RDoc","RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that\nthis directory doesn&#39;t have …\n"],["list_item_from","RDoc::Markdown","RDoc/Markdown.html#method-i-list_item_from","(unparsed)","<p>Creates an RDoc::Markup::ListItem by parsing the <code>unparsed</code>\ncontent from\nthe first parsing pass.\n"],["listable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-listable-3F","()","<p>Returns <code>true</code> if the listing commands, LIST, NLST, and MLSD are\napplied to the directory.\n"],["listen","Addrinfo","Addrinfo.html#method-i-listen","(backlog=Socket::SOMAXCONN)","<p>creates a listening socket bound to self.\n"],["listen","Gem::Server","Gem/Server.html#method-i-listen","(addresses = @addresses)","<p>Creates server sockets based on the addresses option.  If no addresses were\ngiven a server socket for …\n"],["listen","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-listen","(backlog=5)","<p>See TCPServer#listen for details.\n"],["listen","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-listen","( *args, &blok )","<p>Listen arguments:\n<p>Symbol, Array, Block\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Listen</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-constant\">Symbol</span> <span class=\"ruby-identifier\">events</span> <span class=\"ruby-identifier\">on</span> <span class=\"ruby-constant\">Array</span> <span class=\"ruby-identifier\">elements</span>\n</pre>\n"],["listen","Socket","Socket.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","TCPServer","TCPServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the ...\n"],["listen","UNIXServer","UNIXServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the ...\n"],["listen","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-listen","(address, port)","<p>Adds listeners from <code>address</code> and <code>port</code> to the\nserver.  See WEBrick::Utils::create_listeners for details. …\n"],["listener","RSS::REXMLParser","RSS/REXMLParser.html#method-c-listener","()",""],["listener","RSS::XMLParserParser","RSS/XMLParserParser.html#method-c-listener","()",""],["listener","RSS::XMLScanParser","RSS/XMLScanParser.html#method-c-listener","()",""],["listener=","RSS::REXMLLikeXMLParser","RSS/REXMLLikeXMLParser.html#method-i-listener-3D","(listener)",""],["literalize","REXML::Elements","REXML/Elements.html#method-i-literalize","(name)","<p>Private helper class.  Removes quotes from quoted strings\n"],["ljust","String","String.html#method-i-ljust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> left\njustified …\n"],["ln","FileUtils","FileUtils.html#method-c-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a hard link <code>link</code> which points to\n<code>target</code>. If <code>link</code> already exists, raises\nErrno::EEXIST …\n"],["ln","FileUtils","FileUtils.html#method-i-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a hard link <code>link</code> which points to\n<code>target</code>. If <code>link</code> already exists, raises\nErrno::EEXIST …\n"],["ln","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-ln","()","<p>The long name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["ln_s","FileUtils","FileUtils.html#method-c-ln_s","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a symbolic link <code>link</code> which points\nto <code>target</code>. If <code>link</code> already exists, raises …\n"],["ln_s","FileUtils","FileUtils.html#method-i-ln_s","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a symbolic link <code>link</code> which points\nto <code>target</code>. If <code>link</code> already exists, raises …\n"],["ln_sf","FileUtils","FileUtils.html#method-i-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Same as\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">ln_s</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">args</span>, <span class=\"ruby-identifier\">force</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n"],["ln_sf","FileUtils","FileUtils.html#method-c-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Same as\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">ln_s</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">args</span>, <span class=\"ruby-identifier\">force</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n"],["load","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-load","()","<p>Loads the gem dependency file and returns self.\n"],["load","Gem::Specification","Gem/Specification.html#method-c-load","(file)","<p>Loads Ruby format gemspec from <code>file</code>.\n"],["load","IRB::Locale","IRB/Locale.html#method-i-load","(file, priv=nil)",""],["load","JSON","JSON.html#method-i-load","(source, proc = nil, options = {})","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, …\n"],["load","JSON::GenericObject","JSON/GenericObject.html#method-c-load","(source, proc = nil, opts = {})",""],["load","Kernel","Kernel.html#method-i-load","(p1, p2 = v2)","<p>Loads and executes the Ruby program in the file <em>filename</em>. If the\nfilename does not resolve to an absolute …\n"],["load","Marshal","Marshal.html#method-c-load","(*args)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["load","OpenSSL::Engine","OpenSSL/Engine.html#method-c-load","(p1 = v1)","<p>This method loads engines. If <code>name</code> is nil, then all builtin\nengines are loaded. Otherwise, the given …\n"],["load","OptionParser","OptionParser.html#method-i-load","(filename = nil)","<p>Loads options from file names as <code>filename</code>. Does nothing when\nthe file is not present. Returns whether …\n"],["load","Psych","Psych.html#method-c-load","(yaml, filename = nil, fallback = false)","<p>Load <code>yaml</code> in to a Ruby data structure.  If multiple documents\nare provided, the object contained in the …\n"],["load_all","RDoc::Store","RDoc/Store.html#method-i-load_all","()","<p>Loads all items from this store into memory.  This recreates a\ndocumentation tree for use by a generator …\n"],["load_and_instantiate","Gem::CommandManager","Gem/CommandManager.html#method-i-load_and_instantiate","(command_name)",""],["load_api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_api_keys","()",""],["load_cache","RDoc::Store","RDoc/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_cert","Gem::TestCase","Gem/TestCase.html#method-c-load_cert","(cert_name)","<p>Loads certificate named <code>cert_name</code> from\n<code>test/rubygems/</code>.\n"],["load_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-load_certificate","(certificate_file)","<p>Loads the given <code>certificate_file</code>\n"],["load_class","RDoc::Store","RDoc/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code> and hooks it up to this store.\n"],["load_class_data","RDoc::Store","RDoc/Store.html#method-i-load_class_data","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_data","PStore","PStore.html#method-i-load_data","(file, read_only)","<p>Load the given PStore file. If <code>read_only</code> is true, the\nunmarshalled Hash will be returned. If <code>read_only</code> …\n"],["load_default_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_cert","()",""],["load_default_key","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_key","()",""],["load_defaults","Gem::Specification","Gem/Specification.html#method-c-load_defaults","()","<p>Loads the default specifications. It should be called only once.\n"],["load_documents","Psych","Psych.html#method-c-load_documents","(yaml, &block)","<p>This method is deprecated, use Psych.load_stream instead.\n"],["load_env_plugins","Gem","Gem.html#method-c-load_env_plugins","()","<p>Find all &#39;rubygems_plugin&#39; files in $LOAD_PATH and load them\n"],["load_file","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_file","(filename)",""],["load_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-load_file","(path, priv = nil)","<p>Loads the given file in the current session&#39;s context and evaluates it.\n<p>See Irb#suspend_input_method …\n"],["load_file","Psych","Psych.html#method-c-load_file","(filename, fallback = false)","<p>Load the document contained in <code>filename</code>.  Returns the yaml\ncontained in <code>filename</code> as a Ruby object, or …\n"],["load_from_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary","(p1)","<p>Load an iseq object from binary format String object created by\nRubyVM::InstructionSequence.to_binary …\n"],["load_from_binary_extra_data","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data","(p1)","<p>Load extra data embed into binary format String object.\n"],["load_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-load_gemdeps","(path, without_groups = [], installing = false)","<p>Load a dependency management file.\n"],["load_key","Gem::TestCase","Gem/TestCase.html#method-c-load_key","(key_name, passphrase = nil)","<p>Loads an RSA private key named <code>key_name</code> with\n<code>passphrase</code> in <code>test/rubygems/</code>\n"],["load_method","RDoc::Store","RDoc/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_mime_types","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-load_mime_types","(file)","<p>Loads Apache-compatible mime.types in <code>file</code>.\n"],["load_mime_types","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-load_mime_types","(file)","<p>Loads Apache-compatible mime.types in <code>file</code>.\n"],["load_options","RDoc::RDoc","RDoc/RDoc.html#method-i-load_options","()","<p>Loads options from .rdoc_options if the file exists, otherwise creates a\nnew RDoc::Options instance. …\n"],["load_page","RDoc::Store","RDoc/Store.html#method-i-load_page","(page_name)","<p>Loads ri data for <code>page_name</code>\n"],["load_path_insert_index","Gem","Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH. The activated\ngem&#39;s paths are inserted …\n"],["load_plugins","Gem","Gem.html#method-c-load_plugins","()","<p>Find the &#39;rubygems_plugin&#39; files in the latest installed gems and\nload them\n"],["load_private_key","OpenSSL::Engine","OpenSSL/Engine.html#method-i-load_private_key","(p1 = v1, p2 = v2)","<p>Loads the given private key by <code>id</code> and <code>data</code>.\n<p>An EngineError is raised of the OpenSSL::PKey is unavailable. …\n"],["load_public_key","OpenSSL::Engine","OpenSSL/Engine.html#method-i-load_public_key","(p1 = v1, p2 = v2)","<p>Loads the given private key by <code>id</code> and <code>data</code>.\n<p>An EngineError is raised of the OpenSSL::PKey is unavailable. …\n"],["load_random_file","OpenSSL::Random","OpenSSL/Random.html#method-c-load_random_file","(p1)","<p>Reads bytes from <code>filename</code> and adds them to the PRNG.\n"],["load_rdoc","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_rdoc","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_spec","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-load_spec","(name, ver, platform, source)","<p>Loads a Gem::Specification from this set which has the given\n<code>name</code>, version <code>ver</code>, <code>platform</code>.  The\n<code>source</code> …\n"],["load_specs","Gem::Source","Gem/Source.html#method-i-load_specs","(type)","<p>Loads <code>type</code> kind of specs fetching from +@uri+ if the on-disk\ncache is out of date.\n<p><code>type</code> is one of the …\n"],["load_stream","Psych","Psych.html#method-c-load_stream","(yaml, filename = nil)","<p>Load multiple documents given in <code>yaml</code>.  Returns the parsed\ndocuments as a list.  If a block is given, …\n"],["load_yaml","Gem","Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["load_yaml","RDoc","RDoc.html#method-c-load_yaml","()","<p>Loads the best available YAML library.\n"],["loaded_spec_names","Gem::TestCase","Gem/TestCase.html#method-i-loaded_spec_names","()",""],["local","Gem::Platform","Gem/Platform.html#method-c-local","()",""],["local","Time","Time.html#method-c-local","(*args)","<p>Same as Time::gm, but interprets the values in the local time zone.\n\n<pre>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</pre>\n"],["local?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-local-3F","()","<p>Is local fetching enabled?\n"],["local_address","BasicSocket","BasicSocket.html#method-i-local_address","()","<p>Returns an Addrinfo object for local address obtained by getsockname.\n<p>Note that addrinfo.protocol is filled …\n"],["local_name","REXML::Functions","REXML/Functions.html#method-c-local_name","( node_set=nil )","<p>UNTESTED\n"],["local_name","REXML::Light::Node","REXML/Light/Node.html#method-i-local_name","()",""],["local_name=","REXML::Light::Node","REXML/Light/Node.html#method-i-local_name-3D","( name_str )",""],["local_variable_defined?","Binding","Binding.html#method-i-local_variable_defined-3F","(p1)","<p>Returns <code>true</code> if a local variable <code>symbol</code> exists.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_defined?(:a) ...</pre>\n"],["local_variable_get","Binding","Binding.html#method-i-local_variable_get","(p1)","<p>Returns the value of the local variable <code>symbol</code>.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_get(:a) #=&gt; 1 ...</pre>\n"],["local_variable_set","Binding","Binding.html#method-i-local_variable_set","(p1, p2)","<p>Set local variable named <code>symbol</code> as <code>obj</code>.\n\n<pre>def foo\n  a = 1\n  bind = binding\n  bind.local_variable_set(:a, ...</pre>\n"],["local_variables","Binding","Binding.html#method-i-local_variables","()","<p>Returns the names of the binding&#39;s local variables as symbols.\n\n<pre>def foo\n  a = 1\n  2.times do |n|\n  ...</pre>\n"],["local_variables","Kernel","Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre>fred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables ...</pre>\n"],["local_variables","NameError","NameError.html#method-i-local_variables","()","<p>Return a list of the local variable names defined where this NameError\nexception was raised.\n<p>Internal …\n"],["locale","WIN32OLE","WIN32OLE.html#method-c-locale","()","<p>Returns current locale id (lcid). The default locale is\nWIN32OLE::LOCALE_SYSTEM_DEFAULT.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">lcid</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">locale</span>\n</pre>\n"],["locale=","WIN32OLE","WIN32OLE.html#method-c-locale-3D","(p1)","<p>Sets current locale id (lcid).\n\n<pre>WIN32OLE.locale = 1033 # set locale English(U.S)\nobj = WIN32OLE_VARIANT.new(&quot;$100,000&quot;, ...</pre>\n"],["locale_charmap","Encoding","Encoding.html#method-c-locale_charmap","()","<p>Returns the locale charmap name. It returns nil if no appropriate\ninformation.\n\n<pre>Debian GNU/Linux\n  LANG=C ...</pre>\n"],["localtime","Time","Time.html#method-i-localtime","(p1 = v1)","<p>Converts <em>time</em> to local time (using the local time zone in effect\nfor this process) modifying the receiver. …\n"],["location=","ERB","ERB.html#method-i-location-3D","((filename, lineno))",""],["location_of_caller","Gem","Gem.html#method-c-location_of_caller","()","<p>The file name and line number of the caller of the caller of this method.\n"],["lock","Net::HTTP","Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["lock","Thread::Mutex","Thread/Mutex.html#method-i-lock","()","<p>Attempts to grab the lock and waits if it isn&#39;t available. Raises\n<code>ThreadError</code> if <code>mutex</code> was locked …\n"],["lock_shift_log","Logger::LogDevice","Logger/LogDevice.html#method-i-lock_shift_log","()",""],["locked?","Thread::Mutex","Thread/Mutex.html#method-i-locked-3F","()","<p>Returns <code>true</code> if this lock is currently held by some thread.\n"],["locked_requirement_named","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-locked_requirement_named","(requirement_name)","<p>@param [String] requirement_name the spec name to search for @return\n[Object] the locked spec named `requirement_name`, …\n"],["log","BigMath","BigMath.html#method-c-log","(p1, p2)","<p>Computes the natural logarithm of <code>decimal</code> to the specified\nnumber of digits of precision, <code>numeric</code>.\n<p>If …\n"],["log","CMath","CMath.html#method-c-log","(z, b=::Math::E)","<p>Returns the natural logarithm of Complex. If a second argument is given, it\nwill be the base of logarithm. …\n"],["log","CMath","CMath.html#method-i-log","(z, b=::Math::E)","<p>Returns the natural logarithm of Complex. If a second argument is given, it\nwill be the base of logarithm. …\n"],["log","Logger","Logger.html#method-i-log","(severity, message = nil, progname = nil)",""],["log","Math","Math.html#method-c-log","(p1, p2 = v2)","<p>Returns the logarithm of <code>x</code>. If additional second argument is\ngiven, it will be the base of logarithm. …\n"],["log","Syslog","Syslog.html#method-c-log","(*args)","<p>Log a message with the specified priority. Example:\n\n<pre>Syslog.log(Syslog::LOG_CRIT, &quot;Out of disk space&quot;) ...</pre>\n"],["log","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-log","(level, data)","<p>Logs <code>data</code> at <code>level</code> if the given level is above\nthe current log level.\n"],["log","WEBrick::Log","WEBrick/Log.html#method-i-log","(level, data)","<p>Same as BasicLog#log\n"],["log10","CMath","CMath.html#method-c-log10","(z)","<p>Returns the base 10 logarithm of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">log10</span>(<span class=\"ruby-value\">-1</span>) <span class=\"ruby-comment\">#=&gt; (0.0+1.3643763538418412i)</span>\n</pre>\n"],["log10","CMath","CMath.html#method-i-log10","(z)","<p>Returns the base 10 logarithm of <code>z</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">log10</span>(<span class=\"ruby-value\">-1</span>) <span class=\"ruby-comment\">#=&gt; (0.0+1.3643763538418412i)</span>\n</pre>\n"],["log10","Math","Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <code>x</code>.\n<p>Domain: (0, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["log2","CMath","CMath.html#method-c-log2","(z)","<p>Returns the base 2 logarithm of <code>z</code>\n\n<pre>CMath.log2(-1) =&gt; (0.0+4.532360141827194i)</pre>\n"],["log2","CMath","CMath.html#method-i-log2","(z)","<p>Returns the base 2 logarithm of <code>z</code>\n\n<pre>CMath.log2(-1) =&gt; (0.0+4.532360141827194i)</pre>\n"],["log2","Math","Math.html#method-c-log2","(p1)","<p>Returns the base 2 logarithm of <code>x</code>.\n<p>Domain: (0, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["logging","Net::POP3","Net/POP3.html#method-i-logging","(msg)","<p>debugging output for <code>msg</code>\n"],["logging","Net::SMTP","Net/SMTP.html#method-i-logging","(msg)",""],["login","Net::FTP","Net/FTP.html#method-i-login","(user = \"anonymous\", passwd = nil, acct = nil)","<p>Logs in to the remote host.  The session must have been previously\nconnected.  If <code>user</code> is the string …\n"],["login","Net::IMAP","Net/IMAP.html#method-i-login","(user, password)","<p>Sends a LOGIN command to identify the client and carries the plaintext\n<code>password</code> authenticating this  …\n"],["logo","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-logo","()",""],["logo=","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-logo-3D","(url)",""],["logout","Net::IMAP","Net/IMAP.html#method-i-logout","()","<p>Sends a LOGOUT command to inform the server that the client is done with\nthe connection.\n"],["long_name","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-long_name","()",""],["lookup_ring","Rinda::RingFinger","Rinda/RingFinger.html#method-i-lookup_ring","(timeout=5, &block)","<p>Looks up RingServers waiting <code>timeout</code> seconds.  RingServers\nwill be given <code>block</code> as a callback, which will …\n"],["lookup_ring_any","Rinda::RingFinger","Rinda/RingFinger.html#method-i-lookup_ring_any","(timeout=5)","<p>Returns the first found remote TupleSpace.  Any further recovered\nTupleSpaces can be found by calling …\n"],["lookup_server","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-lookup_server","(req)","<p>Finds the appropriate virtual host to handle <code>req</code>\n"],["loop","Kernel","Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n<p>If no block is given, an enumerator is returned instead.\n\n<pre>loop do\n  print ...</pre>\n"],["lower_triangular?","Matrix","Matrix.html#method-i-lower_triangular-3F","()","<p>Returns <code>true</code> if this is a lower triangular matrix.\n"],["ls","Net::FTP","Net/FTP.html#method-i-ls","(*args)",""],["lshift!","OpenSSL::BN","OpenSSL/BN.html#method-i-lshift-21","(p1)",""],["lstat","File","File.html#method-i-lstat","()","<p>Same as <code>IO#stat</code>, but does not follow the last symbolic link.\nInstead, reports on the link itself.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["lstat","File","File.html#method-c-lstat","(p1)","<p>Same as <code>File::stat</code>, but does not follow the last symbolic\nlink. Instead, reports on the link itself. …\n"],["lstat","Pathname","Pathname.html#method-i-lstat","()","<p>See File.lstat.\n"],["lstrip","String","String.html#method-i-lstrip","()","<p>Returns a copy of <em>str</em> with leading whitespace removed. See also\n<code>String#rstrip</code> and <code>String#strip</code>.\n<p>Refer …\n"],["lstrip!","String","String.html#method-i-lstrip-21","()","<p>Removes leading whitespace from <em>str</em>, returning <code>nil</code> if\nno change was made. See also <code>String#rstrip!</code> and …\n"],["lsub","Net::IMAP","Net/IMAP.html#method-i-lsub","(refname, mailbox)","<p>Sends a LSUB command, and returns a subset of names from the set of names\nthat the user has declared …\n"],["ludecomp","LUSolve","LUSolve.html#method-i-ludecomp","(a,n,zero=0,one=1)","<p>Performs LU decomposition of the n by n matrix a.\n"],["lup","Matrix","Matrix.html#method-i-lup","()","<p>Returns the LUP decomposition of the matrix; see\n<code>LUPDecomposition</code>.\n\n<pre>a = Matrix[[1, 2], [3, 4]]\nl, u, p ...</pre>\n"],["lup_decomposition","Matrix","Matrix.html#method-i-lup_decomposition","()",""],["lusolve","LUSolve","LUSolve.html#method-i-lusolve","(a,b,ps,zero=0.0)","<p>Solves a*x = b for x, using LU decomposition.\n<p>a is a matrix, b is a constant vector, x is the solution …\n"],["magnitude","Complex","Complex.html#method-i-magnitude","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["magnitude","Float","Float.html#method-i-magnitude","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["magnitude","Integer","Integer.html#method-i-magnitude","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre>-12345.abs   #=&gt; 12345\n12345.abs    #=&gt; 12345\n-1234567890987654321.abs ...</pre>\n"],["magnitude","Integer","Integer.html#method-i-magnitude","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre>-12345.abs   #=&gt; 12345\n12345.abs    #=&gt; 12345\n-1234567890987654321.abs ...</pre>\n"],["magnitude","Numeric","Numeric.html#method-i-magnitude","()","<p>Returns the absolute value of <code>num</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["magnitude","Rational","Rational.html#method-i-magnitude","()","<p>Returns the absolute value of <code>rat</code>.\n<p>(1/2r).abs    #=&gt; 1/2r (-1/2r).abs   #=&gt; 1/2r\n<p>Rational#magnitude …\n"],["magnitude","Vector","Vector.html#method-i-magnitude","()","<p>Returns the modulus (Pythagorean distance) of the vector.\n\n<pre>Vector[5,8,2].r =&gt; 9.643650761</pre>\n"],["mail","Net::POPMail","Net/POPMail.html#method-i-mail","( dest = '' )",""],["mailfrom","Net::SMTP","Net/SMTP.html#method-i-mailfrom","(from_addr)",""],["mails","Net::POP3","Net/POP3.html#method-i-mails","()","<p>Returns an array of Net::POPMail objects, representing all the messages on\nthe server.  This array is …\n"],["main","IRB::Context","IRB/Context.html#method-i-main","()","<p>The top-level workspace, see WorkSpace#main\n"],["main","RDoc::Store","RDoc/Store.html#method-i-main","()","<p>Gets the main page for this RDoc store.  This page is used as the root of\nthe RDoc server.\n"],["main","Thread","Thread.html#method-c-main","()","<p>Returns the main thread.\n"],["main=","RDoc::Store","RDoc/Store.html#method-i-main-3D","(page)","<p>Sets the main page for this RDoc store.\n"],["main_irb","IRB::JobManager","IRB/JobManager.html#method-i-main_irb","()","<p>Returns the top level irb session.\n"],["main_loop","DRb::DRbServer","DRb/DRbServer.html#method-i-main_loop","()","<p>The main loop performed by a DRbServer&#39;s internal thread.\n<p>Accepts a connection from a client, and …\n"],["main_thread","IRB::JobManager","IRB/JobManager.html#method-i-main_thread","()","<p>Returns the top level thread.\n"],["major_version","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-major_version","()","<p>Returns major version.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;)\nputs ...</pre>\n"],["major_version","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-major_version","()","<p>Returns the type library major version.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</pre>\n"],["make","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-make","(dest_path, results)",""],["make","RSS::Maker","RSS/Maker.html#method-c-make","(version, &block)","<p>Builder for an RSS object Creates an object of the type passed in\n<code>args</code>\n<p>Executes the <code>block</code> to populate …\n"],["make","RSS::Maker::RSSBase","RSS/Maker/RSSBase.html#method-c-make","(*args, &block)",""],["make","RSS::Maker::RSSBase","RSS/Maker/RSSBase.html#method-i-make","()",""],["make_affine!","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-make_affine-21","()",""],["make_command","Gem::TestCase","Gem/TestCase.html#method-c-make_command","()","<p>Returns the make command for the current platform. For versions of Ruby\nbuilt on MS Windows with VC++ …\n"],["make_command","Gem::TestCase","Gem/TestCase.html#method-i-make_command","()","<p>Returns the make command for the current platform. For versions of Ruby\nbuilt on MS Windows with VC++ …\n"],["make_compiler","ERB","ERB.html#method-i-make_compiler","(trim_mode)","<p>Creates a new compiler for ERB.  See ERB::Compiler.new for details\n"],["make_destination_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-make_destination_dirs","(install_destdir)",""],["make_edge","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return\n[Edge] The edge this action adds …\n"],["make_edge","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return\n[Edge] The edge this action adds …\n"],["make_entry","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-make_entry","(entry_tuples, platforms)",""],["make_expires","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-make_expires","(sec=nil)","<p>Returns an expiry Time based on <code>sec</code> which can be one of:\n<p>Numeric &mdash; <code>sec</code> seconds into the future\n<p>true &mdash; the expiry …\n"],["make_feed","RSS::Maker::Atom::Entry","RSS/Maker/Atom/Entry.html#method-i-make_feed","()",""],["make_feed","RSS::Maker::Atom::Feed","RSS/Maker/Atom/Feed.html#method-i-make_feed","()",""],["make_feed","RSS::Maker::RSS09","RSS/Maker/RSS09.html#method-i-make_feed","()",""],["make_feed","RSS::Maker::RSS10","RSS/Maker/RSS10.html#method-i-make_feed","()",""],["make_link","Pathname","Pathname.html#method-i-make_link","(p1)","<p>Creates a hard link at <em>pathname</em>.\n<p>See File.link.\n"],["make_methods","Syslog::Logger","Syslog/Logger.html#method-c-make_methods","(meth)","<p>Builds a methods for level <code>meth</code>.\n"],["make_parser","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-make_parser","(set, platforms)",""],["make_passwd","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a basic password entry\n"],["make_passwd","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a digest password entry\n"],["make_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-make_passwd","(realm, user, pass)","<p>Creates an obscured password in <code>realm</code> with <code>user</code>\nand <code>password</code> using the auth_type of this database.\n"],["make_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>returns Regexp that is default self.regexp, unless <code>schemes</code> is\nprovided. Then it is a Regexp.union with …\n"],["make_socket","Rinda::RingServer","Rinda/RingServer.html#method-i-make_socket","(address, interface_address=nil, multicast_interface=0)","<p>Creates a socket at <code>address</code>\n<p>If <code>address</code> is multicast address then\n<code>interface_address</code> and <code>multicast_interface</code> …\n"],["make_start_tag","RSS::Element","RSS/Element.html#method-i-make_start_tag","(indent, next_indent, attrs)",""],["make_switch","OptionParser","OptionParser.html#method-i-make_switch","(opts, block = nil)","<p>Creates an OptionParser::Switch from the parameters. The parsed argument\nvalue is passed to the given …\n"],["make_symlink","Pathname","Pathname.html#method-i-make_symlink","(p1)","<p>Creates a symbolic link.\n<p>See File.symlink.\n"],["make_temp_directories","Gem::Indexer","Gem/Indexer.html#method-i-make_temp_directories","()","<p>Make directories for index generation\n"],["make_thread_list","DEBUGGER__","DEBUGGER__.html#method-c-make_thread_list","()",""],["make_time","Time","Time.html#method-c-make_time","(date, year, mon, day, hour, min, sec, sec_fraction, zone, now)",""],["make_tuple","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-make_tuple","(ary)","<p>Creates a Rinda::Tuple for <code>ary</code>.\n"],["make_variable_map","RDoc::Store","RDoc/Store.html#method-i-make_variable_map","(variables)","<p>Converts the variable =&gt; ClassModule map <code>variables</code> from a C\nparser into a variable =&gt; class name …\n"],["make_xml_stylesheets","RSS::Maker::RSSBase","RSS/Maker/RSSBase.html#method-i-make_xml_stylesheets","()",""],["makedirs","FileUtils","FileUtils.html#method-c-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["makedirs","FileUtils","FileUtils.html#method-i-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["maker","RSS::Maker","RSS/Maker.html#method-c-maker","(version)","<p>Can I remove this method?\n"],["maker_target","RSS::Atom::ContentModel","RSS/Atom/ContentModel.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::Entry","RSS/Atom/Entry.html#method-i-maker_target","(maker)",""],["maker_target","RSS::Atom::Feed","RSS/Atom/Feed.html#method-i-maker_target","(maker)",""],["maker_target","RSS::Atom::Feed::Category","RSS/Atom/Feed/Category.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::Feed::Entry","RSS/Atom/Feed/Entry.html#method-i-maker_target","(items)",""],["maker_target","RSS::Atom::Feed::Link","RSS/Atom/Feed/Link.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::Feed::Logo","RSS/Atom/Feed/Logo.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::PersonConstruct","RSS/Atom/PersonConstruct.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-i-maker_target","(target)",""],["maker_target","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-i-maker_target","(categories)",""],["maker_target","RSS::ITunesChannelModel::ITunesImage","RSS/ITunesChannelModel/ITunesImage.html#method-i-maker_target","(target)",""],["maker_target","RSS::ITunesChannelModel::ITunesOwner","RSS/ITunesChannelModel/ITunesOwner.html#method-i-maker_target","(target)",""],["maker_target","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-maker_target","(target)",""],["maker_target","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-i-maker_target","(target)",""],["maker_target","RSS::ImageItemModel::ImageItem","RSS/ImageItemModel/ImageItem.html#method-i-maker_target","(target)",""],["maker_target","RSS::RDF::Channel","RSS/RDF/Channel.html#method-i-maker_target","(maker)",""],["maker_target","RSS::RDF::Image","RSS/RDF/Image.html#method-i-maker_target","(maker)",""],["maker_target","RSS::RDF::Item","RSS/RDF/Item.html#method-i-maker_target","(items)",""],["maker_target","RSS::RDF::Textinput","RSS/RDF/Textinput.html#method-i-maker_target","(maker)",""],["maker_target","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-maker_target","(target)",""],["maker_target","RSS::Rss::Channel","RSS/Rss/Channel.html#method-i-maker_target","(maker)",""],["maker_target","RSS::Rss::Channel::Image","RSS/Rss/Channel/Image.html#method-i-maker_target","(maker)",""],["maker_target","RSS::Rss::Channel::Item","RSS/Rss/Channel/Item.html#method-i-maker_target","(items)",""],["maker_target","RSS::Rss::Channel::Item::Category","RSS/Rss/Channel/Item/Category.html#method-i-maker_target","(item)",""],["maker_target","RSS::Rss::Channel::Item::Enclosure","RSS/Rss/Channel/Item/Enclosure.html#method-i-maker_target","(item)",""],["maker_target","RSS::Rss::Channel::Item::Guid","RSS/Rss/Channel/Item/Guid.html#method-i-maker_target","(item)",""],["maker_target","RSS::Rss::Channel::Item::Source","RSS/Rss/Channel/Item/Source.html#method-i-maker_target","(item)",""],["maker_target","RSS::Rss::Channel::TextInput","RSS/Rss/Channel/TextInput.html#method-i-maker_target","(maker)",""],["maker_target","RSS::SetupMaker","RSS/SetupMaker.html#method-i-maker_target","(maker)",""],["maker_target","RSS::TaxonomyTopicModel::TaxonomyTopic","RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-maker_target","(target)",""],["maker_target","RSS::TaxonomyTopicsModel::TaxonomyTopics","RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-maker_target","(target)",""],["makers","RSS::Maker","RSS/Maker.html#method-c-makers","()","<p>Returns collection of supported makers\n"],["malloc","Fiddle","Fiddle.html#method-c-malloc","(p1)","<p>Allocate <code>size</code> bytes of memory and return the integer memory\naddress for the allocated memory.\n"],["malloc","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-malloc","(types, func = nil)","<p>Allocates a C struct with the <code>types</code> provided.\n<p>When the instance is garbage collected, the C function  …\n"],["malloc","Fiddle::CUnionEntity","Fiddle/CUnionEntity.html#method-c-malloc","(types, func=nil)","<p>Allocates a C union the <code>types</code> provided.\n<p>When the instance is garbage collected, the C function <code>func</code> is\n…\n"],["malloc","Fiddle::Pointer","Fiddle/Pointer.html#method-c-malloc","(p1, p2 = v2)","<p>Allocate <code>size</code> bytes of memory and associate it with an\noptional <code>freefunc</code> that will be called when the …\n"],["malloc_allocated_size","GC","GC.html#method-c-malloc_allocated_size","()","<p>Returns the size of memory allocated by malloc().\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["malloc_allocations","GC","GC.html#method-c-malloc_allocations","()","<p>Returns the number of malloc() allocations.\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["manage_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-manage_owners","(method, name, owners)",""],["map","Array","Array.html#method-i-map","()","<p>Invokes the given block once for each element of <code>self</code>.\n<p>Creates a new array containing the values returned …\n"],["map","Enumerable","Enumerable.html#method-i-map","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-map","()",""],["map","Matrix","Matrix.html#method-i-map","()",""],["map","Psych::Coder","Psych/Coder.html#method-i-map","(tag = @tag, style = @style)","<p>Emit a map.  The coder will be yielded to the block.\n"],["map","Vector","Vector.html#method-i-map","()",""],["map!","Array","Array.html#method-i-map-21","()","<p>Invokes the given block once for each element of <code>self</code>,\nreplacing the element with the value returned …\n"],["map!","Set","Set.html#method-i-map-21","()",""],["map2","Vector","Vector.html#method-i-map2","(v)","<p>Like Vector#collect2, but returns a Vector instead of an Array.\n"],["map=","Psych::Coder","Psych/Coder.html#method-i-map-3D","(map)","<p>Emit a map with <code>value</code>\n"],["map_gems_to_specs","Gem::Indexer","Gem/Indexer.html#method-i-map_gems_to_specs","(gems)",""],["mark_version","Gem::Specification","Gem/Specification.html#method-i-mark_version","()","<p>Sets the rubygems_version to the current RubyGems version.\n"],["markup","RDoc::Text","RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["marshal_dump","Delegator","Delegator.html#method-i-marshal_dump","()","<p>Serialization support for the object returned by _<em>getobj</em>_.\n"],["marshal_dump","Gem::Version","Gem/Version.html#method-i-marshal_dump","()","<p>Dump only the raw version string, not the complete object. It&#39;s a\nstring for backwards (RubyGems …\n"],["marshal_dump","OpenStruct","OpenStruct.html#method-i-marshal_dump","()","<p>Provides marshalling support for use by the Marshal library.\n"],["marshal_dump","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Constant","RDoc/Constant.html#method-i-marshal_dump","()","<p>Dumps this Constant for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::TopLevel","RDoc/TopLevel.html#method-i-marshal_dump","()","<p>Dumps this TopLevel for use by ri.  See also #marshal_load\n"],["marshal_load","Delegator","Delegator.html#method-i-marshal_load","(data)","<p>Reinitializes delegation from a serialized object.\n"],["marshal_load","Gem::Version","Gem/Version.html#method-i-marshal_load","(array)","<p>Load custom marshal format. It&#39;s a string for backwards (RubyGems 1.3.5\nand earlier) compatibility. …\n"],["marshal_load","OpenStruct","OpenStruct.html#method-i-marshal_load","(x)","<p>Provides marshalling support for use by the Marshal library.\n"],["marshal_load","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the\nfollowing methods will return cached values: …\n"],["marshal_load","RDoc::Attr","RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following\nmethods will return cached values:\n<p>#full_name …\n"],["marshal_load","RDoc::Constant","RDoc/Constant.html#method-i-marshal_load","(array)","<p>Loads this Constant from <code>array</code>.  For a loaded Constant the\nfollowing methods will return cached values: …\n"],["marshal_version","Gem","Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["mask","IPAddr","IPAddr.html#method-i-mask","(prefixlen)","<p>Returns a new ipaddr built by masking IP address with the given\nprefixlen/netmask. (e.g. 8, 64, “255.255.255.0”, …\n"],["mask","Syslog","Syslog.html#method-c-mask","()","<p>Returns the log priority mask in effect. The mask is not reset by opening\nor closing syslog.\n"],["mask!","IPAddr","IPAddr.html#method-i-mask-21","(mask)","<p>Set current netmask to given mask.\n"],["mask=","Syslog","Syslog.html#method-c-mask-3D","(p1)","<p>Sets the log priority mask. A method LOG_UPTO is defined to make it easier\nto set mask values. Example: …\n"],["match","ACL::ACLEntry","ACL/ACLEntry.html#method-i-match","(addr)","<p>Matches <code>addr</code> against this entry.\n"],["match","ACL::ACLList","ACL/ACLList.html#method-i-match","(addr)","<p>Matches <code>addr</code> against each ACLEntry in this list.\n"],["match","Gem::Platform","Gem/Platform.html#method-c-match","(platform)",""],["match","OptionParser::CompletingHash","OptionParser/CompletingHash.html#method-i-match","(key)","<p>Completion for hash key.\n"],["match","REXML::IOSource","REXML/IOSource.html#method-i-match","( pattern, cons=false )",""],["match","REXML::QuickPath","REXML/QuickPath.html#method-c-match","(element, path, namespaces=EMPTY_HASH)",""],["match","REXML::Source","REXML/Source.html#method-i-match","(pattern, cons=false)",""],["match","REXML::XPath","REXML/XPath.html#method-c-match","(element, path=nil, namespaces=nil, variables={})","<p>Returns an array of nodes matching a given XPath.\n"],["match","REXML::XPathParser","REXML/XPathParser.html#method-i-match","( path_stack, nodeset )",""],["match","Regexp","Regexp.html#method-i-match","(p1, p2 = v2)","<p>Returns a <code>MatchData</code> object describing the match, or\n<code>nil</code> if there was no match. This is equivalent to …\n"],["match","Rinda::Template","Rinda/Template.html#method-i-match","(tuple)","<p>Matches this template against <code>tuple</code>.  The <code>tuple</code>\nmust be the same size as the template.  An element with …\n"],["match","Rinda::TemplateEntry","Rinda/TemplateEntry.html#method-i-match","(tuple)","<p>Matches this TemplateEntry against <code>tuple</code>.  See Template#match\nfor details on how a Template matches a …\n"],["match","String","String.html#method-i-match","(*args)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn&#39;t already\none), then invokes its <code>match</code> method on <em>str</em>.  If …\n"],["match","Symbol","Symbol.html#method-i-match","(*args)","<p>Returns <code>sym.to_s.match(obj)</code>.\n"],["match?","Gem::Dependency","Gem/Dependency.html#method-i-match-3F","(obj, version=nil, allow_prerelease=false)","<p>Does this dependency match the specification described by <code>name</code>\nand <code>version</code> or match <code>spec</code>?\n<p>NOTE:  Unlike …\n"],["match?","Gem::Licenses","Gem/Licenses.html#method-c-match-3F","(license)",""],["match?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-match-3F","(spec, allow_prerelease = false)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #match? only matches prerelease versions when #dependency …\n"],["match?","Regexp","Regexp.html#method-i-match-3F","(*args)","<p>Returns a <code>true</code> or <code>false</code> indicates whether the\nregexp is matched or not without updating $~ and other …\n"],["match?","String","String.html#method-i-match-3F","(*args)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn&#39;t already\none), then returns a <code>true</code> or <code>false</code> indicates\nwhether …\n"],["match?","StringScanner","StringScanner.html#method-i-match-3F","(p1)","<p>Tests whether the given <code>pattern</code> is matched from the current\nscan pointer. Returns the length of the match, …\n"],["match?","Symbol","Symbol.html#method-i-match-3F","(*args)","<p>Returns <code>sym.to_s.match?(obj)</code>.\n"],["match_platform!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-match_platform-21","()",""],["match_platform?","Gem::NameTuple","Gem/NameTuple.html#method-i-match_platform-3F","()","<p>Indicate if this NameTuple matches the current platform.\n"],["match_to","REXML::Source","REXML/Source.html#method-i-match_to","( char, pattern )",""],["match_to_consume","REXML::Source","REXML/Source.html#method-i-match_to_consume","( char, pattern )",""],["matched","StringScanner","StringScanner.html#method-i-matched","()","<p>Returns the last matched string.\n\n<pre>s = StringScanner.new(&#39;test string&#39;)\ns.match?(/\\w+/)     # -&gt; 4\ns.matched ...</pre>\n"],["matched?","StringScanner","StringScanner.html#method-i-matched-3F","()","<p>Returns <code>true</code> iff the last match was successful.\n\n<pre>s = StringScanner.new(&#39;test string&#39;)\ns.match?(/\\w+/)  ...</pre>\n"],["matched_size","StringScanner","StringScanner.html#method-i-matched_size","()","<p>Returns the size of the most recent match (see #matched), or\n<code>nil</code> if there was no recent match.\n\n<pre>s = StringScanner.new(&#39;test ...</pre>\n"],["matches?","REXML::Entity","REXML/Entity.html#method-c-matches-3F","(string)","<p>Evaluates whether the given string matches an entity definition, returning\ntrue if so, and false otherwise. …\n"],["matches?","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Event","REXML/Validation/Event.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::OneOrMore","REXML/Validation/OneOrMore.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Optional","REXML/Validation/Optional.html#method-i-matches-3F","(event)",""],["matches?","REXML::Validation::Sequence","REXML/Validation/Sequence.html#method-i-matches-3F","(event)",""],["matches_for_glob","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-matches_for_glob","(glob)","<p>Return all files in this gem that match for <code>glob</code>.\n"],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency match <code>spec</code>?\n<p>NOTE:  This is not a convenience method.  Unlike #match? this method …\n"],["matches_spec?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #matches_spec? matches prerelease versions.  See also …\n"],["matching_specs","Gem::Dependency","Gem/Dependency.html#method-i-matching_specs","(platform_only = false)",""],["math_mode=","IRB::Context","IRB/Context.html#method-i-math_mode-3D","(opt)","<p>Sets bc mode, which loads <code>lib/mathn.rb</code> so fractions or matrix\nare available.\n<p>Also available as the <code>-m</code> …\n"],["max","Array","Array.html#method-i-max","(p1 = v1)","<p>Returns the object in <em>ary</em> with the maximum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["max","Enumerable","Enumerable.html#method-i-max","(p1 = v1)","<p>Returns the object in <em>enum</em> with the maximum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["max","Range","Range.html#method-i-max","(*args)","<p>Returns the maximum value in the range. Returns <code>nil</code> if the\nbegin value of the range larger than the end …\n"],["max","SizedQueue","SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","SizedQueue","SizedQueue.html#method-i-max-3D","(p1)","<p>Sets the maximum size of the queue to the given <code>number</code>.\n"],["max_by","Enumerable","Enumerable.html#method-i-max_by","(p1 = v1)","<p>Returns the object in <em>enum</em> that gives the maximum value from the\ngiven block.\n<p>If no block is given, an …\n"],["max_flag_count","Net::IMAP","Net/IMAP.html#method-c-max_flag_count","()","<p>Returns the max number of flags interned to symbols.\n"],["max_flag_count=","Net::IMAP","Net/IMAP.html#method-c-max_flag_count-3D","(count)","<p>Sets the max number of flags interned to symbols.\n"],["maxgroups","Process","Process.html#method-c-maxgroups","()","<p>Returns the maximum number of gids allowed in the supplemental group access\nlist.\n\n<pre>Process.maxgroups   ...</pre>\n"],["maxgroups=","Process","Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of gids allowed in the supplemental group access\nlist.\n"],["maybe_xml?","RSS::Parser","RSS/Parser.html#method-i-maybe_xml-3F","(source)","<p>maybe_xml? tests if source is a string that looks like XML.\n"],["mday","Date","Date.html#method-i-mday","()","<p>Returns the day of the month (1-31).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mday</span>           <span class=\"ruby-comment\">#=&gt; 3</span>\n</pre>\n"],["mday","Time","Time.html#method-i-mday","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...</pre>\n"],["mdtm","Net::FTP","Net/FTP.html#method-i-mdtm","(filename)","<p>Returns the raw last modification time of the (remote) file in the format\n“YYYYMMDDhhmmss” …\n"],["measure","Benchmark","Benchmark.html#method-i-measure","(label = \"\")","<p>Returns the time used to execute the given block as a Benchmark::Tms\nobject. Takes <code>label</code> option.\n\n<pre>require ...</pre>\n"],["measure","Benchmark","Benchmark.html#method-c-measure","(label = \"\")","<p>Returns the time used to execute the given block as a Benchmark::Tms\nobject. Takes <code>label</code> option.\n\n<pre>require ...</pre>\n"],["media_subtype","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["member?","CSV::Row","CSV/Row.html#method-i-member-3F","(header)",""],["member?","DBM","DBM.html#method-i-member-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["member?","ENV","ENV.html#method-c-member-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["member?","Enumerable","Enumerable.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre>IO.constants.include? :SEEK_SET ...</pre>\n"],["member?","GDBM","GDBM.html#method-i-member-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["member?","Hash","Hash.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["member?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["member?","Range","Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.  If begin and end are numeric, comparison …\n"],["member?","SDBM","SDBM.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["member?","Set","Set.html#method-i-member-3F","(o)",""],["members","Struct","Struct.html#method-i-members","()","<p>Returns the struct members as an array of symbols:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = ...</pre>\n"],["members","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-members","(group)","<p>Retrieve the list of members from <code>group</code>\n"],["memberwise","Benchmark::Tms","Benchmark/Tms.html#method-i-memberwise","(op, x)","<p>Returns a new Tms object obtained by memberwise operation <code>op</code>\nof the individual times for this Tms object …\n"],["memsize_of","ObjectSpace","ObjectSpace.html#method-c-memsize_of","(p1)","<p>Return consuming memory size of obj.\n<p>Note that the return size is incomplete.  You need to deal with this …\n"],["memsize_of_all","ObjectSpace","ObjectSpace.html#method-c-memsize_of_all","(p1 = v1)","<p>Return consuming memory size of all living objects.\n<p>If <code>klass</code> (should be Class object) is given, return …\n"],["merge","Gem::Dependency","Gem/Dependency.html#method-i-merge","(other)","<p>Merges the requirements of <code>other</code> into this dependency\n"],["merge","Hash","Hash.html#method-i-merge","(p1)","<p>Returns a new hash containing the contents of <em>other_hash</em> and the\ncontents of <em>hsh</em>. If no block is specified, …\n"],["merge","RDoc::ClassModule","RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","Set","Set.html#method-i-merge","(enum)","<p>Merges the elements of the given enumerable object to the set and returns\nself.\n"],["merge","URI::Generic","URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["merge!","Hash","Hash.html#method-i-merge-21","(p1)","<p>Adds the contents of <em>other_hash</em> to <em>hsh</em>.  If no block is\nspecified, entries with duplicate keys are overwritten …\n"],["merge!","URI::Generic","URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["merge_key","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-merge_key","(hash, key, val)",""],["merge_options","Gem::Command","Gem/Command.html#method-i-merge_options","(new_options)","<p>Merge a set of command options with the set of default options (without\nmodifying the default option …\n"],["merge_path","URI::Generic","URI/Generic.html#method-i-merge_path","(base, rel)","<p>Merges a base path <code>base</code>, with relative path <code>rel</code>,\nreturns a modified base path.\n"],["message","Exception","Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this\nreturns the exception&#39;s message or name. …\n"],["message","Gem::Resolver::Molinillo::NoSuchDependencyError","Gem/Resolver/Molinillo/NoSuchDependencyError.html#method-i-message","()","<p>The error message for the missing dependency, including the specifications\nthat had this dependency. …\n"],["message","Net::SMTP::Response","Net/SMTP/Response.html#method-i-message","()","<p>The first line of the human readable reply text\n"],["message","OptionParser::ParseError","OptionParser/ParseError.html#method-i-message","()","<p>Default stringizing method to emit standard error message.\n"],["message_loop","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-c-message_loop","()","<p>Translates and dispatches Windows message.\n"],["meta_vars","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-meta_vars","()","<p>This method provides the metavariables defined by the revision 3 of “The\nWWW Common Gateway Interface …\n"],["method","Object","Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a\n<code>Method</code> object (or raising <code>NameError</code>). The …\n"],["method_added","Module","Module.html#method-i-method_added","(p1)","<p>Invoked as a callback whenever an instance method is added to the receiver.\n\n<pre>module Chatty\n  def self.method_added(method_name) ...</pre>\n"],["method_added","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-method_added","(id)",""],["method_defined?","Module","Module.html#method-i-method_defined-3F","(p1)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>\n(or its included modules and, if <em>mod</em> is a class, its …\n"],["method_file","RDoc::Store","RDoc/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_id","TracePoint","TracePoint.html#method-i-method_id","()","<p>Return the name at the definition of the method being called\n"],["method_missing","BasicObject","BasicObject.html#method-i-method_missing","(*args)","<p>Invoked by Ruby when <em>obj</em> is sent a message it cannot handle.\n<em>symbol</em> is the symbol for the method called, …\n"],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced remote object.\n"],["method_missing","DRb::DRbObject","DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced remote object.\n"],["method_missing","Delegator","Delegator.html#method-i-method_missing","(m, *args, &block)","<p>Handles the magic of delegation through _<em>getobj</em>_.\n"],["method_missing","REXML::QuickPath","REXML/QuickPath.html#method-c-method_missing","( id, *args )",""],["method_missing","WIN32OLE","WIN32OLE.html#method-i-method_missing","(*args)","<p>Calls WIN32OLE#invoke method.\n"],["method_missing","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-i-method_missing","(*args)","<p>Returns value specified by the member name of VT_RECORD OLE variable. Or\nsets value specified by the …\n"],["method_removed","Module","Module.html#method-i-method_removed","(p1)","<p>Invoked as a callback whenever an instance method is removed from the\nreceiver.\n\n<pre>module Chatty\n  def self.method_removed(method_name) ...</pre>\n"],["method_undefined","Module","Module.html#method-i-method_undefined","(p1)","<p>Not documented\n"],["methods","Delegator","Delegator.html#method-i-methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["methods","Object","Object.html#method-i-methods","(*args)","<p>Returns a list of the names of public and protected methods of\n<em>obj</em>. This will include all the methods ...\n"],["methods_by_type","RDoc::Context","RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>&#39;class&#39;</code>\nor <code>&#39;instance&#39;</code>) and visibility …\n"],["methods_matching","RDoc::Context","RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in\n<code>methods</code>.\n"],["mime_split","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-mime_split","()","<p>Splits the type attribute into an array, e.g. [“text”, “xml”]\n"],["mime_type","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-mime_type","(filename, mime_tab)","<p>Returns the mime type of <code>filename</code> from the list in\n<code>mime_tab</code>.  If no mime type was found application/octet-stream\n…\n"],["mime_type","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-mime_type","(filename, mime_tab)","<p>Returns the mime type of <code>filename</code> from the list in\n<code>mime_tab</code>.  If no mime type was found application/octet-stream\n…\n"],["min","Array","Array.html#method-i-min","(p1 = v1)","<p>Returns the object in <em>ary</em> with the minimum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["min","Date","Date.html#method-i-min","()","<p>Returns the minute (0-59).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">min</span>          <span class=\"ruby-comment\">#=&gt; 5</span>\n</pre>\n"],["min","Enumerable","Enumerable.html#method-i-min","(p1 = v1)","<p>Returns the object in <em>enum</em> with the minimum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["min","Range","Range.html#method-i-min","(*args)","<p>Returns the minimum value in the range. Returns <code>nil</code> if the\nbegin value of the range is larger than the …\n"],["min","Time","Time.html#method-i-min","()","<p>Returns the minute of the hour (0..59) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:25:51 -0600\nt.min   ...</pre>\n"],["min_by","Enumerable","Enumerable.html#method-i-min_by","(p1 = v1)","<p>Returns the object in <em>enum</em> that gives the minimum value from the\ngiven block.\n<p>If no block is given, an …\n"],["minmax","Enumerable","Enumerable.html#method-i-minmax","()","<p>Returns a two element array which contains the minimum and the maximum\nvalue in the enumerable.  The …\n"],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","()","<p>Returns a two element array containing the objects in <em>enum</em> that\ncorrespond to the minimum and maximum …\n"],["minor","Matrix","Matrix.html#method-i-minor","(*param)","<p>Returns a section of the matrix.  The parameters are either:\n<p>start_row, nrows, start_col, ncols; OR\n<p>row_range …\n"],["minor_version","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-minor_version","()","<p>Returns minor version.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;)\nputs ...</pre>\n"],["minor_version","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-minor_version","()","<p>Returns the type library minor version.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</pre>\n"],["minute","Date","Date.html#method-i-minute","()","<p>Returns the minute (0-59).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">min</span>          <span class=\"ruby-comment\">#=&gt; 5</span>\n</pre>\n"],["minute=","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-minute-3D","(minute)",""],["minute=","RSS::Maker::ITunesItemModel::ITunesDurationBase","RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-minute-3D","(minute)",""],["missing_extensions?","Gem::Specification","Gem/Specification.html#method-i-missing_extensions-3F","()","<p>Is this specification missing its extensions?  When this returns true you\nprobably want to build_extensions …\n"],["mjd","Date","Date.html#method-i-mjd","()","<p>Returns the modified Julian day number.  This is a whole number, which is\nadjusted by the offset as the …\n"],["mkcol","Net::HTTP","Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["mkdir","Dir","Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified\nby the optional parameter <em>anInteger</em> …\n"],["mkdir","FileUtils","FileUtils.html#method-c-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates one or more directories.\n\n<pre>FileUtils.mkdir &#39;test&#39;\nFileUtils.mkdir %w( tmp data )\nFileUtils.mkdir ...</pre>\n"],["mkdir","FileUtils","FileUtils.html#method-i-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates one or more directories.\n\n<pre>FileUtils.mkdir &#39;test&#39;\nFileUtils.mkdir %w( tmp data )\nFileUtils.mkdir ...</pre>\n"],["mkdir","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-mkdir","(name, mode)","<p>Creates a new directory in the tar file <code>name</code> with\n<code>mode</code>\n"],["mkdir","Net::FTP","Net/FTP.html#method-i-mkdir","(dirname)","<p>Creates a remote directory.\n"],["mkdir","Pathname","Pathname.html#method-i-mkdir","(p1 = v1)","<p>Create the referenced directory.\n<p>See Dir.mkdir.\n"],["mkdir","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-mkdir","(*path)","<p>Same as Dir.mkdir, except multiple directories are allowed.\n"],["mkdir_p","FileUtils","FileUtils.html#method-i-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates a directory and all its parent directories. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">mkdir_p</span> <span class=\"ruby-string\">&#39;/usr/local/lib/ruby&#39;</span>\n</pre>\n"],["mkdir_p","FileUtils","FileUtils.html#method-c-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates a directory and all its parent directories. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">mkdir_p</span> <span class=\"ruby-string\">&#39;/usr/local/lib/ruby&#39;</span>\n</pre>\n"],["mkfifo","File","File.html#method-c-mkfifo","(*args)",""],["mkpath","FileUtils","FileUtils.html#method-c-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","FileUtils","FileUtils.html#method-i-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","Pathname","Pathname.html#method-i-mkpath","()","<p>Creates a full path, including any intermediate directories that don&#39;t\nyet exist.\n<p>See FileUtils.mkpath …\n"],["mktime","Time","Time.html#method-c-mktime","(*args)","<p>Same as Time::gm, but interprets the values in the local time zone.\n\n<pre>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</pre>\n"],["mktmpdir","Dir","Dir.html#method-c-mktmpdir","(prefix_suffix=nil, *rest)","<p>Dir.mktmpdir creates a temporary directory.\n<p>The directory is created with 0700 permission. Application …\n"],["mlsd","Net::FTP","Net/FTP.html#method-i-mlsd","(pathname = nil)","<p>Returns an array of the entries of the directory specified by\n<code>pathname</code>. Each entry has the facts (e.g., …\n"],["mlst","Net::FTP","Net/FTP.html#method-i-mlst","(pathname = nil)","<p>Returns data (e.g., size, last modification time, entry type, etc.) about\nthe file or directory specified …\n"],["mod_add","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_add","(p1, p2)",""],["mod_exp","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_exp","(p1, p2)",""],["mod_inverse","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_inverse","(p1)",""],["mod_mul","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_mul","(p1, p2)",""],["mod_sqr","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_sqr","(p1)",""],["mod_sub","OpenSSL::BN","OpenSSL/BN.html#method-i-mod_sub","(p1, p2)",""],["mode","BigDecimal","BigDecimal.html#method-c-mode","(p1, p2 = v2)","<p>Controls handling of arithmetic exceptions and rounding. If no value is\nsupplied, the current value is …\n"],["mode","File::Stat","File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The\nmeaning of the bits is platform dependent; …\n"],["models","RSS::Element","RSS/Element.html#method-c-models","()",""],["module","RDoc::Mixin","RDoc/Mixin.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not\nknown.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["module_eval","Module","Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that\nwhen a block is given, constant/class …\n"],["module_exec","Module","Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["module_function","Module","Module.html#method-i-module_function","(*args)","<p>Creates module functions for the named methods. These functions may be\ncalled with the module as a receiver, …\n"],["module_names","RDoc::Store","RDoc/Store.html#method-i-module_names","()","<p>Modules cache accessor.  An Array of all the module (and class) names in\nthe store.\n"],["modules","RDoc::Context","RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules_hash","RDoc::Context","RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::Store","RDoc/Store.html#method-i-modules_hash","()","<p>Hash of all modules known to RDoc\n"],["modulo","BigDecimal","BigDecimal.html#method-i-modulo","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["modulo","Float","Float.html#method-i-modulo","(p1)","<p>Return the modulo after division of <code>float</code> by\n<code>other</code>.\n\n<pre>6543.21.modulo(137)      #=&gt; 104.21\n6543.21.modulo(137.24) ...</pre>\n"],["modulo","Integer","Integer.html#method-i-modulo","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["modulo","Integer","Integer.html#method-i-modulo","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["modulo","Numeric","Numeric.html#method-i-modulo","(p1)","\n<pre>x.modulo(y) means x-y*(x/y).floor</pre>\n<p>Equivalent to <code>num.divmod(numeric)[1]</code>.\n<p>See Numeric#divmod.\n"],["mon","Date","Date.html#method-i-mon","()","<p>Returns the month (1-12).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mon</span>            <span class=\"ruby-comment\">#=&gt; 2</span>\n</pre>\n"],["mon","Time","Time.html#method-i-mon","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...</pre>\n"],["mon_check_owner","MonitorMixin","MonitorMixin.html#method-i-mon_check_owner","()",""],["mon_enter","MonitorMixin","MonitorMixin.html#method-i-mon_enter","()","<p>Enters exclusive section.\n"],["mon_enter_for_cond","MonitorMixin","MonitorMixin.html#method-i-mon_enter_for_cond","(count)",""],["mon_exit","MonitorMixin","MonitorMixin.html#method-i-mon_exit","()","<p>Leaves exclusive section.\n"],["mon_exit_for_cond","MonitorMixin","MonitorMixin.html#method-i-mon_exit_for_cond","()",""],["mon_initialize","MonitorMixin","MonitorMixin.html#method-i-mon_initialize","()","<p>Initializes the MonitorMixin after being included in a class or when an\nobject has been extended with …\n"],["mon_synchronize","MonitorMixin","MonitorMixin.html#method-i-mon_synchronize","()","<p>Enters exclusive section and executes the block.  Leaves the exclusive\nsection automatically when the …\n"],["mon_try_enter","MonitorMixin","MonitorMixin.html#method-i-mon_try_enter","()","<p>Attempts to enter exclusive section.  Returns <code>false</code> if lock\nfails.\n"],["monday?","Date","Date.html#method-i-monday-3F","()","<p>Returns true if the date is Monday.\n"],["monday?","Time","Time.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Monday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2003</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">4</span>)       <span class=\"ruby-comment\">#=&gt; 2003-08-04 00:00:00 -0500 ...</span>\n</pre>\n"],["month","Date","Date.html#method-i-month","()","<p>Returns the month (1-12).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">mon</span>            <span class=\"ruby-comment\">#=&gt; 2</span>\n</pre>\n"],["month","Time","Time.html#method-i-month","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...</pre>\n"],["month_days","Time","Time.html#method-c-month_days","(y, m)",""],["mount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-mount","(dir, servlet, *options)","<p>Mounts <code>servlet</code> on <code>dir</code> passing\n<code>options</code> to the servlet at creation time\n"],["mount_proc","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-mount_proc","(dir, proc=nil, &block)","<p>Mounts <code>proc</code> or <code>block</code> on <code>dir</code> and\ncalls it with a WEBrick::HTTPRequest and WEBrick::HTTPResponse\n"],["mountpoint?","Pathname","Pathname.html#method-i-mountpoint-3F","()","<p>Returns <code>true</code> if <code>self</code> points to a mountpoint.\n"],["move","FileUtils","FileUtils.html#method-c-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","FileUtils","FileUtils.html#method-i-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","Net::HTTP","Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["move","Net::IMAP","Net/IMAP.html#method-i-move","(set, mailbox)","<p>Sends a MOVE command to move the specified message(s) to the end of the\nspecified destination <code>mailbox</code> …\n"],["move","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-move","(port, tuple, sec=nil)","<p>Moves <code>tuple</code> to <code>port</code>.\n"],["msg2str","Logger::Formatter","Logger/Formatter.html#method-i-msg2str","(msg)",""],["mtime","File","File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","File","File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre>File.mtime(&quot;testfile&quot;) ...</pre>\n"],["mtime","File::Stat","File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","Net::FTP","Net/FTP.html#method-i-mtime","(filename, local = false)","<p>Returns the last modification time of the (remote) file.  If\n<code>local</code> is <code>true</code>, it is returned as a local …\n"],["mtime","Pathname","Pathname.html#method-i-mtime","()","<p>Returns the last modified time of the file.\n<p>See File.mtime.\n"],["mtime","Zlib::GzipFile","Zlib/GzipFile.html#method-i-mtime","()","<p>Returns last modification time recorded in the gzip file header.\n"],["mtime=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-mtime-3D","(p1)","<p>Specify the modification time (<code>mtime</code>) in the gzip header.\nUsing an Integer.\n<p>Setting the mtime in the gzip …\n"],["mu_lock","Mutex_m","Mutex_m.html#method-i-mu_lock","()","<p>See Mutex#lock\n"],["mu_locked?","Mutex_m","Mutex_m.html#method-i-mu_locked-3F","()","<p>See Mutex#locked?\n"],["mu_pp","Gem::TestCase","Gem/TestCase.html#method-i-mu_pp","(obj)","<p>Enables pretty-print for all tests\n"],["mu_synchronize","Mutex_m","Mutex_m.html#method-i-mu_synchronize","(&block)","<p>See Mutex#synchronize\n"],["mu_try_lock","Mutex_m","Mutex_m.html#method-i-mu_try_lock","()","<p>See Mutex#try_lock\n"],["mu_unlock","Mutex_m","Mutex_m.html#method-i-mu_unlock","()","<p>See Mutex#unlock\n"],["mul","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-mul","(p1, p2 = v2, p3 = v3)","<p>Performs elliptic curve point multiplication.\n<p>The first form calculates <code>bn1 * point + bn2 * G</code>, where  …\n"],["mult","BigDecimal","BigDecimal.html#method-i-mult","(p1, p2)","<p>Multiply by the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">mult</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n<span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-identifier\">b</span>\n</pre>\n"],["multipart?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-multipart-3F","()","<p>Returns whether the form contained multipart/form-data\n"],["multipart?","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeExtension","Net/IMAP/BodyTypeExtension.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-multipart-3F","()",""],["multipart_form","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-multipart_form","(action = nil, enctype = \"multipart/form-data\")","<p>Generate a Form element with multipart encoding as a String.\n<p>Multipart encoding is used for forms that …\n"],["must_C_version","StringScanner","StringScanner.html#method-c-must_C_version","()","<p>This method is defined for backward compatibility.\n"],["must_call_validators","RSS::Element","RSS/Element.html#method-c-must_call_validators","()",""],["mv","FileUtils","FileUtils.html#method-c-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves file(s) <code>src</code> to <code>dest</code>.  If <code>file</code>\nand <code>dest</code> exist on the different disk partition, the file is\ncopied …\n"],["mv","FileUtils","FileUtils.html#method-i-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves file(s) <code>src</code> to <code>dest</code>.  If <code>file</code>\nand <code>dest</code> exist on the different disk partition, the file is\ncopied …\n"],["n_bytes","Net::POP3","Net/POP3.html#method-i-n_bytes","()","<p>Returns the total size in bytes of all the messages on the POP server.\n"],["n_jobs","IRB::JobManager","IRB/JobManager.html#method-i-n_jobs","()","<p>The total number of irb sessions, used to set <code>irb_name</code> of the\ncurrent Context.\n"],["n_mails","Net::POP3","Net/POP3.html#method-i-n_mails","()","<p>Returns the number of messages on the POP server.\n"],["name","Encoding","Encoding.html#method-i-name","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["name","FileUtils::LowMethods","FileUtils/LowMethods.html#method-i-name","(*)",""],["name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-name","()","<p>Name of the gem\n"],["name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-name","()","<p>The name of this activation request&#39;s specification\n"],["name","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-name","()","<p>The name of the gem this dependency request is requesting.\n"],["name","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-name","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#name)\n"],["name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-name","()","<p>The name of the gem for this specification\n"],["name","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-name","()","<p>The name of the unresolved dependency\n"],["name","Method","Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.  Returns nil for anonymous\nmodules.\n"],["name","NameError","NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-name","()","<p>Returns the name of the cipher which may differ slightly from the original\nname provided.\n"],["name","OpenSSL::Digest","OpenSSL/Digest.html#method-i-name","()","<p>Returns the sn of this Digest algorithm.\n<p>Example\n\n<pre>digest = OpenSSL::Digest::SHA512.new\nputs digest.name ...</pre>\n"],["name","OpenSSL::Engine","OpenSSL/Engine.html#method-i-name","()","<p>Get the descriptive name for this engine\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">load</span>\n<span class=\"ruby-constant\">OpenSSL</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Engine</span>.<span class=\"ruby-identifier\">engines</span> <span class=\"ruby-comment\">#=&gt; [#&lt;OpenSSL::Engine#&gt;, ...</span>\n</pre>\n"],["name","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-name","()",""],["name","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-name","()",""],["name","REXML::Document","REXML/Document.html#method-i-name","()",""],["name","REXML::Functions","REXML/Functions.html#method-c-name","( node_set=nil )",""],["name","REXML::Light::Node","REXML/Light/Node.html#method-i-name","()",""],["name","REXML::NotationDecl","REXML/NotationDecl.html#method-i-name","()","<p>This method retrieves the name of the notation.\n<p>Method contributed by Henrik Martensson\n"],["name","REXML::QuickPath","REXML/QuickPath.html#method-c-name","()",""],["name","Socket::Ifaddr","Socket/Ifaddr.html#method-i-name","()","<p>Returns the interface name of <em>ifaddr</em>.\n"],["name","Thread","Thread.html#method-i-name","()","<p>show the name of the thread.\n"],["name","UnboundMethod","UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-name","()","<p>call-seq\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">WIN32OLE_METHOD</span><span class=\"ruby-comment\">#name</span>\n</pre>\n<p>Returns the name of the method.\n"],["name","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-name","()","<p>Returns name.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;)\nmethod = WIN32OLE_METHOD.new(tobj, ...</pre>\n"],["name","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-name","()","<p>Returns OLE type name.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;)\nputs ...</pre>\n"],["name","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-name","()","<p>Returns the type library name.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;)\nname ...</pre>\n"],["name","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-name","()","<p>Returns the name of variable.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...</pre>\n"],["name=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name=","REXML::Light::Node","REXML/Light/Node.html#method-i-name-3D","( name_str, ns=nil )",""],["name=","REXML::Namespace","REXML/Namespace.html#method-i-name-3D","( name )","<p>Sets the name and the expanded name\n"],["name=","Thread","Thread.html#method-i-name-3D","(p1)","<p>set given name to the ruby thread. On some platform, it may set the name to\npthread and/or kernel.\n"],["name_for","Gem::Resolver","Gem/Resolver.html#method-i-name_for","(dependency)",""],["name_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#name_for)\n"],["name_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for","(dependency)","<p>Returns the name for the given `dependency`. @note This method should be\n&#39;pure&#39;, i.e. the return …\n"],["name_for_explicit_dependency_source","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>(see\nGem::Resolver::Molinillo::SpecificationProvider#name_for_explicit_dependency_source)\n"],["name_for_explicit_dependency_source","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>@return [String] the name of the source of explicit dependencies, i.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_locking_dependency_source","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>(see\nGem::Resolver::Molinillo::SpecificationProvider#name_for_locking_dependency_source)\n"],["name_for_locking_dependency_source","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>@return [String] the name of the source of &#39;locked&#39; dependencies,\ni.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for\nanother module or class return …\n"],["name_for_path","RDoc::Context","RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_list","Encoding","Encoding.html#method-c-name_list","()","<p>Returns the list of available encoding names.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">name_list</span>\n<span class=\"ruby-comment\">#=&gt; [&quot;US-ASCII&quot;, &quot;ASCII-8BIT&quot;, &quot;UTF-8&quot;, ...</span>\n</pre>\n"],["name_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-name_path","(name)","<p>Returns the path to the trusted certificate with the given ASN.1\n<code>name</code>\n"],["name_pattern","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-name_pattern","(args)",""],["name_prefix","RDoc::Alias","RDoc/Alias.html#method-i-name_prefix","()","<p>&#39;::&#39; for the alias of a singleton method/attribute, &#39;#&#39; for\ninstance-level.\n"],["name_prefix","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-name_prefix","()","<p>&#39;::&#39; for a class method/attribute, &#39;#&#39; for an instance\nmethod.\n"],["name_tuple","Gem::Specification","Gem/Specification.html#method-i-name_tuple","()","<p>Return a NameTuple that represents this Specification\n"],["named_captures","MatchData","MatchData.html#method-i-named_captures","()","<p>Returns a Hash using named capture.\n<p>A key of the hash is a name of the named captures. A value of the …\n"],["named_captures","Regexp","Regexp.html#method-i-named_captures","()","<p>Returns a hash representing information about named captures of\n<em>rxp</em>.\n<p>A key of the hash is a name of the …\n"],["names","Encoding","Encoding.html#method-i-names","()","<p>Returns the list of name and aliases of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">WINDOWS_31J</span>.<span class=\"ruby-identifier\">names</span>  <span class=\"ruby-comment\">#=&gt; [&quot;Windows-31J&quot;, ...</span>\n</pre>\n"],["names","MatchData","MatchData.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings. It is same as\nmtch.regexp.names.\n\n<pre>/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/.match(&quot;hoge&quot;).names ...</pre>\n"],["names","Regexp","Regexp.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/</span>.<span class=\"ruby-identifier\">names</span>\n<span class=\"ruby-comment\">#=&gt; [&quot;foo&quot;, ...</span>\n</pre>\n"],["namespace","REXML::Attribute","REXML/Attribute.html#method-i-namespace","(arg=nil)","<p>Returns the namespace URL, if defined, or nil otherwise\n\n<pre>e = Element.new(&quot;el&quot;)\ne.add_namespace(&quot;ns&quot;, &quot;http://url&quot;) ...</pre>\n"],["namespace","REXML::Element","REXML/Element.html#method-i-namespace","(prefix=nil)","<p>Evaluates to the URI for a prefix, or the empty string if no such namespace\nis declared for this element. …\n"],["namespace","REXML::Light::Node","REXML/Light/Node.html#method-i-namespace","( prefix=prefix() )",""],["namespace=","REXML::Light::Node","REXML/Light/Node.html#method-i-namespace-3D","( namespace )",""],["namespace_context","REXML::Functions","REXML/Functions.html#method-c-namespace_context","()",""],["namespace_context=","REXML::Functions","REXML/Functions.html#method-c-namespace_context-3D","(x)",""],["namespace_of","REXML::Light::Node","REXML/Light/Node.html#method-i-namespace_of","( node, prefix=nil )",""],["namespace_uri","REXML::Functions","REXML/Functions.html#method-c-namespace_uri","( node_set=nil )",""],["namespaces","REXML::Attributes","REXML/Attributes.html#method-i-namespaces","()",""],["namespaces","REXML::Element","REXML/Element.html#method-i-namespaces","()",""],["namespaces=","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-namespaces-3D","( namespaces )",""],["namespaces=","REXML::XPathParser","REXML/XPathParser.html#method-i-namespaces-3D","( namespaces={} )",""],["namesplit","REXML::Light::Node","REXML/Light/Node.html#method-i-namesplit","()",""],["nan?","BigDecimal","BigDecimal.html#method-i-nan-3F","()","<p>Returns True if the value is Not a Number.\n"],["nan?","Float","Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <code>float</code> is an invalid IEEE floating\npoint number.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-value\">-1.0</span>      <span class=\"ruby-comment\">#=&gt; -1.0</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">nan?</span>        <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["nary","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-nary","(o)",""],["native","IPAddr","IPAddr.html#method-i-native","()","<p>Returns a new ipaddr built by converting the IPv6 address into a native\nIPv4 address.  If the IP address …\n"],["nc","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-nc","(nonce)",""],["need_base64_encode?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-need_base64_encode-3F","()","<p>Returns true if the content needs to be encoded in base64.\n"],["need_base64_encode?","RSS::Element","RSS/Element.html#method-i-need_base64_encode-3F","()",""],["need_initialize_variables","RSS::Element","RSS/Element.html#method-c-need_initialize_variables","()",""],["need_initialize_variables","RSS::Maker::Base","RSS/Maker/Base.html#method-c-need_initialize_variables","()",""],["need_keeper?","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-need_keeper-3F","()","<p>Checks the tuplespace to see if it needs cleaning.\n"],["need_parent?","RSS::Atom::CommonModel","RSS/Atom/CommonModel.html#method-c-need_parent-3F","()","<p>Returns true\n"],["need_parent?","RSS::Element","RSS/Element.html#method-c-need_parent-3F","()",""],["need_source_encoding_update?","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-need_source_encoding_update-3F","(xml_declaration_encoding)",""],["needs","Gem","Gem.html#method-c-needs","()",""],["negative?","Float","Float.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>float</code> is less than 0.\n"],["negative?","Numeric","Numeric.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>num</code> is less than 0.\n"],["negative?","Rational","Rational.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>rat</code> is less than 0.\n"],["nest","PrettyPrint","PrettyPrint.html#method-i-nest","(indent)","<p>Increases left margin after newline with <code>indent</code> for line\nbreaks added in the block.\n"],["nesting","Module","Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre>module M1\n  module M2\n    $a = Module.nesting ...</pre>\n"],["netmask","Socket::Ifaddr","Socket/Ifaddr.html#method-i-netmask","()","<p>Returns the netmask address of <em>ifaddr</em>. nil is returned if netmask\nis not available in <em>ifaddr</em>.\n"],["new","ACL","ACL.html#method-c-new","(list=nil, order = DENY_ALLOW)","<p>Creates a new ACL from <code>list</code> with an evaluation\n<code>order</code> of DENY_ALLOW or ALLOW_DENY.\n<p>An ACL <code>list</code> is an Array …\n"],["new","ACL::ACLEntry","ACL/ACLEntry.html#method-c-new","(str)","<p>Creates a new entry using <code>str</code>.\n<p><code>str</code> may be “*” or “all” to match any address, an IP …\n"],["new","ACL::ACLList","ACL/ACLList.html#method-c-new","()","<p>Creates an empty ACLList\n"],["new","Addrinfo","Addrinfo.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>returns a new instance of Addrinfo. The instance contains sockaddr, family,\nsocktype, protocol. sockaddr …\n"],["new","Array","Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new array.\n<p>In the first form, if no arguments are sent, the new array will be empty.\nWhen a …\n"],["new","BasicObject","BasicObject.html#method-c-new","()","<p>Not documented\n"],["new","Benchmark::Tms","Benchmark/Tms.html#method-c-new","(utime = 0.0, stime = 0.0, cutime = 0.0, cstime = 0.0, real = 0.0, label = nil)","<p>Returns an initialized Tms object which has <code>utime</code> as the user\nCPU time, <code>stime</code> as the system CPU time, …\n"],["new","BigDecimal","BigDecimal.html#method-c-new","(*args)","<p>Create a new BigDecimal object.\n<p>initial &mdash; The initial value, as an Integer, a Float, a Rational, a BigDecimal …\n"],["new","CGI","CGI.html#method-c-new","(options = {})","<p>Create a new CGI instance.\n<p>tag_maker &mdash; This is the same as using the <code>options_hash</code> form with the value\n<code>{</code> …\n"],["new","CGI::Cookie","CGI/Cookie.html#method-c-new","(name = \"\", *value)","<p>Create a new CGI::Cookie object.\n<p>name_string &mdash; The name of the cookie; in this form, there is no #domain …\n"],["new","CGI::Session","CGI/Session.html#method-c-new","(request, option={})","<p>Create a new CGI::Session object for <code>request</code>.\n<p><code>request</code> is an instance of the <code>CGI</code> class (see\ncgi.rb). <code>option</code> …\n"],["new","CGI::Session::FileStore","CGI/Session/FileStore.html#method-c-new","(session, option={})","<p>Create a new FileStore instance.\n<p>This constructor is used internally by CGI::Session.  The user does not …\n"],["new","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-c-new","(session, option=nil)","<p>Create a new MemoryStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is …\n"],["new","CGI::Session::NullStore","CGI/Session/NullStore.html#method-c-new","(session, option=nil)","<p>Create a new NullStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is a …\n"],["new","CGI::Session::PStore","CGI/Session/PStore.html#method-c-new","(session, option={})","<p>Create a new CGI::Session::PStore instance\n<p>This constructor is used internally by CGI::Session.  The user …\n"],["new","CSV","CSV.html#method-c-new","(data, options = Hash.new)","<p>This constructor will wrap either a String or IO object passed in\n<code>data</code> for reading and/or writing.   …\n"],["new","CSV::Row","CSV/Row.html#method-c-new","(headers, fields, header_row = false)","<p>Construct a new CSV::Row from <code>headers</code> and <code>fields</code>,\nwhich are expected to be Arrays.  If one Array is shorter …\n"],["new","CSV::Table","CSV/Table.html#method-c-new","(array_of_rows)","<p>Construct a new CSV::Table from <code>array_of_rows</code>, which are\nexpected to be CSV::Row objects.  All rows are …\n"],["new","Class","Class.html#method-c-new","(p1 = v1)","<p>Creates a new anonymous (unnamed) class with the given superclass (or\n<code>Object</code> if no parameter is given). …\n"],["new","Class","Class.html#method-i-new","(*args)","<p>Calls <code>allocate</code> to create a new object of <em>class</em>&#39;s\nclass, then invokes that object&#39;s <code>initialize</code> …\n"],["new","ConditionVariable","ConditionVariable.html#method-c-new","()","<p>Creates a new condition variable instance.\n"],["new","DBM","DBM.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Open a dbm database with the specified name, which can include a directory\npath. Any file extensions …\n"],["new","DRb::DRbArray","DRb/DRbArray.html#method-c-new","(ary)","<p>Creates a new DRbArray that either dumps or wraps all the items in the\nArray <code>ary</code> so they can be loaded …\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this …\n"],["new","DRb::DRbObject","DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this …\n"],["new","DRb::DRbRemoteError","DRb/DRbRemoteError.html#method-c-new","(error)","<p>Creates a new remote error that wraps the Exception <code>error</code>\n"],["new","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-new","(uri, soc, config, is_established)","<p>Create a DRb::DRbSSLSocket instance.\n<p><code>uri</code> is the URI we are connected to. <code>soc</code> is the\ntcp socket we are …\n"],["new","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-c-new","(config)","<p>Create a new DRb::DRbSSLSocket::SSLConfig instance\n<p>The DRb::DRbSSLSocket will take either a <code>config</code> Hash …\n"],["new","DRb::DRbServer","DRb/DRbServer.html#method-c-new","(uri=nil, front=nil, config_or_acl=nil)","<p>Create a new DRbServer instance.\n<p><code>uri</code> is the URI to bind to.  This is normally of the form\n&#39;druby://&lt;hostname&gt;:&lt;port&gt;&#39; …\n"],["new","DRb::DRbUnknown","DRb/DRbUnknown.html#method-c-new","(err, buf)","<p>Create a new DRbUnknown object.\n<p><code>buf</code> is a string containing a marshalled object that could not\nbe unmarshalled. …\n"],["new","DRb::DRbUnknownError","DRb/DRbUnknownError.html#method-c-new","(unknown)","<p>Create a new DRbUnknownError for the DRb::DRbUnknown object\n<code>unknown</code>\n"],["new","DRb::ExtServ","DRb/ExtServ.html#method-c-new","(there, name, server=nil)",""],["new","DRb::ExtServManager","DRb/ExtServManager.html#method-c-new","()",""],["new","DRb::GW","DRb/GW.html#method-c-new","()","<p>Creates a new GW\n"],["new","DRb::TimerIdConv","DRb/TimerIdConv.html#method-c-new","(keeping=600)","<p>Creates a new TimerIdConv which will hold objects for <code>keeping</code>\nseconds.\n"],["new","Date","Date.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given calendar date.\n<p>In this class, BCE years are counted astronomically. …\n"],["new","DateTime","DateTime.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a DateTime object denoting the given calendar date.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>)    <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: ...</span>\n</pre>\n"],["new","Delegator","Delegator.html#method-c-new","(obj)","<p>Pass in the <em>obj</em> to delegate method calls to.  All methods\nsupported by <em>obj</em> will be delegated to.\n"],["new","Digest::Instance","Digest/Instance.html#method-i-new","()","<p>Returns a new, initialized copy of the digest object.  Equivalent to\ndigest_obj.clone().reset().\n"],["new","Dir","Dir.html#method-c-new","(p1, p2 = {})","<p>Returns a new directory object for the named directory.\n<p>The optional <em>enc</em> argument specifies the encoding …\n"],["new","ERB","ERB.html#method-c-new","(str, safe_level=nil, trim_mode=nil, eoutvar='_erbout')","<p>Constructs a new ERB object with the template specified in <em>str</em>.\n<p>An ERB object works by building a chunk …\n"],["new","Encoding::Converter","Encoding/Converter.html#method-c-new","(*args)","<p>possible options elements:\n\n<pre>hash form:\n  :invalid =&gt; nil            # raise error on invalid byte sequence ...</pre>\n"],["new","Enumerator","Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerator object, which can be used as an Enumerable.\n<p>In the first form, iteration is defined …\n"],["new","Enumerator::Lazy","Enumerator/Lazy.html#method-c-new","(*args)","<p>Creates a new Lazy enumerator. When the enumerator is actually enumerated\n(e.g. by calling #force),  …\n"],["new","Exception","Exception.html#method-c-new","(p1 = v1)","<p>Construct a new Exception object, optionally passing in a message.\n"],["new","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-new","(addr, types, func = nil)","<p>Wraps the C pointer <code>addr</code> as a C struct with the given\n<code>types</code>.\n<p>When the instance is garbage collected, the …\n"],["new","Fiddle::Closure","Fiddle/Closure.html#method-c-new","(p1, p2, p3 = v3)","<p>Construct a new Closure object.\n<p><code>ret</code> is the C type to be returned\n<p><code>args</code> is an Array of arguments, passed …\n"],["new","Fiddle::Closure::BlockCaller","Fiddle/Closure/BlockCaller.html#method-c-new","(ctype, args, abi = Fiddle::Function::DEFAULT, &block)","<p>Description\n<p>Construct a new BlockCaller object.\n<p><code>ctype</code> is the C type to be returned\n"],["new","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-c-new","(handlers)","<p>Create a new handler with the open <code>handlers</code>\n<p>Used internally by Fiddle::Importer.dlload\n"],["new","Fiddle::Function","Fiddle/Function.html#method-c-new","(p1, p2, p3, p4 = v4, p5 = {})","<p>Constructs a Function object.\n<p><code>ptr</code> is a referenced function, of a Fiddle::Handle\n<p><code>args</code> is an Array of arguments, …\n"],["new","Fiddle::Handle","Fiddle/Handle.html#method-c-new","(p1 = v1, p2 = v2)","<p>Create a new handler that opens <code>library</code> with\n<code>flags</code>.\n<p>If no <code>library</code> is specified or <code>nil</code> is given,\nDEFAULT …\n"],["new","Fiddle::Pointer","Fiddle/Pointer.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new pointer to <code>address</code> with an optional\n<code>size</code> and <code>freefunc</code>.\n<p><code>freefunc</code> will be called when the instance …\n"],["new","File","File.html#method-c-new","(*args)","<p>Opens the file named by <code>filename</code> according to the given\n<code>mode</code> and returns a new File object.\n<p>See IO.new …\n"],["new","File::Stat","File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if\nthe file doesn&#39;t exist). …\n"],["new","GDBM","GDBM.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a new GDBM instance by opening a gdbm file named <em>filename</em>.\nIf the file does not exist, a new …\n"],["new","Gem::AvailableSet","Gem/AvailableSet.html#method-c-new","()",""],["new","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-new","()",""],["new","Gem::Command","Gem/Command.html#method-c-new","(command, summary=nil, defaults={})","<p>Initializes a generic gem command named <code>command</code>. \n<code>summary</code> is a short description displayed in `gem help …\n"],["new","Gem::CommandManager","Gem/CommandManager.html#method-c-new","()","<p>Register all the subcommands supported by the gem command.\n"],["new","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-c-new","()",""],["new","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-c-new","()",""],["new","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-c-new","()",""],["new","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-c-new","()",""],["new","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-c-new","()",""],["new","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-c-new","()",""],["new","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-c-new","()",""],["new","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-c-new","()",""],["new","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-c-new","()",""],["new","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-c-new","()",""],["new","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-c-new","()",""],["new","Gem::Commands::ListCommand","Gem/Commands/ListCommand.html#method-c-new","()",""],["new","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-c-new","()",""],["new","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-c-new","()",""],["new","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-c-new","()",""],["new","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-c-new","()",""],["new","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-c-new","()",""],["new","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-c-new","()",""],["new","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-c-new","()",""],["new","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-c-new","(name = 'query', summary = 'Query gem information in local or remote repositories')",""],["new","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-c-new","()",""],["new","Gem::Commands::SearchCommand","Gem/Commands/SearchCommand.html#method-c-new","()",""],["new","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-c-new","()",""],["new","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-c-new","()",""],["new","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-c-new","()",""],["new","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-c-new","()",""],["new","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-c-new","()",""],["new","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-c-new","()",""],["new","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-c-new","()",""],["new","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-c-new","()",""],["new","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-c-new","()",""],["new","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-c-new","()",""],["new","Gem::ConfigFile","Gem/ConfigFile.html#method-c-new","(args)","<p>Create the config file object.  <code>args</code> is the list of arguments\nfrom the command line.\n<p>The following command …\n"],["new","Gem::ConflictError","Gem/ConflictError.html#method-c-new","(target, conflicts)",""],["new","Gem::ConsoleUI","Gem/ConsoleUI.html#method-c-new","()","<p>The Console UI has no arguments as it defaults to reading input from stdin,\noutput to stdout and warnings …\n"],["new","Gem::Dependency","Gem/Dependency.html#method-c-new","(name, *requirements)","<p>Constructs a dependency with <code>name</code> and\n<code>requirements</code>. The last argument can optionally be the\ndependency …\n"],["new","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-c-new","(options = {})","<p>Creates a new installer instance.\n<p>Options are:\n<p>:cache_dir &mdash; Alternate repository path to store .gem files …\n"],["new","Gem::DependencyList","Gem/DependencyList.html#method-c-new","(development = false)","<p>Creates a new DependencyList.  If <code>development</code> is true,\ndevelopment dependencies will be included.\n"],["new","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-c-new","(conflict)",""],["new","Gem::Doctor","Gem/Doctor.html#method-c-new","(gem_repository, dry_run = false)","<p>Creates a new Gem::Doctor that will clean up <code>gem_repository</code>. \nOnly one gem repository may be cleaned …\n"],["new","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-new","(spec, build_args = spec.build_args)","<p>Creates a new extension builder for <code>spec</code>.  If the\n<code>spec</code> does not yet have build arguments, saved, set …\n"],["new","Gem::FakeFetcher","Gem/FakeFetcher.html#method-c-new","()",""],["new","Gem::FilePermissionError","Gem/FilePermissionError.html#method-c-new","(directory)",""],["new","Gem::GemRunner","Gem/GemRunner.html#method-c-new","(options={})",""],["new","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-c-new","(request, conflicts)",""],["new","Gem::Indexer","Gem/Indexer.html#method-c-new","(directory, options = {})","<p>Create an indexer that will index the gems in <code>directory</code>.\n"],["new","Gem::Installer","Gem/Installer.html#method-c-new","(package, options={})","<p>Constructs an Installer instance that will install the gem located at\n<code>gem</code>.  <code>options</code> is a Hash with the …\n"],["new","Gem::Installer::FakePackage","Gem/Installer/FakePackage.html#method-c-new","(spec)",""],["new","Gem::List","Gem/List.html#method-c-new","(value = nil, tail = nil)",""],["new","Gem::MissingSpecError","Gem/MissingSpecError.html#method-c-new","(name, requirement)",""],["new","Gem::MissingSpecVersionError","Gem/MissingSpecVersionError.html#method-c-new","(name, requirement, specs)",""],["new","Gem::MockGemUi","Gem/MockGemUi.html#method-c-new","(input = \"\")",""],["new","Gem::MockGemUi::InputEOFError","Gem/MockGemUi/InputEOFError.html#method-c-new","(question)",""],["new","Gem::MockGemUi::TermError","Gem/MockGemUi/TermError.html#method-c-new","(exit_code)",""],["new","Gem::NameTuple","Gem/NameTuple.html#method-c-new","(name, version, platform=\"ruby\")",""],["new","Gem::Package","Gem/Package.html#method-c-new","(gem, security_policy = nil)","<p>Creates a new Gem::Package for the file at <code>gem</code>.\n<code>gem</code> can also be provided as an IO object.\n<p>If <code>gem</code> is an …\n"],["new","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-new","(io, digests)","<p>Creates a new DigestIO instance.  Using ::wrap is recommended, see the\n::wrap documentation for documentation …\n"],["new","Gem::Package::FormatError","Gem/Package/FormatError.html#method-c-new","(message, source = nil)",""],["new","Gem::Package::Old","Gem/Package/Old.html#method-c-new","(gem, security_policy)","<p>Creates a new old-format package reader for <code>gem</code>.  Old-format\npackages cannot be written.\n"],["new","Gem::Package::PathError","Gem/Package/PathError.html#method-c-new","(destination, destination_dir)",""],["new","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-new","(vals)","<p>Creates a new TarHeader using <code>vals</code>\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new TarReader on <code>io</code> and yields it to the block, if\ngiven.\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new tar file reader on <code>io</code> which needs to respond to\n#pos, #eof?, #read, #getc and #pos=\n"],["new","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-new","(header, io)","<p>Creates a new tar entry for <code>header</code> that will be read from\n<code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter that will write to <code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter, yielding it if a block is given\n"],["new","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-c-new","(io, limit)","<p>Wraps <code>io</code> and allows up to <code>limit</code> bytes to be\nwritten\n"],["new","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-c-new","(io)","<p>Creates a new RestrictedStream wrapping <code>io</code>\n"],["new","Gem::PackageTask","Gem/PackageTask.html#method-c-new","(gem_spec)","<p>Create a Gem Package task library.  Automatically define the gem if a block\nis given.  If no block is …\n"],["new","Gem::PathSupport","Gem/PathSupport.html#method-c-new","(env)","<p>Constructor. Takes a single argument which is to be treated like a\nhashtable, or defaults to ENV, the …\n"],["new","Gem::Platform","Gem/Platform.html#method-c-new","(arch)",""],["new","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-c-new","(name, version)",""],["new","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-new","(proxy=nil, dns=Resolv::DNS.new, headers={})","<p>Initialize a remote fetcher using the source URI and possible proxy\ninformation.\n<p><code>proxy</code>\n<p>[String]: explicit …\n"],["new","Gem::RemoteFetcher::FetchError","Gem/RemoteFetcher/FetchError.html#method-c-new","(message, uri)",""],["new","Gem::Request","Gem/Request.html#method-c-new","(uri, request_class, last_modified, pool)",""],["new","Gem::RequestSet","Gem/RequestSet.html#method-c-new","(*deps)","<p>Creates a RequestSet for a list of Gem::Dependency objects,\n<code>deps</code>.  You can then #resolve and #install …\n"],["new","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-c-new","(set, path)","<p>Creates a new GemDependencyAPI that will add dependencies to the\nGem::RequestSet <code>set</code> based on the dependency …\n"],["new","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-new","(request_set, gem_deps_file, dependencies)",""],["new","Gem::RequestSet::Lockfile::ParseError","Gem/RequestSet/Lockfile/ParseError.html#method-c-new","(message, column, line, path)","<p>Raises a ParseError with the given <code>message</code> which was\nencountered at a <code>line</code> and <code>column</code> while parsing. …\n"],["new","Gem::RequestSet::Lockfile::Parser","Gem/RequestSet/Lockfile/Parser.html#method-c-new","(tokenizer, set, platforms, filename = nil)","<p>Parses lockfiles\n"],["new","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-c-new","(input, filename = nil, line = 0, pos = 0)",""],["new","Gem::Requirement","Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can\nbe Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Resolver","Gem/Resolver.html#method-c-new","(needed, set = nil)","<p>Create Resolver object which will resolve the tree starting with\n<code>needed</code> Dependency objects.\n<p><code>set</code> is an …\n"],["new","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-c-new","(dep_uri = 'https://rubygems.org/api/v1/dependencies')","<p>Creates a new APISet that will retrieve gems from <code>uri</code> using\nthe RubyGems API URL <code>dep_uri</code> which is described …\n"],["new","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-c-new","(set, api_data)","<p>Creates an APISpecification for the given <code>set</code> from the\nrubygems.org <code>api_data</code>.\n<p>See guides.rubygems.org/rubygems-org-api/#misc_methods …\n"],["new","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-c-new","(spec, request, others_possible = true)","<p>Creates a new ActivationRequest that will activate <code>spec</code>.  The\nparent <code>request</code> is used to provide diagnostics …\n"],["new","Gem::Resolver::BestSet","Gem/Resolver/BestSet.html#method-c-new","(sources = Gem.sources)","<p>Creates a BestSet for the given <code>sources</code> or Gem::sources if\nnone are specified.  <code>sources</code> must be a Gem::SourceList …\n"],["new","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-c-new","(*sets)","<p>Creates a new ComposedSet containing <code>sets</code>.  Use\nGem::Resolver::compose_sets instead.\n"],["new","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-c-new","(dependency, activated, failed_dep=dependency)","<p>Creates a new resolver conflict when <code>dependency</code> is in conflict\nwith an already <code>activated</code> specification. …\n"],["new","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-c-new","(dependency, requester)","<p>Creates a new DependencyRequest for <code>dependency</code> from\n<code>requester</code>. +requester may be nil if the request came …\n"],["new","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-c-new","(set, name, version, source, platform)","<p>An IndexSpecification is created from the index format described in `gem\nhelp generate_index`.\n<p>The <code>set</code> …\n"],["new","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-c-new","(domain)","<p>Creates a new InstallerSet that will look for gems in <code>domain</code>.\n"],["new","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-c-new","(sources)","<p>Creates a new LockSet from the given <code>sources</code>\n"],["new","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-c-new","(set, name, version, sources, platform)",""],["new","Gem::Resolver::Molinillo::CircularDependencyError","Gem/Resolver/Molinillo/CircularDependencyError.html#method-c-new","(nodes)","<p>Initializes a new error with the given circular vertices. @param\n[Array&lt;DependencyGraph::Vertex&gt;] …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-c-new","()","<p>Initializes an empty dependency graph\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-new","(origin, destination, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String]\norigin the name of the origin …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-c-new","(origin_name, destination_name, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String]\norigin_name the name of the …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-new","(name)","<p>Initialize an action to detach a vertex from a dependency graph @param\n[String] name the name of the …\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-c-new","()","<p>Initializes an empty log\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-c-new","(tag)","<p>Initialize an action to tag a state of a dependency graph @param [Object]\ntag an opaque tag\n"],["new","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-c-new","(name, payload)","<p>Initializes a vertex with the given name and payload. @param [String] name\nsee {#name} @param [Object] …\n"],["new","Gem::Resolver::Molinillo::NoSuchDependencyError","Gem/Resolver/Molinillo/NoSuchDependencyError.html#method-c-new","(dependency, required_by = [])","<p>Initializes a new error with the given missing dependency. @param [Object]\ndependency @see {#dependency} …\n"],["new","Gem::Resolver::Molinillo::Resolver","Gem/Resolver/Molinillo/Resolver.html#method-c-new","(specification_provider, resolver_ui)","<p>Initializes a new resolver. @param  [SpecificationProvider]\nspecification_provider\n\n<pre>see {#specification_provider}</pre>\n"],["new","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-c-new","(specification_provider, resolver_ui, requested, base)","<p>Initializes a new resolution. @param [SpecificationProvider]\nspecification_provider\n\n<pre>see {#specification_provider}</pre>\n"],["new","Gem::Resolver::Molinillo::VersionConflict","Gem/Resolver/Molinillo/VersionConflict.html#method-c-new","(conflicts)","<p>Initializes a new error with the given version conflicts. @param [{String\n=&gt; Resolution::Conflict}] …\n"],["new","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-c-new","()","<p>Creates a new RequirementList.\n"],["new","Gem::Resolver::SourceSet","Gem/Resolver/SourceSet.html#method-c-new","()","<p>Creates a SourceSet for the given <code>sources</code> or Gem::sources if\nnone are specified.  <code>sources</code> must be a  …\n"],["new","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-c-new","(set, spec, source = nil)","<p>A SpecSpecification is created for a <code>set</code> for a\nGem::Specification in <code>spec</code>.  The <code>source</code> is either\nwhere …\n"],["new","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-c-new","()","<p>Sets default instance variables for the specification.\n"],["new","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-c-new","()",""],["new","Gem::Security::Policy","Gem/Security/Policy.html#method-c-new","(name, policy = {})","<p>Create a new Gem::Security::Policy object with the given mode and options.\n"],["new","Gem::Security::Signer","Gem/Security/Signer.html#method-c-new","(key, cert_chain, passphrase = nil)","<p>Creates a new signer with an RSA <code>key</code> or path to a key, and a\ncertificate <code>chain</code> containing X509 certificates, …\n"],["new","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-c-new","(dir, permissions = DEFAULT_PERMISSIONS)","<p>Creates a new TrustDir using <code>dir</code> where the directory and file\npermissions will be checked according to …\n"],["new","Gem::Server","Gem/Server.html#method-c-new","(gem_dirs, port, daemon, launch = nil, addresses = nil)",""],["new","Gem::SilentUI","Gem/SilentUI.html#method-c-new","()","<p>The SilentUI has no arguments as it does not use any stream.\n"],["new","Gem::Source","Gem/Source.html#method-c-new","(uri)","<p>Creates a new Source which will use the index located at <code>uri</code>.\n"],["new","Gem::Source::Git","Gem/Source/Git.html#method-c-new","(name, repository, reference, submodules = false)","<p>Creates a new git gem source for a gems from loaded from\n<code>repository</code> at the given <code>reference</code>.  The\n<code>name</code> …\n"],["new","Gem::Source::Lock","Gem/Source/Lock.html#method-c-new","(source)","<p>Creates a new Lock source that wraps <code>source</code> and moves it\nearlier in the sort list.\n"],["new","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-c-new","(file)","<p>Creates a new SpecificFile for the gem in <code>file</code>\n"],["new","Gem::Source::Vendor","Gem/Source/Vendor.html#method-c-new","(path)","<p>Creates a new Vendor source for a gem that was unpacked at\n<code>path</code>.\n"],["new","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-c-new","(source, error)","<p>Creates a new SourceFetchProblem for the given <code>source</code> and\n<code>error</code>.\n"],["new","Gem::SourceList","Gem/SourceList.html#method-c-new","()","<p>Creates a new SourceList\n"],["new","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-new","(sources = nil)","<p>Creates a new SpecFetcher.  Ordinarily you want to use the default fetcher\nfrom Gem::SpecFetcher::fetcher …\n"],["new","Gem::SpecificGemNotFoundException","Gem/SpecificGemNotFoundException.html#method-c-new","(name, version, errors=nil)","<p>Creates a new SpecificGemNotFoundException for a gem with the given\n<code>name</code> and <code>version</code>.  Any <code>errors</code>\nencountered …\n"],["new","Gem::Specification","Gem/Specification.html#method-c-new","(name = nil, version = nil)","<p>Specification constructor. Assigns the default values to the attributes and\nyields itself for further …\n"],["new","Gem::StreamUI","Gem/StreamUI.html#method-c-new","(in_stream, out_stream, err_stream=STDERR, usetty=true)","<p>Creates a new StreamUI wrapping <code>in_stream</code> for user input,\n<code>out_stream</code> for standard output, <code>err_stream</code> …\n"],["new","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-c-new","(out_stream, *args)","<p>The silent download reporter ignores all arguments\n"],["new","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = nil)","<p>Creates a silent progress reporter that ignores all input arguments.\n"],["new","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")","<p>Creates a new progress reporter that will write to <code>out_stream</code>\nfor <code>size</code> items.  Shows the given <code>initial_message</code>\n…\n"],["new","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-c-new","(out_stream, *args)","<p>Creates a new verbose download reporter that will display on\n<code>out_stream</code>.  The other arguments are ignored. …\n"],["new","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = 'complete')","<p>Creates a new progress reporter that will write to <code>out_stream</code>\nfor <code>size</code> items.  Shows the given <code>initial_message</code>\n…\n"],["new","Gem::SystemExitException","Gem/SystemExitException.html#method-c-new","(exit_code)","<p>Creates a new SystemExitException with the given <code>exit_code</code>\n"],["new","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-c-new","(specs)","<p>Creates a new StaticSet for the given <code>specs</code>\n"],["new","Gem::Uninstaller","Gem/Uninstaller.html#method-c-new","(gem, options = {})","<p>Constructs an uninstaller that will uninstall <code>gem</code>\n"],["new","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-c-new","(dep, platform_mismatch=nil)","<p>Creates a new UnsatisfiableDependencyError for the unsatisfiable\nGem::Resolver::DependencyRequest <code>dep</code> …\n"],["new","Gem::UriFormatter","Gem/UriFormatter.html#method-c-new","(uri)","<p>Creates a new URI formatter for <code>uri</code>.\n"],["new","Gem::Version","Gem/Version.html#method-c-new","(version)","<p>Constructs a Version from the <code>version</code> string.  A version\nstring is a series of digits or ASCII letters …\n"],["new","GetoptLong","GetoptLong.html#method-c-new","(*arguments)","<p>Set up option processing.\n<p>The options to support are passed to new() as an array of arrays. Each\nsub-array …\n"],["new","Hash","Hash.html#method-c-new","(*args)","<p>Returns a new, empty hash. If this hash is subsequently accessed by a key\nthat doesn&#39;t correspond …\n"],["new","IO","IO.html#method-c-new","(p1, p2 = v2, p3 = {})","<p>Returns a new IO object (a stream) for the given integer file descriptor\n<code>fd</code> and <code>mode</code> string.  <code>opt</code> may …\n"],["new","IPAddr","IPAddr.html#method-c-new","(addr = '::', family = Socket::AF_UNSPEC)","<p>Creates a new ipaddr object either from a human readable IP address\nrepresentation in string, or from …\n"],["new","IRB::Context","IRB/Context.html#method-c-new","(irb, workspace = nil, input_method = nil, output_method = nil)","<p>Creates a new IRB context.\n<p>The optional <code>input_method</code> argument:\n<p>nil &mdash; uses stdin or Readline\n"],["new","IRB::FileInputMethod","IRB/FileInputMethod.html#method-c-new","(file)","<p>Creates a new input method object\n"],["new","IRB::Frame","IRB/Frame.html#method-c-new","()","<p>Creates a new stack frame\n"],["new","IRB::InputMethod","IRB/InputMethod.html#method-c-new","(file = STDIN_FILE_NAME)","<p>Creates a new input method object\n"],["new","IRB::Inspector","IRB/Inspector.html#method-c-new","(inspect_proc, init_proc = nil)","<p>Creates a new inspector object, using the given <code>inspect_proc</code>\nwhen output return values in irb.\n"],["new","IRB::Irb","IRB/Irb.html#method-c-new","(workspace = nil, input_method = nil, output_method = nil)","<p>Creates a new irb session\n"],["new","IRB::JobManager","IRB/JobManager.html#method-c-new","()","<p>Creates a new JobManager object\n"],["new","IRB::Locale","IRB/Locale.html#method-c-new","(locale = nil)",""],["new","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-c-new","(prefix, base_notifier)","<p>Creates a new Notifier object\n"],["new","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-c-new","(prefix, base_notifier)","<p>Create a new composite notifier object with the given <code>prefix</code>,\nand <code>base_notifier</code> to use for output.\n"],["new","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-c-new","(base, level, prefix)","<p>Create a new leveled notifier with the given <code>base</code>, and\n<code>prefix</code> to send to AbstractNotifier.new\n<p>The given …\n"],["new","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-c-new","()","<p>Creates a new notifier that should not be used to output messages.\n"],["new","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Readline\n"],["new","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-c-new","()","<p>Creates a new input method object\n"],["new","IRB::WorkSpace","IRB/WorkSpace.html#method-c-new","(*main)","<p>Creates a new workspace.\n<p>set self to main if specified, otherwise inherit main from\nTOPLEVEL_BINDING. …\n"],["new","Logger","Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576, level: DEBUG, progname: nil, formatter: nil, datetime_format: nil, shift_period_suffix: '%Y%m%d')","<p>Args\n<p>logdev &mdash; The log device.  This is a filename (String) or IO object (typically\n<code>STDOUT</code>, <code>STDERR</code>, or an …\n"],["new","Logger::Formatter","Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","Logger/LogDevice.html#method-c-new","(log = nil, shift_age: nil, shift_size: nil, shift_period_suffix: nil)",""],["new","Matrix","Matrix.html#method-c-new","(rows, column_count = rows[0].size)","<p>Matrix.new is private; use Matrix.rows, columns, [], etc… to create.\n"],["new","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-c-new","(a)","<p>Constructs the eigenvalue decomposition for a square matrix <code>A</code>\n"],["new","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-c-new","(a)",""],["new","Module","Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the\nmodule object, and the block is …\n"],["new","MonitorMixin","MonitorMixin.html#method-c-new","(*args)","<p>Use <code>extend MonitorMixin</code> or <code>include MonitorMixin</code>\ninstead of this constructor.  Have look at the examples …\n"],["new","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-c-new","(monitor)",""],["new","NameError","NameError.html#method-c-new","(*args)","<p>Construct a new NameError exception. If given the <em>name</em> parameter\nmay subsequently be examined using the …\n"],["new","Net::FTP","Net/FTP.html#method-c-new","(host = nil, user_or_options = {}, passwd = nil, acct = nil)","<p>Creates and returns a new <code>FTP</code> object. If a <code>host</code>\nis given, a connection is made.\n<p><code>options</code> is an option hash, …\n"],["new","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-c-new","(facts, pathname)",""],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates a new Net::HTTP object without opening a TCP connection or HTTP\nsession.\n<p>The <code>address</code> should be …\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without\nopening the TCP connection or …\n"],["new","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-c-new","(m, reqbody, resbody, uri_or_path, initheader = nil)",""],["new","Net::HTTPRequest","Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates an HTTP request object for <code>path</code>.\n<p><code>initheader</code> are the default headers to use.  Net::HTTP adds\nAccept-Encoding …\n"],["new","Net::IMAP","Net/IMAP.html#method-c-new","(host, port_or_options = {}, usessl = false, certs = nil, verify = true)","<p>Creates a new Net::IMAP object and connects it to the specified\n<code>host</code>.\n<p><code>options</code> is an option hash, each …\n"],["new","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-c-new","(user, password, authname = nil)",""],["new","Net::IMAP::LoginAuthenticator","Net/IMAP/LoginAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::PlainAuthenticator","Net/IMAP/PlainAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::ResponseError","Net/IMAP/ResponseError.html#method-c-new","(response)",""],["new","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-c-new","(socket, method)",""],["new","Net::POP3","Net/POP3.html#method-c-new","(addr, port = nil, isapop = false)","<p>Creates a new POP3 object.\n<p><code>address</code> is the hostname or ip address of your POP3 server.\n<p>The optional <code>port</code> …\n"],["new","Net::SMTP","Net/SMTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::SMTP object.\n<p><code>address</code> is the hostname or ip address of your SMTP server. \n<code>port</code> is the …\n"],["new","Net::SMTP::Response","Net/SMTP/Response.html#method-c-new","(status, string)","<p>Creates a new instance of the Response class and sets the status and string\nattributes\n"],["new","NoMethodError","NoMethodError.html#method-c-new","(*args)","<p>Construct a NoMethodError exception for a method of the given name called\nwith the given arguments.  …\n"],["new","OLEProperty","OLEProperty.html#method-c-new","(obj, dispid, gettypes, settypes)",""],["new","OpenSSL::ASN1::ASN1Data","OpenSSL/ASN1/ASN1Data.html#method-c-new","(p1, p2, p3)","<p><code>value</code>: Please have a look at Constructive and Primitive to see\nhow Ruby types are mapped to ASN.1 types …\n"],["new","OpenSSL::ASN1::Constructive","OpenSSL/ASN1/Constructive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><code>value</code>: is mandatory.\n<p><code>tag</code>: optional, may be specified for tagged values. If no\n<code>tag</code> is specified, the UNIVERSAL …\n"],["new","OpenSSL::ASN1::Primitive","OpenSSL/ASN1/Primitive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><code>value</code>: is mandatory.\n<p><code>tag</code>: optional, may be specified for tagged values. If no\n<code>tag</code> is specified, the UNIVERSAL …\n"],["new","OpenSSL::BN","OpenSSL/BN.html#method-c-new","(p1, p2 = v2)","<p>Construct a new OpenSSL BigNum object.\n"],["new","OpenSSL::Buffering","OpenSSL/Buffering.html#method-c-new","(*)","<p>Creates an instance of OpenSSL&#39;s buffering IO module.\n"],["new","OpenSSL::Cipher","OpenSSL/Cipher.html#method-c-new","(p1)","<p>The string must contain a valid cipher name like “AES-128-CBC” or “3DES”.\n<p>A list of …\n"],["new","OpenSSL::Config","OpenSSL/Config.html#method-c-new","(filename = nil)","<p>Creates an instance of OpenSSL&#39;s configuration class.\n<p>This can be used in contexts like OpenSSL::X509::ExtensionFactory.config= …\n"],["new","OpenSSL::Digest","OpenSSL/Digest.html#method-c-new","(p1, p2 = v2)","<p>Creates a Digest instance based on <code>string</code>, which is either the\nln (long name) or sn (short name) of a …\n"],["new","OpenSSL::HMAC","OpenSSL/HMAC.html#method-c-new","(p1, p2)","<p>Returns an instance of OpenSSL::HMAC set with the key and digest algorithm\nto be used. The instance represents …\n"],["new","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-c-new","(p1 = v1)","<p>Parameters\n<p><code>request</code> - optional raw request, either in PEM or DER format.\n\n"],["new","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-c-new","(p1 = v1)","<p>Creates a new BasicResponse. If <code>der_string</code> is given, decodes\n<code>der_string</code> as DER.\n"],["new","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a new OpenSSL::OCSP::CertificateId for the given\n<code>subject</code> and <code>issuer</code> X509 certificates.  The  …\n"],["new","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-c-new","(p1 = v1)","<p>Creates a new OpenSSL::OCSP::Request.  The request may be created empty or\nfrom a <code>request_der</code> string. …\n"],["new","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-c-new","(p1 = v1)","<p>Creates a new OpenSSL::OCSP::Response.  The response may be created empty\nor from a <code>response_der</code> string. …\n"],["new","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-c-new","(p1)","<p>Creates a new SingleResponse from <code>der_string</code>.\n"],["new","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-c-new","(p1 = v1, p2 = v2)","<p>Parameters\n<p><code>str</code> - Must be a DER encoded PKCS12 string.\n<p><code>pass</code> - string\n"],["new","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-new","(p1 = v1)","<p>Many methods in this class aren&#39;t documented.\n"],["new","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-c-new","(p1)",""],["new","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-c-new","(p1, p2, p3)",""],["new","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-c-new","(p1 = v1, p2 = v2)","<p>Either generates a DH instance from scratch or by reading already existing\nDH parameters from <code>string</code> …\n"],["new","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new DSA instance by reading an existing key from\n<code>string</code>.\n<p>Parameters\n<p><code>size</code> is an integer representing …\n"],["new","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new EC object from given arguments.\n"],["new","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new EC::Group object.\n<p><code>ec_method</code> is a symbol that represents an EC_METHOD. Currently\nthe following …\n"],["new","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-c-new","(p1, p2 = v2)","<p>See the OpenSSL documentation for EC_POINT_*\n"],["new","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-c-new","()","<p>Because PKey is an abstract class, actually calling this method explicitly\nwill raise a <code>NotImplementedError</code> …\n"],["new","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Generates or loads an RSA keypair.  If an integer <code>key_size</code> is\ngiven it represents the desired key size. …\n"],["new","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-c-new","(version = nil)","<p>You can get a list of valid methods with OpenSSL::SSL::SSLContext::METHODS\n"],["new","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-c-new","(svr, ctx)","<p>Creates a new instance of SSLServer.\n<p><code>srv</code> is an instance of TCPServer.\n<p><code>ctx</code> is an instance of OpenSSL::SSL::SSLContext …\n"],["new","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-c-new","(p1, p2 = v2)","<p>Creates a new SSL socket from <code>io</code> which must be a real IO\nobject (not an IO-like object that responds …\n"],["new","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-c-new","(p1)","<p>Creates a new Session object from an instance of SSLSocket or DER/PEM\nencoded String.\n"],["new","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-c-new","(p1, p2 = v2)",""],["new","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates an X509 extension.\n<p>The extension may be created from <code>asn1</code> data or from an\nextension <code>name</code> and  …\n"],["new","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)",""],["new","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new Name.\n<p>A name may be created from a DER encoded string <code>der</code>, an Array\nrepresenting a <code>distinguished_name</code> …\n"],["new","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-c-new","(*args)",""],["new","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-c-new","(*args)","<p>Creates a new X509::Store.\n"],["new","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-c-new","(p1, p2 = v2, p3 = v3)",""],["new","OpenStruct","OpenStruct.html#method-c-new","(hash=nil)","<p>Creates a new OpenStruct object.  By default, the resulting OpenStruct\nobject will have no attributes. …\n"],["new","OpenURI::HTTPError","OpenURI/HTTPError.html#method-c-new","(message, io)",""],["new","OpenURI::HTTPRedirect","OpenURI/HTTPRedirect.html#method-c-new","(message, io, uri)",""],["new","OptionParser","OptionParser.html#method-i-new","()","<p>Pushes a new List.\n"],["new","OptionParser","OptionParser.html#method-c-new","(banner = nil, width = 32, indent = ' ' * 4)","<p>Initializes the instance and yields itself if called with a block.\n<p>banner &mdash; Banner message.\n<p>width &mdash; Summary …\n"],["new","OptionParser::Arguable","OptionParser/Arguable.html#method-c-new","(*args)",""],["new","OptionParser::List","OptionParser/List.html#method-c-new","()","<p>Just initializes all instance variables.\n"],["new","OptionParser::ParseError","OptionParser/ParseError.html#method-c-new","(*args)",""],["new","OptionParser::Switch","OptionParser/Switch.html#method-c-new","(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = Proc.new)",""],["new","PStore","PStore.html#method-c-new","(file, thread_safe = false)","<p>To construct a PStore object, pass in the <em>file</em> path where you\nwould like the data to be stored.\n<p>PStore …\n"],["new","Pathname","Pathname.html#method-c-new","(p1)","<p>Create a Pathname object from the given String (or String-like object). If\n<code>path</code> contains a NULL character …\n"],["new","PrettyPrint","PrettyPrint.html#method-c-new","(output=''.dup, maxwidth=79, newline=\"\\n\", &genspace)","<p>Creates a buffer for pretty printing.\n<p><code>output</code> is an output target. If it is not specified, &#39;&#39;\nis …\n"],["new","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-c-new","(output, maxwidth=nil, newline=nil)","<p>Create a PrettyPrint::SingleLine object\n<p>Arguments:\n<p><code>output</code> - String (or similar) to store rendered text. …\n"],["new","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-c-new","()",""],["new","Prime::EratosthenesSieve","Prime/EratosthenesSieve.html#method-c-new","()",""],["new","Prime::Generator23","Prime/Generator23.html#method-c-new","()",""],["new","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-c-new","(ubound = nil)",""],["new","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-c-new","()",""],["new","Proc","Proc.html#method-c-new","(*args)","<p>Creates a new <code>Proc</code> object, bound to the current context.\n<code>Proc::new</code> may be called without a block only …\n"],["new","Psych::ClassLoader::Restricted","Psych/ClassLoader/Restricted.html#method-c-new","(classes, symbols)",""],["new","Psych::Coder","Psych/Coder.html#method-c-new","(tag)",""],["new","Psych::DisallowedClass","Psych/DisallowedClass.html#method-c-new","(klass_name)",""],["new","Psych::Handler::DumperOptions","Psych/Handler/DumperOptions.html#method-c-new","()",""],["new","Psych::Handlers::Recorder","Psych/Handlers/Recorder.html#method-c-new","()",""],["new","Psych::Nodes::Alias","Psych/Nodes/Alias.html#method-c-new","(anchor)","<p>Create a new Alias that points to an <code>anchor</code>\n"],["new","Psych::Nodes::Document","Psych/Nodes/Document.html#method-c-new","(version = [], tag_directives = [], implicit = false)","<p>Create a new Psych::Nodes::Document object.\n<p><code>version</code> is a list indicating the YAML version.\n<code>tags_directives</code> …\n"],["new","Psych::Nodes::Mapping","Psych/Nodes/Mapping.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new Psych::Nodes::Mapping object.\n<p><code>anchor</code> is the anchor associated with the map or\n<code>nil</code>. <code>tag</code> is …\n"],["new","Psych::Nodes::Node","Psych/Nodes/Node.html#method-c-new","()","<p>Create a new Psych::Nodes::Node\n"],["new","Psych::Nodes::Scalar","Psych/Nodes/Scalar.html#method-c-new","(value, anchor = nil, tag = nil, plain = true, quoted = false, style = ANY)","<p>Create a new Psych::Nodes::Scalar object.\n<p><code>value</code> is the string value of the scalar <code>anchor</code> is\nan associated …\n"],["new","Psych::Nodes::Sequence","Psych/Nodes/Sequence.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new object representing a YAML sequence.\n<p><code>anchor</code> is the anchor associated with the sequence or …\n"],["new","Psych::Nodes::Stream","Psych/Nodes/Stream.html#method-c-new","(encoding = UTF8)","<p>Create a new Psych::Nodes::Stream node with an <code>encoding</code> that\ndefaults to Psych::Nodes::Stream::UTF8. …\n"],["new","Psych::Parser","Psych/Parser.html#method-c-new","(handler = Handler.new)","<p>Creates a new Psych::Parser instance with <code>handler</code>.  YAML\nevents will be called on <code>handler</code>.  See Psych::Parser …\n"],["new","Psych::ScalarScanner","Psych/ScalarScanner.html#method-c-new","(class_loader)","<p>Create a new scanner\n"],["new","Psych::Streaming::ClassMethods","Psych/Streaming/ClassMethods.html#method-i-new","(io)","<p>Create a new streaming emitter.  Emitter will print to <code>io</code>. \nSee Psych::Stream for an example.\n"],["new","Psych::SyntaxError","Psych/SyntaxError.html#method-c-new","(file, line, col, offset, problem, context)",""],["new","Psych::TreeBuilder","Psych/TreeBuilder.html#method-c-new","()","<p>Create a new TreeBuilder instance\n"],["new","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-c-new","(block)",""],["new","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-c-new","(io, options = {})",""],["new","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-c-new","(ss, class_loader)",""],["new","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-c-new","(emitter, ss, options)",""],["new","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-c-new","(emitter = nil, ss = nil, options = nil)",""],["new","Queue","Queue.html#method-c-new","()","<p>Creates a new queue instance.\n"],["new","RDoc::Alias","RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases\n<code>old_name</code> to <code>new_name</code>, has <code>comment</code>\nand is …\n"],["new","RDoc::AnyMethod","RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and\n<code>name</code>\n"],["new","RDoc::Attr","RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>,\nread/write status <code>rw</code> and <code>comment</code>. \n<code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional\n<code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Comment","RDoc/Comment.html#method-c-new","(text = nil, location = nil)","<p>Creates a new comment with <code>text</code> that is found in the\nRDoc::TopLevel <code>location</code>.\n"],["new","RDoc::Constant","RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and\n<code>comment</code>\n"],["new","RDoc::Context","RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::CrossReference","RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given\n<code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')","<p>Defaults <code>eoutvar</code> to &#39;io&#39;, otherwise is identical to\nERB&#39;s initialize\n"],["new","RDoc::Markdown","RDoc/Markdown.html#method-c-new","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>Creates a new markdown parser that enables the given\n<code>extensions</code>.\n"],["new","RDoc::Markup","RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure\n(paragraphs, lists, and so …\n"],["new","RDoc::MethodAttr","RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or\nattribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Mixin","RDoc/Mixin.html#method-c-new","(name, comment)","<p>Creates a new Mixin for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Parser","RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>,\n<code>file_name</code>, <code>content</code>, <code>options</code> and\n<code>stats</code> in instance variables. …\n"],["new","RDoc::RDoc","RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and\ngenerate documentation.\n"],["new","RDoc::Require","RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with\n<code>comment</code>\n"],["new","RDoc::RubyLex","RDoc/RubyLex.html#method-c-new","(content, options)","<p>Creates a new lexer for <code>content</code>.  <code>options</code> is an\nRDoc::Options, only +tab_width is used.\n"],["new","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri\ndata generation can be enabled or disabled …\n"],["new","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri\ndata generation can be enabled or disabled …\n"],["new","RDoc::Servlet","RDoc/Servlet.html#method-c-new","(server, stores, cache, mount_path = nil, extra_doc_dirs = [])","<p>Creates a new WEBrick servlet.\n<p>Use <code>mount_path</code> when mounting the servlet somewhere other than\n/.\n<p>Use <code>extra_doc_dirs</code> …\n"],["new","RDoc::Stats","RDoc/Stats.html#method-c-new","(store, num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>. \n<code>verbosity</code> defaults to 1 which will create an\nRDoc::Stats::Normal …\n"],["new","RDoc::Store","RDoc/Store.html#method-c-new","(path = nil, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to\n<code>path</code>\n"],["new","RDoc::Store::MissingFileError","RDoc/Store/MissingFileError.html#method-c-new","(store, file, name)","<p>Creates a new MissingFileError for the missing <code>file</code> for the\ngiven <code>name</code> that should have been in the  …\n"],["new","RDoc::Task","RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview\nfor documentation.\n"],["new","RDoc::Task","RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview\nfor documentation.\n"],["new","RDoc::TomDoc","RDoc/TomDoc.html#method-c-new","()","<p>Creates a new TomDoc parser.  See also RDoc::Markup::parse\n"],["new","RDoc::TopLevel","RDoc/TopLevel.html#method-c-new","(absolute_name, relative_name = absolute_name)","<p>Creates a new TopLevel for the file at <code>absolute_name</code>.  If\ndocumentation is being generated outside the …\n"],["new","REXML::AttlistDecl","REXML/AttlistDecl.html#method-c-new","(source)","<p>Create an AttlistDecl, pulling the information from a Source.  Notice that\nthis isn&#39;t very convenient; …\n"],["new","REXML::Attribute","REXML/Attribute.html#method-c-new","( first, second=nil, parent=nil )","<p>Constructor. FIXME: The parser doesn&#39;t catch illegal characters in\nattributes\n<p>first &mdash; Either: an Attribute …\n"],["new","REXML::Attributes","REXML/Attributes.html#method-c-new","(element)","<p>Constructor\n<p>element &mdash; the Element of which this is an Attribute\n\n"],["new","REXML::CData","REXML/CData.html#method-c-new","( first, whitespace=true, parent=nil )","\n<pre>Constructor.  CData is data between &lt;![CDATA[ ... ]]&gt;</pre>\n<p><em>Examples</em>\n\n<pre>CData.new( source )\nCData.new( &quot;Here is ...</pre>\n"],["new","REXML::Child","REXML/Child.html#method-c-new","( parent = nil )","<p>Constructor.  Any inheritors of this class should call super to make sure\nthis method is called.\n<p>parent … &mdash; "],["new","REXML::Comment","REXML/Comment.html#method-c-new","( first, second = nil )","<p>Constructor.  The first argument can be one of three types: @param first If\nString, the contents of this …\n"],["new","REXML::DTD::ElementDecl","REXML/DTD/ElementDecl.html#method-c-new","(match)","<p>s*(((([“‘]).*?5)|*)*?)(/)?&gt;/um, true)\n"],["new","REXML::DTD::EntityDecl","REXML/DTD/EntityDecl.html#method-c-new","(src)","<p>&lt;!ENTITY name SYSTEM “…”&gt; &lt;!ENTITY name “…”&gt;\n"],["new","REXML::DTD::NotationDecl","REXML/DTD/NotationDecl.html#method-c-new","(src)",""],["new","REXML::Declaration","REXML/Declaration.html#method-c-new","(src)",""],["new","REXML::DocType","REXML/DocType.html#method-c-new","( first, parent=nil )","<p>Constructor\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">dt</span> = <span class=\"ruby-constant\">DocType</span>.<span class=\"ruby-identifier\">new</span>( <span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-string\">&#39;-//I/Hate/External/IDs&#39;</span> )\n<span class=\"ruby-comment\"># &lt;!DOCTYPE foo &#39;-//I/Hate/External/IDs&#39;&gt; ...</span>\n</pre>\n"],["new","REXML::Document","REXML/Document.html#method-c-new","( source = nil, context = {} )","<p>Constructor @param source if supplied, must be a Document, String, or IO.\nDocuments have their context …\n"],["new","REXML::Element","REXML/Element.html#method-c-new","( arg = UNDEFINED, parent=nil, context=nil )","<p>Constructor\n<p>arg &mdash; if not supplied, will be set to the default value. If a String, the name of\nthis object …\n"],["new","REXML::ElementDecl","REXML/ElementDecl.html#method-c-new","( src )",""],["new","REXML::Elements","REXML/Elements.html#method-c-new","(parent)","<p>Constructor\n<p>parent &mdash; the parent Element\n\n"],["new","REXML::Entity","REXML/Entity.html#method-c-new","(stream, value=nil, parent=nil, reference=false)","<p>Create a new entity.  Simple entities can be constructed by passing a name,\nvalue to the constructor; …\n"],["new","REXML::ExternalEntity","REXML/ExternalEntity.html#method-c-new","( src )",""],["new","REXML::Formatters::Default","REXML/Formatters/Default.html#method-c-new","( ie_hack=false )","<p>Prints out the XML document with no formatting – except if id_hack is set.\n<p>ie_hack &mdash; If set to true, then …\n\n"],["new","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-c-new","( indentation=2, ie_hack=false )","<p>Create a new pretty printer.\n<p>output &mdash; An object implementing &#39;&lt;&lt;(String)&#39;, to which the output …\n"],["new","REXML::Formatters::Transitive","REXML/Formatters/Transitive.html#method-c-new","( indentation=2, ie_hack=false )",""],["new","REXML::IOSource","REXML/IOSource.html#method-c-new","(arg, block_size=500, encoding=nil)","<p>block_size has been deprecated\n"],["new","REXML::Instruction","REXML/Instruction.html#method-c-new","(target, content=nil)","<p>Constructs a new Instruction @param target can be one of a number of\nthings.  If String, then the target …\n"],["new","REXML::Light::Node","REXML/Light/Node.html#method-c-new","(node=nil)","<p>Create a new element.\n"],["new","REXML::NotationDecl","REXML/NotationDecl.html#method-c-new","(name, middle, pub, sys)",""],["new","REXML::Output","REXML/Output.html#method-c-new","(real_IO, encd=\"iso-8859-1\")",""],["new","REXML::Parent","REXML/Parent.html#method-c-new","(parent=nil)","<p>Constructor @param parent if supplied, will be set as the parent of this\nobject\n"],["new","REXML::ParseException","REXML/ParseException.html#method-c-new","( message, source=nil, parser=nil, exception=nil )",""],["new","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-c-new","( source )",""],["new","REXML::Parsers::LightParser","REXML/Parsers/LightParser.html#method-c-new","(stream)",""],["new","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-c-new","(arg)","<p>The type of this event.  Will be one of :tag_start, :tag_end, :text,\n:processing_instruction, :comment, …\n"],["new","REXML::Parsers::PullParser","REXML/Parsers/PullParser.html#method-c-new","(stream)",""],["new","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-c-new","(source)",""],["new","REXML::Parsers::StreamParser","REXML/Parsers/StreamParser.html#method-c-new","(source, listener)",""],["new","REXML::Parsers::TreeParser","REXML/Parsers/TreeParser.html#method-c-new","( source, build_context = Document.new )",""],["new","REXML::Parsers::UltraLightParser","REXML/Parsers/UltraLightParser.html#method-c-new","(stream)",""],["new","REXML::Source","REXML/Source.html#method-c-new","(arg, encoding=nil)","<p>Constructor @param arg must be a String, and should be a valid XML document\n@param encoding if non-null, …\n"],["new","REXML::SyncEnumerator","REXML/SyncEnumerator.html#method-c-new","(*enums)","<p>Creates a new SyncEnumerator which enumerates rows of given Enumerable\nobjects.\n"],["new","REXML::Text","REXML/Text.html#method-c-new","(arg, respect_whitespace=false, parent=nil, raw=nil, entity_filter=nil, illegal=NEEDS_A_SECOND_CHECK )","<p>Constructor <code>arg</code> if a String, the content is set to the String.\nIf a Text, the object is shallowly cloned. …\n"],["new","REXML::UndefinedNamespaceException","REXML/UndefinedNamespaceException.html#method-c-new","( prefix, source, parser )",""],["new","REXML::Validation::Choice","REXML/Validation/Choice.html#method-c-new","(context)",""],["new","REXML::Validation::Event","REXML/Validation/Event.html#method-c-new","(event_type, event_arg=nil )",""],["new","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-c-new","(context)",""],["new","REXML::Validation::OneOrMore","REXML/Validation/OneOrMore.html#method-c-new","(context)",""],["new","REXML::Validation::Ref","REXML/Validation/Ref.html#method-c-new","(value)",""],["new","REXML::Validation::RelaxNG","REXML/Validation/RelaxNG.html#method-c-new","(source)","<p>FIXME: Namespaces\n"],["new","REXML::Validation::State","REXML/Validation/State.html#method-c-new","( context )",""],["new","REXML::Validation::ValidationException","REXML/Validation/ValidationException.html#method-c-new","(msg)",""],["new","REXML::XMLDecl","REXML/XMLDecl.html#method-c-new","(version=DEFAULT_VERSION, encoding=nil, standalone=nil)",""],["new","REXML::XPathParser","REXML/XPathParser.html#method-c-new","( )",""],["new","RSS::Atom::Entry","RSS/Atom/Entry.html#method-c-new","(version=nil, encoding=nil, standalone=nil)","<p>Creates a new Atom Entry element.\n"],["new","RSS::Atom::Feed","RSS/Atom/Feed.html#method-c-new","(version=nil, encoding=nil, standalone=nil)","<p>Creates a new Atom feed\n"],["new","RSS::BaseParser","RSS/BaseParser.html#method-c-new","(rss)",""],["new","RSS::ConversionError","RSS/ConversionError.html#method-c-new","(string, to, from)",""],["new","RSS::Converter","RSS/Converter.html#method-c-new","(to_enc, from_enc=nil)",""],["new","RSS::Element","RSS/Element.html#method-c-new","(do_validate=true, attrs=nil)",""],["new","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-c-new","(*args)",""],["new","RSS::ITunesChannelModel::ITunesImage","RSS/ITunesChannelModel/ITunesImage.html#method-c-new","(*args)",""],["new","RSS::ITunesChannelModel::ITunesOwner","RSS/ITunesChannelModel/ITunesOwner.html#method-c-new","(*args)",""],["new","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-c-new","(*args)",""],["new","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-c-new","(*args)",""],["new","RSS::ImageItemModel::ImageItem","RSS/ImageItemModel/ImageItem.html#method-c-new","(*args)",""],["new","RSS::ListenerMixin","RSS/ListenerMixin.html#method-c-new","()",""],["new","RSS::Maker::Atom::Entry","RSS/Maker/Atom/Entry.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::Atom::Feed","RSS/Maker/Atom/Feed.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::Base","RSS/Maker/Base.html#method-c-new","(maker)",""],["new","RSS::Maker::ItemsBase","RSS/Maker/ItemsBase.html#method-c-new","(maker)",""],["new","RSS::Maker::RSS09","RSS/Maker/RSS09.html#method-c-new","(feed_version)",""],["new","RSS::Maker::RSS091","RSS/Maker/RSS091.html#method-c-new","(feed_version=\"0.91\")",""],["new","RSS::Maker::RSS092","RSS/Maker/RSS092.html#method-c-new","(feed_version=\"0.92\")",""],["new","RSS::Maker::RSS10","RSS/Maker/RSS10.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::RSS20","RSS/Maker/RSS20.html#method-c-new","(feed_version=\"2.0\")",""],["new","RSS::Maker::RSSBase","RSS/Maker/RSSBase.html#method-c-new","(feed_version)",""],["new","RSS::MissingAttributeError","RSS/MissingAttributeError.html#method-c-new","(tag, attribute)",""],["new","RSS::MissingTagError","RSS/MissingTagError.html#method-c-new","(tag, parent)",""],["new","RSS::NSError","RSS/NSError.html#method-c-new","(tag, prefix, require_uri)",""],["new","RSS::NotAvailableValueError","RSS/NotAvailableValueError.html#method-c-new","(tag, value, attribute=nil)",""],["new","RSS::NotExpectedTagError","RSS/NotExpectedTagError.html#method-c-new","(tag, uri, parent)",""],["new","RSS::NotSetError","RSS/NotSetError.html#method-c-new","(name, variables)",""],["new","RSS::NotValidXMLParser","RSS/NotValidXMLParser.html#method-c-new","(parser)",""],["new","RSS::NotWellFormedError","RSS/NotWellFormedError.html#method-c-new","(line=nil, element=nil)","<p>Create a new NotWellFormedError for an error at <code>line</code> in\n<code>element</code>.  If a block is given the return value …\n"],["new","RSS::OverlappedPrefixError","RSS/OverlappedPrefixError.html#method-c-new","(prefix)",""],["new","RSS::Parser","RSS/Parser.html#method-c-new","(rss, parser_class=self.class.default_parser)",""],["new","RSS::RDF","RSS/RDF.html#method-c-new","(version=nil, encoding=nil, standalone=nil)",""],["new","RSS::RDF::Bag","RSS/RDF/Bag.html#method-c-new","(*args)",""],["new","RSS::RDF::Bag","RSS/RDF/Bag.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel","RSS/RDF/Channel.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel::Image","RSS/RDF/Channel/Image.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel::Items","RSS/RDF/Channel/Items.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel::Textinput","RSS/RDF/Channel/Textinput.html#method-c-new","(*args)",""],["new","RSS::RDF::Image","RSS/RDF/Image.html#method-c-new","(*args)",""],["new","RSS::RDF::Item","RSS/RDF/Item.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Seq","RSS/RDF/Seq.html#method-c-new","(*args)",""],["new","RSS::RDF::Seq","RSS/RDF/Seq.html#method-c-new","(*args)",""],["new","RSS::RDF::Textinput","RSS/RDF/Textinput.html#method-c-new","(*args)",""],["new","RSS::RootElementMixin","RSS/RootElementMixin.html#method-c-new","(feed_version, version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Rss","RSS/Rss.html#method-c-new","(feed_version, version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Rss::Channel::Cloud","RSS/Rss/Channel/Cloud.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Image","RSS/Rss/Channel/Image.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Category","RSS/Rss/Channel/Item/Category.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Enclosure","RSS/Rss/Channel/Item/Enclosure.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Guid","RSS/Rss/Channel/Item/Guid.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Source","RSS/Rss/Channel/Item/Source.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::SkipDays::Day","RSS/Rss/Channel/SkipDays/Day.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::SkipHours::Hour","RSS/Rss/Channel/SkipHours/Hour.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::TextInput","RSS/Rss/Channel/TextInput.html#method-c-new","(*args)",""],["new","RSS::TaxonomyTopicModel::TaxonomyTopic","RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-new","(*args)",""],["new","RSS::TaxonomyTopicsModel::TaxonomyTopics","RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-new","(*args)",""],["new","RSS::TooMuchTagError","RSS/TooMuchTagError.html#method-c-new","(tag, parent)",""],["new","RSS::UnknownConversionMethodError","RSS/UnknownConversionMethodError.html#method-c-new","(to, from)",""],["new","RSS::UnknownTagError","RSS/UnknownTagError.html#method-c-new","(tag, uri)",""],["new","RSS::UnsupportedMakerVersionError","RSS/UnsupportedMakerVersionError.html#method-c-new","(version)",""],["new","RSS::XML::Element","RSS/XML/Element.html#method-c-new","(name, prefix=nil, uri=nil, attributes={}, children=[])",""],["new","RSS::XMLParserNotFound","RSS/XMLParserNotFound.html#method-c-new","()",""],["new","RSS::XMLStyleSheet","RSS/XMLStyleSheet.html#method-c-new","(*attrs)",""],["new","RSS::XMLStyleSheetMixin","RSS/XMLStyleSheetMixin.html#method-c-new","(*args)",""],["new","Random","Random.html#method-c-new","(*args)","<p>Creates a new PRNG using <code>seed</code> to set the initial state. If\n<code>seed</code> is omitted, the generator is initialized …\n"],["new","Range","Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Constructs a range using the given <code>begin</code> and <code>end</code>.\nIf the <code>exclude_end</code> parameter is omitted or is\n<code>false</code> …\n"],["new","Regexp","Regexp.html#method-c-new","(*args)","<p>Constructs a new regular expression from <code>pattern</code>, which can be\neither a String or a Regexp (in which …\n"],["new","Resolv","Resolv.html#method-c-new","(resolvers=[Hosts.new, DNS.new])","<p>Creates a new Resolv using <code>resolvers</code>.\n"],["new","Resolv::DNS","Resolv/DNS.html#method-c-new","(config_info=nil)","<p>Creates a new DNS resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses /etc/resolv.conf.\n"],["new","Resolv::DNS::Resource::DomainName","Resolv/DNS/Resource/DomainName.html#method-c-new","(name)","<p>Creates a new DomainName from <code>name</code>.\n"],["new","Resolv::DNS::Resource::Generic","Resolv/DNS/Resource/Generic.html#method-c-new","(data)","<p>Creates a new generic resource.\n"],["new","Resolv::DNS::Resource::HINFO","Resolv/DNS/Resource/HINFO.html#method-c-new","(cpu, os)","<p>Creates a new HINFO running <code>os</code> on <code>cpu</code>.\n"],["new","Resolv::DNS::Resource::IN::A","Resolv/DNS/Resource/IN/A.html#method-c-new","(address)","<p>Creates a new A for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::AAAA","Resolv/DNS/Resource/IN/AAAA.html#method-c-new","(address)","<p>Creates a new AAAA for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::SRV","Resolv/DNS/Resource/IN/SRV.html#method-c-new","(priority, weight, port, target)","<p>Create a SRV resource record.\n<p>See the documentation for #priority, #weight, #port and #target for\n<code>priority</code> …\n"],["new","Resolv::DNS::Resource::IN::WKS","Resolv/DNS/Resource/IN/WKS.html#method-c-new","(address, protocol, bitmap)",""],["new","Resolv::DNS::Resource::LOC","Resolv/DNS/Resource/LOC.html#method-c-new","(version, ssize, hprecision, vprecision, latitude, longitude, altitude)",""],["new","Resolv::DNS::Resource::MINFO","Resolv/DNS/Resource/MINFO.html#method-c-new","(rmailbx, emailbx)",""],["new","Resolv::DNS::Resource::MX","Resolv/DNS/Resource/MX.html#method-c-new","(preference, exchange)","<p>Creates a new MX record with <code>preference</code>, accepting mail at\n<code>exchange</code>.\n"],["new","Resolv::DNS::Resource::SOA","Resolv/DNS/Resource/SOA.html#method-c-new","(mname, rname, serial, refresh, retry_, expire, minimum)","<p>Creates a new SOA record.  See the attr documentation for the details of\neach argument.\n"],["new","Resolv::DNS::Resource::TXT","Resolv/DNS/Resource/TXT.html#method-c-new","(first_string, *rest_strings)",""],["new","Resolv::Hosts","Resolv/Hosts.html#method-c-new","(filename = DefaultFileName)","<p>Creates a new Resolv::Hosts, using <code>filename</code> for its data\nsource.\n"],["new","Resolv::LOC::Alt","Resolv/LOC/Alt.html#method-c-new","(altitude)",""],["new","Resolv::LOC::Coord","Resolv/LOC/Coord.html#method-c-new","(coordinates,orientation)",""],["new","Resolv::LOC::Size","Resolv/LOC/Size.html#method-c-new","(scalar)",""],["new","Resolv::MDNS","Resolv/MDNS.html#method-c-new","(config_info=nil)","<p>Creates a new one-shot Multicast DNS (mDNS) resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses the default mDNS addresses …\n"],["new","Rinda::DRbObjectTemplate","Rinda/DRbObjectTemplate.html#method-c-new","(uri=nil, ref=nil)","<p>Creates a new DRbObjectTemplate that will match against <code>uri</code>\nand <code>ref</code>.\n"],["new","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-c-new","(place, event, tuple, expires=nil)","<p>Creates a new NotifyTemplateEntry that watches <code>place</code> for\n+event+s that match <code>tuple</code>.\n"],["new","Rinda::RingFinger","Rinda/RingFinger.html#method-c-new","(broadcast_list=@@broadcast_list, port=Ring_PORT)","<p>Creates a new RingFinger that will look for RingServers at\n<code>port</code> on the addresses in <code>broadcast_list</code>.\n<p>If …\n"],["new","Rinda::RingProvider","Rinda/RingProvider.html#method-c-new","(klass, front, desc, renewer = nil)","<p>Creates a RingProvider that will provide a <code>klass</code> service\nrunning on <code>front</code>, with a <code>description</code>. \n<code>renewer</code> …\n"],["new","Rinda::RingServer","Rinda/RingServer.html#method-c-new","(ts, addresses=[Socket::INADDR_ANY], port=Ring_PORT)","<p>Advertises <code>ts</code> on the given <code>addresses</code> at\n<code>port</code>.\n<p>If <code>addresses</code> is omitted only the UDP broadcast address is …\n"],["new","Rinda::SimpleRenewer","Rinda/SimpleRenewer.html#method-c-new","(sec=180)","<p>Creates a new SimpleRenewer that keeps an object alive for another\n<code>sec</code> seconds.\n"],["new","Rinda::Tuple","Rinda/Tuple.html#method-c-new","(ary_or_hash)","<p>Creates a new Tuple from <code>ary_or_hash</code> which must be an Array or\nHash.\n"],["new","Rinda::TupleBag::TupleBin","Rinda/TupleBag/TupleBin.html#method-c-new","()",""],["new","Rinda::TupleEntry","Rinda/TupleEntry.html#method-c-new","(ary, sec=nil)","<p>Creates a TupleEntry based on <code>ary</code> with an optional renewer or\nexpiry time <code>sec</code>.\n<p>A renewer must implement …\n"],["new","Rinda::TupleSpace","Rinda/TupleSpace.html#method-c-new","(period=60)","<p>Creates a new TupleSpace.  <code>period</code> is used to control how often\nto look for dead tuples after modifications …\n"],["new","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-c-new","(ts)","<p>Creates a new TupleSpaceProxy to wrap <code>ts</code>.\n"],["new","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-c-new","(place, ary, expires=nil)",""],["new","Ripper","Ripper.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Ripper object. <em>src</em> must be a String, an IO, or an\nObject which has #gets method.\n<p>This method …\n"],["new","Ripper::Filter","Ripper/Filter.html#method-c-new","(src, filename = '-', lineno = 1)","<p>Creates a new Ripper::Filter instance, passes parameters <code>src</code>,\n<code>filename</code>, and <code>lineno</code> to Ripper::Lexer.new …\n"],["new","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-new","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an\nInstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["new","SDBM","SDBM.html#method-c-new","(p1, p2 = v2)","<p>Creates a new database handle by opening the given <code>filename</code>.\nSDBM actually uses two physical files, with …\n"],["new","SOCKSSocket","SOCKSSocket.html#method-c-new","(host, serv)",""],["new","SOCKSSocket","SOCKSSocket.html#method-c-new","(p1, p2)","<p>Opens a SOCKS connection to <code>host</code> via the SOCKS server\n<code>serv</code>.\n"],["new","Set","Set.html#method-c-new","(enum = nil)","<p>Creates a new set containing the elements of the given enumerable object.\n<p>If a block is given, the elements …\n"],["new","Shell","Shell.html#method-c-new","(pwd = Dir.pwd, umask = nil)","<p>Creates a Shell object which current directory is set to the process\ncurrent directory, unless otherwise …\n"],["new","Shell::AppendFile","Shell/AppendFile.html#method-c-new","(sh, to_filename, filter)",""],["new","Shell::AppendIO","Shell/AppendIO.html#method-c-new","(sh, io, filter)",""],["new","Shell::Cat","Shell/Cat.html#method-c-new","(sh, *filenames)",""],["new","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-new","(shell)",""],["new","Shell::Concat","Shell/Concat.html#method-c-new","(sh, *jobs)",""],["new","Shell::Echo","Shell/Echo.html#method-c-new","(sh, *strings)",""],["new","Shell::Filter","Shell/Filter.html#method-c-new","(sh)",""],["new","Shell::Glob","Shell/Glob.html#method-c-new","(sh, pattern)",""],["new","Shell::ProcessController","Shell/ProcessController.html#method-c-new","(shell)",""],["new","Shell::SystemCommand","Shell/SystemCommand.html#method-c-new","(sh, command, *opts)",""],["new","Shell::Tee","Shell/Tee.html#method-c-new","(sh, filename)",""],["new","Shell::Void","Shell/Void.html#method-c-new","(sh, *opts)",""],["new","SignalException","SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig_name</code> should be a\nknown signal name.\n"],["new","SizedQueue","SizedQueue.html#method-c-new","(p1)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["new","Socket","Socket.html#method-c-new","(p1, p2, p3 = v3)","<p>Creates a new socket object.\n<p><em>domain</em> should be a communications domain such as: :INET, :INET6,\n:UNIX, etc. …\n"],["new","Socket::AncillaryData","Socket/AncillaryData.html#method-c-new","(p1, p2, p3, p4)","<p><em>family</em> should be an integer, a string or a symbol.\n<p>Socket::AF_INET, “AF_INET”, “INET”, …\n"],["new","Socket::Option","Socket/Option.html#method-c-new","(p1, p2, p3, p4)","<p>Returns a new Socket::Option object.\n\n<pre>sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack(&quot;i&quot;)) ...</pre>\n"],["new","Socket::UDPSource","Socket/UDPSource.html#method-c-new","(remote_address, local_address, &reply_proc)","<p><code>remote_address</code> is an Addrinfo object.\n<p><code>local_address</code> is an Addrinfo object.\n<p><code>reply_proc</code> is a Proc used to …\n"],["new","String","String.html#method-c-new","(p1 = v1, p2 = {})","<p>Returns a new string object containing a copy of <em>str</em>.\n<p>The optional <em>enc</em> argument specifies the encoding …\n"],["new","StringIO","StringIO.html#method-c-new","(*args)","<p>Creates new StringIO instance from with <em>string</em> and <em>mode</em>.\n"],["new","StringScanner","StringScanner.html#method-c-new","(p1, p2 = v2)","<p>Creates a new StringScanner object to scan over the given\n<code>string</code>. <code>dup</code> argument is obsolete and not used …\n"],["new","Struct","Struct.html#method-c-new","(*args)","<p>The first two forms are used to create a new Struct subclass\n<code>class_name</code> that can contain a value for …\n"],["new","Sync_m","Sync_m.html#method-c-new","(*args)",""],["new","Sync_m","Sync_m.html#method-c-new","(*args)",""],["new","SyntaxError","SyntaxError.html#method-c-new","(*args)","<p>Construct a SyntaxError exception.\n"],["new","Syslog::Logger","Syslog/Logger.html#method-c-new","(program_name = 'ruby', facility = nil)","<p>Fills in variables for Logger compatibility.  If this is the first instance\nof Syslog::Logger, <code>program_name</code> …\n"],["new","SystemCallError","SystemCallError.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>If <em>errno</em> corresponds to a known system error code, constructs the\nappropriate <code>Errno</code> class for that error, …\n"],["new","SystemExit","SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status and\nmessage. Status is true, false, or an integer. …\n"],["new","TCPServer","TCPServer.html#method-c-new","(p1 = v1, p2)","<p>Creates a new server socket bound to <em>port</em>.\n<p>If <em>hostname</em> is given, the socket is bound to it.\n\n<pre>serv = TCPServer.new(&quot;127.0.0.1&quot;, ...</pre>\n"],["new","TCPSocket","TCPSocket.html#method-c-new","(host, serv, *rest)",""],["new","TCPSocket","TCPSocket.html#method-c-new","(p1, p2, p3 = v3, p4 = v4)","<p>Opens a TCP connection to <code>remote_host</code> on\n<code>remote_port</code>.  If <code>local_host</code> and\n<code>local_port</code> are specified, then …\n"],["new","TempIO","TempIO.html#method-c-new","(string = '')","<p>Creates a new TempIO that will be initialized to contain\n<code>string</code>.\n"],["new","Tempfile","Tempfile.html#method-c-new","(basename=\"\", tmpdir=nil, mode: 0, **options)","<p>Creates a temporary file with permissions 0600 (= only readable and\nwritable by the owner) and opens …\n"],["new","Thread","Thread.html#method-c-new","(*args)","<p>Creates a new thread executing the given block.\n<p>Any <code>args</code> given to ::new will be passed to the block:\n\n<pre>arr ...</pre>\n"],["new","Thread::Mutex","Thread/Mutex.html#method-c-new","()","<p>Creates a new Mutex\n"],["new","ThreadsWait","ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","ThreadsWait","ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","Time","Time.html#method-c-new","(*args)","<p>Returns a Time object.\n<p>It is initialized to the current system time if no argument is given.\n<p><strong>Note:</strong> The …\n"],["new","TracePoint","TracePoint.html#method-c-new","(*args)","<p>Returns a new TracePoint object, not enabled by default.\n<p>Next, in order to activate the trace, you must …\n"],["new","UDPSocket","UDPSocket.html#method-c-new","(p1 = v1)","<p>Creates a new UDPSocket object.\n<p><em>address_family</em> should be an integer, a string or a symbol:\nSocket::AF_INET …\n"],["new","UNIXServer","UNIXServer.html#method-c-new","(p1)","<p>Creates a new UNIX server socket bound to <em>path</em>.\n\n<pre>require &#39;socket&#39;\n\nserv = UNIXServer.new(&quot;/tmp/sock&quot;)\ns ...</pre>\n"],["new","UNIXSocket","UNIXSocket.html#method-c-new","(p1)","<p>Creates a new UNIX client socket connected to <em>path</em>.\n\n<pre>require &#39;socket&#39;\n\ns = UNIXSocket.new(&quot;/tmp/sock&quot;) ...</pre>\n"],["new","URI::FTP","URI/FTP.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = false)","<p>Description\n<p>Creates a new URI::FTP object from generic URL components with no syntax\nchecking.\n<p>Unlike build(), …\n"],["new","URI::Generic","URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p>scheme &mdash; Protocol scheme, i.e. &#39;http&#39;,&#39;ftp&#39;,&#39;mailto&#39; and so\non.\n<p>userinfo &mdash; User …\n"],["new","URI::LDAP","URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Create a new URI::LDAP object from generic URI components as per RFC 2396.\nNo LDAP-specific …\n"],["new","URI::MailTo","URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::MailTo object from generic URL components with no syntax\nchecking.\n<p>This …\n"],["new","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["new","UncaughtThrowError","UncaughtThrowError.html#method-c-new","(*args)","<p>Document-class: UncaughtThrowError\n<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not\nhave corresponding …\n"],["new","Vector","Vector.html#method-c-new","(array)","<p>Vector.new is private; use Vector[] or Vector.elements to create.\n"],["new","WEBrick::BasicLog","WEBrick/BasicLog.html#method-c-new","(log_file=nil, level=nil)","<p>Initializes a new logger for <code>log_file</code> that outputs messages at\n<code>level</code> or higher.  <code>log_file</code> can be a filename, …\n"],["new","WEBrick::CGI","WEBrick/CGI.html#method-c-new","(*args)","<p>Creates a new CGI interface.\n<p>The first argument in <code>args</code> is a configuration hash which would\nupdate WEBrick::Config::HTTP …\n"],["new","WEBrick::Cookie","WEBrick/Cookie.html#method-c-new","(name, value)","<p>Creates a new cookie with the given <code>name</code> and\n<code>value</code>\n"],["new","WEBrick::GenericServer","WEBrick/GenericServer.html#method-c-new","(config={}, default=Config::General)","<p>Creates a new generic server from <code>config</code>.  The default\nconfiguration comes from <code>default</code>.\n"],["new","WEBrick::HTTPAuth::BasicAuth","WEBrick/HTTPAuth/BasicAuth.html#method-c-new","(config, default=Config::BasicAuth)","<p>Creates a new BasicAuth instance.\n<p>See WEBrick::Config::BasicAuth for default configuration entries\n<p>You …\n"],["new","WEBrick::HTTPAuth::DigestAuth","WEBrick/HTTPAuth/DigestAuth.html#method-c-new","(config, default=Config::DigestAuth)","<p>Creates a new DigestAuth instance.  Be sure to use the same DigestAuth\ninstance for multiple requests …\n"],["new","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-c-new","(path)","<p>Open a digest password database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-c-new","(path)","<p>Open a group database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-c-new","(path)","<p>Open a password database at <code>path</code>\n"],["new","WEBrick::HTTPProxyServer","WEBrick/HTTPProxyServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Proxy server configurations.  The proxy server handles the following\nconfiguration items in addition …\n"],["new","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-c-new","(config)","<p>Creates a new HTTP request.  WEBrick::Config::HTTP is the default\nconfiguration.\n"],["new","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-c-new","(config)","<p>Creates a new HTTP response object.  WEBrick::Config::HTTP is the default\nconfiguration.\n"],["new","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Creates a new HTTP server according to <code>config</code>\n<p>An HTTP server uses the following attributes:\n<p>:AccessLog … &mdash; "],["new","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-c-new","(server, *options)","<p>Initializes a new servlet for <code>server</code> using\n<code>options</code> which are stored as-is in +@options+.  +@logger+ is …\n"],["new","WEBrick::HTTPServlet::CGIHandler","WEBrick/HTTPServlet/CGIHandler.html#method-c-new","(server, name)","<p>Creates a new CGI script servlet for the script at <code>name</code>\n"],["new","WEBrick::HTTPServlet::DefaultFileHandler","WEBrick/HTTPServlet/DefaultFileHandler.html#method-c-new","(server, local_path)","<p>Creates a DefaultFileHandler instance for the file at\n<code>local_path</code>.\n"],["new","WEBrick::HTTPServlet::ERBHandler","WEBrick/HTTPServlet/ERBHandler.html#method-c-new","(server, name)","<p>Creates a new ERBHandler on <code>server</code> that will evaluate and\nserve the ERB file <code>name</code>\n"],["new","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-new","(server, root, options={}, default=Config::FileHandler)","<p>Creates a FileHandler servlet on <code>server</code> that serves files\nstarting at directory <code>root</code>\n<p><code>options</code> may be a …\n"],["new","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-c-new","(*args)","<p>Creates a new FormData object.\n<p><code>args</code> is an Array of form data entries.  One FormData will be\ncreated for …\n"],["new","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-c-new","(version)","<p>Creates a new HTTPVersion from <code>version</code>.\n"],["new","WEBrick::Log","WEBrick/Log.html#method-c-new","(log_file=nil, level=nil)","<p>Same as BasicLog#initialize\n<p>You can set the timestamp format through #time_format\n"],["new","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-new","()","<p>Creates a new TimeoutHandler.  You should use ::register and ::cancel\ninstead of creating the timeout …\n"],["new","WIN32OLE","WIN32OLE.html#method-c-new","(p1, p2 = v2, *args)","<p>Returns a new WIN32OLE object(OLE Automation object). The first argument\nserver specifies OLE Automation …\n"],["new","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-c-new","(*args)","<p>Returns OLE event object. The first argument specifies WIN32OLE object. The\nsecond argument specifies …\n"],["new","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_METHOD object which represents the information about\nOLE method. The first argument …\n"],["new","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-c-new","(p1, p2)","<p>Returns WIN32OLE_PARAM object which represents OLE parameter information.\n1st argument should be WIN32OLE_METHOD …\n"],["new","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-c-new","(p1, p2)","<p>Returns WIN32OLE_RECORD object. The first argument is struct name (String\nor Symbol). The second parameter …\n"],["new","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_TYPE object. The first argument <em>typelib</em>\nspecifies OLE type library name. The second …\n"],["new","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-c-new","(*args)","<p>Returns a new WIN32OLE_TYPELIB object.\n<p>The first argument <em>typelib</em>  specifies OLE type library name or …\n"],["new","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-c-new","(*args)","<p>Returns Ruby object wrapping OLE variant. The first argument specifies Ruby\nobject to convert OLE variant …\n"],["new","WeakRef","WeakRef.html#method-c-new","(orig)","<p>Creates a weak reference to <code>orig</code>\n<p>Raises an ArgumentError if the given <code>orig</code> is immutable, such\nas Symbol …\n"],["new","XMP","XMP.html#method-c-new","(bind = nil)","<p>Creates a new XMP object.\n<p>The top-level binding or, optional <code>bind</code> parameter will be used\nwhen creating …\n"],["new","XMP::StringInputMethod","XMP/StringInputMethod.html#method-c-new","()","<p>Creates a new StringInputMethod object\n"],["new","YAML::Store","YAML/Store.html#method-c-new","( *o )","<p>Creates a new YAML::Store object, which will store data in\n<code>file_name</code>. If the file does not already exist, …\n"],["new","Zlib::Deflate","Zlib/Deflate.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new deflate stream for compression. If a given argument is nil,\nthe default value of that argument …\n"],["new","Zlib::GzipReader","Zlib/GzipReader.html#method-c-new","(p1, p2 = {})","<p>Creates a GzipReader object associated with <code>io</code>. The GzipReader\nobject reads gzipped data from <code>io</code>, and …\n"],["new","Zlib::GzipWriter","Zlib/GzipWriter.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a GzipWriter object associated with <code>io</code>.\n<code>level</code> and <code>strategy</code> should be the same as the\narguments …\n"],["new","Zlib::Inflate","Zlib/Inflate.html#method-c-new","(p1 = v1)","<p>Creates a new inflate stream for decompression.  <code>window_bits</code>\nsets the size of the history buffer and …\n"],["new_alias_name","IRB::MethodExtender","IRB/MethodExtender.html#method-i-new_alias_name","(name, prefix = \"__alias_of__\", postfix = \"__\")","<p>Returns a unique method name to use as an alias for the given\n<code>name</code>.\n<p>Usually returns <code>#{prefix}#{name}#{postfix}&lt;num&gt;</code> …\n"],["new_cond","MonitorMixin","MonitorMixin.html#method-i-new_cond","()","<p>Creates a new MonitorMixin::ConditionVariable associated with the receiver.\n"],["new_default_spec","Gem::TestCase","Gem/TestCase.html#method-i-new_default_spec","(name, version, deps = nil, *files)",""],["new_internet_message_io","Net::SMTP","Net/SMTP.html#method-i-new_internet_message_io","(s)",""],["new_ntoh","IPAddr","IPAddr.html#method-c-new_ntoh","(addr)","<p>Creates a new ipaddr containing the given network byte ordered string form\nof an IP address.\n"],["new_offset","Date","Date.html#method-i-new_offset","(p1 = v1)","<p>Duplicates self and resets its offset.\n\n<pre>d = DateTime.new(2001,2,3,4,5,6,&#39;-02:00&#39;)\n                     ...</pre>\n"],["new_seed","Random","Random.html#method-c-new_seed","()","<p>Returns an arbitrary seed value. This is used by Random.new when no seed\nvalue is specified as an argument. …\n"],["new_spec_satisfied?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-new_spec_satisfied-3F","()","<p>@return [Boolean] whether the current spec is satisfied as a new\npossibility.\n"],["new_start","Date","Date.html#method-i-new_start","(p1 = v1)","<p>Duplicates self and resets its day of calendar reform.\n\n<pre>d = Date.new(1582,10,15)\nd.new_start(Date::JULIAN) ...</pre>\n"],["new_toplevel","ERB","ERB.html#method-i-new_toplevel","()","<p>Returns a new binding each time <strong>near</strong> TOPLEVEL_BINDING for\nruns that do not specify a binding.\n"],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host\n<code>uri</code> and object <code>ref</code>.\n"],["new_with","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host\n<code>uri</code> and object <code>ref</code>.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_uri","DRb::DRbObject","DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_value_if_need","RSS::Utils","RSS/Utils.html#method-i-new_with_value_if_need","(klass, value)","<p>If <code>value</code> is an instance of class <code>klass</code>, return\nit, else create a new instance of <code>klass</code> with value\n<code>value</code> …\n"],["newobj","Net::HTTP","Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)",""],["next","Date","Date.html#method-i-next","()","<p>Returns a date object denoting the following day.\n"],["next","Enumerator","Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position\nforward.  When the position …\n"],["next","Integer","Integer.html#method-i-next","()","<p>Returns the Integer equal to <code>int</code> + 1.\n\n<pre>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ      #=&gt; 2\n(-1).succ ...</pre>\n"],["next","Integer","Integer.html#method-i-next","()","<p>Returns the Integer equal to <code>int</code> + 1.\n\n<pre>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ      #=&gt; 2\n(-1).succ ...</pre>\n"],["next","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-i-next","()",""],["next","Prime::Generator23","Prime/Generator23.html#method-i-next","()",""],["next","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-next","()","<p>alias of <code>succ</code>.\n"],["next","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-i-next","()",""],["next","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-next","( event )",""],["next","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-i-next","( event )",""],["next","REXML::Validation::OneOrMore","REXML/Validation/OneOrMore.html#method-i-next","( event )",""],["next","REXML::Validation::Optional","REXML/Validation/Optional.html#method-i-next","( event )",""],["next","REXML::Validation::State","REXML/Validation/State.html#method-i-next","( event )",""],["next","REXML::Validation::ZeroOrMore","REXML/Validation/ZeroOrMore.html#method-i-next","( event )",""],["next","String","String.html#method-i-next","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["next","Symbol","Symbol.html#method-i-next","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["next!","String","String.html#method-i-next-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["next5","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-next5","()","<p>Returns the oldest five entries from the list.\n"],["next_current","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-i-next_current","( event )",""],["next_day","Date","Date.html#method-i-next_day","(p1 = v1)","<p>This method is equivalent to d + n.\n"],["next_element","REXML::Element","REXML/Element.html#method-i-next_element","()","<p>Returns the next sibling that is an element, or nil if there is no Element\nsibling after this one\n\n<pre>doc ...</pre>\n"],["next_float","Float","Float.html#method-i-next_float","()","<p>Returns the next representable floating-point number.\n<p>Float::MAX.next_float and Float::INFINITY.next_float …\n"],["next_month","Date","Date.html#method-i-next_month","(p1 = v1)","<p>This method is equivalent to d &gt;&gt; n.\n<p>See Date#>> for examples.\n"],["next_rotate_time","Logger::Period","Logger/Period.html#method-i-next_rotate_time","(now, shift_age)",""],["next_sibling=","REXML::Child","REXML/Child.html#method-i-next_sibling-3D","( other )","<p>Sets the next sibling of this child.  This can be used to insert a child\nafter some other child.\n\n<pre>a = Element.new(&quot;a&quot;) ...</pre>\n"],["next_sibling_node","REXML::Node","REXML/Node.html#method-i-next_sibling_node","()","<p>@return the next sibling (nil if unset)\n"],["next_sibling_node","REXML::XPathParser","REXML/XPathParser.html#method-i-next_sibling_node","(node)",""],["next_token","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-next_token","()",""],["next_token","Racc::Parser","Racc/Parser.html#method-i-next_token","()","<p>The method to fetch next token. If you use #do_parse method, you must\nimplement #next_token.\n<p>The format …\n"],["next_update","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-next_update","()",""],["next_update","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-next_update","()",""],["next_update=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-next_update-3D","(p1)",""],["next_values","Enumerator","Enumerator.html#method-i-next_values","()","<p>Returns the next object as an array in the enumerator, and move the\ninternal position forward.  When …\n"],["next_wait","ThreadsWait","ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_wait","ThreadsWait","ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_year","Date","Date.html#method-i-next_year","(p1 = v1)","<p>This method is equivalent to d &gt;&gt; (n * 12).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">next_year</span>      <span class=\"ruby-comment\">#=&gt; #&lt;Date: 2002-02-03 ...</span>\n</pre>\n"],["nfc_one","UnicodeNormalize","UnicodeNormalize.html#method-c-nfc_one","(string)",""],["nfd_one","UnicodeNormalize","UnicodeNormalize.html#method-c-nfd_one","(string)","<p>Normalization Forms for Patterns (not whole Strings)\n"],["nil?","NilClass","NilClass.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n"],["nil?","Object","Object.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">nil?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">nil?</span>          <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["nkf","NKF","NKF.html#method-c-nkf","(p1, p2)","<p>Convert <em>str</em> and return converted result. Conversion details are\nspecified by <em>opt</em> as String.\n\n<pre>require &#39;nkf&#39; ...</pre>\n"],["nlink","File::Stat","File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).nlink             #=&gt; 1\nFile.link(&quot;testfile&quot;, ...</pre>\n"],["nlsolve","Newton","Newton.html#method-i-nlsolve","(f,x)","<p>See also Newton\n"],["nlst","Net::FTP","Net/FTP.html#method-i-nlst","(dir = nil)","<p>Returns an array of filenames in the remote directory.\n"],["nmake_found?","Gem::TestCase","Gem/TestCase.html#method-i-nmake_found-3F","()","<p>Returns whether or not the nmake command could be found.\n"],["node_type","REXML::AttlistDecl","REXML/AttlistDecl.html#method-i-node_type","()",""],["node_type","REXML::Attribute","REXML/Attribute.html#method-i-node_type","()",""],["node_type","REXML::Comment","REXML/Comment.html#method-i-node_type","()",""],["node_type","REXML::DocType","REXML/DocType.html#method-i-node_type","()",""],["node_type","REXML::Document","REXML/Document.html#method-i-node_type","()",""],["node_type","REXML::Element","REXML/Element.html#method-i-node_type","()",""],["node_type","REXML::Instruction","REXML/Instruction.html#method-i-node_type","()",""],["node_type","REXML::Light::Node","REXML/Light/Node.html#method-i-node_type","()",""],["node_type","REXML::Text","REXML/Text.html#method-i-node_type","()",""],["node_type","REXML::XMLDecl","REXML/XMLDecl.html#method-i-node_type","()",""],["noecho","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-noecho","()",""],["noecho","IO","IO.html#method-i-noecho","()","<p>Yields <code>self</code> with disabling echo back.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">STDIN</span>.<span class=\"ruby-identifier\">noecho</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">gets</span>)\n</pre>\n<p>will read and return a line without echo back. …\n"],["non_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another\nclass or module. For use by formatters …\n"],["non_nil_attributes","Gem::Specification","Gem/Specification.html#method-c-non_nil_attributes","()","<p>Specification attributes that must be non-nil\n"],["nonblock","IO","IO.html#method-i-nonblock","(p1 = v1)","<p>Yields <code>self</code> in non-blocking mode.\n<p>When <code>false</code> is given as an argument, <code>self</code> is\nyielded in blocking mode. …\n"],["nonblock=","IO","IO.html#method-i-nonblock-3D","(p1)","<p>Enables non-blocking mode on a stream when set to <code>true</code>, and\nblocking mode when set to <code>false</code>.\n"],["nonblock?","IO","IO.html#method-i-nonblock-3F","()","<p>Returns <code>true</code> if an IO object is in non-blocking mode.\n"],["none?","Enumerable","Enumerable.html#method-i-none-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()","<p>true if this gem has no requirements.\n"],["nonzero?","BigDecimal","BigDecimal.html#method-i-nonzero-3F","()","<p>Returns self if the value is non-zero, nil otherwise.\n"],["nonzero?","Numeric","Numeric.html#method-i-nonzero-3F","()","<p>Returns <code>self</code> if <code>num</code> is not zero, <code>nil</code>\notherwise.\n<p>This behavior is useful when chaining comparisons:\n\n<pre>a = ...</pre>\n"],["noop","Net::FTP","Net/FTP.html#method-i-noop","()","<p>Issues a NOOP command.\n<p>Does nothing except return a response.\n"],["noop","Net::IMAP","Net/IMAP.html#method-i-noop","()","<p>Sends a NOOP command to the server. It does nothing.\n"],["norm","REXML::XPathParser","REXML/XPathParser.html#method-i-norm","(b)",""],["norm","Vector","Vector.html#method-i-norm","()",""],["normal?","Matrix","Matrix.html#method-i-normal-3F","()","<p>Returns <code>true</code> if this is a normal matrix. Raises an error if\nmatrix is not square.\n"],["normalize","Gem::Specification","Gem/Specification.html#method-i-normalize","()","<p>Normalize the list of files so that:\n<p>All file lists have redundancies removed.\n<p>Files referenced in the …\n"],["normalize","Gem::UriFormatter","Gem/UriFormatter.html#method-i-normalize","()","<p>Normalize the URI by adding “http://” if it is missing.\n"],["normalize","RDoc::Comment","RDoc/Comment.html#method-i-normalize","()","<p>Normalizes the text.  See RDoc::Text#normalize_comment for details\n"],["normalize","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-normalize","( input, entities=nil, entity_filter=nil )","<p>Escapes all possible entities\n"],["normalize","REXML::Text","REXML/Text.html#method-c-normalize","( input, doctype=nil, entity_filter=nil )","<p>Escapes all possible entities\n"],["normalize","RSS::Maker::ItemsBase","RSS/Maker/ItemsBase.html#method-i-normalize","()",""],["normalize","URI::Generic","URI/Generic.html#method-i-normalize","()","<p>Returns normalized URI\n"],["normalize","UnicodeNormalize","UnicodeNormalize.html#method-c-normalize","(string, form = :nfc)",""],["normalize","Vector","Vector.html#method-i-normalize","()","<p>Returns a new vector with the same direction but with norm 1.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">v</span> = <span class=\"ruby-constant\">Vector</span>[<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">8</span>,<span class=\"ruby-value\">2</span>].<span class=\"ruby-identifier\">normalize</span>\n<span class=\"ruby-comment\"># =&gt; Vector[0.5184758473652127, ...</span>\n</pre>\n"],["normalize!","URI::Generic","URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize\n"],["normalize_comment","RDoc::Text","RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalize_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-normalize_path","(path)","<p>Normalizes a request path.  Raises an exception if the path cannot be\nnormalized.\n"],["normalize_path","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-normalize_path","(path)","<p>Normalizes a request path.  Raises an exception if the path cannot be\nnormalized.\n"],["normalize_rss","RSS::Parser","RSS/Parser.html#method-i-normalize_rss","(rss)","<p>Try to get the XML associated with <code>rss</code>. Return\n<code>rss</code> if it already looks like XML, or treat it as a URI …\n"],["normalize_searching_criteria","Net::IMAP","Net/IMAP.html#method-i-normalize_searching_criteria","(keys)",""],["normalize_space","REXML::Functions","REXML/Functions.html#method-c-normalize_space","( string=nil )","<p>UNTESTED\n"],["normalize_yaml_input","Gem::Specification","Gem/Specification.html#method-c-normalize_yaml_input","(input)","<p>Make sure the YAML specification is properly formatted with dashes\n"],["normalized","REXML::Entity","REXML/Entity.html#method-i-normalized","()","<p>Returns the value of this entity unprocessed – raw.  This is the normalized\nvalue; that is, with all …\n"],["normalized?","UnicodeNormalize","UnicodeNormalize.html#method-c-normalized-3F","(string, form = :nfc)",""],["normalized_file_list","RDoc::RDoc","RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files\nthey contain.\n<p>If <code>force_doc</code> …\n"],["not","REXML::Functions","REXML/Functions.html#method-c-not","( object )","<p>UNTESTED\n"],["not_after","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_after","()",""],["not_after=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_after-3D","(p1)",""],["not_before","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_before","()",""],["not_before=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-not_before-3D","(p1)",""],["not_found","RDoc::Servlet","RDoc/Servlet.html#method-i-not_found","(generator, req, res, message = nil)","<p>Returns a 404 page built by <code>generator</code> for <code>req</code> on\n<code>res</code>.\n"],["not_need_to_call_setup_maker_variables","RSS::Rss::Channel","RSS/Rss/Channel.html#method-i-not_need_to_call_setup_maker_variables","()",""],["not_need_to_call_setup_maker_variables","RSS::SetupMaker","RSS/SetupMaker.html#method-i-not_need_to_call_setup_maker_variables","()",""],["not_set_name","RSS::Maker::Atom::Entry::Channel::Generator","RSS/Maker/Atom/Entry/Channel/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Categories::Category","RSS/Maker/Atom/Feed/Channel/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Generator","RSS/Maker/Atom/Feed/Channel/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Links::Link","RSS/Maker/Atom/Feed/Channel/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Categories::Category","RSS/Maker/Atom/Feed/Items/Item/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Links::Link","RSS/Maker/Atom/Feed/Items/Item/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category","RSS/Maker/Atom/Feed/Items/Item/Source/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Generator","RSS/Maker/Atom/Feed/Items/Item/Source/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link","RSS/Maker/Atom/Feed/Items/Item/Source/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Logo","RSS/Maker/Atom/Feed/Items/Item/Source/Logo.html#method-c-not_set_name","()",""],["not_set_required_variables","RSS::Maker::Atom::Entry::Items::Item","RSS/Maker/Atom/Entry/Items/Item.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::Atom::Feed::Items::Item","RSS/Maker/Atom/Feed/Items/Item.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::Base","RSS/Maker/Base.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::RSS09::Items::Item","RSS/Maker/RSS09/Items/Item.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::RSS10::Channel","RSS/Maker/RSS10/Channel.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::RSS10::Items::Item","RSS/Maker/RSS10/Items/Item.html#method-i-not_set_required_variables","()",""],["not_set_required_variables","RSS::Maker::RSS20::Items::Item","RSS/Maker/RSS20/Items/Item.html#method-i-not_set_required_variables","()",""],["notation","REXML::DocType","REXML/DocType.html#method-i-notation","(name)","<p>Retrieves a named notation. Only notations declared in the internal DTD\nsubset can be retrieved.\n<p>Method …\n"],["notationdecl","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-notationdecl","(name, public_or_system, public_id, system_id)","<p>&lt;!NOTATION …&gt;\n"],["notationdecl","REXML::StreamListener","REXML/StreamListener.html#method-i-notationdecl","(content)","<p>&lt;!NOTATION …&gt;\n"],["notationdecl?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-notationdecl-3F","()","<p>Content: [ String text ]\n"],["notations","REXML::DocType","REXML/DocType.html#method-i-notations","()","<p>This method returns a list of notations that have been declared in the\n<em>internal</em> DTD subset. Notations …\n"],["note","RDoc::Markdown","RDoc/Markdown.html#method-i-note","(label)","<p>Stores <code>label</code> as a note and fills in previously unknown note\nreferences.\n"],["note_for","RDoc::Markdown","RDoc/Markdown.html#method-i-note_for","(ref)","<p>Creates a new link for the footnote <code>reference</code> and adds the\nreference to\nthe note order list for proper ...\n"],["notes","RDoc::Markdown","RDoc/Markdown.html#method-i-notes","","<p>Enables the notes extension\n"],["notify","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-i-notify","(ev)","<p>Called by TupleSpace to notify this NotifyTemplateEntry of a new event.\n"],["notify","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-notify","(event, tuple, sec=nil)","<p>Registers for notifications of <code>event</code>.  Returns a\nNotifyTemplateEntry. See NotifyTemplateEntry for examples …\n"],["notify","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-notify","(ev, tuple, sec=nil)","<p>Registers for notifications of event <code>ev</code> on the proxied\nTupleSpace. See TupleSpace#notify\n"],["notify","Shell","Shell.html#method-c-notify","(*opts)",""],["notify","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-notify","(*opts)","<p>%pwd, %cwd -&gt; @pwd\n"],["notify","Shell::SystemCommand","Shell/SystemCommand.html#method-i-notify","(*opts)","<p>ex)\n\n<pre>if you wish to output:\n   &quot;shell: job(#{@command}:#{@pid}) close pipe-out.&quot;\nthen\n   mes: &quot;job(%id) ...</pre>\n"],["notify?","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-notify-3F","()","<p>A wrapper method used to determine whether notifications are enabled.\n<p>Defaults to <code>true</code>.\n"],["notify?","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-notify-3F","()","<p>Whether to output messages to the output method, depending on the level of\nthis notifier object.\n"],["notify?","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-i-notify-3F","()","<p>Ensures notifications are ignored, see AbstractNotifier#notify? for more\ninformation.\n"],["notify_event","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-notify_event","(event, tuple)","<p>Notifies all registered listeners for <code>event</code> of a status change\nof <code>tuple</code>.\n"],["notify_observers","DRb::DRbObservable","DRb/DRbObservable.html#method-i-notify_observers","(*arg)","<p>Notifies observers of a change in state.  See also\nObservable#notify_observers\n"],["notify_observers","Observable","Observable.html#method-i-notify_observers","(*arg)","<p>Notify observers of a change in state <strong>if</strong> this object&#39;s\nchanged state is <code>true</code>.\n<p>This will invoke the …\n"],["notwice","OptionParser","OptionParser.html#method-i-notwice","(obj, prv, msg)","<p>Checks if an argument is given twice, in which case an ArgumentError is\nraised. Called from OptionParser#switch …\n"],["now","DateTime","DateTime.html#method-c-now","(p1 = v1)","<p>Creates a DateTime object denoting the present time.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">now</span>              <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: 2011-06-11T21:20:44+09:00 ...</span>\n</pre>\n"],["now","Time","Time.html#method-c-now","()","<p>Creates a new Time object for the current time. This is same as Time.new\nwithout arguments.\n\n<pre>Time.now  ...</pre>\n"],["nowrite","REXML::XMLDecl","REXML/XMLDecl.html#method-i-nowrite","()",""],["npn_protocol","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-npn_protocol","()","<p>Returns the protocol string that was finally selected by the client during\nthe handshake.\n"],["nprocessors","Etc","Etc.html#method-c-nprocessors","()","<p>Returns the number of online processors.\n<p>The result is intended as the number of processes to use all …\n"],["nread","IO","IO.html#method-i-nread","()","<p>Returns number of bytes that can be read without blocking. Returns zero if\nno information available. …\n"],["ns_declarations","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-ns_declarations","()",""],["nsec","Time","Time.html#method-i-nsec","()","<p>Returns the number of nanoseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...</pre>\n"],["ntop","IPAddr","IPAddr.html#method-c-ntop","(addr)","<p>Convert a network byte ordered string form of an IP address into human\nreadable form.\n"],["null","Gem::NameTuple","Gem/NameTuple.html#method-c-null","()","<p>A null NameTuple, ie name=nil, version=0\n"],["null?","Fiddle::Pointer","Fiddle/Pointer.html#method-i-null-3F","()","<p>Returns <code>true</code> if this is a null pointer.\n"],["num_bits","OpenSSL::BN","OpenSSL/BN.html#method-i-num_bits","()",""],["num_bytes","OpenSSL::BN","OpenSSL/BN.html#method-i-num_bytes","()",""],["num_waiting","Queue","Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","SizedQueue","SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["number","REXML::Functions","REXML/Functions.html#method-c-number","( object=nil )","<p>a string that consists of optional whitespace followed by an optional minus\nsign followed by a Number …\n"],["numerator","Complex","Complex.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>    1   2       3+4i  &lt;-  numerator\n    - + -i  -&gt;  ----\n    2   3        6    ...</pre>\n"],["numerator","Float","Float.html#method-i-numerator","()","<p>Returns the numerator.  The result is machine dependent.\n\n<pre>n = 0.3.numerator    #=&gt; 5404319552844595\nd = ...</pre>\n"],["numerator","Integer","Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Integer","Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Numeric","Numeric.html#method-i-numerator","()","<p>Returns the numerator.\n"],["numerator","Rational","Rational.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>Rational(7).numerator        #=&gt; 7\nRational(7, 1).numerator     #=&gt; 7\nRational(9, ...</pre>\n"],["object_address_group","PP::PPMethods","PP/PPMethods.html#method-i-object_address_group","(obj, &block)","<p>A convenience method, like object_group, but also reformats the\nObject&#39;s object_id.\n"],["object_class","RDoc::TopLevel","RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["object_group","PP::PPMethods","PP/PPMethods.html#method-i-object_group","(obj)","<p>A convenience method which is same as follows:\n\n<pre>group(1, &#39;#&lt;&#39; + obj.class.name, &#39;&gt;&#39;) { ... }</pre>\n"],["object_id","Object","Object.html#method-i-object_id","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for\n…\n"],["object_maker","Psych","Psych.html#method-c-object_maker","(klass, hash)",""],["oct","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-oct","(num, len)",""],["oct","String","String.html#method-i-oct","()","<p>Treats leading characters of <em>str</em> as a string of octal digits (with\nan optional sign) and returns the …\n"],["odd?","Integer","Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <code>int</code> is an odd number.\n"],["odd?","Integer","Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <code>int</code> is an odd number.\n"],["odd?","OpenSSL::BN","OpenSSL/BN.html#method-i-odd-3F","()",""],["of","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-of","(p1)","<p>Returns the instruction sequence containing the given proc or method.\n<p>For example, using irb:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># a proc ...</span>\n</pre>\n"],["off","Tracer","Tracer.html#method-c-off","()","<p>Disable tracing\n"],["off_event","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-i-off_event","(p1 = v1)","<p>removes the callback of event.\n\n<pre>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;)\nev = WIN32OLE_EVENT.new(ie) ...</pre>\n"],["offset","Date","Date.html#method-i-offset","()","<p>Returns the offset.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&#39;04pm+0730&#39;</span>).<span class=\"ruby-identifier\">offset</span>        <span class=\"ruby-comment\">#=&gt; (5/16)</span>\n</pre>\n"],["offset","MatchData","MatchData.html#method-i-offset","(p1)","<p>Returns a two-element array containing the beginning and ending offsets of\nthe <em>n</em>th match. <em>n</em> can be a …\n"],["offset_vtbl","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-offset_vtbl","()","<p>Returns the offset ov VTBL.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...</pre>\n"],["oflush","IO","IO.html#method-i-oflush","()","<p>Flushes output buffer in kernel.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["oid","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-oid","()","<p>The object identifier as a <code>String</code>, e.g. “1.2.3.4.5”\n"],["oid","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-oid","()",""],["oid","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-oid","()",""],["oid=","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-oid-3D","(p1)",""],["oid=","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-oid-3D","(p1)",""],["ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok-3F","()","<p>Are all the dependencies in the list satisfied?\n"],["ok_to_remove?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok_to_remove-3F","(full_name, check_dev=true)","<p>Is is ok to remove a gemspec from the dependency list?\n<p>If removing the gemspec creates breaks a currently …\n"],["old_enc=","REXML::XMLDecl","REXML/XMLDecl.html#method-i-old_enc-3D","( enc )",""],["ole_activex_initialize","WIN32OLE","WIN32OLE.html#method-i-ole_activex_initialize","()","<p>Initialize WIN32OLE object(ActiveX Control) by calling\nIPersistMemory::InitNew.\n<p>Before calling OLE method, …\n"],["ole_classes","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-c-ole_classes","(p1)","<p>Returns array of WIN32OLE_TYPE objects defined by the <em>typelib</em> type\nlibrary. This method will be OBSOLETE …\n"],["ole_classes","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-ole_classes","()",""],["ole_free","WIN32OLE","WIN32OLE.html#method-i-ole_free","()","<p>invokes Release method of Dispatch interface of WIN32OLE object. Usually,\nyou do not need to call this …\n"],["ole_free","WIN32OLE","WIN32OLE.html#method-c-ole_free","(p1)","<p>Invokes Release method of Dispatch interface of WIN32OLE object. You should\nnot use this method because …\n"],["ole_func_methods","WIN32OLE","WIN32OLE.html#method-i-ole_func_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (settable) of WIN32OLE …\n"],["ole_get_methods","WIN32OLE","WIN32OLE.html#method-i-ole_get_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (gettable) of WIN32OLE …\n"],["ole_instance_variable_get","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-i-ole_instance_variable_get","(p1)","<p>Returns value specified by the member name of VT_RECORD OLE object. If the\nmember name is not correct, …\n"],["ole_instance_variable_set","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-i-ole_instance_variable_set","(p1, p2)","<p>Sets value specified by the member name of VT_RECORD OLE object. If the\nmember name is not correct,  …\n"],["ole_method","WIN32OLE","WIN32OLE.html#method-i-ole_method","(p1)","<p>Returns WIN32OLE_METHOD object corresponding with method specified by 1st\nargument.\n\n<pre>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...</pre>\n"],["ole_method_help","WIN32OLE","WIN32OLE.html#method-i-ole_method_help","(p1)",""],["ole_methods","WIN32OLE","WIN32OLE.html#method-i-ole_methods","()","<p>Returns the array of WIN32OLE_METHOD object. The element is OLE method of\nWIN32OLE object.\n\n<pre>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...</pre>\n"],["ole_methods","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-ole_methods","()","<p>Returns array of WIN32OLE_METHOD objects which represent OLE method defined\nin OLE type library.\n\n<pre>tobj ...</pre>\n"],["ole_obj_help","WIN32OLE","WIN32OLE.html#method-i-ole_obj_help","()",""],["ole_put_methods","WIN32OLE","WIN32OLE.html#method-i-ole_put_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (settable) of WIN32OLE …\n"],["ole_query_interface","WIN32OLE","WIN32OLE.html#method-i-ole_query_interface","(p1)","<p>Returns WIN32OLE object for a specific dispatch or dual interface specified\nby iid.\n\n<pre>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;) ...</pre>\n"],["ole_reference_count","WIN32OLE","WIN32OLE.html#method-c-ole_reference_count","(p1)","<p>Returns reference counter of Dispatch interface of WIN32OLE object. You\nshould not use this method because …\n"],["ole_respond_to?","WIN32OLE","WIN32OLE.html#method-i-ole_respond_to-3F","(p1)","<p>Returns true when OLE object has OLE method, otherwise returns false.\n\n<pre>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;) ...</pre>\n"],["ole_show_help","WIN32OLE","WIN32OLE.html#method-c-ole_show_help","(p1, p2 = v2)","<p>Displays helpfile. The 1st argument specifies WIN32OLE_TYPE object or\nWIN32OLE_METHOD object or helpfile. …\n"],["ole_type","WIN32OLE","WIN32OLE.html#method-i-ole_type","()","<p>Returns WIN32OLE_TYPE object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">excel</span> = <span class=\"ruby-constant\">WIN32OLE</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Excel.Application&#39;</span>)\n<span class=\"ruby-identifier\">tobj</span> = <span class=\"ruby-identifier\">excel</span>.<span class=\"ruby-identifier\">ole_type</span>\n</pre>\n"],["ole_type","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-ole_type","()","<p>Returns OLE type of WIN32OLE_PARAM object(parameter of OLE method).\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["ole_type","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-ole_type","()","<p>returns type of OLE class.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;) ...</pre>\n"],["ole_type","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-ole_type","()","<p>Returns OLE type string.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...</pre>\n"],["ole_type_detail","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-ole_type_detail","()","<p>Returns detail information of type of argument.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["ole_type_detail","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-ole_type_detail","()","<p>Returns detail information of type. The information is array of type.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;DirectX ...</pre>\n"],["ole_typelib","WIN32OLE","WIN32OLE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object. The object represents the type library\nwhich contains the WIN32OLE …\n"],["ole_typelib","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object which is including the WIN32OLE_TYPE\nobject. If it is not found, …\n"],["ole_types","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-ole_types","()","<p>Returns the type library file path.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</pre>\n"],["on","OptionParser","OptionParser.html#method-i-on","(*opts, &block)","<p>Add option switch and handler. See #make_switch for an explanation of\nparameters.\n"],["on","Tracer","Tracer.html#method-c-on","()","<p>Start tracing\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Tracer</span>.<span class=\"ruby-identifier\">on</span>\n<span class=\"ruby-comment\"># code to trace here</span>\n<span class=\"ruby-constant\">Tracer</span>.<span class=\"ruby-identifier\">off</span>\n</pre>\n"],["on_attr_charref","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_attr_charref","(code)",""],["on_attr_charref_hex","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_attr_charref_hex","(code)",""],["on_attr_entityref","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_attr_entityref","(ref)",""],["on_attr_value","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_attr_value","(str)",""],["on_attribute","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_attribute","(name)",""],["on_charref","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_charref","(code)",""],["on_charref_hex","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_charref_hex","(code)",""],["on_connect","Net::HTTP","Net/HTTP.html#method-i-on_connect","()",""],["on_curve?","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-on_curve-3F","()",""],["on_default","Ripper::Filter","Ripper/Filter.html#method-i-on_default","(event, token, data)","<p>This method is called when some event handler is undefined.\n<code>event</code> is :on_XXX, <code>token</code> is the scanned token, …\n"],["on_entityref","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_entityref","(ref)",""],["on_error","Racc::Parser","Racc/Parser.html#method-i-on_error","(t, val, vstack)","<p>This method is called when a parse error is found.\n<p>ERROR_TOKEN_ID is an internal ID of token which caused …\n"],["on_etag","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_etag","(name)",""],["on_event","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-i-on_event","(*args)","<p>Defines the callback event. If argument is omitted, this method defines the\ncallback of all events.  …\n"],["on_event_with_outargs","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-i-on_event_with_outargs","(*args)","<p>Defines the callback of event. If you want modify argument in callback, you\ncould use this method instead …\n"],["on_head","OptionParser","OptionParser.html#method-i-on_head","(*opts, &block)","<p>Add option switch like with #on, but at head of summary.\n"],["on_stag","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_stag","(name)",""],["on_stag_end","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_stag_end","(name)",""],["on_stag_end_empty","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_stag_end_empty","(name)",""],["on_tail","OptionParser","OptionParser.html#method-i-on_tail","(*opts, &block)","<p>Add option switch like with #on, but at tail of summary.\n"],["on_windows?","PStore","PStore.html#method-i-on_windows-3F","()",""],["on_xmldecl_encoding","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_xmldecl_encoding","(str)",""],["on_xmldecl_end","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_xmldecl_end","()",""],["on_xmldecl_standalone","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_xmldecl_standalone","(str)",""],["on_xmldecl_version","RSS::XMLScanListener","RSS/XMLScanListener.html#method-i-on_xmldecl_version","(str)",""],["one?","Enumerable","Enumerable.html#method-i-one-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block returns …\n"],["one?","OpenSSL::BN","OpenSSL/BN.html#method-i-one-3F","()",""],["ongoing_visibility=","RDoc::Context","RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["opaque=","URI::Generic","URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["open","CSV","CSV.html#method-c-open","(*args)","<p>This method opens an IO object, and wraps that with CSV.  This is intended\nas the primary interface for …\n"],["open","DBM","DBM.html#method-c-open","(*args)","<p>Open a dbm database and yields it if a block is given. See also\n<code>DBM.new</code>.\n"],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration\n<code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration\n<code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open","(uri, config)","<p>Return an DRb::DRbSSLSocket instance as a client-side connection, with the\nSSL connected.  This is called …\n"],["open","Dir","Dir.html#method-c-open","(*args)","<p>The optional <em>enc</em> argument specifies the encoding of the directory.\nIf not specified, the filesystem encoding …\n"],["open","File","File.html#method-c-open","(*args)","<p>With no associated block, <code>File.open</code> is a synonym for File.new.\nIf the optional code block is given, it …\n"],["open","GDBM","GDBM.html#method-c-open","(*args)","<p>If called without a block, this is synonymous to GDBM::new. If a block is\ngiven, the new GDBM instance …\n"],["open","IO","IO.html#method-c-open","(*args)","<p>With no associated block, <code>IO.open</code> is a synonym for IO.new.  If\nthe optional code block is given, it will …\n"],["open","Kernel","Kernel.html#method-c-open","(*args)","<p>Creates an IO object connected to the given stream, file, or subprocess.\n<p>If <code>path</code> does not start with a …\n"],["open","Kernel","Kernel.html#method-i-open","(*args)","<p>Creates an IO object connected to the given stream, file, or subprocess.\n<p>If <code>path</code> does not start with a …\n"],["open","Net::FTP","Net/FTP.html#method-c-open","(host, *args)","<p>A synonym for <code>FTP.new</code>, but with a mandatory host parameter.\n<p>If a block is given, it is passed the <code>FTP</code> …\n"],["open","OpenURI::OpenRead","OpenURI/OpenRead.html#method-i-open","(*rest, &block)","<p>OpenURI::OpenRead#open provides `open&#39; for URI::HTTP and URI::FTP.\n<p>OpenURI::OpenRead#open takes optional …\n"],["open","PTY","PTY.html#method-c-open","()","<p>Allocates a pty (pseudo-terminal).\n<p>In the block form, yields two arguments <code>master_io, slave_file</code>\nand the …\n"],["open","Pathname","Pathname.html#method-i-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Opens the file for reading or writing.\n<p>See File.open.\n"],["open","Resolv::DNS","Resolv/DNS.html#method-c-open","(*args)","<p>Creates a new DNS resolver.  See Resolv::DNS.new for argument details.\n<p>Yields the created DNS resolver …\n"],["open","SDBM","SDBM.html#method-c-open","(*args)","<p>If called without a block, this is the same as SDBM.new.\n<p>If a block is given, the new database will be …\n"],["open","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-open","(path, mode = nil, perm = 0666, &b)","<p>See IO.open when <code>path</code> is a file.\n<p>See Dir.open when <code>path</code> is a directory.\n"],["open","StringIO","StringIO.html#method-c-open","(*args)","<p>Equivalent to StringIO.new except that when it is called with a block, it\nyields with the new instance …\n"],["open","Syslog","Syslog.html#method-c-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Open the syslog facility. Raises a runtime exception if it is already open.\n<p>Can be called with or without …\n"],["open","Tempfile","Tempfile.html#method-c-open","(*args)","<p>Creates a new Tempfile.\n<p>If no block is given, this is a synonym for Tempfile.new.\n<p>If a block is given, …\n"],["open","Tempfile","Tempfile.html#method-i-open","()","<p>Opens or reopens the file with mode “r+”.\n"],["open","Zlib::GzipReader","Zlib/GzipReader.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> as a gzipped file, and\nreturns a GzipReader object associated with …\n"],["open","Zlib::GzipWriter","Zlib/GzipWriter.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> for writing gzip compressed\ndata, and returns a GzipWriter object …\n"],["open!","Syslog","Syslog.html#method-c-open-21","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["open_and_lock_file","PStore","PStore.html#method-i-open_and_lock_file","(filename, read_only)","<p>Open the specified filename (either in read-only mode or in read-write\nmode) and lock it for reading …\n"],["open_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_editor","(path)",""],["open_gem","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_gem","(name)",""],["open_logfile","Logger::LogDevice","Logger/LogDevice.html#method-i-open_logfile","(filename)",""],["open_message_stream","Net::SMTP","Net/SMTP.html#method-i-open_message_stream","(from_addr, *to_addrs)","<p>Opens a message writer stream and gives it to the block. The stream is\nvalid only in the block, and has …\n"],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with\nconfiguration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with\nconfiguration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbSSLSocket","DRb/DRbSSLSocket.html#method-c-open_server","(uri, config)","<p>Returns a DRb::DRbSSLSocket instance as a server-side connection, with the\nSSL connected.  This is called …\n"],["open_uri_or_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-open_uri_or_path","(path)","<p>Thanks, FakeWeb!\n"],["open_uri_original_open","Kernel","Kernel.html#method-c-open_uri_original_open","(*args)",""],["open_uri_original_open","Kernel","Kernel.html#method-i-open_uri_original_open","(*args)",""],["opendir","Pathname","Pathname.html#method-i-opendir","()","<p>Opens the referenced directory.\n<p>See Dir.open.\n"],["opened?","Syslog","Syslog.html#method-c-opened-3F","()","<p>Returns true if the syslog is open.\n"],["option_list","RDoc::Task","RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["option_list","RDoc::Task","RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["optional?","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-optional-3F","()","<p>Returns true if argument is optional.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...</pre>\n"],["options","FileUtils","FileUtils.html#method-c-options","()","<p>Returns an Array of option names.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">options</span>  <span class=\"ruby-comment\">#=&gt; [&quot;noop&quot;, &quot;force&quot;, &quot;verbose&quot;, &quot;preserve&quot;, &quot;mode&quot;]</span>\n</pre>\n"],["options","Net::HTTP","Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["options","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-options","()","<p>Gets various OpenSSL options.\n"],["options","OptionParser::Arguable","OptionParser/Arguable.html#method-i-options","()","<p>Actual OptionParser object, automatically created if nonexistent.\n<p>If called with a block, yields the  …\n"],["options","RDoc::CodeObject","RDoc/CodeObject.html#method-i-options","()","<p>The options instance from the store this CodeObject is attached to, or a\ndefault options instance if …\n"],["options","Regexp","Regexp.html#method-i-options","()","<p>Returns the set of bits corresponding to the options used when creating\nthis Regexp (see <code>Regexp::new</code> …\n"],["options","Syslog","Syslog.html#method-c-options","()","<p>Returns the options bitmask used in the last call to open()\n"],["options=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-options-3D","(p1)","<p>Sets various OpenSSL options.\n"],["options=","OptionParser::Arguable","OptionParser/Arguable.html#method-i-options-3D","(opt)","<p>Sets OptionParser object, when <code>opt</code> is <code>false</code> or\n<code>nil</code>, methods OptionParser::Arguable#options and\nOptionParser::Arguable#options= …\n"],["options_of","FileUtils","FileUtils.html#method-c-options_of","(mid)","<p>Returns an Array of option names of the method <code>mid</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">options_of</span>(:<span class=\"ruby-identifier\">rm</span>)  <span class=\"ruby-comment\">#=&gt; [&quot;noop&quot;, &quot;verbose&quot;, ...</span>\n</pre>\n"],["optname","Socket::Option","Socket/Option.html#method-i-optname","()","<p>returns the socket option name as an integer.\n\n<pre>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).optname ...</pre>\n"],["ord","Integer","Integer.html#method-i-ord","()","<p>Returns the <code>int</code> itself.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">?a</span>.<span class=\"ruby-identifier\">ord</span>    <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n<p>This method is intended for compatibility to character constant …\n"],["ord","Integer","Integer.html#method-i-ord","()","<p>Returns the <code>int</code> itself.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">?a</span>.<span class=\"ruby-identifier\">ord</span>    <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n<p>This method is intended for compatibility to character constant …\n"],["ord","String","String.html#method-i-ord","()","<p>Return the <code>Integer</code> ordinal of a one-character string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;a&quot;</span>.<span class=\"ruby-identifier\">ord</span>         <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n"],["order","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-order","()","<p>Returns the order of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get_order()\n"],["order","OptionParser","OptionParser.html#method-i-order","(*argv, into: nil, &nonopt)","<p>Parses command line arguments <code>argv</code> in order. When a block is\ngiven, each non-option argument is yielded. …\n"],["order!","OptionParser","OptionParser.html#method-i-order-21","(argv = default_argv, into: nil, &nonopt)","<p>Same as #order, but removes switches destructively. Non-option arguments\nremain in <code>argv</code>.\n"],["order!","OptionParser::Arguable","OptionParser/Arguable.html#method-i-order-21","(&blk)","<p>Parses <code>self</code> destructively in order and returns\n<code>self</code> containing the rest arguments left unparsed.\n"],["ordering=","GetoptLong","GetoptLong.html#method-i-ordering-3D","(ordering)","<p>Set the handling of the ordering of options and arguments. A RuntimeError\nis raised if option processing …\n"],["ordinal","Date","Date.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3)","<p>Creates a date object denoting the given ordinal date.\n<p>The day of year should be a negative or a positive …\n"],["ordinal","DateTime","DateTime.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Creates a DateTime object denoting the given ordinal date.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">ordinal</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">34</span>) <span class=\"ruby-comment\">#=&gt; #&lt;DateTime: 2001-02-03T00:00:00+00:00 ...</span>\n</pre>\n"],["orig_initialize","RDoc::Markdown","RDoc/Markdown.html#method-i-orig_initialize","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>TODO remove when kpeg 0.10 is released\n"],["orig_name","Zlib::GzipFile","Zlib/GzipFile.html#method-i-orig_name","()","<p>Returns original filename recorded in the gzip file header, or\n<code>nil</code> if original filename is not present. …\n"],["orig_name=","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-orig_name-3D","(p1)","<p>Specify the original name (<code>str</code>) in the gzip header.\n"],["original_name","Method","Method.html#method-i-original_name","()","<p>Returns the original name of the method.\n"],["original_name","UnboundMethod","UnboundMethod.html#method-i-original_name","()","<p>Returns the original name of the method.\n"],["orthogonal?","Matrix","Matrix.html#method-i-orthogonal-3F","()","<p>Returns <code>true</code> if this is an orthogonal matrix Raises an error\nif matrix is not square.\n"],["os_code","Zlib::GzipFile","Zlib/GzipFile.html#method-i-os_code","()","<p>Returns OS code number recorded in the gzip file header.\n"],["other_elements","RSS::Maker::Base","RSS/Maker/Base.html#method-c-other_elements","()",""],["others_possible?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-others_possible-3F","()","<p>Indicate if this activation is one of a set of possible requests for the\nsame Dependency request.\n"],["out","CGI","CGI.html#method-i-out","(options = \"text/html\")","<p>Print an HTTP header and body to $DEFAULT_OUTPUT ($&gt;)\n<p>content_type_string &mdash; If a string is passed, it …\n"],["out","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-out","(dev = STDOUT, &block)","<p>Calls <code>device.print</code> on the result passing the <em>block</em> to\n#transact\n"],["out_of_line?","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-out_of_line-3F","()","<p>Returns true if the element contains linked content.\n"],["out_of_line?","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-out_of_line-3F","()",""],["outdated","Gem::Specification","Gem/Specification.html#method-c-outdated","()","<p>Return a list of all outdated local gem names.  This method is HEAVY as it\nmust go fetch specifications …\n"],["outdated_and_latest_version","Gem::Specification","Gem/Specification.html#method-c-outdated_and_latest_version","()","<p>Enumerates the outdated local gems yielding the local specification and the\nlatest remote version.\n<p>This …\n"],["output","Gem::MockGemUi","Gem/MockGemUi.html#method-i-output","()",""],["output","Gem::Resolver","Gem/Resolver.html#method-i-output","()",""],["output","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-output","()","<p>The {IO} object that should be used to print output. `STDOUT`, by default.\n<p>@return [IO]\n"],["output=","Readline","Readline.html#method-c-output-3D","(p1)","<p>Specifies a File object <code>output</code> that is output stream for\nReadline.readline method.\n"],["output?","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-output-3F","()","<p>Returns true if argument is output.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Internet Controls&#39;, &#39;DWebBrowserEvents&#39;) ...</pre>\n"],["output_encoding=","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-output_encoding-3D","(enc)",""],["output_flag_file","RDoc::RDoc","RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-output_name","(context)","<p>Name for output to HTML.  For class methods the full name with a “.” is\nused like <code>SomeClass.method_name</code> …\n"],["output_query_results","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-output_query_results","(spec_tuples)",""],["output_versions","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-output_versions","(output, versions)",""],["owned?","File","File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","File::Stat","File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the\nsame as the owner of <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).owned? ...</pre>\n"],["owned?","FileTest","FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","Pathname","Pathname.html#method-i-owned-3F","()","<p>See FileTest.owned?.\n"],["owned?","Thread::Mutex","Thread/Mutex.html#method-i-owned-3F","()","<p>Returns <code>true</code> if this lock is currently held by current thread.\n"],["owner","Method","Method.html#method-i-owner","()","<p>Returns the class or module that defines the method.\n"],["owner","UnboundMethod","UnboundMethod.html#method-i-owner","()","<p>Returns the class or module that defines the method.\n"],["p","Kernel","Kernel.html#method-i-p","(*args)","<p>For each object, directly writes <em>obj</em>.<code>inspect</code> followed\nby a newline to the program&#39;s standard output. …\n"],["p","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-p","()","<p>Returns the permutation matrix <code>P</code>\n"],["pack","Array","Array.html#method-i-pack","(p1, p2 = {})","<p>Packs the contents of <em>arr</em> into a binary sequence according to the\ndirectives in <em>aTemplateString</em> (see …\n"],["pack_sockaddr_in","Socket","Socket.html#method-c-pack_sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_in</span>(<span class=\"ruby-value\">80</span>, <span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...</span>\n</pre>\n"],["pack_sockaddr_un","Socket","Socket.html#method-c-pack_sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_un</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-comment\">#=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;</span>\n</pre>\n"],["padding=","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-padding-3D","(p1)","<p>Enables or disables padding. By default encryption operations are padded\nusing standard block padding …\n"],["page","RDoc::Store","RDoc/Store.html#method-i-page","(name)","<p>Returns the RDoc::TopLevel that is a text file and has the given\n<code>name</code>\n"],["page_file","RDoc::Store","RDoc/Store.html#method-i-page_file","(page_name)","<p>Path to the ri data for <code>page_name</code>\n"],["page_name","RDoc::TopLevel","RDoc/TopLevel.html#method-i-page_name","()","<p>Base name of this file without the extension\n"],["pair","Socket","Socket.html#method-c-pair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["pair","UNIXSocket","UNIXSocket.html#method-c-pair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected to each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, …\n"],["para","RDoc::TestCase","RDoc/TestCase.html#method-i-para","(*a)","<p>Shortcut for RDoc::Markup::Paragraph.new with <code>contents</code>\n"],["paragraph","RDoc::Markdown","RDoc/Markdown.html#method-i-paragraph","(parts)","<p>Creates an RDoc::Markup::Paragraph from <code>parts</code> and\nincluding\nextension-specific behavior\n"],["param_list","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method&#39;s method and yield parameters. \n<code>call-seq</code> params are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method&#39;s parameters were\ngiven by <code>call-seq</code> it is preferred …\n"],["parameters","Method","Method.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parameters","Proc","Proc.html#method-i-parameters","()","<p>Returns the parameter information of this proc.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">prc</span> = <span class=\"ruby-identifier\">lambda</span>{<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">x</span>, <span class=\"ruby-identifier\">y</span>=<span class=\"ruby-value\">42</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">other</span><span class=\"ruby-operator\">|</span>}\n<span class=\"ruby-identifier\">prc</span>.<span class=\"ruby-identifier\">parameters</span>  <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parameters","UnboundMethod","UnboundMethod.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["params","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use …\n"],["params","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use …\n"],["params","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-params","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Stores all parameters of key to the hash. …\n"],["params","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-params","()","<p>returns array of WIN32OLE_PARAM object corresponding with method\nparameters.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["params","Zlib::Deflate","Zlib/Deflate.html#method-i-params","(p1, p2)","<p>Changes the parameters of the deflate stream to allow changes between\ndifferent types of data that require …\n"],["params=","CGI::QueryExtension","CGI/QueryExtension.html#method-i-params-3D","(hash)","<p>Set all the parameters.\n"],["params_ok?","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-params_ok-3F","()","<p>Validates the Diffie-Hellman parameters associated with this instance. It\nchecks whether a safe prime …\n"],["paranoid","Gem::Indexer","Gem/Indexer.html#method-i-paranoid","(path, extension)","<p>Ensure <code>path</code> and path with <code>extension</code> are\nidentical.\n"],["parent","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-parent","()","<p>Return the ActivationRequest that contained the dependency that we were\nactivated for.\n"],["parent","Pathname","Pathname.html#method-i-parent","()","<p>Returns the parent directory.\n<p>This is same as <code>self + &#39;..&#39;</code>.\n"],["parent","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent","()","<p>Our parent CodeObject.  The parent may be missing for classes loaded from\nlegacy RI data stores.\n"],["parent","REXML::Light::Node","REXML/Light/Node.html#method-i-parent","()",""],["parent=","REXML::Child","REXML/Child.html#method-i-parent-3D","( other )","<p>Sets the parent of this child to the supplied argument.\n<p>other &mdash; Must be a Parent object.  If this object …\n"],["parent=","REXML::Light::Node","REXML/Light/Node.html#method-i-parent-3D","( node )",""],["parent=","REXML::Text","REXML/Text.html#method-i-parent-3D","(parent)",""],["parent?","REXML::Node","REXML/Node.html#method-i-parent-3F","()",""],["parent?","REXML::Parent","REXML/Parent.html#method-i-parent-3F","()",""],["parent_file_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_name","RDoc::CodeObject","RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parent_of","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-parent_of","(requirement)","<p>@return [Object] the requirement that led to `requirement` being added\n\n<pre>to the list of requirements.</pre>\n"],["parse","CGI","CGI.html#method-c-parse","(query)","<p>Parse an HTTP query string into a hash of key=&gt;value pairs.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">params</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;query_string&quot;</span>)\n  <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["parse","CGI::Cookie","CGI/Cookie.html#method-c-parse","(raw_cookie)","<p>Parse a raw cookie string into a hash of cookie-name=&gt;Cookie pairs.\n\n<pre>cookies = CGI::Cookie.parse(&quot;raw_cookie_string&quot;) ...</pre>\n"],["parse","CSV","CSV.html#method-c-parse","(*args, &block)","<p>This method can be used to easily parse CSV out of a String.  You may\neither provide a <code>block</code> which will …\n"],["parse","Date","Date.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time, and creates a date\nobject.  This method does not function …\n"],["parse","DateTime","DateTime.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time, and creates a DateTime\nobject.  This method does not …\n"],["parse","Gem::RequestSet::Lockfile::Parser","Gem/RequestSet/Lockfile/Parser.html#method-i-parse","()",""],["parse","Gem::Requirement","Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair.\n<code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse","JSON","JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it.\n<p><em>opts</em> can have the following keys: …\n"],["parse","Net::SMTP::Response","Net/SMTP/Response.html#method-c-parse","(str)","<p>Parses the received response and separates the reply code and the human\nreadable reply text\n"],["parse","OpenSSL::Config","OpenSSL/Config.html#method-c-parse","(string)","<p>Parses a given <code>string</code> as a blob that contains configuration\nfor openssl.\n<p>If the source of the IO is a …\n"],["parse","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-parse","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse","OptionParser","OptionParser.html#method-i-parse","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in order when environment\nvariable POSIXLY_CORRECT is set, and in …\n"],["parse","OptionParser::Switch::NoArgument","OptionParser/Switch/NoArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if any arguments given.\n"],["parse","OptionParser::Switch::OptionalArgument","OptionParser/Switch/OptionalArgument.html#method-i-parse","(arg, argv, &error)","<p>Parses argument if given, or uses default value.\n"],["parse","OptionParser::Switch::PlacedArgument","OptionParser/Switch/PlacedArgument.html#method-i-parse","(arg, argv, &error)","<p>Returns nil if argument is not present or begins with &#39;-&#39;.\n"],["parse","OptionParser::Switch::RequiredArgument","OptionParser/Switch/RequiredArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if argument is not present.\n"],["parse","Psych","Psych.html#method-c-parse","(yaml, filename = nil, fallback = false)","<p>Parse a YAML string in <code>yaml</code>.  Returns the\nPsych::Nodes::Document. <code>filename</code> is used in the exception\nmessage …\n"],["parse","RDoc::ClassModule","RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document\ncomposed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Comment","RDoc/Comment.html#method-i-parse","()","<p>Parses the comment into an RDoc::Markup::Document.  The parsed document is\ncached until the text is changed. …\n"],["parse","RDoc::Markdown","RDoc/Markdown.html#method-c-parse","(markdown)","<p>Parses the <code>markdown</code> document into an RDoc::Document using the\ndefault\nextensions.\n"],["parse","RDoc::Markdown","RDoc/Markdown.html#method-i-parse","(markdown)","<p>Parses <code>markdown</code> into an RDoc::Document\n"],["parse","RDoc::Markup","RDoc/Markup.html#method-c-parse","(str)","<p>Parses <code>str</code> into an RDoc::Markup::Document.\n"],["parse","RDoc::Options","RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::RD","RDoc/RD.html#method-c-parse","(rd)","<p>Parses <code>rd</code> source and returns an RDoc::Markup::Document.  If\nthe <code>=begin</code> or <code>=end</code> lines are missing they …\n"],["parse","RDoc::Text","RDoc/Text.html#method-i-parse","(text, format = 'rdoc')","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","RDoc::TomDoc","RDoc/TomDoc.html#method-c-parse","(text)","<p>Parses TomDoc from text\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Examples\n"],["parse","REXML::DTD::Parser","REXML/DTD/Parser.html#method-c-parse","( input )",""],["parse","REXML::Parsers::LightParser","REXML/Parsers/LightParser.html#method-i-parse","()",""],["parse","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-parse","()",""],["parse","REXML::Parsers::StreamParser","REXML/Parsers/StreamParser.html#method-i-parse","()",""],["parse","REXML::Parsers::TreeParser","REXML/Parsers/TreeParser.html#method-i-parse","()",""],["parse","REXML::Parsers::UltraLightParser","REXML/Parsers/UltraLightParser.html#method-i-parse","()",""],["parse","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-parse","(path)",""],["parse","REXML::XPathParser","REXML/XPathParser.html#method-i-parse","(path, nodeset)",""],["parse","RSS::BaseParser","RSS/BaseParser.html#method-i-parse","()",""],["parse","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-c-parse","(duration, do_validate=true)",""],["parse","RSS::Parser","RSS/Parser.html#method-c-parse","(rss, do_validate=true, ignore_unknown_element=true, parser_class=default_parser)",""],["parse","RSS::Utils::CSV","RSS/Utils/CSV.html#method-i-parse","(value, &block)",""],["parse","RSS::Utils::YesCleanOther","RSS/Utils/YesCleanOther.html#method-i-parse","(value)",""],["parse","RSS::Utils::YesOther","RSS/Utils/YesOther.html#method-i-parse","(value)",""],["parse","Ripper","Ripper.html#method-i-parse","()","<p>Start parsing and returns the value of the root action.\n"],["parse","Ripper","Ripper.html#method-c-parse","(src, filename = '(ripper)', lineno = 1)","<p>Parses the given Ruby program read from <code>src</code>. <code>src</code>\nmust be a String or an IO or a object with a #gets method. …\n"],["parse","Ripper::Filter","Ripper/Filter.html#method-i-parse","(init = nil)","<p>Starts the parser. <code>init</code> is a data accumulator and is passed to\nthe next event handler (as of Enumerable#inject …\n"],["parse","Time","Time.html#method-c-parse","(date, now=self.now)","<p>Parses <code>date</code> using Date._parse and converts it to a Time\nobject.\n<p>If a block is given, the year described …\n"],["parse","URI","URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">uri_str</span>)\n</pre>\n<p>Args\n"],["parse","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p>uri &mdash; String\n\n<p>Description\n"],["parse","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse","(str)","<p>Parses a Cookie field sent from the user-agent.  Returns an array of\ncookies.\n"],["parse","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-parse","(socket=nil)","<p>Parses a request from <code>socket</code>.  This is called internally by\nWEBrick::HTTPServer.\n"],["parse!","JSON","JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it. The bang version of the parse …\n"],["parse!","OptionParser","OptionParser.html#method-i-parse-21","(argv = default_argv, into: nil)","<p>Same as #parse, but removes switches destructively. Non-option arguments\nremain in <code>argv</code>.\n"],["parse!","OptionParser::Arguable","OptionParser/Arguable.html#method-i-parse-21","()","<p>Parses <code>self</code> destructively and returns <code>self</code>\ncontaining the rest arguments left unparsed.\n"],["parse_arg","OptionParser::Switch","OptionParser/Switch.html#method-i-parse_arg","(arg)","<p>Parses <code>arg</code> and returns rest of <code>arg</code> and matched\nportion to the argument pattern. Yields when the pattern …\n"],["parse_args","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-parse_args","( string )",""],["parse_args","REXML::QuickPath","REXML/QuickPath.html#method-c-parse_args","( element, string )",""],["parse_bind_options","Fiddle::Importer","Fiddle/Importer.html#method-i-parse_bind_options","(opts)",""],["parse_config","OpenSSL::Config","OpenSSL/Config.html#method-c-parse_config","(io)","<p>Parses the configuration data read from <code>io</code>, see also #parse.\n<p>Raises a ConfigError on invalid configuration …\n"],["parse_config_lines","OpenSSL::Config","OpenSSL/Config.html#method-c-parse_config_lines","(io)",""],["parse_ctype","Fiddle::CParser","Fiddle/CParser.html#method-i-parse_ctype","(ty, tymap=nil)","<p>Given a String of C type <code>ty</code>, returns the corresponding Fiddle\nconstant.\n<p><code>ty</code> can also accept an Array of …\n"],["parse_dn","URI::LDAP","URI/LDAP.html#method-i-parse_dn","()","<p>private method to cleanup <code>dn</code> from using the <code>path</code>\ncomponent attribute\n"],["parse_dot_doc_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns,\nrepresenting candidates for documentation. …\n"],["parse_file","Psych","Psych.html#method-c-parse_file","(filename)","<p>Parse a file at <code>filename</code>. Returns the Psych::Nodes::Document.\n<p>Raises a Psych::SyntaxError when a YAML …\n"],["parse_file","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_files","RDoc::RDoc","RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_form_data","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_form_data","(io, boundary)","<p>Parses form data in <code>io</code> with the given <code>boundary</code>\n"],["parse_form_data","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_form_data","(io, boundary)","<p>Parses form data in <code>io</code> with the given <code>boundary</code>\n"],["parse_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_header","(raw)","<p>Parses an HTTP header <code>raw</code> into a hash of header fields with an\nArray of values.\n"],["parse_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_header","(raw)","<p>Parses an HTTP header <code>raw</code> into a hash of header fields with an\nArray of values.\n"],["parse_headers","CSV","CSV.html#method-i-parse_headers","(row = nil)","<p>This method is used to turn a finished <code>row</code> into a CSV::Row. \nHeader rows are also dealt with here, either …\n"],["parse_helper","REXML::DTD::Parser","REXML/DTD/Parser.html#method-c-parse_helper","( input )","<p>Takes a String and parses it out\n"],["parse_int","Psych::ScalarScanner","Psych/ScalarScanner.html#method-i-parse_int","(string)","<p>Parse and return an int from <code>string</code>\n"],["parse_line","CSV","CSV.html#method-c-parse_line","(line, options = Hash.new)","<p>This method is a shortcut for converting a single line of a CSV String into\nan Array.  Note that if  …\n"],["parse_make_command_line","Gem::TestCase","Gem/TestCase.html#method-i-parse_make_command_line","(line)",""],["parse_mlsx_entry","Net::FTP","Net/FTP.html#method-i-parse_mlsx_entry","(entry)",""],["parse_openssl","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-parse_openssl","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse_pasv_ipv4_host","Net::FTP","Net/FTP.html#method-i-parse_pasv_ipv4_host","(s)",""],["parse_pasv_ipv6_host","Net::FTP","Net/FTP.html#method-i-parse_pasv_ipv6_host","(s)",""],["parse_pasv_port","Net::FTP","Net/FTP.html#method-i-parse_pasv_port","(s)",""],["parse_pi_content","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-parse_pi_content","(content)","<p>Extract the first name=“value” pair from content. Works with single quotes\naccording to the …\n"],["parse_printf_format","IRB::OutputMethod","IRB/OutputMethod.html#method-i-parse_printf_format","(format, opts)","<p>Returns an array of the given <code>format</code> and <code>opts</code> to\nbe used by Kernel#sprintf, if there was a successful …\n"],["parse_query","URI::LDAP","URI/LDAP.html#method-i-parse_query","()","<p>private method to cleanup <code>attributes</code>, <code>scope</code>,\n<code>filter</code> and <code>extensions</code>, from using the\n<code>query</code> component attribute …\n"],["parse_query","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_query","(str)","<p>Parses the query component of a URI in <code>str</code>\n"],["parse_query","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_query","(str)","<p>Parses the query component of a URI in <code>str</code>\n"],["parse_qvalues","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_qvalues","(value)","<p>Parses q values in <code>value</code> as used in Accept headers.\n"],["parse_qvalues","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_qvalues","(value)","<p>Parses q values in <code>value</code> as used in Accept headers.\n"],["parse_range_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-parse_range_header","(ranges_specifier)","<p>Parses a Range header value <code>ranges_specifier</code>\n"],["parse_range_header","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-parse_range_header","(ranges_specifier)","<p>Parses a Range header value <code>ranges_specifier</code>\n"],["parse_rfc2253","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-c-parse_rfc2253","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse_set_cookie","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse_set_cookie","(str)","<p>Parses the cookie in <code>str</code>\n"],["parse_set_cookies","WEBrick::Cookie","WEBrick/Cookie.html#method-c-parse_set_cookies","(str)","<p>Parses the cookies in <code>str</code>\n"],["parse_signature","Fiddle::CParser","Fiddle/CParser.html#method-i-parse_signature","(signature, tymap=nil)","<p>Parses a C prototype signature\n<p>If Hash <code>tymap</code> is provided, the return value and the arguments\nfrom the …\n"],["parse_source","REXML::DTD::EntityDecl","REXML/DTD/EntityDecl.html#method-c-parse_source","(source, listener)",""],["parse_source","REXML::DTD::NotationDecl","REXML/DTD/NotationDecl.html#method-c-parse_source","(source, listener)",""],["parse_stream","Psych","Psych.html#method-c-parse_stream","(yaml, filename = nil, &block)","<p>Parse a YAML string in <code>yaml</code>.  Returns the\nPsych::Nodes::Stream. This method can handle multiple YAML …\n"],["parse_stream","REXML::Document","REXML/Document.html#method-c-parse_stream","( source, listener )",""],["parse_struct_signature","Fiddle::CParser","Fiddle/CParser.html#method-i-parse_struct_signature","(signature, tymap=nil)","<p>Parses a C struct&#39;s members\n<p>Example:\n\n<pre>include Fiddle::CParser\n  #=&gt; Object\n\nparse_struct_signature([&#39;int ...</pre>\n"],["parse_time","Psych::ScalarScanner","Psych/ScalarScanner.html#method-i-parse_time","(string)","<p>Parse and return a Time from <code>string</code>\n"],["parser","Gem::Command","Gem/Command.html#method-i-parser","()","<p>Create on demand parser.\n"],["parser","Psych","Psych.html#method-c-parser","()","<p>Returns a default parser\n"],["parser","URI::Generic","URI/Generic.html#method-i-parser","()","<p>returns the parser to be used.\n<p>Unless a URI::Parser is defined, then DEFAULT_PARSER is used.\n"],["partition","Enumerable","Enumerable.html#method-i-partition","()","<p>Returns two arrays, the first containing the elements of <em>enum</em> for\nwhich the block evaluates to true, …\n"],["partition","String","String.html#method-i-partition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string and\nreturns the part before it, the match, and the part …\n"],["pass","Thread","Thread.html#method-c-pass","()","<p>Give the thread scheduler a hint to pass execution to another thread. A\nrunning thread may or may not …\n"],["passwd","Etc","Etc.html#method-c-passwd","()","<p>Provides a convenient Ruby iterator which executes a block for each entry\nin the /etc/passwd file.\n<p>The …\n"],["password","URI::Generic","URI/Generic.html#method-i-password","()","<p>returns the password component\n"],["password=","URI::Generic","URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["password_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-password_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a Password Input element as a string.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits default …\n"],["patch","Net::HTTP","Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["path","ARGF","ARGF.html#method-i-path","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["path","Dir","Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["path","File","File.html#method-c-path","(p1)","<p>Returns the string representation of the path\n\n<pre>File.path(&quot;/dev/null&quot;)          #=&gt; &quot;/dev/null&quot;\nFile.path(Pathname.new(&quot;/tmp&quot;)) ...</pre>\n"],["path","File","File.html#method-i-path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n\n<pre>File.new(&quot;testfile&quot;).path ...</pre>\n"],["path","Gem","Gem.html#method-c-path","()",""],["path","PStore","PStore.html#method-i-path","()","<p>Returns the path to the data store file.\n"],["path","RDoc::ClassModule","RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module for use with HTML generator output.\n"],["path","RDoc::Constant","RDoc/Constant.html#method-i-path","()","<p>Path to this constant for use with HTML generator output.\n"],["path","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method for use with HTML generator output.\n"],["path","RDoc::TopLevel","RDoc/TopLevel.html#method-i-path","()","<p>Path to this file for use with HTML generator output.\n"],["path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-path","()","<p>Returns the path of this instruction sequence.\n<p><code>&lt;compiled&gt;</code> if the iseq was evaluated from a string. …\n"],["path","Tempfile","Tempfile.html#method-i-path","()","<p>Returns the full path name of the temporary file. This will be nil if\n#unlink has been called.\n"],["path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-path","()","<p>Returns the file name of this frame.\n<p>For example, using <code>caller_locations.rb</code> from\nThread::Backtrace::Location …\n"],["path","TracePoint","TracePoint.html#method-i-path","()","<p>Path of the file being run\n"],["path","UNIXSocket","UNIXSocket.html#method-i-path","()","<p>Returns the path of the local address of unixsocket.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">UNIXServer</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">path</span> <span class=\"ruby-comment\">#=&gt; &quot;/tmp/sock&quot;</span>\n</pre>\n"],["path","URI::FTP","URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP URI.\n<p>RFC 1738 specifically states that the path for an FTP URI does not include\n…\n"],["path","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-path","()","<p>Returns the type library file path.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</pre>\n"],["path=","URI::Generic","URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["path_ok?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-path_ok-3F","(gem_dir, spec)","<p>Is <code>spec</code> in <code>gem_dir</code>?\n"],["path_separator","Gem","Gem.html#method-c-path_separator","()","<p>How String Gem paths should be split.  Overridable for esoteric platforms.\n"],["path_to?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-path_to-3F","(other)","<p>Is there a path from `self` to `other` following edges in the dependency\ngraph? @return true iff there …\n"],["pathconf","IO","IO.html#method-i-pathconf","(p1)","<p>Returns pathname configuration variable using fpathconf().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["paths","Gem","Gem.html#method-c-paths","()","<p>Retrieve the PathSupport object that RubyGems uses to lookup files.\n"],["paths=","Gem","Gem.html#method-c-paths-3D","(env)","<p>Initialize the filesystem paths to use from <code>env</code>.\n<code>env</code> is a hash-like object (typically ENV) that is queried …\n"],["pattern","OptionParser::Switch","OptionParser/Switch.html#method-c-pattern","()",""],["pattern","OptionParser::Switch::NoArgument","OptionParser/Switch/NoArgument.html#method-c-pattern","()",""],["pbkdf2_hmac","OpenSSL::PKCS5","OpenSSL/PKCS5.html#method-c-pbkdf2_hmac","(p1, p2, p3, p4, p5)","<p>Parameters\n<p><code>pass</code> - string\n<p><code>salt</code> - string - should be at least 8 bytes long.\n"],["pbkdf2_hmac_sha1","OpenSSL::PKCS5","OpenSSL/PKCS5.html#method-c-pbkdf2_hmac_sha1","(p1, p2, p3, p4)","<p>Parameters\n<p><code>pass</code> - string\n<p><code>salt</code> - string - should be at least 8 bytes long.\n"],["peek","Enumerator","Enumerator.html#method-i-peek","()","<p>Returns the next object in the enumerator, but doesn&#39;t move the\ninternal position forward.  If the …\n"],["peek","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-peek","()",""],["peek","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-peek","(depth=0)","<p>Peek at the <code>depth</code> event in the stack.  The first element on\nthe stack is at depth 0.  If <code>depth</code> is -1, …\n"],["peek","REXML::Parsers::PullParser","REXML/Parsers/PullParser.html#method-i-peek","(depth=0)",""],["peek","StringScanner","StringScanner.html#method-i-peek","(p1)","<p>Extracts a string corresponding to <code>string[pos,len]</code>, without\nadvancing the scan pointer.\n\n<pre>s = StringScanner.new(&#39;test ...</pre>\n"],["peek_result","Coverage","Coverage.html#method-c-peek_result","()","<p>Returns a hash that contains filename as key and coverage array as value.\n"],["peek_values","Enumerator","Enumerator.html#method-i-peek_values","()","<p>Returns the next object as an array, similar to Enumerator#next_values, but\ndoesn&#39;t move the internal …\n"],["peep","StringScanner","StringScanner.html#method-i-peep","(p1)","<p>Equivalent to #peek. This method is obsolete; use #peek instead.\n"],["peer_cert","Net::HTTP","Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["peer_cert","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-peer_cert","()","<p>The X509 certificate for this socket&#39;s peer.\n"],["peer_cert_chain","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-peer_cert_chain","()","<p>The X509 certificate chain for this socket&#39;s peer.\n"],["peeraddr","IPSocket","IPSocket.html#method-i-peeraddr","(*args)","<p>Returns the remote address as an array which contains address_family, port,\nhostname and numeric_address. …\n"],["peeraddr","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-peeraddr","()",""],["peeraddr","UNIXSocket","UNIXSocket.html#method-i-peeraddr","()","<p>Returns the remote address as an array which contains address_family and\nunix_path.\n<p>Example\n\n<pre>serv = UNIXServer.new(&quot;/tmp/sock&quot;) ...</pre>\n"],["peg_parse","RDoc::Markdown","RDoc/Markdown.html#method-i-peg_parse","(markdown)","<p>The internal kpeg parse method\n"],["pem_files_in","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-pem_files_in","(dir)",""],["pending","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-pending","()","<p>The number of bytes that are immediately available for reading.\n"],["pending_interrupt?","Thread","Thread.html#method-c-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty.\n<p>Since Thread::handle_interrupt can be used to …\n"],["pending_interrupt?","Thread","Thread.html#method-i-pending_interrupt-3F","(p1 = v1)","<p>Returns whether or not the asynchronous queue is empty for the target\nthread.\n<p>If <code>error</code> is given, then …\n"],["percent_doc","RDoc::Stats","RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["permanent_link=","RSS::Maker::ItemsBase::ItemBase::GuidBase","RSS/Maker/ItemsBase/ItemBase/GuidBase.html#method-i-permanent_link-3D","(bool)",""],["permanent_link?","RSS::Maker::ItemsBase::ItemBase::GuidBase","RSS/Maker/ItemsBase/ItemBase/GuidBase.html#method-i-permanent_link-3F","()",""],["permutation","Array","Array.html#method-i-permutation","(p1 = v1)","<p>When invoked with a block, yield all permutations of length <code>n</code>\nof the elements of the array, then return …\n"],["permutation?","Matrix","Matrix.html#method-i-permutation-3F","()","<p>Returns <code>true</code> if this is a permutation matrix Raises an error\nif matrix is not square.\n"],["permute","OptionParser","OptionParser.html#method-i-permute","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in permutation mode and\nreturns list of non-option arguments.\n"],["permute!","OptionParser","OptionParser.html#method-i-permute-21","(argv = default_argv, into: nil)","<p>Same as #permute, but removes switches destructively. Non-option arguments\nremain in <code>argv</code>.\n"],["permute!","OptionParser::Arguable","OptionParser/Arguable.html#method-i-permute-21","()","<p>Parses <code>self</code> destructively in permutation mode and returns\n<code>self</code> containing the rest arguments left unparsed. …\n"],["pfamily","Addrinfo","Addrinfo.html#method-i-pfamily","()","<p>returns the protocol family as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">pfamily</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PF_INET</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["phase","Complex","Complex.html#method-i-phase","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["phase","Float","Float.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["phase","Numeric","Numeric.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["pick_best!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-pick_best-21","()",""],["pid","IO","IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with <em>ios</em>.\nThis will be set by <code>IO.popen</code>.\n\n<pre>pipe = IO.popen(&quot;-&quot;) ...</pre>\n"],["pid","Process","Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">pid</span>   <span class=\"ruby-comment\">#=&gt; 27415</span>\n</pre>\n"],["pid","Process::Status","Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> }   <span class=\"ruby-comment\">#=&gt; 26569</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pid","Process::Waiter","Process/Waiter.html#method-i-pid","()",""],["pid","StringIO","StringIO.html#method-i-pid","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["pin_gem_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-pin_gem_source","(name, type = :default, source = nil)","<p>Pins the gem <code>name</code> to the given <code>source</code>.  Adding a\ngem with the same name from a different <code>source</code> will …\n"],["pipe","IO","IO.html#method-c-pipe","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a pair of pipe endpoints (connected to each other) and returns them\nas a two-element array of …\n"],["pipe?","File","File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n<p><em>file_name</em> can be an IO object.\n"],["pipe?","File::Stat","File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and\n<em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n<p><em>file_name</em> can be an IO object.\n"],["pipe?","Pathname","Pathname.html#method-i-pipe-3F","()","<p>See FileTest.pipe?.\n"],["pipeline","Open3","Open3.html#method-i-pipeline","(*cmds, **opts)","<p>Open3.pipeline starts a list of commands as a pipeline. It waits for the\ncompletion of the commands. …\n"],["pipeline","Open3","Open3.html#method-c-pipeline","(*cmds, **opts)","<p>Open3.pipeline starts a list of commands as a pipeline. It waits for the\ncompletion of the commands. …\n"],["pipeline_r","Open3","Open3.html#method-i-pipeline_r","(*cmds, **opts, &block)","<p>Open3.pipeline_r starts a list of commands as a pipeline with a pipe which\nconnects to stdout of the …\n"],["pipeline_r","Open3","Open3.html#method-c-pipeline_r","(*cmds, **opts, &block)","<p>Open3.pipeline_r starts a list of commands as a pipeline with a pipe which\nconnects to stdout of the …\n"],["pipeline_rw","Open3","Open3.html#method-i-pipeline_rw","(*cmds, **opts, &block)","<p>Open3.pipeline_rw starts a list of commands as a pipeline with pipes which\nconnect to stdin of the first …\n"],["pipeline_rw","Open3","Open3.html#method-c-pipeline_rw","(*cmds, **opts, &block)","<p>Open3.pipeline_rw starts a list of commands as a pipeline with pipes which\nconnect to stdin of the first …\n"],["pipeline_start","Open3","Open3.html#method-i-pipeline_start","(*cmds, **opts, &block)","<p>Open3.pipeline_start starts a list of commands as a pipeline. No pipes are\ncreated for stdin of the first …\n"],["pipeline_start","Open3","Open3.html#method-c-pipeline_start","(*cmds, **opts, &block)","<p>Open3.pipeline_start starts a list of commands as a pipeline. No pipes are\ncreated for stdin of the first …\n"],["pipeline_w","Open3","Open3.html#method-c-pipeline_w","(*cmds, **opts, &block)","<p>Open3.pipeline_w starts a list of commands as a pipeline with a pipe which\nconnects to stdin of the first …\n"],["pipeline_w","Open3","Open3.html#method-i-pipeline_w","(*cmds, **opts, &block)","<p>Open3.pipeline_w starts a list of commands as a pipeline with a pipe which\nconnects to stdin of the first …\n"],["pkcs5_keyivgen","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-pkcs5_keyivgen","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates and sets the key/IV based on a password.\n<p><strong>WARNING</strong>: This method is only PKCS5 v1.5 compliant when …\n"],["pkg_config","MakeMakefile","MakeMakefile.html#method-i-pkg_config","(pkg, option=nil)","<p>Returns compile/link information about an installed library in a tuple of\n<code>[cflags, ldflags, libs]</code>, by …\n"],["platform","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-platform","()","<p>Platform of the gem\n"],["platform","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platform","(*platforms)","<p>Block form for restricting gems to a set of platforms.\n<p>The gem dependencies platform is different from …\n"],["platform","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-platform","()","<p>The platform this gem works on.\n"],["platform","Gem::Specification","Gem/Specification.html#method-i-platform","()","<p>The platform this gem runs on.  See Gem::Platform for details.\n"],["platform=","Gem::Specification","Gem/Specification.html#method-i-platform-3D","(platform)","<p>The platform this gem runs on.\n<p>This is usually Gem::Platform::RUBY or Gem::Platform::CURRENT.\n<p>Most gems …\n"],["platform_defaults","Gem","Gem.html#method-c-platform_defaults","()","<p>Default options for gem commands.\n<p>The options here should be structured as an array of string “gem” …\n"],["platforms","Gem","Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platforms","(*platforms)","<p>Block form for restricting gems to a particular set of platforms.  See\n#platform.\n"],["platforms=","Gem","Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["plural_forms","RSS::Element","RSS/Element.html#method-c-plural_forms","()",""],["point","Readline","Readline.html#method-c-point","()","<p>Returns the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>The index in <code>Readline.line_buffer</code> …\n"],["point=","Readline","Readline.html#method-c-point-3D","(p1)","<p>Set the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>Raises NotImplementedError if the …\n"],["point_conversion_form","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form","()","<p>Returns the form how EC::Point data is encoded as ASN.1.\n<p>See also #point_conversion_form=.\n"],["point_conversion_form=","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form-3D","(p1)","<p>Sets the form how EC::Point data is encoded as ASN.1 as defined in X9.62.\n<p><code>format</code> can be one of these: …\n"],["pointer","StringScanner","StringScanner.html#method-i-pointer","()","<p>Returns the byte position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["pointer=","StringScanner","StringScanner.html#method-i-pointer-3D","(p1)","<p>Set the byte position of the scan pointer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">7</span>            <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["polar","Complex","Complex.html#method-c-polar","(p1, p2 = v2)","<p>Returns a complex object which denotes the given polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">0</span>)            <span class=\"ruby-comment\">#=&gt; (3.0+0.0i) ...</span>\n</pre>\n"],["polar","Complex","Complex.html#method-i-polar","()","<p>Returns an array; [cmp.abs, cmp.arg].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">polar</span>  <span class=\"ruby-comment\">#=&gt; [2.23606797749979, 1.1071487177940904]</span>\n</pre>\n"],["polar","Numeric","Numeric.html#method-i-polar","()","<p>Returns an array; [num.abs, num.arg].\n"],["pools_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-pools_for","(proxy)",""],["pop","Array","Array.html#method-i-pop","(*args)","<p>Removes the last element from <code>self</code> and returns it, or\n<code>nil</code> if the array is empty.\n<p>If a number <code>n</code> is given, …\n"],["pop","Net::POPMail","Net/POPMail.html#method-i-pop","( dest = '' )","<p>This method fetches the message.  If called with a block, the message is\nyielded to the block one chunk …\n"],["pop","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-pop","()",""],["pop","Queue","Queue.html#method-i-pop","(*args)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed\n…\n"],["pop","Rinda::NotifyTemplateEntry","Rinda/NotifyTemplateEntry.html#method-i-pop","()","<p>Retrieves a notification.  Raises RequestExpiredError when this\nNotifyTemplateEntry expires.\n"],["pop","SizedQueue","SizedQueue.html#method-i-pop","(*args)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed\n…\n"],["pop!","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-pop-21","(graph)","<p>Pops the most recent action from the log and undoes the action @param\n[DependencyGraph] graph @return …\n"],["pop_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-pop_inspect_key","(id)","<p>Removes an object from the set of objects being pretty printed.\n"],["pop_possibility_state","Gem::Resolver::Molinillo::DependencyState","Gem/Resolver/Molinillo/DependencyState.html#method-i-pop_possibility_state","()","<p>Removes a possibility from `self` @return [PossibilityState] a state with a\nsingle possibility,\n\n<pre>the possibility ...</pre>\n"],["pop_token","RDoc::TokenStream","RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["pop_workspace","IRB::Context","IRB/Context.html#method-i-pop_workspace","()","<p>Removes the last element from the current #workspaces stack and returns it,\nor <code>nil</code> if the current workspace …\n"],["popd","Shell","Shell.html#method-i-popd","()",""],["popdir","Shell","Shell.html#method-i-popdir","()","<p>Pops a directory from the directory stack, and sets the current directory\nto it.\n"],["popen","Gem::Util","Gem/Util.html#method-c-popen","(*command)","<p>This calls IO.popen where it accepts an array for a <code>command</code>\n(Ruby 1.9+) and implements an IO.popen-like …\n"],["popen","IO","IO.html#method-c-popen","(*args)","<p>Runs the specified command as a subprocess; the subprocess&#39;s standard\ninput and output will be connected …\n"],["popen2","Open3","Open3.html#method-c-popen2","(*cmd, **opts, &block)","<p>Open3.popen2 is similar to Open3.popen3 except that it doesn&#39;t create a\npipe for the standard error …\n"],["popen2","Open3","Open3.html#method-i-popen2","(*cmd, **opts, &block)","<p>Open3.popen2 is similar to Open3.popen3 except that it doesn&#39;t create a\npipe for the standard error …\n"],["popen2e","Open3","Open3.html#method-i-popen2e","(*cmd, **opts, &block)","<p>Open3.popen2e is similar to Open3.popen3 except that it merges the standard\noutput stream and the standard …\n"],["popen2e","Open3","Open3.html#method-c-popen2e","(*cmd, **opts, &block)","<p>Open3.popen2e is similar to Open3.popen3 except that it merges the standard\noutput stream and the standard …\n"],["popen3","Open3","Open3.html#method-i-popen3","(*cmd, **opts, &block)","<p>Open stdin, stdout, and stderr streams and start external executable. In\naddition, a thread to wait for …\n"],["popen3","Open3","Open3.html#method-c-popen3","(*cmd, **opts, &block)","<p>Open stdin, stdout, and stderr streams and start external executable. In\naddition, a thread to wait for …\n"],["popup_menu","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-popup_menu","(name = \"\", *values)","<p>Generate a Select element as a string.\n<p><code>name</code> is the name of the element.  The <code>values</code> are\nthe options that …\n"],["port","Net::POP3","Net/POP3.html#method-i-port","()","<p>The port number to connect to.\n"],["port","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-port","()","<p>The port this request is for\n"],["port=","URI::Generic","URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["pos","ARGF","ARGF.html#method-i-pos","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos","Dir","Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...</pre>\n"],["pos","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos","()","<p>The position in the tar entry\n"],["pos","IO","IO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos","StringIO","StringIO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <strong>strio</strong>.\n"],["pos","StringScanner","StringScanner.html#method-i-pos","()","<p>Returns the byte position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["pos","Zlib::GzipReader","Zlib/GzipReader.html#method-i-pos","()","<p>Total number of output bytes output so far.\n"],["pos","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-pos","()","<p>Total number of input bytes read so far.\n"],["pos=","ARGF","ARGF.html#method-i-pos-3D","(p1)","<p>Seeks to the position given by <em>position</em> (in bytes) in\n<code>ARGF</code>.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">17</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pos=","Dir","Dir.html#method-i-pos-3D","(p1)","<p>Synonym for <code>Dir#seek</code>, but returns the position parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3c40&gt; ...</span>\n</pre>\n"],["pos=","IO","IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <em>ios</em>. It is not\nguaranteed that seeking to the right position …\n"],["pos=","StringIO","StringIO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <strong>strio</strong>.\n"],["pos=","StringScanner","StringScanner.html#method-i-pos-3D","(p1)","<p>Set the byte position of the scan pointer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">StringScanner</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;test string&#39;</span>)\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">7</span>            <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["position","REXML::Functions","REXML/Functions.html#method-c-position","( )",""],["position","REXML::IOSource","REXML/IOSource.html#method-i-position","()",""],["position","REXML::ParseException","REXML/ParseException.html#method-i-position","()",""],["position","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-position","()",""],["position","REXML::Source","REXML/Source.html#method-i-position","()",""],["positive?","Float","Float.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>float</code> is greater than 0.\n"],["positive?","Numeric","Numeric.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>num</code> is greater than 0.\n"],["positive?","Rational","Rational.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>rat</code> is greater than 0.\n"],["positive_integer_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-positive_integer_writer","(name, disp_name=name)",""],["possibilities","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-possibilities","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#possibilities)\n"],["possibility","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-possibility","()","<p>@return [Object] the current possibility that the resolution is trying\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">activate</span>\n</pre>\n"],["post","Net::HTTP","Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>.\n<code>header</code> must be a Hash like { &#39;Accept&#39; =&gt;\n&#39;<strong>/</strong>&#39;, …\n"],["post","Net::HTTP","Net/HTTP.html#method-c-post","(url, data, header = nil)","<p>Posts data to the specified URI object.\n<p>Example:\n\n<pre>require &#39;net/http&#39;\nrequire &#39;uri&#39;\n\nNet::HTTP.post URI(&#39;http://www.example.com/api/search&#39;), ...</pre>\n"],["post2","Net::HTTP","Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_build","Gem","Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["post_connection_check","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-post_connection_check","(hostname)","<p>Perform hostname verification following RFC 6125.\n<p>This method MUST be called after calling #connect to …\n"],["post_form","Net::HTTP","Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts HTML form data to the specified URI object. The form data must be\nprovided as a Hash mapping from …\n"],["post_install","Gem","Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance\nwhen Gem::Installer#install is …\n"],["post_match","MatchData","MatchData.html#method-i-post_match","()","<p>Returns the portion of the original string after the current match.\nEquivalent to the special variable …\n"],["post_match","StringScanner","StringScanner.html#method-i-post_match","()","<p>Return the <strong><em>post</strong>-match</em> (in the regular expression\nsense) of the last scan.\n\n<pre>s = StringScanner.new(&#39;test ...</pre>\n"],["post_reset","Gem","Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance\nand the spec that was uninstalled …\n"],["power","BigDecimal","BigDecimal.html#method-i-power","(p1, p2 = v2)","<p>Returns the value raised to the power of n.\n<p>Note that n must be an Integer.\n<p>Also available as the operator …\n"],["pp","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-pp","(*objs)","<p>Same as #ppx, except it uses the #prefix given during object\ninitialization. See OutputMethod#ppx for …\n"],["pp","IRB::OutputMethod","IRB/OutputMethod.html#method-i-pp","(*objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each.\n<p>See #puts for more detail.\n"],["pp","Kernel","Kernel.html#method-c-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","Kernel","Kernel.html#method-i-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","PP","PP.html#method-c-pp","(obj, out=$>, width=79)","<p>Outputs <code>obj</code> to <code>out</code> in pretty printed format of\n<code>width</code> columns in width.\n<p>If <code>out</code> is omitted, <code>$&gt;</code> is assumed. …\n"],["pp","PP::PPMethods","PP/PPMethods.html#method-i-pp","(obj)","<p>Adds <code>obj</code> to the pretty printing buffer using\nObject#pretty_print or Object#pretty_print_cycle.\n<p>Object#pretty_print_cycle …\n"],["pp_hash","PP::PPMethods","PP/PPMethods.html#method-i-pp_hash","(obj)","<p>A pretty print for a Hash\n"],["pp_object","PP::PPMethods","PP/PPMethods.html#method-i-pp_object","(obj)","<p>A present standard failsafe for pretty printing any given Object\n"],["ppid","Process","Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Returns untrustworthy\nvalue on Win32/64. Not available …\n"],["ppx","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-ppx","(prefix, *objs)","<p>Same as #pp, except it concatenates the given <code>prefix</code> with the\n#prefix given during object initialization. …\n"],["ppx","IRB::OutputMethod","IRB/OutputMethod.html#method-i-ppx","(prefix, *objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each and\nappending the given <code>prefix</code>.\n<p>See #puts for more …\n"],["pre_input_hook","Readline","Readline.html#method-c-pre_input_hook","()","<p>Returns a Proc object <code>proc</code> to call after the first prompt has\nbeen printed and just before readline starts …\n"],["pre_input_hook=","Readline","Readline.html#method-c-pre_input_hook-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to call after the first prompt\nhas been printed and just before readline …\n"],["pre_install","Gem","Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["pre_install_checks","Gem::Installer","Gem/Installer.html#method-i-pre_install_checks","()","<p>Performs various checks before installing the gem such as the install\nrepository is writable and its …\n"],["pre_match","MatchData","MatchData.html#method-i-pre_match","()","<p>Returns the portion of the original string before the current match.\nEquivalent to the special variable …\n"],["pre_match","StringScanner","StringScanner.html#method-i-pre_match","()","<p>Return the <strong><em>pre</strong>-match</em> (in the regular expression\nsense) of the last scan.\n\n<pre>s = StringScanner.new(&#39;test string&#39;) ...</pre>\n"],["pre_reset","Gem","Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance\nand the spec that will be …\n"],["preceding","REXML::XPathParser","REXML/XPathParser.html#method-i-preceding","( node )","<p>Builds a nodeset of all of the preceding nodes of the supplied node, in\nreverse document order\n<p>preceding … &mdash; "],["preceding_node_of","REXML::XPathParser","REXML/XPathParser.html#method-i-preceding_node_of","( node )",""],["precs","BigDecimal","BigDecimal.html#method-i-precs","()","<p>Returns an Array of two Integer values.\n<p>The first value is the current number of significant digits in …\n"],["pred","Integer","Integer.html#method-i-pred","()","<p>Returns the Integer equal to <code>int</code> - 1.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pred</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">pred</span>   <span class=\"ruby-comment\">#=&gt; -2</span>\n</pre>\n"],["pred","Integer","Integer.html#method-i-pred","()","<p>Returns the Integer equal to <code>int</code> - 1.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pred</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">pred</span>   <span class=\"ruby-comment\">#=&gt; -2</span>\n</pre>\n"],["predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-predecessors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge\nwith\n\n<pre>`self` as their {Edge#destination}</pre>\n"],["predicate","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-predicate","(path)",""],["predicate","REXML::QuickPath","REXML/QuickPath.html#method-c-predicate","( elements, path )","<p>A predicate filters a node-set with respect to an axis to produce a new\nnode-set. For each node in the …\n"],["predicate","REXML::XPathParser","REXML/XPathParser.html#method-i-predicate","(path, nodeset)",""],["predicate_to_string","REXML::Parsers::XPathParser","REXML/Parsers/XPathParser.html#method-i-predicate_to_string","( path, &block )",""],["prefetch","Gem::AvailableSet","Gem/AvailableSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-prefetch","(reqs)","<p>A hint run by the resolver to allow the Set to fetch data for\nDependencyRequests <code>reqs</code>.\n"],["prefetch","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prefetch","(reqs)","<p>Prefetches <code>reqs</code> in all sets.\n"],["prefetch","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-prefetch","(reqs)","<p>Prefetches specifications from the git repositories in this set.\n"],["prefetch","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-prefetch","(reqs)","<p>The #prefetch method may be overridden, but this is not necessary.  This\ndefault implementation does …\n"],["prefix","Gem","Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a\nstandard location (ie, rubygems …\n"],["prefix","REXML::Attribute","REXML/Attribute.html#method-i-prefix","()","<p>Returns the namespace of the attribute.\n\n<pre>e = Element.new( &quot;elns:myelement&quot; )\ne.add_attribute( &quot;nsa:a&quot;, ...</pre>\n"],["prefix","REXML::Light::Node","REXML/Light/Node.html#method-i-prefix","( namespace=nil )",""],["prefix_of","REXML::Light::Node","REXML/Light/Node.html#method-i-prefix_of","( node, namespace=nil )",""],["prefixes","REXML::Attributes","REXML/Attributes.html#method-i-prefixes","()","<p>Returns an array of Strings containing all of the prefixes declared by this\nset of # attributes.  The …\n"],["prefixes","REXML::Element","REXML/Element.html#method-i-prefixes","()","<p>Evaluates to an <code>Array</code> containing the prefixes (names) of all\ndefined namespaces at this context node. …\n"],["prepend","Gem::List","Gem/List.html#method-c-prepend","(list, value)",""],["prepend","Gem::List","Gem/List.html#method-i-prepend","(value)",""],["prepend","Module","Module.html#method-i-prepend","(*args)","<p>Invokes <code>Module.prepend_features</code> on each parameter in reverse\norder.\n"],["prepend","OptionParser::List","OptionParser/List.html#method-i-prepend","(*args)","<p>Inserts <code>switch</code> at the head of the list, and associates short,\nlong and negated long options. Arguments …\n"],["prepend","String","String.html#method-i-prepend","(*args)","<p>Prepend—Prepend the given strings to <em>str</em>.\n\n<pre>a = &quot;!&quot;\na.prepend(&quot;hello &quot;, &quot;world&quot;) #=&gt; &quot;hello world!&quot;\na ...</pre>\n"],["prepend_features","Module","Module.html#method-i-prepend_features","(p1)","<p>When this module is prepended in another, Ruby calls\n<code>prepend_features</code> in this module, passing it the …\n"],["prepended","Module","Module.html#method-i-prepended","(p1)","<p>The equivalent of <code>included</code>, but for prepended modules.\n\n<pre>module A\n  def self.prepended(mod)\n    puts &quot;#{self} ...</pre>\n"],["prerelease=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prerelease-3D","(allow_prerelease)","<p>When <code>allow_prerelease</code> is set to <code>true</code> prereleases\ngems are allowed to match dependencies.\n"],["prerelease=","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prerelease-3D","(allow_prerelease)",""],["prerelease?","Gem::Dependency","Gem/Dependency.html#method-i-prerelease-3F","()","<p>Does this dependency require a prerelease?\n"],["prerelease?","Gem::NameTuple","Gem/NameTuple.html#method-i-prerelease-3F","()","<p>Indicate if this NameTuple is for a prerelease version.\n"],["prerelease?","Gem::Requirement","Gem/Requirement.html#method-i-prerelease-3F","()","<p>A requirement is a prerelease if any of the versions inside of it are\nprereleases\n"],["prerelease?","Gem::Version","Gem/Version.html#method-i-prerelease-3F","()","<p>A version is considered a prerelease if it contains a letter.\n"],["prerelease_specs","Gem::Server","Gem/Server.html#method-i-prerelease_specs","(req, res)",""],["pressed?","IO","IO.html#method-i-pressed-3F","(p1)",""],["pretty","CGI::Util","CGI/Util.html#method-i-pretty","(string, shift = \" \")","<p>Prettify (indent) an HTML string.\n<p><code>string</code> is the HTML string to indent.  <code>shift</code> is\nthe indentation unit …\n"],["pretty_generate","JSON","JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. The returned document is a prettier …\n"],["pretty_inspect","Kernel","Kernel.html#method-i-pretty_inspect","()","<p>Returns a pretty printed object as a string.\n<p>In order to use this method you must first require the PP …\n"],["pretty_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_old_name","RDoc::Alias","RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_print","OpenSSL::BN","OpenSSL/BN.html#method-i-pretty_print","(q)",""],["pretty_print","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-pretty_print","(q)",""],["pretty_print","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-pretty_print","(q)",""],["prev_day","Date","Date.html#method-i-prev_day","(p1 = v1)","<p>This method is equivalent to d - n.\n"],["prev_float","Float","Float.html#method-i-prev_float","()","<p>Returns the previous representable floating-point number.\n<p>(-Float::MAX).prev_float and (-Float::INFINITY).prev_float …\n"],["prev_month","Date","Date.html#method-i-prev_month","(p1 = v1)","<p>This method is equivalent to d &lt;&lt; n.\n<p>See Date#<< for examples.\n"],["prev_year","Date","Date.html#method-i-prev_year","(p1 = v1)","<p>This method is equivalent to d &lt;&lt; (n * 12).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">prev_year</span>      <span class=\"ruby-comment\">#=&gt; #&lt;Date: 2000-02-03 ...</span>\n</pre>\n"],["previous=","REXML::Validation::State","REXML/Validation/State.html#method-i-previous-3D","( previous )",""],["previous_element","REXML::Element","REXML/Element.html#method-i-previous_element","()","<p>Returns the previous sibling that is an element, or nil if there is no\nElement sibling prior to this …\n"],["previous_period_end","Logger::Period","Logger/Period.html#method-i-previous_period_end","(now, shift_age)",""],["previous_sibling=","REXML::Child","REXML/Child.html#method-i-previous_sibling-3D","(other)","<p>Sets the previous sibling of this child.  This can be used to insert a\nchild before some other child. …\n"],["previous_sibling_node","REXML::Node","REXML/Node.html#method-i-previous_sibling_node","()","<p>@return the previous sibling (nil if unset)\n"],["primary","Rinda::RingFinger","Rinda/RingFinger.html#method-c-primary","()","<p>Returns the first advertised TupleSpace.\n"],["prime?","Integer","Integer.html#method-i-prime-3F","()","<p>Returns true if <code>self</code> is a prime number, else returns false.\n"],["prime?","Integer","Integer.html#method-i-prime-3F","()","<p>Returns true if <code>self</code> is a prime number, else returns false.\n"],["prime?","OpenSSL::BN","OpenSSL/BN.html#method-i-prime-3F","(p1 = v1)","<p>Performs a Miller-Rabin probabilistic primality test with\n<code>checks</code> iterations. If <code>nchecks</code> is not specified, …\n"],["prime?","Prime","Prime.html#method-i-prime-3F","(value, generator = Prime::Generator23.new)","<p>Returns true if <code>value</code> is a prime number, else returns false.\n<p>Parameters\n<p>value &mdash; an arbitrary integer to be …\n"],["prime_division","Integer","Integer.html#method-i-prime_division","(generator = Prime::Generator23.new)","<p>Returns the factorization of <code>self</code>.\n<p>See Prime#prime_division for more details.\n"],["prime_division","Integer","Integer.html#method-i-prime_division","(generator = Prime::Generator23.new)","<p>Returns the factorization of <code>self</code>.\n<p>See Prime#prime_division for more details.\n"],["prime_division","Prime","Prime.html#method-i-prime_division","(value, generator = Prime::Generator23.new)","<p>Returns the factorization of <code>value</code>.\n<p>Parameters\n<p>value &mdash; An arbitrary integer.\n"],["prime_fasttest?","OpenSSL::BN","OpenSSL/BN.html#method-i-prime_fasttest-3F","(p1 = v1, p2 = v2)","<p>Performs a Miller-Rabin primality test. This is same as #prime? except this\nfirst attempts trial divisions …\n"],["primes","Prime::TrialDivision","Prime/TrialDivision.html#method-i-primes","()",""],["primes_so_far","Prime::TrialDivision","Prime/TrialDivision.html#method-i-primes_so_far","()",""],["primitive_convert","Encoding::Converter","Encoding/Converter.html#method-i-primitive_convert","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = {})","<p>possible opt elements:\n\n<pre>hash form:\n  :partial_input =&gt; true           # source buffer may be part of larger ...</pre>\n"],["primitive_errinfo","Encoding::Converter","Encoding/Converter.html#method-i-primitive_errinfo","()","<p>primitive_errinfo returns important information regarding the last error as\na 5-element array:\n\n<pre>[result, ...</pre>\n"],["print","ARGF","ARGF.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. Returns <code>nil</code>.\n<p>The stream must be opened for writing. Each given object …\n"],["print","CGI","CGI.html#method-i-print","(*options)","<p>Print an argument or list of arguments to the default output stream\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">cgi</span> = <span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">cgi</span>.<span class=\"ruby-identifier\">print</span>    <span class=\"ruby-comment\"># default: ...</span>\n</pre>\n"],["print","IO","IO.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. Returns <code>nil</code>.\n<p>The stream must be opened for writing. Each given object …\n"],["print","IO::generic_writable","IO/generic_writable.html#method-i-print","(*args)","<p>See IO#print.\n"],["print","IRB::Locale","IRB/Locale.html#method-i-print","(*opts)",""],["print","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-print","(*opts)","<p>See OutputMethod#print for more detail.\n"],["print","IRB::OutputMethod","IRB/OutputMethod.html#method-i-print","(*opts)","<p>Open this method to implement your own output method, raises a\nNotImplementedError if you don&#39;t define …\n"],["print","IRB::StdioOutputMethod","IRB/StdioOutputMethod.html#method-i-print","(*opts)","<p>Prints the given <code>opts</code> to standard output, see IO#print for\nmore information.\n"],["print","Kernel","Kernel.html#method-i-print","(*args)","<p>Prints each object in turn to <code>$stdout</code>. If the output field\nseparator (<code>$,</code>) is not <code>nil</code>, its contents will …\n"],["print","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-i-print","(str)",""],["print","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-print","(*args)","<p>Writes <code>args</code> to the stream.\n<p>See IO#print for full details.\n"],["print","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-print","(*args)","<p>Same as IO.\n"],["print_profile","Profiler__","Profiler__.html#method-i-print_profile","(f)","<p>Outputs the results from the profiler.\n<p>See Profiler__ for more information.\n"],["print_usage","IRB","IRB.html#method-c-print_usage","()","<p>Outputs the irb help message, see IRB@Command+line+options.\n"],["printf","ARGF","ARGF.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","IO","IO.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","IO::generic_writable","IO/generic_writable.html#method-i-printf","(*args)","<p>See IO#printf.\n"],["printf","IRB::Locale","IRB/Locale.html#method-i-printf","(*opts)",""],["printf","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printf","(format, *opts)","<p>See OutputMethod#printf for more detail.\n"],["printf","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printf","(format, *opts)","<p>Extends IO#printf to format the given <code>opts</code> for Kernel#sprintf\nusing #parse_printf_format\n"],["printf","Kernel","Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre>io.write(sprintf(string, obj, ...))</pre>\n<p>or\n"],["printf","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-i-printf","(*args)",""],["printf","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-printf","(s, *args)","<p>Formats and writes to the stream converting parameters under control of the\nformat string.\n<p>See Kernel#sprintf …\n"],["printf","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-printf","(*args)","<p>Same as IO.\n"],["printn","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printn","(*opts)","<p>See OutputMethod#printn for more detail.\n"],["printn","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printn","(*opts)","<p>Prints the given <code>opts</code>, with a newline delimiter.\n"],["priority","Thread","Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current\nthread which creating the new thread, …\n"],["priority=","Thread","Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority\nthreads will run more frequently than lower-priority …\n"],["private","Module","Module.html#method-i-private","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to private. With arguments, …\n"],["private?","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-private-3F","()","<p>Indicates whether this DH instance has a private key associated with it or\nnot. The private key may be …\n"],["private?","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-private-3F","()","<p>Indicates whether this DSA instance has a private key associated with it or\nnot. The private key may …\n"],["private?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private-3F","()","<p>Returns whether this EC instance has a private key. The private key (BN)\ncan be retrieved with EC#private_key …\n"],["private?","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-private-3F","()","<p>Does this keypair contain a private key?\n"],["private_call?","NoMethodError","NoMethodError.html#method-i-private_call-3F","()",""],["private_class_method","Module","Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default\nconstructor <code>new</code>.\n<p>String arguments …\n"],["private_constant","Module","Module.html#method-i-private_constant","(*args)","<p>Makes a list of existing constants private.\n"],["private_decrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-private_decrypt","(p1, p2 = v2)","<p>Decrypt <code>string</code>, which has been encrypted with the public key,\nwith the private key.  <code>padding</code> defaults …\n"],["private_encrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-private_encrypt","(p1, p2 = v2)","<p>Encrypt <code>string</code> with the private key.  <code>padding</code>\ndefaults to PKCS1_PADDING. The encrypted string output …\n"],["private_instance_methods","Module","Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If\nthe optional parameter is <code>false</code>, the ...\n"],["private_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_private_key()\n"],["private_key=","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_private_key()\n"],["private_key?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key-3F","()",""],["private_method_defined?","Module","Module.html#method-i-private_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named private method is defined by _ mod_\n(or its included modules and, if <em>mod</em> is …\n"],["private_methods","Object","Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those ...\n"],["proc","Kernel","Kernel.html#method-i-proc","()","<p>Equivalent to <code>Proc.new</code>.\n"],["procdest","Net::HTTPResponse","Net/HTTPResponse.html#method-i-procdest","(dest, block)",""],["process","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::LoginAuthenticator","Net/IMAP/LoginAuthenticator.html#method-i-process","(data)",""],["process","Net::IMAP::PlainAuthenticator","Net/IMAP/PlainAuthenticator.html#method-i-process","(data)",""],["process_args","Gem::CommandManager","Gem/CommandManager.html#method-i-process_args","(args, build_args=nil)",""],["process_based_port","Gem::TestCase","Gem/TestCase.html#method-c-process_based_port","()","<p>Allows tests to use a random (but controlled) port number instead of a\nhardcoded one. This helps CI tools …\n"],["process_based_port","Gem::TestCase","Gem/TestCase.html#method-i-process_based_port","()","<p>See ::process_based_port\n"],["process_directive","RDoc::Parser","RDoc/Parser.html#method-c-process_directive","(code_object, directive, value)","<p>Processes common directives for CodeObjects for the C and Ruby parsers.\n<p>Applies <code>directive</code>&#39;s <code>value</code> …\n"],["process_topmost_state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-process_topmost_state","()","<p>Processes the topmost available {RequirementState} on the stack @return\n[void]\n"],["processingInstruction","RSS::REXMLLikeXMLParser","RSS/REXMLLikeXMLParser.html#method-i-processingInstruction","(target, content)",""],["processing_instruction","REXML::Functions","REXML/Functions.html#method-c-processing_instruction","( node )",""],["processing_instruction","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-processing_instruction","(target, data)",""],["product","Array","Array.html#method-i-product","(*args)","<p>Returns an array of all combinations of elements from all arrays.\n<p>The length of the returned array is …\n"],["progid","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-progid","()","<p>Returns ProgID if it exists. If not found, then returns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel ...</pre>\n"],["progids","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-c-progids","()","<p>Returns array of ProgID.\n"],["program_name","OptionParser","OptionParser.html#method-i-program_name","()","<p>Program name to be emitted in error message and default banner, defaults to\n$0.\n"],["progress","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-progress","(position)",""],["progress_rate","Gem::Resolver::Molinillo::UI","Gem/Resolver/Molinillo/UI.html#method-i-progress_rate","()","<p>How often progress should be conveyed to the user via {#indicate_progress},\nin seconds. A third of a …\n"],["progress_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-progress_reporter","(*args)","<p>Return a progress reporter object chosen from the current verbosity.\n"],["prompt_mode=","IRB::Context","IRB/Context.html#method-i-prompt_mode-3D","(mode)","<p>Sets the <code>mode</code> of the prompt in this context.\n<p>See IRB@Customizing+the+IRB+Prompt for more information. …\n"],["prompting?","IRB::Context","IRB/Context.html#method-i-prompting-3F","()","<p>Whether #verbose? is <code>true</code>, and <code>input_method</code> is\neither StdioInputMethod or ReadlineInputMethod, see #io …\n"],["proper_subset?","Set","Set.html#method-i-proper_subset-3F","(set)","<p>Returns true if the set is a proper subset of the given set.\n"],["proper_superset?","Set","Set.html#method-i-proper_superset-3F","(set)","<p>Returns true if the set is a proper superset of the given set.\n"],["propfind","Net::HTTP","Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proppatch","Net::HTTP","Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["protected","Module","Module.html#method-i-protected","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, …\n"],["protected_instance_methods","Module","Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>.\nIf the optional parameter is <code>false</code>, ...\n"],["protected_method_defined?","Module","Module.html#method-i-protected_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named protected method is defined by\n<em>mod</em> (or its included modules and, if <em>mod</em> is …\n"],["protected_methods","Delegator","Delegator.html#method-i-protected_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["protected_methods","Object","Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those ...\n"],["protocol","Addrinfo","Addrinfo.html#method-i-protocol","()","<p>returns the socket type as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">protocol</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">IPPROTO_TCP</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["provide","Rinda::RingProvider","Rinda/RingProvider.html#method-i-provide","()","<p>Advertises this service on the primary remote TupleSpace.\n"],["proxy?","Net::HTTP","Net/HTTP.html#method-i-proxy-3F","()","<p>True if requests for this connection will be proxied\n"],["proxy_address","Net::HTTP","Net/HTTP.html#method-i-proxy_address","()","<p>The address of the proxy server, if one is configured.\n"],["proxy_basic_auth","WEBrick::HTTPAuth","WEBrick/HTTPAuth.html#method-i-proxy_basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a proxied request.\nWhen called with a request  …\n"],["proxy_class?","Net::HTTP","Net/HTTP.html#method-c-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_for","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-proxy_for","(proxy, uri)",""],["proxy_from_env?","Net::HTTP","Net/HTTP.html#method-i-proxy_from_env-3F","()","<p>True if the proxy for this connection is determined from the environment\n"],["proxy_pass","Net::HTTP","Net/HTTP.html#method-i-proxy_pass","()","<p>The proxy password, if one is configured\n"],["proxy_port","Net::HTTP","Net/HTTP.html#method-i-proxy_port","()","<p>The port of the proxy server, if one is configured.\n"],["proxy_uri","Gem::Request","Gem/Request.html#method-i-proxy_uri","()",""],["proxy_user","Net::HTTP","Net/HTTP.html#method-i-proxy_user","()","<p>The proxy username, if one is configured\n"],["proxyaddr","Net::HTTP","Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","Net/HTTP.html#method-i-proxyport","()",""],["prune","Find","Find.html#method-i-prune","()","<p>Skips the current file or directory, restarting the loop with the next\nentry. If the current file is …\n"],["prune","Find","Find.html#method-c-prune","()","<p>Skips the current file or directory, restarting the loop with the next\nentry. If the current file is …\n"],["pseudo_bytes","OpenSSL::Random","OpenSSL/Random.html#method-c-pseudo_bytes","(p1)","<p>Generates <code>string</code> with <code>length</code> number of\npseudo-random bytes.\n<p>Pseudo-random byte sequences generated by …\n"],["psych_to_yaml","Object","Object.html#method-i-psych_to_yaml","(options = {})","<p>Convert an object to YAML.  See Psych.dump for more information on the\navailable <code>options</code>.\n"],["psych_yaml_as","Module","Module.html#method-i-psych_yaml_as","(url)",""],["ptr","Fiddle::Pointer","Fiddle/Pointer.html#method-i-ptr","()","<p>Returns a new Fiddle::Pointer instance that is a dereferenced pointer for\nthis pointer.\n<p>Analogous to the …\n"],["pubDate","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-pubDate","()",""],["pubDate","RSS::Maker::ItemsBase::ItemBase","RSS/Maker/ItemsBase/ItemBase.html#method-i-pubDate","()",""],["pubDate=","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-pubDate-3D","(date)",""],["pubDate=","RSS::Maker::ItemsBase::ItemBase","RSS/Maker/ItemsBase/ItemBase.html#method-i-pubDate-3D","(date)",""],["public","Module","Module.html#method-i-public","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to public. With arguments, …\n"],["public","REXML::DocType","REXML/DocType.html#method-i-public","()","<p>This method retrieves the public identifier identifying the document&#39;s\nDTD.\n<p>Method contributed by …\n"],["public?","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-public-3F","()","<p>Indicates whether this DH instance has a public key associated with it or\nnot. The public key may be …\n"],["public?","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-public-3F","()","<p>Indicates whether this DSA instance has a public key associated with it or\nnot. The public key may be …\n"],["public?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public-3F","()","<p>Returns whether this EC instance has a public key. The public key\n(EC::Point) can be retrieved with  …\n"],["public?","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public-3F","()","<p>The return value is always true since every private key is also a public\nkey.\n"],["public_class_method","Module","Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n<p>String arguments are converted to symbols.\n"],["public_constant","Module","Module.html#method-i-public_constant","(*args)","<p>Makes a list of existing constants public.\n"],["public_decrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public_decrypt","(p1, p2 = v2)","<p>Decrypt <code>string</code>, which has been encrypted with the private key,\nwith the public key.  <code>padding</code> defaults …\n"],["public_encrypt","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public_encrypt","(p1, p2 = v2)","<p>Encrypt <code>string</code> with the public key.  <code>padding</code>\ndefaults to PKCS1_PADDING. The encrypted string output can …\n"],["public_instance_method","Module","Module.html#method-i-public_instance_method","(p1)","<p>Similar to <em>instance_method</em>, searches public method only.\n"],["public_instance_methods","Module","Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If\nthe optional parameter is <code>false</code>, the ...\n"],["public_key","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-public_key","()","<p>Returns the public key associated with the SPKI, an instance of\nOpenSSL::PKey.\n"],["public_key","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-public_key","()","<p>Returns a new DH instance that carries just the public information, i.e.\nthe prime <code>p</code> and the generator …\n"],["public_key","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-public_key","()","<p>Returns a new DSA instance that carries just the public key information. If\nthe current instance has …\n"],["public_key","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_public_key()\n"],["public_key","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-public_key","()","<p>Makes new RSA instance containing the public key from the private key.\n"],["public_key","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-public_key","()",""],["public_key","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-public_key","()",""],["public_key=","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-public_key-3D","(p1)","<p>Parameters\n<p><code>pub</code> - the public key to be set for this instance\n\n<p>Sets the public key to be associated with the …\n"],["public_key=","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_public_key()\n"],["public_key=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-public_key-3D","(p1)",""],["public_key=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-public_key-3D","(p1)",""],["public_key?","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key-3F","()",""],["public_method","Object","Object.html#method-i-public_method","(p1)","<p>Similar to <em>method</em>, searches public method only.\n"],["public_method_defined?","Module","Module.html#method-i-public_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named public method is defined by\n<em>mod</em> (or its included modules and, if <em>mod</em> is a class, …\n"],["public_methods","Delegator","Delegator.html#method-i-public_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["public_methods","Object","Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those ...\n"],["public_send","Object","Object.html#method-i-public_send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. Unlike send, public_send …\n"],["pull","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-pull","()","<p>Returns the next event.  This is a <code>PullEvent</code> object.\n"],["pull","REXML::Parsers::PullParser","REXML/Parsers/PullParser.html#method-i-pull","()",""],["pull_event","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-pull_event","()",""],["purgeable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-purgeable-3F","()","<p>Returns <code>true</code> if the objects in the directory may be deleted,\nor the directory may be purged.\n"],["purpose=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-purpose-3D","(p1)","<p>Sets the store&#39;s purpose to <code>purpose</code>. If specified, the\nverifications on the store will check every …\n"],["purpose=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-purpose-3D","(p1)","<p>Sets the purpose of the context. See Store#purpose=.\n"],["push","Array","Array.html#method-i-push","(*args)","<p>Append — Pushes the given object(s) on to the end of this array. This\nexpression returns the array …\n"],["push","CSV::Row","CSV/Row.html#method-i-push","(*args)","<p>A shortcut for appending multiple fields.  Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">args</span>.<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">arg</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">csv_row</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">arg</span> }\n</pre>\n<p>This method …\n"],["push","CSV::Table","CSV/Table.html#method-i-push","(*rows)","<p>A shortcut for appending multiple rows.  Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rows</span>.<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">row</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-keyword\">self</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-identifier\">row</span> }\n</pre>\n<p>This method returns …\n"],["push","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-push","(value)",""],["push","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-push","(object)",""],["push","Queue","Queue.html#method-i-push","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["push","REXML::Parent","REXML/Parent.html#method-i-push","( object )",""],["push","Rinda::TupleBag","Rinda/TupleBag.html#method-i-push","(tuple)","<p>Add <code>tuple</code> to the TupleBag.\n"],["push","SizedQueue","SizedQueue.html#method-i-push","(*args)","<p>Pushes <code>object</code> to the queue.\n<p>If there is no space left in the queue, waits until space becomes\navailable, …\n"],["push_action","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-push_action","(graph, action)","<p>Adds the given action to the log, running the action @param\n[DependencyGraph] graph @param [Action] action …\n"],["push_inspect_key","PP::PPMethods","PP/PPMethods.html#method-i-push_inspect_key","(id)","<p>Adds the object_id <code>id</code> to the set of objects being pretty\nprinted, so as to not repeat objects.\n"],["push_state_for_requirements","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-push_state_for_requirements","(new_requirements, requires_sort = true, new_activated = activated)","<p>Pushes a new {DependencyState} that encapsulates both existing and new\nrequirements @param [Array] new_requirements …\n"],["push_workspace","IRB::Context","IRB/Context.html#method-i-push_workspace","(*_main)","<p>Creates a new workspace with the given object or binding, and appends it\nonto the current #workspaces …\n"],["pushd","Shell","Shell.html#method-i-pushd","(path = nil, verbose = @verbose)",""],["pushdir","Shell","Shell.html#method-i-pushdir","(path = nil, verbose = @verbose)","<p>Pushes the current directory to the directory stack, changing the current\ndirectory to <code>path</code>.\n<p>If <code>path</code> is …\n"],["put","Net::FTP","Net/FTP.html#method-i-put","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE, &block)","<p>Transfers <code>localfile</code> to the server in whatever mode the session\nis set (text or binary).  See #puttextfile …\n"],["put_string","Net::IMAP","Net/IMAP.html#method-i-put_string","(str)",""],["putback","Encoding::Converter","Encoding/Converter.html#method-i-putback","(p1 = v1)","<p>call-seq\n\n<pre>ec.putback                    -&gt; string\nec.putback(max_numbytes)      -&gt; string</pre>\n<p>Put back the bytes …\n"],["putbinaryfile","Net::FTP","Net/FTP.html#method-i-putbinaryfile","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE)","<p>Transfers <code>localfile</code> to the server in binary mode, storing the\nresult in <code>remotefile</code>. If a block is supplied, …\n"],["putc","ARGF","ARGF.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <em>obj</em>, otherwise write …\n"],["putc","IO","IO.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <em>obj</em>, otherwise write …\n"],["putc","Kernel","Kernel.html#method-i-putc","(p1)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">putc</span>(<span class=\"ruby-identifier\">int</span>)\n</pre>\n<p>Refer to the documentation for IO#putc for important information regarding\n…\n"],["putc","StringIO","StringIO.html#method-i-putc","(p1)","<p>See IO#putc.\n"],["putc","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-putc","(p1)","<p>Same as IO.\n"],["puts","ARGF","ARGF.html#method-i-puts","(*args)","<p>Writes the given object(s) to <em>ios</em>. Writes a newline after any that\ndo not already end with a newline …\n"],["puts","CSV","CSV.html#method-i-puts","(row)",""],["puts","IO","IO.html#method-i-puts","(*args)","<p>Writes the given object(s) to <em>ios</em>. Writes a newline after any that\ndo not already end with a newline …\n"],["puts","IO::generic_writable","IO/generic_writable.html#method-i-puts","(*args)","<p>See IO#puts.\n"],["puts","IRB::Locale","IRB/Locale.html#method-i-puts","(*opts)",""],["puts","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-puts","(*objs)","<p>See OutputMethod#puts for more detail.\n"],["puts","IRB::OutputMethod","IRB/OutputMethod.html#method-i-puts","(*objs)","<p>Calls #print on each element in the given <code>objs</code>, followed by a\nnewline character.\n"],["puts","Kernel","Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre>$stdout.puts(obj, ...)</pre>\n"],["puts","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-i-puts","(str = '')",""],["puts","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-puts","(*args)","<p>Writes <code>args</code> to the stream along with a record separator.\n<p>See IO#puts for full details.\n"],["puts","XMP","XMP.html#method-i-puts","(exps)","<p>Evaluates the given <code>exps</code>, for example:\n\n<pre>require &#39;irb/xmp&#39;\nx = XMP.new\n\nx.puts &#39;{:a =&gt; 1, :b =&gt; 2, :c =&gt; ...</pre>\n"],["puts","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-puts","(exps)","<p>Concatenates all expressions in this printer, separated by newlines.\n<p>An Encoding::CompatibilityError is …\n"],["puts","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-puts","(*args)","<p>Same as IO.\n"],["puttextfile","Net::FTP","Net/FTP.html#method-i-puttextfile","(localfile, remotefile = File.basename(localfile))","<p>Transfers <code>localfile</code> to the server in ASCII (text) mode,\nstoring the result in <code>remotefile</code>. If callback …\n"],["pwd","Dir","Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pwd","FileUtils","FileUtils.html#method-i-pwd","()","<p>Returns the name of the current directory.\n"],["pwd","FileUtils","FileUtils.html#method-c-pwd","()","<p>Returns the name of the current directory.\n"],["pwd","Net::FTP","Net/FTP.html#method-i-pwd","()","<p>Returns the current remote directory.\n"],["pwd","Pathname","Pathname.html#method-c-pwd","()","<p>Returns the current working directory as a Pathname.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Pathname</span>.<span class=\"ruby-identifier\">getwd</span>\n    <span class=\"ruby-comment\">#=&gt; #&lt;Pathname:/home/zzak/projects/ruby&gt;</span>\n</pre>\n"],["qdval","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-qdval","(k, v)","<p>some responses need quoting\n"],["query","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-query","()","<p>Request query as a Hash\n"],["query=","URI::Generic","URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["quick","Gem::Server","Gem/Server.html#method-i-quick","(req, res)",""],["quick_gem","Gem::TestCase","Gem/TestCase.html#method-i-quick_gem","(name, version='2')","<p>Creates a Gem::Specification with a minimum of extra work. \n<code>name</code> and <code>version</code> are the gem&#39;s name and …\n"],["quiet","RDoc::Options","RDoc/Options.html#method-i-quiet","()","<p>Don&#39;t display progress as we process the files\n"],["quiet=","RDoc::Options","RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["quit","Net::FTP","Net/FTP.html#method-i-quit","()","<p>Exits the FTP session.\n"],["quit","Net::SMTP","Net/SMTP.html#method-i-quit","()",""],["quo","BigDecimal","BigDecimal.html#method-i-quo","(p1)","<p>Divide by the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">div</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n</pre>\n"],["quo","Complex","Complex.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre>Complex(2, 3)  / Complex(2, 3)   #=&gt; ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)   ...</pre>\n"],["quo","Float","Float.html#method-i-quo","(p1)","<p>Returns <code>float / numeric</code>, same as Float#/.\n"],["quo","Numeric","Numeric.html#method-i-quo","(p1)","<p>Returns most exact division (rational for integers, float for floats).\n"],["quo","Rational","Rational.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["quote","Regexp","Regexp.html#method-c-quote","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["quote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-quote","(str)","<p>Quotes and escapes quotes in <code>str</code>\n"],["quote","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-quote","(str)","<p>Quotes and escapes quotes in <code>str</code>\n"],["quote_string","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-quote_string","(str, charset)",""],["quoting_detection_proc","Readline","Readline.html#method-c-quoting_detection_proc","()","<p>Returns the quoting detection Proc object.\n"],["quoting_detection_proc=","Readline","Readline.html#method-c-quoting_detection_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine if a character in\nthe user&#39;s input is escaped. It should …\n"],["r","Vector","Vector.html#method-i-r","()",""],["racc_accept","Racc::Parser","Racc/Parser.html#method-i-racc_accept","()",""],["racc_e_pop","Racc::Parser","Racc/Parser.html#method-i-racc_e_pop","(state, tstack, vstack)",""],["racc_next_state","Racc::Parser","Racc/Parser.html#method-i-racc_next_state","(curstate, state)",""],["racc_print_stacks","Racc::Parser","Racc/Parser.html#method-i-racc_print_stacks","(t, v)",""],["racc_print_states","Racc::Parser","Racc/Parser.html#method-i-racc_print_states","(s)",""],["racc_read_token","Racc::Parser","Racc/Parser.html#method-i-racc_read_token","(t, tok, val)","<p>For debugging output\n"],["racc_reduce","Racc::Parser","Racc/Parser.html#method-i-racc_reduce","(toks, sim, tstack, vstack)",""],["racc_shift","Racc::Parser","Racc/Parser.html#method-i-racc_shift","(tok, tstack, vstack)",""],["racc_token2str","Racc::Parser","Racc/Parser.html#method-i-racc_token2str","(tok)",""],["radio_button","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-radio_button","(name = \"\", value = nil, checked = nil)","<p>Generates a radio-button Input element.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nthe value of the …\n"],["radio_group","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-radio_group","(name = \"\", *values)","<p>Generate a sequence of radio button Input elements, as a String.\n<p>This works the same as #checkbox_group() …\n"],["raise","Delegator","Delegator.html#method-i-raise","","<p>Use __raise__ if your Delegator does not have a object to delegate the\nraise method call.\n"],["raise","Kernel","Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["raise","Thread","Thread.html#method-i-raise","(*args)","<p>Raises an exception from the given thread. The caller does not have to be\n<code>thr</code>. See Kernel#raise for more …\n"],["raise_for_undefined_entity?","RSS::BaseListener","RSS/BaseListener.html#method-c-raise_for_undefined_entity-3F","()",""],["raise_for_undefined_entity?","RSS::BaseParser","RSS/BaseParser.html#method-c-raise_for_undefined_entity-3F","()",""],["raise_for_undefined_entity?","RSS::REXMLListener","RSS/REXMLListener.html#method-c-raise_for_undefined_entity-3F","()",""],["raised_exception","TracePoint","TracePoint.html#method-i-raised_exception","()","<p>Value from exception raised on the <code>:raise</code> event\n"],["rand","Kernel","Kernel.html#method-i-rand","(*args)","<p>If called without an argument, or if <code>max.to_i.abs == 0</code>, rand\nreturns a pseudo-random floating point number …\n"],["rand","Random","Random.html#method-c-rand","(*args)","<p>Alias of Random::DEFAULT.rand.\n"],["rand","Random","Random.html#method-i-rand","(*args)","<p>When <code>max</code> is an Integer, <code>rand</code> returns a random\ninteger greater than or equal to zero and less than <code>max</code> …\n"],["rand","Random::Formatter","Random/Formatter.html#method-i-rand","(*args)",""],["random_add","OpenSSL::Random","OpenSSL/Random.html#method-c-random_add","(p1, p2)","<p>Mixes the bytes from <code>str</code> into the Pseudo Random Number\nGenerator(PRNG) state.\n<p>Thus, if the data from  …\n"],["random_bytes","OpenSSL::Random","OpenSSL/Random.html#method-c-random_bytes","(p1)","<p>Generates <code>string</code> with <code>length</code> number of\ncryptographically strong pseudo-random bytes.\n<p>Example\n\n<pre>OpenSSL::Random.random_bytes(12) ...</pre>\n"],["random_bytes","Random::Formatter","Random/Formatter.html#method-i-random_bytes","(n=nil)","<p>SecureRandom.random_bytes generates a random binary string.\n<p>The argument <em>n</em> specifies the length of the …\n"],["random_iv","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-random_iv","()","<p>Generate a random IV with OpenSSL::Random.random_bytes and sets it to the\ncipher, and returns it.\n<p>You …\n"],["random_key","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-random_key","()","<p>Generate a random key with OpenSSL::Random.random_bytes and sets it to the\ncipher, and returns it.\n<p>You …\n"],["random_number","Random::Formatter","Random/Formatter.html#method-i-random_number","(*args)",""],["random_string","WEBrick::Utils","WEBrick/Utils.html#method-i-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["random_string","WEBrick::Utils","WEBrick/Utils.html#method-c-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["rank","Matrix","Matrix.html#method-i-rank","()","<p>Returns the rank of the matrix. Beware that using Float values can yield\nerroneous results because of …\n"],["rank_e","Matrix","Matrix.html#method-i-rank_e","()","<p>deprecated; use Matrix#rank\n"],["rassoc","Array","Array.html#method-i-rassoc","(p1)","<p>Searches through the array whose elements are also arrays.\n<p>Compares <code>obj</code> with the second element of each …\n"],["rassoc","ENV","ENV.html#method-c-rassoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>value</code> or <code>nil</code> if the value cannot …\n"],["rassoc","Hash","Hash.html#method-i-rassoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the value using\n<code>==</code>. Returns the first key-value pair (two-element …\n"],["rationalize","Complex","Complex.html#method-i-rationalize","(p1 = v1)","<p>Returns the value as a rational if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1.0/3, ...</pre>\n"],["rationalize","Float","Float.html#method-i-rationalize","(p1 = v1)","<p>Returns a simpler approximation of the value (flt-|eps| &lt;= result &lt;=\nflt+|eps|).  if the optional …\n"],["rationalize","Integer","Integer.html#method-i-rationalize","(p1 = v1)","<p>Returns the value as a rational.  The optional argument eps is always\nignored.\n"],["rationalize","Integer","Integer.html#method-i-rationalize","(p1 = v1)","<p>Returns the value as a rational.  The optional argument eps is always\nignored.\n"],["rationalize","NilClass","NilClass.html#method-i-rationalize","(p1 = v1)","<p>Returns zero as a rational.  The optional argument eps is always ignored.\n"],["rationalize","Rational","Rational.html#method-i-rationalize","(p1 = v1)","<p>Returns a simpler approximation of the value if the optional argument eps\nis given (rat-|eps| &lt;= result …\n"],["raw","IO","IO.html#method-i-raw","(*args)","<p>Yields <code>self</code> within raw mode.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">STDIN</span>.<span class=\"ruby-identifier\">raw</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">gets</span>)\n</pre>\n<p>will read and return a line without echo back and line editing. …\n"],["raw","RDoc::TestCase","RDoc/TestCase.html#method-i-raw","(*contents)","<p>Shortcut for RDoc::Markup::Raw.new with <code>contents</code>\n"],["raw","REXML::Element","REXML/Element.html#method-i-raw","()","<p>Evaluates to <code>true</code> if raw mode is set for this element.  This\nis the case if the context has :<code>raw</code> set …\n"],["raw!","IO","IO.html#method-i-raw-21","(*args)","<p>Enables raw mode.\n<p>If the terminal mode needs to be back, use io.raw { … }.\n<p>You must require &#39;io/console&#39; …\n"],["raw_cookie","CGI::QueryExtension","CGI/QueryExtension.html#method-i-raw_cookie","()","<p>Get the raw cookies as a string.\n"],["raw_cookie2","CGI::QueryExtension","CGI/QueryExtension.html#method-i-raw_cookie2","()","<p>Get the raw RFC2965 cookies as a string.\n"],["raw_data","GC::Profiler","GC/Profiler.html#method-c-raw_data","()","<p>Returns an Array of individual raw profile data Hashes ordered from\nearliest to latest by <code>:GC_INVOKE_TIME</code> …\n"],["raw_encoding","CSV","CSV.html#method-i-raw_encoding","(default = Encoding::ASCII_8BIT)","<p>Returns the encoding of the internal IO object or the <code>default</code>\nif the encoding cannot be determined.\n"],["raw_seed","Random","Random.html#method-c-raw_seed","(p1)","<p>Returns a raw seed string, using platform providing features.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">raw_seed</span>(<span class=\"ruby-value\">8</span>)  <span class=\"ruby-comment\">#=&gt; &quot;\\x78\\x41\\xBA\\xAF\\x7D\\xEA\\xD8\\xEA&quot;</span>\n</pre>\n"],["rb_files_in","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-rb_files_in","(dir)",""],["rcptto","Net::SMTP","Net/SMTP.html#method-i-rcptto","(to_addr)",""],["rcptto_list","Net::SMTP","Net/SMTP.html#method-i-rcptto_list","(to_addrs)",""],["rdev","File::Stat","File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em>\nresides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).rdev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).rdev_major ...</pre>\n"],["rdev_minor","File::Stat","File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).rdev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).rdev_minor ...</pre>\n"],["rdoc","Gem::Server","Gem/Server.html#method-i-rdoc","(req, res)","<p>Can be used for quick navigation to the rdoc documentation.  You can then\ndefine a search shortcut for …\n"],["rdoc_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_options","Gem::Specification","Gem/Specification.html#method-i-rdoc_options","()","<p>Specifies the rdoc options to be used when generating API documentation.\n<p>Usage:\n\n<pre>spec.rdoc_options &lt;&lt; &#39;--title&#39; ...</pre>\n"],["rdoc_options=","Gem::Specification","Gem/Specification.html#method-i-rdoc_options-3D","(options)","<p>Sets rdoc_options to <code>value</code>, ensuring it is an array. Don&#39;t\nuse this, push onto the array instead. …\n"],["rdoc_target","RDoc::Task","RDoc/Task.html#method-i-rdoc_target","()",""],["rdoc_target","RDoc::Task","RDoc/Task.html#method-i-rdoc_target","()",""],["rdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["rdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["rdoc_task_name","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_name","()",""],["rdoc_task_name","RDoc::Task","RDoc/Task.html#method-i-rdoc_task_name","()",""],["re_exchange","Process::GID","Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group\nID. Not available on all platforms. …\n"],["re_exchange","Process::UID","Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID.\nNot available on all platforms. …\n"],["re_exchangeable?","Process::GID","Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process\nmay be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process\nmay be exchanged on the current platform. …\n"],["re_sign","Gem::Security","Gem/Security.html#method-c-re_sign","(expired_certificate, private_key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Signs <code>expired_certificate</code> with <code>private_key</code> if the\nkeys match and the expired certificate was self-signed. …\n"],["reachable_objects_from","ObjectSpace","ObjectSpace.html#method-c-reachable_objects_from","(p1)","<p>MRI specific feature &mdash; Return all reachable objects from `obj&#39;.\n\n<p>This method returns all reachable objects …\n"],["reachable_objects_from_root","ObjectSpace","ObjectSpace.html#method-c-reachable_objects_from_root","()","<p>MRI specific feature &mdash; Return all reachable objects from root.\n\n"],["read","ARGF","ARGF.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from ARGF. The files named on the command line\nare concatenated and treated as a single …\n"],["read","CSV","CSV.html#method-c-read","(path, *options)","<p>Use to slurp a CSV file into an Array of Arrays.  Pass the\n<code>path</code> to the file and any <code>options</code> CSV::new() …\n"],["read","CSV","CSV.html#method-i-read","()","<p>Slurps the remaining rows and returns an Array of Arrays.\n<p>The data source must be open for reading.\n"],["read","Dir","Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns\n<code>nil</code> at the end of the stream.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-read","(len = nil)","<p>Reads <code>len</code> bytes from the tar file entry, or the rest of the\nentry if nil\n"],["read","IO","IO.html#method-c-read","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Opens the file, optionally seeks to the given <code>offset</code>, then\nreturns <code>length</code> bytes (defaulting to the rest …\n"],["read","IO","IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from the I/O stream.\n<p><em>length</em> must be a non-negative integer or <code>nil</code>.\n<p>If <em>length</em> is a positive …\n"],["read","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-read","(size=nil, buf=nil)","<p>Reads <code>size</code> bytes from the stream.  If <code>buf</code> is\nprovided it must reference a string which will receive the …\n"],["read","OpenSSL::PKey","OpenSSL/PKey.html#method-c-read","(p1, p2 = v2)","<p>Reads a DER or PEM encoded string from <code>string</code> or\n<code>io</code> and returns an instance of the appropriate PKey class. …\n"],["read","OpenURI::OpenRead","OpenURI/OpenRead.html#method-i-read","(options={})","<p>OpenURI::OpenRead#read() reads a content referenced by self and returns the\ncontent as string. The string …\n"],["read","Pathname","Pathname.html#method-i-read","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns all data from the file, or the first <code>N</code> bytes if\nspecified.\n<p>See IO.read.\n"],["read","REXML::IOSource","REXML/IOSource.html#method-i-read","()",""],["read","REXML::Source","REXML/Source.html#method-i-read","()",""],["read","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-read","(tuple, sec=nil)","<p>Reads <code>tuple</code>, but does not remove it.\n"],["read","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-read","(tuple, sec=nil, &block)","<p>Reads <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#read.\n"],["read","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-read","(tuple)",""],["read","StringIO","StringIO.html#method-i-read","(*args)","<p>See IO#read.\n"],["read","Zlib::GzipReader","Zlib/GzipReader.html#method-i-read","(p1 = v1)","<p>See Zlib::GzipReader documentation for a description.\n"],["read_all","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-read_all","(tuple)","<p>Returns all tuples matching <code>tuple</code>.  Does not remove the found\ntuples.\n"],["read_all","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-read_all","(tuple)","<p>Reads all tuples matching <code>tuple</code> from the proxied TupleSpace. \nSee TupleSpace#read_all.\n"],["read_binary","Gem","Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_binary","Gem::TestCase","Gem/TestCase.html#method-i-read_binary","(path)","<p>Reads a binary file at <code>path</code>\n"],["read_body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_body_0","Net::HTTPResponse","Net/HTTPResponse.html#method-i-read_body_0","(dest)",""],["read_cache","Gem::TestCase","Gem/TestCase.html#method-i-read_cache","(path)","<p>Reads a Marshal file at <code>path</code>\n"],["read_checksums","Gem::Package","Gem/Package.html#method-i-read_checksums","(gem)","<p>Reads and loads checksums.yaml.gz from the tar file <code>gem</code>\n"],["read_file","RDoc::Encoding","RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding\ndirectives in the file.\n<p>The content will be converted …\n"],["read_from_cmdline","CGI::QueryExtension","CGI/QueryExtension.html#method-i-read_from_cmdline","()","<p>offline mode. read name=value pairs on standard input.\n"],["read_multipart","CGI::QueryExtension","CGI/QueryExtension.html#method-i-read_multipart","(boundary, content_length)","<p>Parses multipart form elements according to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">http</span>:<span class=\"ruby-operator\">/</span><span class=\"ruby-regexp\">/www.w3.org/</span><span class=\"ruby-constant\">TR</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">html401</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">interact</span><span class=\"ruby-operator\">/</span><span class=\"ruby-identifier\">forms</span>.<span class=\"ruby-identifier\">html</span><span class=\"ruby-comment\">#h-17.13.4.2</span>\n</pre>\n"],["read_nonblock","ARGF","ARGF.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream in non-blocking\nmode.\n"],["read_nonblock","IO","IO.html#method-i-read_nonblock","(len, buf = nil, exception: true)","<p>Reads at most <em>maxlen</em> bytes from <em>ios</em> using the read(2)\nsystem call after O_NONBLOCK is set for the underlying …\n"],["read_nonblock","IO::generic_readable","IO/generic_readable.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Similar to #read, but raises <code>EOFError</code> at end of string unless\nthe +exception: false+ option is passed …\n"],["read_nonblock","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-read_nonblock","(maxlen, buf=nil, exception: true)","<p>Reads at most <code>maxlen</code> bytes in the non-blocking manner.\n<p>When no data can be read without blocking it raises …\n"],["read_smime","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-read_smime","(p1)",""],["read_status_line","Net::HTTPResponse","Net/HTTPResponse.html#method-c-read_status_line","(sock)",""],["read_timeout=","Net::FTP","Net/FTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["read_timeout=","Net::HTTP","Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["read_timeout=","Net::POP3","Net/POP3.html#method-i-read_timeout-3D","(sec)","<p>Set the read timeout.\n"],["read_timeout=","Net::SMTP","Net/SMTP.html#method-i-read_timeout-3D","(sec)","<p>Set the number of seconds to wait until timing-out a read(2) call.\n"],["read_type_class","Psych","Psych.html#method-c-read_type_class","(type, reference)",""],["read_with_substitution","REXML::Text","REXML/Text.html#method-c-read_with_substitution","( input, illegal=nil )","<p>Reads text, substituting entities\n"],["readable?","File","File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["readable?","File::Stat","File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective\nuser id of this process.\n\n<pre>File.stat(&quot;testfile&quot;).readable? ...</pre>\n"],["readable?","FileTest","FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["readable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-readable-3F","()","<p>Returns <code>true</code> if the RETR command may be applied to the file.\n"],["readable?","Pathname","Pathname.html#method-i-readable-3F","()","<p>See FileTest.readable?.\n"],["readable_after_eof?","IRB::InputMethod","IRB/InputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_real?","File","File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user\nand group id of this process. See access(3). …\n"],["readable_real?","File::Stat","File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id\nof this process.\n\n<pre>File.stat(&quot;testfile&quot;).readable_real? ...</pre>\n"],["readable_real?","FileTest","FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user\nand group id of this process. See access(3). …\n"],["readable_real?","Pathname","Pathname.html#method-i-readable_real-3F","()","<p>See FileTest.readable_real?.\n"],["readagain_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes","()","<p>Returns the bytes to be read again when Encoding::InvalidByteSequenceError\noccurs.\n"],["readbyte","ARGF","ARGF.html#method-i-readbyte","()","<p>Reads the next 8-bit byte from ARGF and returns it as an\n<code>Integer</code>. Raises an <code>EOFError</code> after the last byte …\n"],["readbyte","IO","IO.html#method-i-readbyte","()","<p>Reads a byte as with <code>IO#getbyte</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readbyte","IO::generic_readable","IO/generic_readable.html#method-i-readbyte","()","<p>See IO#readbyte.\n"],["readbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readchar","ARGF","ARGF.html#method-i-readchar","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Raises an <code>EOFError</code> after the last\ncharacter …\n"],["readchar","IO","IO.html#method-i-readchar","()","<p>Reads a one-character string from <em>ios</em>. Raises an\n<code>EOFError</code> on end of file.\n\n<pre>f = File.new(&quot;testfile&quot;)\nf.readchar ...</pre>\n"],["readchar","IO::generic_readable","IO/generic_readable.html#method-i-readchar","()","<p>See IO#readchar.\n"],["readchar","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readchar","()","<p>Reads a one-character string from the stream.  Raises an EOFError at end of\nfile.\n"],["readchar","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readchar","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readline","ARGF","ARGF.html#method-i-readline","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by  …\n"],["readline","CSV","CSV.html#method-i-readline","()",""],["readline","IO","IO.html#method-i-readline","(*args)","<p>Reads a line as with <code>IO#gets</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readline","IO::generic_readable","IO/generic_readable.html#method-i-readline","(*args)","<p>See IO#readline.\n"],["readline","IRB::Locale","IRB/Locale.html#method-i-readline","(*rs)",""],["readline","Kernel","Kernel.html#method-i-readline","(*args)","<p>Equivalent to <code>Kernel::gets</code>, except <code>readline</code>\nraises <code>EOFError</code> at end of file.\n"],["readline","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readline","(eol=$/)","<p>Reads a line from the stream which is separated by <code>eol</code>.\n<p>Raises EOFError if at end of file.\n"],["readline","REXML::IOSource","REXML/IOSource.html#method-i-readline","()",""],["readline","Readline","Readline.html#method-c-readline","(p1 = v1, p2 = v2)","<p>Shows the <code>prompt</code> and reads the inputted line with line\nediting. The inputted line is added to the history …\n"],["readline","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readline","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlines","ARGF","ARGF.html#method-i-readlines","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["readlines","CSV","CSV.html#method-i-readlines","()",""],["readlines","CSV","CSV.html#method-c-readlines","(*args)","<p>Alias for CSV::read().\n"],["readlines","IO","IO.html#method-i-readlines","(*args)","<p>Reads all of the lines in <em>ios</em>, and returns them in\n<em>anArray</em>. Lines are separated by the optional <em>sep</em>. …\n"],["readlines","IO","IO.html#method-c-readlines","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Reads the entire file specified by <em>name</em> as individual lines, and\nreturns those lines in an array. Lines …\n"],["readlines","Kernel","Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling\n<code>Kernel.gets(<em>sep</em>)</code> until the end of file.\n"],["readlines","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readlines","(eol=$/)","<p>Reads lines from the stream which are separated by <code>eol</code>.\n<p>See also #gets\n"],["readlines","Pathname","Pathname.html#method-i-readlines","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns all the lines from the file.\n<p>See IO.readlines.\n"],["readlines","StringIO","StringIO.html#method-i-readlines","(*args)","<p>See IO#readlines.\n"],["readlines","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readlines","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlink","File","File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on\nall platforms.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["readlink","Pathname","Pathname.html#method-i-readlink","()","<p>Read symbolic link.\n<p>See File.readlink.\n"],["readpartial","ARGF","ARGF.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream.\n<p>If the optional <em>outbuf</em> argument is present, it must reference …\n"],["readpartial","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-readpartial","(len = nil)",""],["readpartial","IO","IO.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the I/O stream. It blocks only if\n<em>ios</em> has no data immediately available. …\n"],["readpartial","IO::generic_readable","IO/generic_readable.html#method-i-readpartial","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["readpartial","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-readpartial","(maxlen, buf=nil)","<p>Reads at most <code>maxlen</code> bytes from the stream.  If\n<code>buf</code> is provided it must reference a string which will …\n"],["readpartial","Zlib::GzipReader","Zlib/GzipReader.html#method-i-readpartial","(p1, p2 = v2)","<p>Reads at most <em>maxlen</em> bytes from the gziped stream but it blocks\nonly if <em>gzipreader</em> has no data immediately …\n"],["ready","Net::SMTP","Net/SMTP.html#method-i-ready","(from_addr, *to_addrs)",""],["ready?","IO","IO.html#method-i-ready-3F","()","<p>Returns true if input available without blocking, or false. Returns nil if\nno information available. …\n"],["real","Complex","Complex.html#method-i-real","()","<p>Returns the real part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">real</span>      <span class=\"ruby-comment\">#=&gt; 7</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">real</span>  <span class=\"ruby-comment\">#=&gt; 9</span>\n</pre>\n"],["real","Matrix","Matrix.html#method-i-real","()","<p>Returns the real part of the matrix.\n\n<pre>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i  i  ...</pre>\n"],["real","Numeric","Numeric.html#method-i-real","()","<p>Returns self.\n"],["real?","Complex","Complex.html#method-i-real-3F","()","<p>Returns false.\n"],["real?","Matrix","Matrix.html#method-i-real-3F","()","<p>Returns <code>true</code> if all entries of the matrix are real.\n"],["real?","Numeric","Numeric.html#method-i-real-3F","()","<p>Returns <code>true</code> if <code>num</code> is a Real number. (i.e. not\nComplex).\n"],["real_load","IRB::Locale","IRB/Locale.html#method-i-real_load","(path, priv)",""],["realdirpath","File","File.html#method-c-realdirpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem. The real pathname doesn&#39;t …\n"],["realdirpath","Pathname","Pathname.html#method-i-realdirpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual\nfilesystem.\n<p>Does not contain symlinks or useless …\n"],["realloc","Fiddle","Fiddle.html#method-c-realloc","(p1, p2)","<p>Change the size of the memory allocated at the memory location\n<code>addr</code> to <code>size</code> bytes.  Returns the memory …\n"],["really_verbose","Gem::ConfigFile","Gem/ConfigFile.html#method-i-really_verbose","()","<p>Really verbose mode gives you extra output.\n"],["realpath","File","File.html#method-c-realpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem not containing symlinks or …\n"],["realpath","Pathname","Pathname.html#method-i-realpath","(p1 = v1)","<p>Returns the real (absolute) pathname for <code>self</code> in the actual\nfilesystem.\n<p>Does not contain symlinks or useless …\n"],["realtime","Benchmark","Benchmark.html#method-i-realtime","()","<p>Returns the elapsed real time used to execute the given block.\n"],["realtime","Benchmark","Benchmark.html#method-c-realtime","()","<p>Returns the elapsed real time used to execute the given block.\n"],["reason","LocalJumpError","LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next,\n:return, or :noreason.\n"],["reason","OptionParser::ParseError","OptionParser/ParseError.html#method-i-reason","()","<p>Returns error reason. Override this for I18N.\n"],["reason_phrase","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre>WEBrick::HTTPStatus.reason_phrase 404\n=&gt; ...</pre>\n"],["reason_phrase","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre>WEBrick::HTTPStatus.reason_phrase 404\n=&gt; ...</pre>\n"],["reason_phrase","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-reason_phrase","()","<p>Returns the HTTP status description\n"],["receive","REXML::Validation::RelaxNG","REXML/Validation/RelaxNG.html#method-i-receive","(event)",""],["receive_responses","Net::IMAP","Net/IMAP.html#method-i-receive_responses","()",""],["receiver","Binding","Binding.html#method-i-receiver","()","<p>Returns the bound receiver of the binding object.\n"],["receiver","Method","Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n"],["receiver","NameError","NameError.html#method-i-receiver","()","<p>Return the receiver associated with this NameError exception.\n"],["recipients","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-recipients","()",""],["record_depth","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_depth","(stack)",""],["record_entity_expansion","REXML::Document","REXML/Document.html#method-i-record_entity_expansion","()",""],["record_location","RDoc::CodeObject","RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["record_requirements","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_requirements","(reqs)",""],["record_response","Net::IMAP","Net/IMAP.html#method-i-record_response","(name, data)",""],["recover","OptionParser::ParseError","OptionParser/ParseError.html#method-i-recover","(argv)","<p>Pushes back erred argument(s) to <code>argv</code>.\n"],["rect","Complex","Complex.html#method-i-rect","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">rectangular</span>  <span class=\"ruby-comment\">#=&gt; [1, 2]</span>\n</pre>\n"],["rect","Complex","Complex.html#method-c-rect","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rect","Matrix","Matrix.html#method-i-rect","()","<p>Returns an array containing matrices corresponding to the real and\nimaginary parts of the matrix\n<p>m.rect …\n"],["rect","Numeric","Numeric.html#method-i-rect","()","<p>Returns an array; [num, 0].\n"],["rectangular","Complex","Complex.html#method-i-rectangular","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">rectangular</span>  <span class=\"ruby-comment\">#=&gt; [1, 2]</span>\n</pre>\n"],["rectangular","Complex","Complex.html#method-c-rectangular","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rectangular","Matrix","Matrix.html#method-i-rectangular","()",""],["rectangular","Numeric","Numeric.html#method-i-rectangular","()","<p>Returns an array; [num, 0].\n"],["recurse","REXML::XPathParser","REXML/XPathParser.html#method-i-recurse","( nodeset, &block )",""],["recurse_proc","JSON","JSON.html#method-i-recurse_proc","(result, &proc)","<p>Recursively calls passed <em>Proc</em> if the parsed data structure is an\n<em>Array</em> or <em>Hash</em>\n"],["recursive_predecessors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_predecessors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} where `self` is a\n\n<pre>{#descendent?}</pre>\n"],["recursive_successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_successors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} where `self` is an\n\n<pre>{#ancestor?}</pre>\n"],["recv","BasicSocket","BasicSocket.html#method-i-recv","(*args)","<p>Receives a message.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* …\n"],["recv_io","UNIXSocket","UNIXSocket.html#method-i-recv_io","(p1 = v1, p2 = v2)","<p>Example\n\n<pre>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv|\n  UNIXSocket.open(&quot;/tmp/sock&quot;) {|c|\n    s = serv.accept\n ...</pre>\n"],["recv_nonblock","BasicSocket","BasicSocket.html#method-i-recv_nonblock","(len, flag = 0, str = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recv_response","Net::SMTP","Net/SMTP.html#method-i-recv_response","()",""],["recvfrom","IPSocket","IPSocket.html#method-i-recvfrom","(*args)","<p>Receives a message and return the message as a string and an address which\nthe message come from.\n<p><em>maxlen</em> …\n"],["recvfrom","Socket","Socket.html#method-i-recvfrom","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code>.\n<em>flags</em> is zero or more of the <code>MSG_</code> options. The first\nelement …\n"],["recvfrom","UNIXSocket","UNIXSocket.html#method-i-recvfrom","(*args)","<p>Receives a message via <em>unixsocket</em>.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a …\n"],["recvfrom_nonblock","Socket","Socket.html#method-i-recvfrom_nonblock","(len, flag = 0, str = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvfrom_nonblock","UDPSocket","UDPSocket.html#method-i-recvfrom_nonblock","(len, flag = 0, outbuf = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>udpsocket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvmsg","BasicSocket","BasicSocket.html#method-i-recvmsg","(dlen = nil, flags = 0, clen = nil, scm_rights: false)","<p>recvmsg receives a message using recvmsg(2) system call in blocking manner.\n<p><em>maxmesglen</em> is the maximum …\n"],["recvmsg_nonblock","BasicSocket","BasicSocket.html#method-i-recvmsg_nonblock","(dlen = nil, flags = 0, clen = nil, scm_rights: false, exception: true)","<p>recvmsg receives a message using recvmsg(2) system call in non-blocking\nmanner.\n<p>It is similar to BasicSocket#recvmsg …\n"],["redirect?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["redirect?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["redirect_to_directory_uri","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-redirect_to_directory_uri","(req, res)","<p>Redirects to a path ending in /\n"],["redirector","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-redirector","()",""],["redisplay","Readline","Readline.html#method-c-redisplay","()","<p>Change what&#39;s displayed on the screen to reflect the current contents.\n<p>See GNU Readline&#39;s rl_redisplay …\n"],["reduce","Enumerable","Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["reduce_to_hessenberg","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-reduce_to_hessenberg","()","<p>Nonsymmetric reduction to Hessenberg form.\n"],["ref","Fiddle::Pointer","Fiddle/Pointer.html#method-i-ref","()","<p>Returns a new Fiddle::Pointer instance that is a reference pointer for this\npointer.\n<p>Analogous to the …\n"],["reference","RDoc::Markdown","RDoc/Markdown.html#method-i-reference","(label, link)","<p>Stores <code>label</code> as a reference to <code>link</code> and fills in\npreviously unknown\nlink references.\n"],["refine","Module","Module.html#method-i-refine","(p1)","<p>Refine <em>mod</em> in the receiver.\n<p>Returns a module, where refined methods are defined.\n"],["refresh","Gem","Gem.html#method-c-refresh","()","<p>Refresh available gems from disk.\n"],["refresh_line","Readline","Readline.html#method-c-refresh_line","()","<p>Clear the current input line.\n"],["refute_file","RDoc::TestCase","RDoc/TestCase.html#method-i-refute_file","(path)","<p>Refutes <code>path</code> exists\n"],["refute_path_exists","Gem::TestCase","Gem/TestCase.html#method-i-refute_path_exists","(path, msg = nil)","<p>TODO: move to minitest\n"],["regexp","MatchData","MatchData.html#method-i-regexp","()","<p>Returns the regexp.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/a.*b/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;abc&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">regexp</span> <span class=\"ruby-comment\">#=&gt; /a.*b/</span>\n</pre>\n"],["regexp","OptionParser::Completion","OptionParser/Completion.html#method-c-regexp","(key, icase)",""],["regexp","URI","URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">regexp</span>([<span class=\"ruby-identifier\">match_schemes</span>])\n</pre>\n<p>Args\n"],["regist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-regist","(name, ro)",""],["regist_server","DRb","DRb.html#method-i-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["regist_server","DRb","DRb.html#method-c-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["register","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-register","(target, obj)","<p>Noop this out so there are no anchors\n"],["register","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-c-register","(p1, p2, p3)","<p>This adds a new ObjectId to the internal tables. Where\n<code>object_id</code> is the numerical form, <code>short_name</code> is …\n"],["register","Psych::Streaming","Psych/Streaming.html#method-i-register","(target, obj)",""],["register","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-register","(node, object)",""],["register","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-register","(target, yaml_obj)",""],["register","WEBrick","WEBrick.html#method-i-register","(thread, time, exception)","<p>Registers a new timeout handler\n<p>time &mdash; Timeout in seconds\n<p>exception &mdash; Exception to raise when timeout elapsed …\n"],["register","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-register","(seconds, exception)","<p>Registers a new timeout handler\n<p>time &mdash; Timeout in seconds\n<p>exception &mdash; Exception to raise when timeout elapsed …\n"],["register_command","Gem::CommandManager","Gem/CommandManager.html#method-i-register_command","(command, obj=false)","<p>Register the Symbol <code>command</code> as a gem command.\n"],["register_default_spec","Gem","Gem.html#method-c-register_default_spec","(spec)","<p>Register a Gem::Specification for default gem.\n<p>Two formats for the specification are supported:\n<p>MRI 2.0 …\n"],["register_empty","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-register_empty","(object)",""],["register_uri","RSS::BaseListener","RSS/BaseListener.html#method-c-register_uri","(uri, name)","<p>register uri against this name.\n"],["registry=","URI::Generic","URI/Generic.html#method-i-registry-3D","(v)",""],["regular?","Matrix","Matrix.html#method-i-regular-3F","()","<p>Returns <code>true</code> if this is a regular (i.e. non-singular) matrix.\n"],["rehash","ENV","ENV.html#method-c-rehash","()","<p>Re-hashing the environment variables does nothing.  It is provided for\ncompatibility with Hash.\n"],["rehash","Hash","Hash.html#method-i-rehash","()","<p>Rebuilds the hash based on the current hash values for each key. If values\nof key objects have changed …\n"],["rehash","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-rehash","()","<p>Clears the command hash table.\n"],["reject","Array","Array.html#method-i-reject","()","<p>Returns a new array containing the items in <code>self</code> for which the\ngiven block is not <code>true</code>. The ordering …\n"],["reject","DBM","DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified …\n"],["reject","ENV","ENV.html#method-c-reject","()","<p>Same as ENV#delete_if, but works on (and returns) a copy of the\nenvironment.\n"],["reject","Enumerable","Enumerable.html#method-i-reject","()","<p>Returns an array for all elements of <code>enum</code> for which the given\n<code>block</code> returns <code>false</code>.\n<p>If no block is given, …\n"],["reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-reject","()",""],["reject","GDBM","GDBM.html#method-i-reject","()","<p>Returns a hash copy of <em>gdbm</em> where all key-value pairs from\n<em>gdbm</em> for which <em>block</em> evaluates to true are …\n"],["reject","Hash","Hash.html#method-i-reject","()","<p>Returns a new hash consisting of entries for which the block returns false.\n<p>If no block is given, an enumerator …\n"],["reject","OptionParser","OptionParser.html#method-i-reject","(*args, &blk)","<p>Directs to reject specified class argument.\n<p>t &mdash; Argument class specifier, any object including Class.\n\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reject</span>(<span class=\"ruby-identifier\">t</span>)\n</pre>\n"],["reject","OptionParser","OptionParser.html#method-c-reject","(*args, &blk)","<p>See #reject.\n"],["reject","OptionParser::List","OptionParser/List.html#method-i-reject","(t)","<p>See OptionParser.reject.\n"],["reject","SDBM","SDBM.html#method-i-reject","()","<p>Creates a new Hash using the key-value pairs from the database, then calls\nHash#reject with the given …\n"],["reject","YAML::DBM","YAML/DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified …\n"],["reject!","Array","Array.html#method-i-reject-21","()","<p>Deletes every element of <code>self</code> for which the block evaluates to\n<code>true</code>, if no changes were made returns …\n"],["reject!","DBM","DBM.html#method-i-reject-21","()","<p>Deletes all entries for which the code block returns true. Returns self.\n"],["reject!","ENV","ENV.html#method-c-reject-21","()","<p>Equivalent to ENV#delete_if but returns <code>nil</code> if no changes were\nmade.\n<p>Returns an Enumerator if no block …\n"],["reject!","GDBM","GDBM.html#method-i-reject-21","()","<p>Deletes every key-value pair from <em>gdbm</em> for which <em>block</em>\nevaluates to true.\n"],["reject!","Hash","Hash.html#method-i-reject-21","()","<p>Equivalent to <code>Hash#delete_if</code>, but returns <code>nil</code> if\nno changes were made.\n"],["reject!","SDBM","SDBM.html#method-i-reject-21","()","<p>Iterates over the key-value pairs in the database, deleting those for which\nthe block returns <code>true</code>.\n"],["reject!","Set","Set.html#method-i-reject-21","(&block)","<p>Equivalent to Set#delete_if, but returns nil if no changes were made.\nReturns an enumerator if no block …\n"],["relative?","Pathname","Pathname.html#method-i-relative-3F","()","<p>The opposite of Pathname#absolute?\n<p>It returns <code>false</code> if the pathname begins with a slash.\n\n<pre>p = Pathname.new(&#39;/im/sure&#39;) ...</pre>\n"],["relative?","URI::Generic","URI/Generic.html#method-i-relative-3F","()","<p>Checks if URI is relative\n"],["relative_path_from","Pathname","Pathname.html#method-i-relative_path_from","(base_directory)","<p>Returns a relative path from the given <code>base_directory</code> to the\nreceiver.\n<p>If <code>self</code> is absolute, then <code>base_directory</code> …\n"],["release","Gem::Version","Gem/Version.html#method-i-release","()","<p>The release for this version (e.g. 1.2.0.a -&gt; 1.2.0). Non-prerelease\nversions return themselves.\n"],["release","OptionParser","OptionParser.html#method-i-release","()","<p>Release code\n"],["reload","DRb::DRbUnknown","DRb/DRbUnknown.html#method-i-reload","()","<p>Attempt to load the wrapped marshalled object again.\n<p>If the class of the object is now known locally, …\n"],["reload","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-reload","()","<p>Reloads passwords from the database\n"],["reload","WEBrick::HTTPAuth::Htgroup","WEBrick/HTTPAuth/Htgroup.html#method-i-reload","()","<p>Reload groups from the database\n"],["reload","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-reload","()","<p>Reload passwords from the database\n"],["remainder","BigDecimal","BigDecimal.html#method-i-remainder","(p1)","<p>Returns the remainder from dividing by the value.\n<p>x.remainder(y) means x-y*(x/y).truncate\n"],["remainder","Integer","Integer.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <em>big</em> by <em>numeric</em> as:\n\n<pre>x.remainder(y) means x-y*(x/y).truncate</pre>\n<p>Examples …\n"],["remainder","Integer","Integer.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <em>big</em> by <em>numeric</em> as:\n\n<pre>x.remainder(y) means x-y*(x/y).truncate</pre>\n<p>Examples …\n"],["remainder","Numeric","Numeric.html#method-i-remainder","(p1)","\n<pre>x.remainder(y) means x-y*(x/y).truncate</pre>\n<p>See Numeric#divmod.\n"],["remote=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-remote-3D","(remote)","<p>Sets the remote network access for all composed sets.\n"],["remote?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-remote-3F","()","<p>Is remote fetching enabled?\n"],["remote_address","BasicSocket","BasicSocket.html#method-i-remote_address","()","<p>Returns an Addrinfo object for remote address obtained by getpeername.\n<p>Note that addrinfo.protocol is …\n"],["remote_ip","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-remote_ip","()","<p>The client&#39;s IP address\n"],["remove","FileUtils","FileUtils.html#method-c-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","FileUtils","FileUtils.html#method-i-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-remove","()","<p>Remove the oldest DependencyRequest from the list.\n"],["remove","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove","(spec)","<p>spec &mdash; the spec of the gem to be uninstalled\n<p>list &mdash; the list of all such gems\n\n<p>Warning: this method modifies …\n"],["remove","OptionParser","OptionParser.html#method-i-remove","()","<p>Removes the last List.\n"],["remove","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove","REXML::Attribute","REXML/Attribute.html#method-i-remove","()","<p>Removes this Attribute from the tree, and returns true if successful\n<p>This method is usually not called …\n"],["remove","REXML::Child","REXML/Child.html#method-i-remove","()","<p>Removes this child from the parent.\n<p>Returns &mdash; self\n\n"],["remove_all","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_all","(list)","<p>Removes all gems in <code>list</code>.\n<p>NOTE: removes uninstalled gems from <code>list</code>.\n"],["remove_by_name","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_by_name","(full_name)","<p>Removes the gemspec matching <code>full_name</code> from the dependency\nlist\n"],["remove_class_variable","Module","Module.html#method-i-remove_class_variable","(p1)","<p>Removes the definition of the <em>sym</em>, returning that constant&#39;s\nvalue.\n\n<pre>class Dummy\n  @@var = 99\n  puts ...</pre>\n"],["remove_const","Module","Module.html#method-i-remove_const","(p1)","<p>Removes the definition of the given constant, returning that constant&#39;s\nprevious value.  If that ...\n"],["remove_dir","FileUtils","FileUtils.html#method-i-remove_dir","(path, force = false)","<p>Removes a directory <code>dir</code> and its contents recursively. This\nmethod ignores StandardError if <code>force</code> is true. …\n"],["remove_dir","FileUtils","FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Removes a directory <code>dir</code> and its contents recursively. This\nmethod ignores StandardError if <code>force</code> is true. …\n"],["remove_entry","FileUtils","FileUtils.html#method-i-remove_entry","(path, force = false)","<p>This method removes a file system entry <code>path</code>.\n<code>path</code> might be a regular file, a directory, or something. …\n"],["remove_entry","FileUtils","FileUtils.html#method-c-remove_entry","(path, force = false)","<p>This method removes a file system entry <code>path</code>.\n<code>path</code> might be a regular file, a directory, or something. …\n"],["remove_entry_secure","FileUtils","FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>This method removes a file system entry <code>path</code>. \n<code>path</code> shall be a regular file, a directory, or something. …\n"],["remove_entry_secure","FileUtils","FileUtils.html#method-i-remove_entry_secure","(path, force = false)","<p>This method removes a file system entry <code>path</code>. \n<code>path</code> shall be a regular file, a directory, or something. …\n"],["remove_executables","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_executables","(spec)","<p>Removes installed executables and batch files (windows only) for\n<code>gemspec</code>.\n"],["remove_file","FileUtils","FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes a file <code>path</code>. This method ignores StandardError if\n<code>force</code> is true.\n"],["remove_file","FileUtils","FileUtils.html#method-i-remove_file","(path, force = false)","<p>Removes a file <code>path</code>. This method ignores StandardError if\n<code>force</code> is true.\n"],["remove_from_documentation?","RDoc::Context","RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_frozen_string_literal","RDoc::Encoding","RDoc/Encoding.html#method-c-remove_frozen_string_literal","(string)",""],["remove_handler","WEBrick::HTTPServlet::FileHandler","WEBrick/HTTPServlet/FileHandler.html#method-c-remove_handler","(suffix)","<p>Remove custom handling of requests for files with <code>suffix</code>\n"],["remove_installed!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-remove_installed-21","(dep)",""],["remove_instance_variable","Object","Object.html#method-i-remove_instance_variable","(p1)","<p>Removes the named instance variable from <em>obj</em>, returning that\nvariable&#39;s value.\n\n<pre>class Dummy\n  attr_reader ...</pre>\n"],["remove_invisible","RDoc::Context","RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than\n<code>min_visibility</code>.\n"],["remove_method","Module","Module.html#method-i-remove_method","(*args)","<p>Removes the method identified by <em>symbol</em> from the current class.\nFor an example, see <code>Module.undef_method</code> …\n"],["remove_modeline","RDoc::Parser","RDoc/Parser.html#method-c-remove_modeline","(content)","<p>Removes an emacs-style modeline from the first line of the document\n"],["remove_nodoc","RDoc::Store","RDoc/Store.html#method-i-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no\ncontent.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by\ndeleting the ones that have been removed …\n"],["remove_old_bin_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_bin_files","(bin_dir)",""],["remove_old_lib_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_lib_files","(lib_dir)",""],["remove_option","Gem::Command","Gem/Command.html#method-i-remove_option","(name)","<p>Remove previously defined command-line argument <code>name</code>.\n"],["remove_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-remove_owners","(name, owners)",""],["remove_private","RDoc::Comment","RDoc/Comment.html#method-i-remove_private","()","<p>Removes private sections from this comment.  Private sections are flush to\nthe comment marker and start …\n"],["remove_response_handler","Net::IMAP","Net/IMAP.html#method-i-remove_response_handler","(handler)","<p>Removes the response handler.\n"],["remove_server","DRb","DRb.html#method-c-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["remove_server","DRb","DRb.html#method-i-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["remove_siginfo_handler","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_spec","Gem::Specification","Gem/Specification.html#method-c-remove_spec","(spec)","<p>Removes <code>spec</code> from the known specs.\n"],["remove_specs_unsatisfied_by","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_specs_unsatisfied_by","(dependencies)","<p>Remove everything in the DependencyList that matches but doesn&#39;t\nsatisfy items in <code>dependencies</code> (a …\n"],["remove_stress_to_class","GC","GC.html#method-c-remove_stress_to_class","(*args)",""],["remove_unparseable","RDoc::RDoc","RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code> and\nTAGS files for emacs and vim.\n"],["remove_unresolved_default_spec","Gem","Gem.html#method-c-remove_unresolved_default_spec","(spec)","<p>Remove needless Gem::Specification of default gem from unresolved default\ngem list\n"],["renamable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-renamable-3F","()","<p>Returns <code>true</code> if the file or directory may be renamed by RNFR.\n"],["rename","File","File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a\n<code>SystemCallError</code> if the file cannot be renamed.\n\n<pre>File.rename(&quot;afile&quot;, ...</pre>\n"],["rename","Net::FTP","Net/FTP.html#method-i-rename","(fromname, toname)","<p>Renames a file on the server.\n"],["rename","Net::IMAP","Net/IMAP.html#method-i-rename","(mailbox, newname)","<p>Sends a RENAME command to change the name of the <code>mailbox</code> to\n<code>newname</code>.\n<p>A Net::IMAP::NoResponseError is raised …\n"],["rename","Pathname","Pathname.html#method-i-rename","(p1)","<p>Rename the file.\n<p>See File.rename.\n"],["renew","Rinda::SimpleRenewer","Rinda/SimpleRenewer.html#method-i-renew","()","<p>Called by the TupleSpace to check if the object is still alive.\n"],["renew","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-renew","(sec_or_renewer)","<p>Reset the expiry time according to <code>sec_or_renewer</code>.\n<p>nil &mdash; it is set to expire in the far future.\n<p>true &mdash; it has …\n"],["reopen","IO","IO.html#method-i-reopen","(p1, p2 = v2, p3 = {})","<p>Reassociates <em>ios</em> with the I/O stream given in <em>other_IO</em> or\nto a new stream opened on <em>path</em>. This may dynamically …\n"],["reopen","Logger","Logger.html#method-i-reopen","(logdev = nil)","<p>Args\n<p>logdev &mdash; The log device.  This is a filename (String) or IO object (typically\n<code>STDOUT</code>, <code>STDERR</code>, or an …\n\n"],["reopen","Logger::LogDevice","Logger/LogDevice.html#method-i-reopen","(log = nil)",""],["reopen","StringIO","StringIO.html#method-i-reopen","(*args)","<p>Reinitializes <strong>strio</strong> with the given <em>other_StrIO</em> or\n<em>string</em> and <em>mode</em> (see StringIO#new).\n"],["reopen","Syslog","Syslog.html#method-c-reopen","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["reorganize","GDBM","GDBM.html#method-i-reorganize","()","<p>Reorganizes the database file. This operation removes reserved space of\nelements that have already been …\n"],["repeated_combination","Array","Array.html#method-i-repeated_combination","(p1)","<p>When invoked with a block, yields all repeated combinations of length\n<code>n</code> of elements from the array and …\n"],["repeated_permutation","Array","Array.html#method-i-repeated_permutation","(p1)","<p>When invoked with a block, yield all repeated permutations of length\n<code>n</code> of the elements of the array, …\n"],["replace","Array","Array.html#method-i-replace","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<code>other_ary</code>, truncating or expanding if necessary.\n\n<pre>a ...</pre>\n"],["replace","DBM","DBM.html#method-i-replace","(p1)","<p>Replaces the contents of the database with the contents of the specified\nobject. Takes any object which …\n"],["replace","ENV","ENV.html#method-c-replace","(p1)","<p>Replaces the contents of the environment variables with the contents of\n<code>hash</code>.\n"],["replace","GDBM","GDBM.html#method-i-replace","(p1)","<p>Replaces the content of <em>gdbm</em> with the key-value pairs of\n<em>other</em>. <em>other</em> must have an each_pair method. …\n"],["replace","Gem::SourceList","Gem/SourceList.html#method-i-replace","(other)","<p>Replaces this SourceList with the sources in <code>other</code>  See #<<\nfor acceptable items in <code>other</code>.\n"],["replace","Hash","Hash.html#method-i-replace","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ ...</pre>\n"],["replace","SDBM","SDBM.html#method-i-replace","(p1)","<p>Empties the database, then inserts the given key-value pairs.\n<p>This method will work with any object which …\n"],["replace","Set","Set.html#method-i-replace","(enum)","<p>Replaces the contents of the set with the contents of the given enumerable\nobject and returns self.\n"],["replace","String","String.html#method-i-replace","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre>s = &quot;hello&quot;  ...</pre>\n"],["replace","YAML::DBM","YAML/DBM.html#method-i-replace","( hsh )","<p>Replaces the contents of the database with the contents of the specified\nobject. Takes any object which …\n"],["replace!","URI::Generic","URI/Generic.html#method-i-replace-21","(oth)","<p>replace self by other URI object\n"],["replace_child","REXML::Parent","REXML/Parent.html#method-i-replace_child","( to_replace, replacement )","<p>Replaces one child with another, making sure the nodelist is correct @param\nto_replace the child to replace …\n"],["replace_with","REXML::Child","REXML/Child.html#method-i-replace_with","( child )","<p>Replaces this object with another object.  Basically, calls\nParent.replace_child\n<p>Returns &mdash; self\n\n"],["replacement","Encoding::Converter","Encoding/Converter.html#method-i-replacement","()","<p>Returns the replacement string.\n\n<pre>ec = Encoding::Converter.new(&quot;euc-jp&quot;, &quot;us-ascii&quot;)\np ec.replacement   ...</pre>\n"],["replacement=","Encoding::Converter","Encoding/Converter.html#method-i-replacement-3D","(p1)","<p>Sets the replacement string.\n\n<pre>ec = Encoding::Converter.new(&quot;utf-8&quot;, &quot;us-ascii&quot;, :undef =&gt; :replace)\nec.replacement ...</pre>\n"],["replicate","Encoding","Encoding.html#method-i-replicate","(p1)","<p>Returns a replicated encoding of <em>enc</em> whose name is <em>name</em>.\nThe new encoding should have the same byte structure …\n"],["reply","Socket::UDPSource","Socket/UDPSource.html#method-i-reply","(msg)","<p>Sends the String <code>msg</code> to the source\n"],["reply_service","Rinda::RingServer","Rinda/RingServer.html#method-i-reply_service","()","<p>Creates a thread that notifies waiting clients from the TupleSpace.\n"],["report","GC::Profiler","GC/Profiler.html#method-c-report","(p1 = v1)","<p>Writes the GC::Profiler.result to <code>$stdout</code> or the given IO\nobject.\n"],["report","RDoc::Stats","RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report_attributes","RDoc::Stats","RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_methods","RDoc::Stats","RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["report_on_exception","Thread","Thread.html#method-i-report_on_exception","()","<p>Returns the status of the thread-local “report on exception&#39;&#39;\ncondition for this <code>thr</code>.\n<p>The default …\n"],["report_on_exception","Thread","Thread.html#method-c-report_on_exception","()","<p>Returns the status of the global “report on exception&#39;&#39; condition.\n<p>The default is <code>false</code>.\n<p>When …\n"],["report_on_exception=","Thread","Thread.html#method-c-report_on_exception-3D","(p1)","<p>When set to <code>true</code>, all threads will report the exception if an\nexception is raised.  Returns the new state. …\n"],["report_on_exception=","Thread","Thread.html#method-i-report_on_exception-3D","(p1)","<p>When set to <code>true</code>, all threads (including the main program)\nwill report the exception if an exception …\n"],["represent_map","Psych::Coder","Psych/Coder.html#method-i-represent_map","(tag, map)","<p>Emit a sequence with <code>map</code> and <code>tag</code>\n"],["represent_object","Psych::Coder","Psych/Coder.html#method-i-represent_object","(tag, obj)","<p>Emit an arbitrary object <code>obj</code> and <code>tag</code>\n"],["represent_scalar","Psych::Coder","Psych/Coder.html#method-i-represent_scalar","(tag, value)","<p>Emit a scalar with <code>value</code> and <code>tag</code>\n"],["represent_seq","Psych::Coder","Psych/Coder.html#method-i-represent_seq","(tag, list)","<p>Emit a sequence with <code>list</code> and <code>tag</code>\n"],["req","Gem::TestCase","Gem/TestCase.html#method-i-req","(*requirements)","<p>Constructs a new Gem::Requirement.\n"],["request","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-request","(uri, request_class, last_modified = nil)",""],["request","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-request","(uri, request_class, last_modified = nil)","<p>Performs a Net::HTTP request of type <code>request_class</code> on\n<code>uri</code> returning a Net::HTTP response object.  request …\n"],["request","Net::HTTP","Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()",""],["request_context","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-request_context","()","<p>Return a String indicating who caused this request to be added (only valid\nfor implicit requests)\n"],["request_get","Net::HTTP","Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a\nNet::HTTPResponse object.\n<p>When called with …\n"],["request_head","Net::HTTP","Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a\nNet::HTTPResponse object.\n<p>Returns the response. …\n"],["request_path","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-request_path","(current)","<p>Path of activations from the <code>current</code> list.\n"],["request_post","Net::HTTP","Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["request_uri","URI::HTTP","URI/HTTP.html#method-i-request_uri","()","\n<pre class=\"ruby\"><span class=\"ruby-comment\">#</span>\n<span class=\"ruby-comment\"># == Description</span>\n<span class=\"ruby-comment\">#</span>\n<span class=\"ruby-comment\"># Create a new URI::HTTP object from generic URI components as per</span>\n<span class=\"ruby-comment\"># RFC 2396. No ...</span>\n</pre>\n"],["requester","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-requester","()","<p>Return the Specification that listed the dependency\n"],["requests","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-requests","()",""],["require","IRB::Locale","IRB/Locale.html#method-i-require","(file, priv = nil)",""],["require","Kernel","Kernel.html#method-i-require","(path)","<p>When RubyGems is required, Kernel#require is replaced with our own which is\ncapable of loading gems on …\n"],["require_nested_dependencies_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-require_nested_dependencies_for","(activated_spec)","<p>Requires the dependencies that the recently activated spec has @param\n[Object] activated_spec the specification …\n"],["require_path","Gem::Specification","Gem/Specification.html#method-i-require_path","()","<p>Singular accessor for #require_paths\n"],["require_path=","Gem::Specification","Gem/Specification.html#method-i-require_path-3D","(path)","<p>Singular accessor for #require_paths\n"],["require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-require_paths","()","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is\nactivated.\n<p>See also #require_paths=\n<p>If you have …\n"],["require_paths=","Gem::Specification","Gem/Specification.html#method-i-require_paths-3D","(val)","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is\nactivated. If you have an extension you do not …\n"],["require_relative","Kernel","Kernel.html#method-i-require_relative","(p1)","<p>Ruby tries to load the library named <em>string</em> relative to the\nrequiring file&#39;s path.  If the file&#39;s …\n"],["required_attribute?","Gem::Specification","Gem/Specification.html#method-c-required_attribute-3F","(name)","<p>Is <code>name</code> a required attribute?\n"],["required_attributes","Gem::Specification","Gem/Specification.html#method-c-required_attributes","()","<p>Required specification attributes\n"],["required_element?","RSS::Maker::RSS09::Image","RSS/Maker/RSS09/Image.html#method-i-required_element-3F","()",""],["required_element?","RSS::Maker::RSS20::Image","RSS/Maker/RSS20/Image.html#method-i-required_element-3F","()",""],["required_prefix","RSS::Element","RSS/Element.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesImage","RSS/ITunesChannelModel/ITunesImage.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesOwner","RSS/ITunesChannelModel/ITunesOwner.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-c-required_prefix","()",""],["required_prefix","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-c-required_prefix","()",""],["required_prefix","RSS::ImageItemModel::ImageItem","RSS/ImageItemModel/ImageItem.html#method-c-required_prefix","()",""],["required_prefix","RSS::TaxonomyTopicModel::TaxonomyTopic","RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-required_prefix","()",""],["required_prefix","RSS::TaxonomyTopicsModel::TaxonomyTopics","RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-required_prefix","()",""],["required_ruby_version=","Gem::Specification","Gem/Specification.html#method-i-required_ruby_version-3D","(req)","<p>The version of Ruby required by this gem.  The ruby version can be\nspecified to the patch-level:\n\n<pre>$ ruby ...</pre>\n"],["required_rubygems_version=","Gem::Specification","Gem/Specification.html#method-i-required_rubygems_version-3D","(req)","<p>The RubyGems version required by this gem\n"],["required_uri","RSS::Atom::CommonModel","RSS/Atom/CommonModel.html#method-c-required_uri","()","<p>Returns the Atom URI W3C Namespace\n"],["required_uri","RSS::Element","RSS/Element.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesImage","RSS/ITunesChannelModel/ITunesImage.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesOwner","RSS/ITunesChannelModel/ITunesOwner.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-c-required_uri","()",""],["required_uri","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-c-required_uri","()",""],["required_uri","RSS::ImageItemModel::ImageItem","RSS/ImageItemModel/ImageItem.html#method-c-required_uri","()",""],["required_uri","RSS::RDF","RSS/RDF.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Bag","RSS/RDF/Bag.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Bag","RSS/RDF/Bag.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel","RSS/RDF/Channel.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel::Image","RSS/RDF/Channel/Image.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel::Items","RSS/RDF/Channel/Items.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel::Textinput","RSS/RDF/Channel/Textinput.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Image","RSS/RDF/Image.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Item","RSS/RDF/Item.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Li","RSS/RDF/Li.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Li","RSS/RDF/Li.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Li","RSS/RDF/Li.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Seq","RSS/RDF/Seq.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Seq","RSS/RDF/Seq.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Textinput","RSS/RDF/Textinput.html#method-c-required_uri","()",""],["required_uri","RSS::TaxonomyTopicModel::TaxonomyTopic","RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-required_uri","()",""],["required_uri","RSS::TaxonomyTopicsModel::TaxonomyTopics","RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-required_uri","()",""],["required_variable_names","RSS::Maker::Atom::Entry::Items::Item","RSS/Maker/Atom/Entry/Items/Item.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::Atom::Feed::Image","RSS/Maker/Atom/Feed/Image.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::Atom::Feed::Items::Item","RSS/Maker/Atom/Feed/Items/Item.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::Atom::Feed::Items::Item::Content","RSS/Maker/Atom/Feed/Items/Item/Content.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::Atom::Feed::Items::Item::Source","RSS/Maker/Atom/Feed/Items/Item/Source.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::Atom::Feed::Items::Item::Source::Icon","RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::AtomCategory","RSS/Maker/AtomCategory.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::AtomGenerator","RSS/Maker/AtomGenerator.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::AtomLink","RSS/Maker/AtomLink.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::AtomLogo","RSS/Maker/AtomLogo.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::AtomTextConstruct","RSS/Maker/AtomTextConstruct.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::ITunesChannelModel::ITunesOwnerBase","RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel::Copyright","RSS/Maker/RSS09/Channel/Copyright.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel::Description","RSS/Maker/RSS09/Channel/Description.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel::Links::Link","RSS/Maker/RSS09/Channel/Links/Link.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel::SkipDays::Day","RSS/Maker/RSS09/Channel/SkipDays/Day.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel::SkipHours::Hour","RSS/Maker/RSS09/Channel/SkipHours/Hour.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Channel::Title","RSS/Maker/RSS09/Channel/Title.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Image","RSS/Maker/RSS09/Image.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Items::Item","RSS/Maker/RSS09/Items/Item.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Items::Item::Description","RSS/Maker/RSS09/Items/Item/Description.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Items::Item::Links::Link","RSS/Maker/RSS09/Items/Item/Links/Link.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Items::Item::Title","RSS/Maker/RSS09/Items/Item/Title.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS09::Textinput","RSS/Maker/RSS09/Textinput.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Channel","RSS/Maker/RSS10/Channel.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Channel::Description","RSS/Maker/RSS10/Channel/Description.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Channel::Links::Link","RSS/Maker/RSS10/Channel/Links/Link.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Channel::Title","RSS/Maker/RSS10/Channel/Title.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Image","RSS/Maker/RSS10/Image.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Items::Item","RSS/Maker/RSS10/Items/Item.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Items::Item::Description","RSS/Maker/RSS10/Items/Item/Description.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Items::Item::Title","RSS/Maker/RSS10/Items/Item/Title.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS10::Textinput","RSS/Maker/RSS10/Textinput.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Channel","RSS/Maker/RSS20/Channel.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Channel::Categories::Category","RSS/Maker/RSS20/Channel/Categories/Category.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Channel::Cloud","RSS/Maker/RSS20/Channel/Cloud.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Channel::Generator","RSS/Maker/RSS20/Channel/Generator.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Items::Item","RSS/Maker/RSS20/Items/Item.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Items::Item::Categories::Category","RSS/Maker/RSS20/Items/Item/Categories/Category.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Items::Item::Enclosure","RSS/Maker/RSS20/Items/Item/Enclosure.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Items::Item::Guid","RSS/Maker/RSS20/Items/Item/Guid.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::RSS20::Items::Item::Source","RSS/Maker/RSS20/Items/Item/Source.html#method-i-required_variable_names","()",""],["required_variable_names","RSS::Maker::XMLStyleSheets::XMLStyleSheet","RSS/Maker/XMLStyleSheets/XMLStyleSheet.html#method-i-required_variable_names","()",""],["required_variables_are_set?","RSS::Maker::Base","RSS/Maker/Base.html#method-i-required_variables_are_set-3F","()",""],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()","<p>What does this dependency require?\n"],["requirement","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-requirement","()","<p>The version requirement for this dependency request\n"],["requirement","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-requirement","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#requirement)\n"],["requirement!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-requirement-21","()",""],["requirement_for_existing_name","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_for_existing_name","(name)","<p>@return [Object] the requirement that led to a version of a possibility\n\n<pre>with the given name being activated.</pre>\n"],["requirement_satisfied_by?","Gem::Resolver","Gem/Resolver.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)",""],["requirement_satisfied_by?","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>(see\nGem::Resolver::Molinillo::SpecificationProvider#requirement_satisfied_by?)\n"],["requirement_satisfied_by?","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>Determines whether the given `requirement` is satisfied by the given\n`spec`, in the context of the current …\n"],["requirement_tree_for","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_tree_for","(requirement)","<p>@return [Array&lt;Object&gt;] the list of requirements that led to\n\n<pre>`requirement` being required.</pre>\n"],["requirement_trees","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-requirement_trees","()","<p>@return [Array&lt;Array&lt;Object&gt;&gt;] The different requirement\n\n<pre>trees that led to every requirement ...</pre>\n"],["requirements","Gem::Resolver::Molinillo::Delegates::ResolutionState","Gem/Resolver/Molinillo/Delegates/ResolutionState.html#method-i-requirements","()","<p>(see Gem::Resolver::Molinillo::ResolutionState#requirements)\n"],["requirements","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-requirements","()","<p>@return [Array&lt;Object&gt;] all of the requirements that required\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">vertex</span>\n</pre>\n"],["requirements","Gem::Specification","Gem/Specification.html#method-i-requirements","()","<p>Lists the external (to RubyGems) requirements that must be met for this gem\nto work.  It&#39;s simply …\n"],["requirements=","Gem::Specification","Gem/Specification.html#method-i-requirements-3D","(req)","<p>Set requirements to <code>req</code>, ensuring it is an array. Don&#39;t\nuse this, push onto the array instead.\n"],["requirements_list","Gem::Dependency","Gem/Dependency.html#method-i-requirements_list","()",""],["rerdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["rerdoc_task_description","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["rerdoc_task_name","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_name","()",""],["rerdoc_task_name","RDoc::Task","RDoc/Task.html#method-i-rerdoc_task_name","()",""],["reset","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-reset","(value = nil, name = nil)","<p>Generate a reset button Input element, as a String.\n<p>This resets the values on a form to their initial …\n"],["reset","Digest::Base","Digest/Base.html#method-i-reset","()","<p>Reset the digest to its initial state and return <code>self</code>.\n"],["reset","Digest::Instance","Digest/Instance.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n<p>This method is overridden by each implementation …\n"],["reset","Gem::CommandManager","Gem/CommandManager.html#method-c-reset","()","<p>Reset the authoritative instance of the command manager.\n"],["reset","Gem::Request","Gem/Request.html#method-i-reset","(connection)","<p>Resets HTTP connection <code>connection</code>.\n"],["reset","Gem::Security","Gem/Security.html#method-c-reset","()","<p>Resets the trust directory for verifying gems.\n"],["reset","Gem::Specification","Gem/Specification.html#method-c-reset","()","<p>Reset the list of known specs, running pre and post reset hooks registered\nin Gem.\n"],["reset","Net::POP3","Net/POP3.html#method-i-reset","()","<p>Resets the session.  This clears all “deleted” marks from messages.\n<p>This method raises a POPError …\n"],["reset","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-reset","()","<p>Fully resets the internal state of the Cipher. By using this, the same\nCipher instance may be used several …\n"],["reset","OpenSSL::Digest","OpenSSL/Digest.html#method-i-reset","()","<p>Resets the Digest in the sense that any Digest#update that has been\nperformed is abandoned and the Digest …\n"],["reset","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-reset","()","<p>Returns <code>self</code> as it was when it was first initialized, with all\nprocessed data cleared from it.\n<p>Example …\n"],["reset","REXML::Validation::Choice","REXML/Validation/Choice.html#method-i-reset","()",""],["reset","REXML::Validation::Interleave","REXML/Validation/Interleave.html#method-i-reset","()",""],["reset","REXML::Validation::OneOrMore","REXML/Validation/OneOrMore.html#method-i-reset","()",""],["reset","REXML::Validation::State","REXML/Validation/State.html#method-i-reset","()",""],["reset","REXML::Validation::Validator","REXML/Validation/Validator.html#method-i-reset","()",""],["reset","StringScanner","StringScanner.html#method-i-reset","()","<p>Reset the scan pointer (index 0) and clear matching data.\n"],["reset","Zlib::ZStream","Zlib/ZStream.html#method-i-reset","()","<p>Resets and initializes the stream. All data in both input and output buffer\nare discarded.\n"],["reset_nil_attributes_to_default","Gem::Specification","Gem/Specification.html#method-i-reset_nil_attributes_to_default","()","<p>Reset nil attributes to their default values to make the spec valid\n"],["resolve","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve","(set = Gem::Resolver::BestSet.new)","<p>Resolve the requested dependencies and return an Array of Specification\nobjects to be activated.\n"],["resolve","Gem::Resolver","Gem/Resolver.html#method-i-resolve","()","<p>Proceed with resolution! Returns an array of ActivationRequest objects.\n"],["resolve","Gem::Resolver::Molinillo::Resolver","Gem/Resolver/Molinillo/Resolver.html#method-i-resolve","(requested, base = DependencyGraph.new)","<p>Resolves the requested dependencies into a {DependencyGraph}, locking to\nthe base dependency graph (if …\n"],["resolve","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-resolve","()","<p>Resolves the {#original_requested} dependencies into a full dependency\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">graph</span>\n</pre>\n<p>@raise [ResolverError] if …\n"],["resolve","RDoc::CrossReference","RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented\n<code>text</code> will be returned. …\n"],["resolve_aliases","RDoc::Context","RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been\nadded.\n"],["resolve_class","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-resolve_class","(klassname)","<p>Convert <code>klassname</code> to a Class\n"],["resolve_current","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve_current","()","<p>Resolve the requested dependencies against the gems available via Gem.path\nand return an Array of Specification …\n"],["resources","RSS::RDF::Channel::Items","RSS/RDF/Channel/Items.html#method-i-resources","()",""],["resources","RSS::TaxonomyTopicsModel::TaxonomyTopics","RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-resources","()",""],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","DRb::DRbObject","DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","Object","Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method. \nPrivate and protected methods are included in the …\n"],["respond_to_missing?","Delegator","Delegator.html#method-i-respond_to_missing-3F","(m, include_private)","<p>Checks for a method provided by this the delegate object by forwarding the\ncall through _<em>getobj</em>_.\n"],["respond_to_missing?","Object","Object.html#method-i-respond_to_missing-3F","(p1, p2)","<p>DO NOT USE THIS DIRECTLY.\n<p>Hook method to return whether the <em>obj</em> can respond to <em>id</em>\nmethod or not.\n<p>When the …\n"],["respond_to_missing?","OpenStruct","OpenStruct.html#method-i-respond_to_missing-3F","(mid, include_private = false)",""],["response_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()",""],["response_class","Net::HTTPResponse","Net/HTTPResponse.html#method-c-response_class","(code)",""],["responses","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-responses","()","<p>Returns an Array of SingleResponse for this BasicResponse.\n"],["rest","StringScanner","StringScanner.html#method-i-rest","()","<p>Returns the “rest” of the string (i.e. everything after the scan pointer).\nIf there is no more …\n"],["rest?","StringScanner","StringScanner.html#method-i-rest-3F","()","<p>Returns true iff there is more data in the string.  See #eos?. This method\nis obsolete; use #eos? instead. …\n"],["rest_size","StringScanner","StringScanner.html#method-i-rest_size","()","<p><code>s.rest_size</code> is equivalent to <code>s.rest.size</code>.\n"],["restore","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-restore","()","<p>Restore session state from the session&#39;s FileStore file.\n<p>Returns the session state as a hash.\n"],["restore","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-restore","()","<p>Restore session state.\n<p>Returns session data as a hash.\n"],["restore","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-restore","()","<p>Restore (empty) session state.\n"],["restore","CGI::Session::PStore","CGI/Session/PStore.html#method-i-restore","()","<p>Restore session state from the session&#39;s PStore file.\n<p>Returns the session state as a hash.\n"],["restore","JSON","JSON.html#method-i-restore","(source, proc = nil, options = {})",""],["restore","JSON","JSON.html#method-c-restore","(source, proc = nil, options = {})",""],["restore","Marshal","Marshal.html#method-c-restore","(*args)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["restsize","StringScanner","StringScanner.html#method-i-restsize","()","<p><code>s.restsize</code> is equivalent to <code>s.rest_size</code>. This\nmethod is obsolete; use #rest_size instead.\n"],["result","Coverage","Coverage.html#method-c-result","()","<p>Returns a hash that contains filename as key and coverage array as value\nand disables coverage measurement. …\n"],["result","ERB","ERB.html#method-i-result","(b=new_toplevel)","<p>Executes the generated ERB code to produce a completed template, returning\nthe results of that code. …\n"],["result","GC::Profiler","GC/Profiler.html#method-c-result","()","<p>Returns a profile data report such as:\n\n<pre>GC 1 invokes.\nIndex    Invoke Time(sec)       Use Size(byte)   ...</pre>\n"],["result","StopIteration","StopIteration.html#method-i-result","()","<p>Returns the return value of the iterator.\n\n<pre>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100 ...</pre>\n"],["resume","DEBUGGER__","DEBUGGER__.html#method-c-resume","()",""],["resume","Fiber","Fiber.html#method-i-resume","(*args)","<p>Resumes the fiber from the point at which the last <code>Fiber.yield</code>\nwas called, or starts running it if it …\n"],["retrbinary","Net::FTP","Net/FTP.html#method-i-retrbinary","(cmd, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given command, and\nfetches the data returned, …\n"],["retrlines","Net::FTP","Net/FTP.html#method-i-retrlines","(cmd)","<p>Puts the connection into ASCII (text) mode, issues the given command, and\npasses the resulting data, …\n"],["return_headers?","CSV","CSV.html#method-i-return_headers-3F","()","<p>Returns <code>true</code> if headers will be returned as a row of results.\nSee CSV::new for details.\n"],["return_type","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-return_type","()","<p>Returns string of return value type of method.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["return_type_detail","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-return_type_detail","()","<p>Returns detail information of return value type of method. The information\nis array.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["return_value","TracePoint","TracePoint.html#method-i-return_value","()","<p>Return value from <code>:return</code>, <code>c_return</code>, and\n<code>b_return</code> event\n"],["return_vtype","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-return_vtype","()","<p>Returns number of return value type of method.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["retval?","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-retval-3F","()","<p>Returns true if argument is return value.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;DirectX 7 for Visual Basic Type Library&#39;, ...</pre>\n"],["reverse","Array","Array.html#method-i-reverse","()","<p>Returns a new array containing <code>self</code>&#39;s elements in reverse\norder.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ].<span class=\"ruby-identifier\">reverse</span>   <span class=\"ruby-comment\">#=&gt; [&quot;c&quot;, ...</span>\n</pre>\n"],["reverse","IPAddr","IPAddr.html#method-i-reverse","()","<p>Returns a string for DNS reverse lookup.  It returns a string in RFC3172\nform for an IPv6 address.\n"],["reverse","String","String.html#method-i-reverse","()","<p>Returns a new string with the characters from <em>str</em> in reverse\norder.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;stressed&quot;</span>.<span class=\"ruby-identifier\">reverse</span>   <span class=\"ruby-comment\">#=&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse!","Array","Array.html#method-i-reverse-21","()","<p>Reverses <code>self</code> in place.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse!</span>       <span class=\"ruby-comment\">#=&gt; [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span>\n<span class=\"ruby-identifier\">a</span>                <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["reverse!","String","String.html#method-i-reverse-21","()","<p>Reverses <em>str</em> in place.\n"],["reverse_each","Array","Array.html#method-i-reverse_each","()","<p>Same as Array#each, but traverses <code>self</code> in reverse order.\n\n<pre>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.reverse_each {|x| print ...</pre>\n"],["reverse_each","Enumerable","Enumerable.html#method-i-reverse_each","(*args)","<p>Builds a temporary array and traverses that array in reverse order.\n<p>If no block is given, an enumerator …\n"],["reverse_each","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-reverse_each","()","<p>@!visibility private Enumerates each action in the log in reverse order\n@yield [Action]\n"],["revive","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-revive","(klass, node)",""],["revive_hash","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-revive_hash","(hash, o)",""],["revocation_reason","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-revocation_reason","()",""],["revocation_time","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-revocation_time","()",""],["revoked","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-revoked","()",""],["revoked=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-revoked-3D","(p1)",""],["rewind","ARGF","ARGF.html#method-i-rewind","()","<p>Positions the current file to the beginning of input, resetting\n<code>ARGF.lineno</code> to zero.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">readline</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["rewind","CSV","CSV.html#method-i-rewind","()","<p>Rewinds the underlying IO object and resets CSV&#39;s lineno() counter.\n"],["rewind","Dir","Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>     <span class=\"ruby-comment\">#=&gt; &quot;.&quot;</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">rewind</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3fb0&gt; ...</span>\n</pre>\n"],["rewind","Enumerator","Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence to the beginning.\n<p>If the enclosed object responds to a “rewind” …\n"],["rewind","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-rewind","()","<p>NOTE: Do not call #rewind during #each\n"],["rewind","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-rewind","()","<p>Rewinds to the beginning of the tar file entry\n"],["rewind","IO","IO.html#method-i-rewind","()","<p>Positions <em>ios</em> to the beginning of input, resetting\n<code>lineno</code> to zero.\n\n<pre>f = File.new(&quot;testfile&quot;)\nf.readline ...</pre>\n"],["rewind","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-i-rewind","()",""],["rewind","Prime::Generator23","Prime/Generator23.html#method-i-rewind","()",""],["rewind","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-rewind","()","<p>Rewinds the internal position for enumeration.\n<p>See <code>Enumerator</code>#rewind.\n"],["rewind","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-i-rewind","()",""],["rewind","REXML::Parsers::LightParser","REXML/Parsers/LightParser.html#method-i-rewind","()",""],["rewind","REXML::Parsers::UltraLightParser","REXML/Parsers/UltraLightParser.html#method-i-rewind","()",""],["rewind","StringIO","StringIO.html#method-i-rewind","()","<p>Positions <strong>strio</strong> to the beginning of input, resetting\n<code>lineno</code> to zero.\n"],["rewind","Zlib::GzipReader","Zlib/GzipReader.html#method-i-rewind","()","<p>Resets the position of the file pointer to the point created the GzipReader\nobject.  The associated  …\n"],["rewind_to","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-rewind_to","(tag)","<p>Rewinds the graph to the state tagged as `tag` @param  [Object] tag the tag\nto rewind to @return [Void] …\n"],["rewind_to","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-rewind_to","(graph, tag)","<p>@macro action\n"],["rfc1123_date","CGI::Util","CGI/Util.html#method-i-rfc1123_date","(time)","<p>Format a <code>Time</code> object as a String using the format specified by\nRFC 1123.\n\n<pre>CGI::rfc1123_date(Time.now)\n ...</pre>\n"],["rfc2822","Date","Date.html#method-c-rfc2822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre>Date.rfc2822(&#39;Sat, ...</pre>\n"],["rfc2822","Date","Date.html#method-i-rfc2822","()","<p>This method is equivalent to strftime(&#39;%a, %-d %b %Y %T %z&#39;).\n"],["rfc2822","DateTime","DateTime.html#method-c-rfc2822","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre>DateTime.rfc2822(&#39;Sat, ...</pre>\n"],["rfc2822","Time","Time.html#method-c-rfc2822","(date)","<p>Parses <code>date</code> as date-time defined by RFC 2822 and converts it\nto a Time object.  The format is identical …\n"],["rfc2822","Time","Time.html#method-i-rfc2822","()","<p>Returns a string which represents the time as date-time defined by RFC\n2822:\n\n<pre>day-of-week, DD month-name ...</pre>\n"],["rfc3339","Date","Date.html#method-i-rfc3339","()","<p>This method is equivalent to strftime(&#39;%FT%T%:z&#39;).\n"],["rfc3339","Date","Date.html#method-c-rfc3339","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 3339 formats.\n\n<pre>Date.rfc3339(&#39;2001-02-03T04:05:06+07:00&#39;) ...</pre>\n"],["rfc3339","DateTime","DateTime.html#method-i-rfc3339","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T&#39;).  The optional\nargument n is length of fractional …\n"],["rfc3339","DateTime","DateTime.html#method-c-rfc3339","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical RFC 3339 formats.\n\n<pre>DateTime.rfc3339(&#39;2001-02-03T04:05:06+07:00&#39;) ...</pre>\n"],["rfc822","Date","Date.html#method-c-rfc822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre>Date.rfc2822(&#39;Sat, ...</pre>\n"],["rfc822","Date","Date.html#method-i-rfc822","()","<p>This method is equivalent to strftime(&#39;%a, %-d %b %Y %T %z&#39;).\n"],["rfc822","DateTime","DateTime.html#method-c-rfc822","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre>DateTime.rfc2822(&#39;Sat, ...</pre>\n"],["rfc822","Time","Time.html#method-i-rfc822","()",""],["rfc822","Time","Time.html#method-c-rfc822","(date)",""],["ri_dir","Gem::Specification","Gem/Specification.html#method-i-ri_dir","()","<p>Returns the full path to this spec&#39;s ri directory.\n"],["ri_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_installed?","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_paths","RDoc::Servlet","RDoc/Servlet.html#method-i-ri_paths","(&block)","<p>Enumerates the ri paths.  See RDoc::RI::Paths#each\n"],["rid","Process::GID","Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["rid","Process::UID","Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["rindex","Array","Array.html#method-i-rindex","(*args)","<p>Returns the <em>index</em> of the last object in <code>self</code>\n<code>==</code> to <code>obj</code>.\n<p>If a block is given instead of an argument, returns …\n"],["rindex","String","String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the index of the last occurrence of the given <em>substring</em> or\npattern (<em>regexp</em>) in <em>str</em>. Returns  …\n"],["rjust","String","String.html#method-i-rjust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> right\njustified …\n"],["rm","FileUtils","FileUtils.html#method-c-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Remove file(s) specified in <code>list</code>.  This method cannot remove\ndirectories. All StandardErrors are ignored …\n"],["rm","FileUtils","FileUtils.html#method-i-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Remove file(s) specified in <code>list</code>.  This method cannot remove\ndirectories. All StandardErrors are ignored …\n"],["rm_f","FileUtils","FileUtils.html#method-i-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, :<span class=\"ruby-identifier\">force</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n"],["rm_f","FileUtils","FileUtils.html#method-c-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm</span>(<span class=\"ruby-identifier\">list</span>, :<span class=\"ruby-identifier\">force</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n"],["rm_r","FileUtils","FileUtils.html#method-i-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>remove files <code>list[0]</code> <code>list[1]</code>… If\n<code>list[n]</code> is a directory, removes its all contents recursively.\nThis …\n"],["rm_r","FileUtils","FileUtils.html#method-c-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>remove files <code>list[0]</code> <code>list[1]</code>… If\n<code>list[n]</code> is a directory, removes its all contents recursively.\nThis …\n"],["rm_rf","FileUtils","FileUtils.html#method-c-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, :<span class=\"ruby-identifier\">force</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n<p>WARNING: This method causes local vulnerability. Read …\n"],["rm_rf","FileUtils","FileUtils.html#method-i-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileUtils</span>.<span class=\"ruby-identifier\">rm_r</span>(<span class=\"ruby-identifier\">list</span>, :<span class=\"ruby-identifier\">force</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>)\n</pre>\n<p>WARNING: This method causes local vulnerability. Read …\n"],["rmdir","Dir","Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["rmdir","FileUtils","FileUtils.html#method-c-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes one or more directories.\n\n<pre>FileUtils.rmdir &#39;somedir&#39;\nFileUtils.rmdir %w(somedir anydir otherdir) ...</pre>\n"],["rmdir","FileUtils","FileUtils.html#method-i-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes one or more directories.\n\n<pre>FileUtils.rmdir &#39;somedir&#39;\nFileUtils.rmdir %w(somedir anydir otherdir) ...</pre>\n"],["rmdir","Net::FTP","Net/FTP.html#method-i-rmdir","(dirname)","<p>Removes a remote directory.\n"],["rmdir","Pathname","Pathname.html#method-i-rmdir","()","<p>Remove the referenced directory.\n<p>See Dir.rmdir.\n"],["rmdir","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-rmdir","(*path)","<p>Same as Dir.rmdir, except multiple directories are allowed.\n"],["rmtree","FileUtils","FileUtils.html#method-i-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","FileUtils","FileUtils.html#method-c-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","Pathname","Pathname.html#method-i-rmtree","()","<p>Recursively deletes a directory, including all directories beneath it.\n<p>See FileUtils.rm_r\n"],["root","Gem::Server","Gem/Server.html#method-i-root","(req, res)",""],["root","Psych::Nodes::Document","Psych/Nodes/Document.html#method-i-root","()","<p>Returns the root node.  A Document may only have one root node:\nyaml.org/spec/1.1/#id898031\n"],["root","RDoc::Servlet","RDoc/Servlet.html#method-i-root","(req, res)","<p>Generates the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["root","REXML::Document","REXML/Document.html#method-i-root","()","<p>@return the root Element of the document, or nil if this document has no\nchildren.\n"],["root","REXML::Element","REXML/Element.html#method-i-root","()",""],["root","REXML::Light::Node","REXML/Light/Node.html#method-i-root","()",""],["root?","PStore","PStore.html#method-i-root-3F","(name)","<p>Returns true if the supplied <em>name</em> is currently in the data store.\n<p><strong>WARNING</strong>:  This method is only valid …\n"],["root?","Pathname","Pathname.html#method-i-root-3F","()","<p>Predicate method for root directories.  Returns <code>true</code> if the\npathname consists of consecutive slashes. …\n"],["root_node","REXML::Element","REXML/Element.html#method-i-root_node","()","<p>Evaluates to the root node of the document that this element belongs to. If\nthis element doesn&#39;t …\n"],["root_search","RDoc::Servlet","RDoc/Servlet.html#method-i-root_search","(req, res)","<p>Generates a search index for the root page on <code>res</code>. \n<code>req</code> is ignored.\n"],["root_vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-root_vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the root vertex with the given\nname\n"],["roots","PStore","PStore.html#method-i-roots","()","<p>Returns the names of all object hierarchies currently in the store.\n<p><strong>WARNING</strong>:  This method is only valid …\n"],["rotate","Array","Array.html#method-i-rotate","(p1 = v1)","<p>Returns a new array by rotating <code>self</code> so that the element at\n<code>count</code> is the first element of the new array. …\n"],["rotate!","Array","Array.html#method-i-rotate-21","(p1 = v1)","<p>Rotates <code>self</code> in place so that the element at\n<code>count</code> comes first, and returns <code>self</code>.\n<p>If <code>count</code> is negative …\n"],["round","BigDecimal","BigDecimal.html#method-i-round","(p1 = v1, p2 = v2)","<p>Round to the nearest integer (by default), returning the result as a\nBigDecimal.\n\n<pre>BigDecimal(&#39;3.14159&#39;).round ...</pre>\n"],["round","Float","Float.html#method-i-round","(p1 = v1, p2 = {})","<p>Rounds <code>float</code> to a given precision in decimal digits (default 0\ndigits).\n<p>Precision may be negative.  Returns …\n"],["round","Integer","Integer.html#method-i-round","(p1 = v1, p2 = {})","<p>Rounds <code>int</code> to a given precision in decimal digits (default 0\ndigits).\n<p>Precision may be negative.  Returns …\n"],["round","Integer","Integer.html#method-i-round","(p1 = v1, p2 = {})","<p>Rounds <code>int</code> to a given precision in decimal digits (default 0\ndigits).\n<p>Precision may be negative.  Returns …\n"],["round","Matrix","Matrix.html#method-i-round","(ndigits=0)","<p>Returns a matrix with entries rounded to the given precision (see\nFloat#round)\n"],["round","Numeric","Numeric.html#method-i-round","(*args)","<p>Rounds <code>num</code> to a given precision in decimal digits (default 0\ndigits).\n<p>Precision may be negative.  Returns …\n"],["round","REXML::Functions","REXML/Functions.html#method-c-round","( number )",""],["round","Rational","Rational.html#method-i-round","(*args, p2 = {})","<p>Returns the truncated value (toward the nearest integer; 0.5 =&gt; 1; -0.5\n=&gt; -1).\n\n<pre>Rational(3).round ...</pre>\n"],["round","Time","Time.html#method-i-round","(p1 = v1)","<p>Rounds sub seconds to a given precision in decimal digits (0 digits by\ndefault). It returns a new Time …\n"],["round","Vector","Vector.html#method-i-round","(ndigits=0)","<p>Returns a vector with entries rounded to the given precision (see\nFloat#round)\n"],["route_from","URI::Generic","URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["route_to","URI::Generic","URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["row","Matrix","Matrix.html#method-i-row","(i)","<p>Returns row vector number <code>i</code> of the matrix as a Vector\n(starting at 0 like an array).  When a block is …\n"],["row_count","Matrix","Matrix.html#method-i-row_count","()","<p>Returns the number of rows.\n"],["row_size","Matrix","Matrix.html#method-i-row_size","()",""],["row_vector","Matrix","Matrix.html#method-c-row_vector","(row)","<p>Creates a single-row matrix where the values of that row are as given in\n<code>row</code>.\n\n<pre>Matrix.row_vector([4,5,6]) ...</pre>\n"],["row_vectors","Matrix","Matrix.html#method-i-row_vectors","()","<p>Returns an array of the row vectors of the matrix.  See Vector.\n"],["rows","Matrix","Matrix.html#method-c-rows","(rows, copy = true)","<p>Creates a matrix where <code>rows</code> is an array of arrays, each of\nwhich is a row of the matrix.  If the optional …\n"],["rpartition","String","String.html#method-i-rpartition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string from the\nend of the string, and returns the part before …\n"],["rset","Net::SMTP","Net/SMTP.html#method-i-rset","()","<p>Aborts the current mail transaction\n"],["rshift!","OpenSSL::BN","OpenSSL/BN.html#method-i-rshift-21","(p1)",""],["rsqrt","Math","Math.html#method-c-rsqrt","(a)","<p>Compute square root of a non negative number. This method is internally\nused by <code>Math.sqrt</code>.\n"],["rsqrt","Math","Math.html#method-i-rsqrt","(a)","<p>Compute square root of a non negative number. This method is internally\nused by <code>Math.sqrt</code>.\n"],["rss","RSS::BaseParser","RSS/BaseParser.html#method-i-rss","()",""],["rstrip","String","String.html#method-i-rstrip","()","<p>Returns a copy of <em>str</em> with trailing whitespace removed. See also\n<code>String#lstrip</code> and <code>String#strip</code>.\n<p>Refer …\n"],["rstrip!","String","String.html#method-i-rstrip-21","()","<p>Removes trailing whitespace from <em>str</em>, returning <code>nil</code>\nif no change was made. See also <code>String#lstrip!</code> and …\n"],["ruby","Gem","Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-ruby","(version, options = {})","<p>Restricts this gem dependencies file to the given ruby\n<code>version</code>.\n<p>You may also provide <code>engine:</code> and <code>engine_version:</code>\n…\n"],["ruby=","Gem","Gem.html#method-c-ruby-3D","(ruby)","<p>Allows setting path to Ruby.  This method is available when requiring\n&#39;rubygems/test_case&#39;\n"],["ruby_api_version","Gem","Gem.html#method-c-ruby_api_version","()","<p>Returns a String containing the API compatibility version of Ruby\n"],["ruby_code","Gem::Specification","Gem/Specification.html#method-i-ruby_code","(obj)","<p>Return a string containing a Ruby code representation of the given object.\n"],["ruby_engine","Gem","Gem.html#method-c-ruby_engine","()","<p>A wrapper around RUBY_ENGINE const that may not be defined\n"],["ruby_version","Gem","Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running Ruby.\n"],["rubybin","Gem::TestCase","Gem/TestCase.html#method-c-rubybin","()","<p>Finds the path to the Ruby executable\n"],["rubygems_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key","()","<p>Returns the RubyGems.org API key\n"],["rubygems_api_key=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key-3D","(api_key)","<p>Sets the RubyGems.org API key to <code>api_key</code>\n"],["rubygems_api_request","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-rubygems_api_request","(method, path, host = nil, allowed_push_host = nil, &block)","<p>Creates an RubyGems API to <code>host</code> and <code>path</code> with the\ngiven HTTP <code>method</code>.\n<p>If <code>allowed_push_host</code> metadata is …\n"],["rubygems_target_version","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-rubygems_target_version","()",""],["rubygems_version","Gem","Gem.html#method-c-rubygems_version","()","<p>A Gem::Version for the currently running RubyGems\n"],["rule","RDoc::TestCase","RDoc/TestCase.html#method-i-rule","(weight)","<p>Shortcut for RDoc::Markup::Rule.new with <code>weight</code>\n"],["run","DRb::DRbServer","DRb/DRbServer.html#method-i-run","()","<p>Starts the DRb main loop in a new thread.\n"],["run","ERB","ERB.html#method-i-run","(b=new_toplevel)","<p>Generate results and print them. (see ERB#result)\n"],["run","Gem::CommandManager","Gem/CommandManager.html#method-i-run","(args, build_args=nil)","<p>Run the command specified by <code>args</code>.\n"],["run","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-run","(command, results, command_name = nil)",""],["run","Gem::GemRunner","Gem/GemRunner.html#method-i-run","(args)","<p>Run the gem command with the following arguments.\n"],["run","Gem::Server","Gem/Server.html#method-i-run","()",""],["run","Gem::Server","Gem/Server.html#method-c-run","(options)",""],["run","IRB::Irb","IRB/Irb.html#method-i-run","(conf = IRB.conf)",""],["run","Thread","Thread.html#method-i-run","()","<p>Wakes up <code>thr</code>, making it eligible for scheduling.\n\n<pre>a = Thread.new { puts &quot;a&quot;; Thread.stop; puts &quot;c&quot; }\nsleep ...</pre>\n"],["run","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-run","(sock)","<p>You must subclass GenericServer and implement #run which accepts a TCP\nclient socket\n"],["run","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-run","(sock)","<p>Processes requests on <code>sock</code>\n"],["run_config","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-run_config","()","<p>include run file.\n"],["runtime?","Gem::Dependency","Gem/Dependency.html#method-i-runtime-3F","()",""],["runtime_dependencies","Gem::Specification","Gem/Specification.html#method-i-runtime_dependencies","()","<p>List of dependencies that will automatically be activated at runtime.\n"],["s3_expiration","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-s3_expiration","()",""],["safe_level","Thread","Thread.html#method-i-safe_level","()","<p>Returns the safe level in effect for <em>thr</em>. Setting thread-local\nsafe levels can help when implementing …\n"],["safe_load","Psych","Psych.html#method-c-safe_load","(yaml, whitelist_classes = [], whitelist_symbols = [], aliases = false, filename = nil)","<p>Safely load the yaml string in <code>yaml</code>.  By default, only the\nfollowing classes are allowed to be deserialized: …\n"],["safe_unlink","FileUtils","FileUtils.html#method-c-safe_unlink","(list, noop: nil, verbose: nil)",""],["safe_unlink","FileUtils","FileUtils.html#method-i-safe_unlink","(list, noop: nil, verbose: nil)",""],["same_attributes?","Gem::Specification","Gem/Specification.html#method-i-same_attributes-3F","(spec)","<p>True if this gem has the same attributes as <code>other</code>.\n"],["same_feed_type?","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-same_feed_type-3F","(type)",""],["sample","Array","Array.html#method-i-sample","(p1)","<p>Choose a random element or <code>n</code> random elements from the array.\n<p>The elements are chosen by using random and …\n"],["sanitize","Gem::Specification","Gem/Specification.html#method-i-sanitize","()","<p>Sanitize the descriptive fields in the spec.  Sometimes non-ASCII\ncharacters will garble the site index. …\n"],["sanitize_path","RDoc::Options","RDoc/Options.html#method-i-sanitize_path","(path)","<p>Removes directories from <code>path</code> that are outside the current\ndirectory\n"],["sanitize_string","Gem::Specification","Gem/Specification.html#method-i-sanitize_string","(string)","<p>Sanitize a single string.\n"],["satisfied_by?","Gem::Requirement","Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfies_requirement?","Gem::Specification","Gem/Specification.html#method-i-satisfies_requirement-3F","(dependency)","<p>Checks if this specification meets the requirement of\n<code>dependency</code>.\n"],["saturday?","Date","Date.html#method-i-saturday-3F","()","<p>Returns true if the date is Saturday.\n"],["saturday?","Time","Time.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Saturday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2006</span>, <span class=\"ruby-value\">6</span>, <span class=\"ruby-value\">10</span>)      <span class=\"ruby-comment\">#=&gt; 2006-06-10 00:00:00 -0500 ...</span>\n</pre>\n"],["save","RDoc::Store","RDoc/Store.html#method-i-save","()","<p>Saves all entries in the store\n"],["save_cache","RDoc::Store","RDoc/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::Store","RDoc/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code> (or module)\n"],["save_data","PStore","PStore.html#method-i-save_data","(original_checksum, original_file_size, file)",""],["save_data_with_atomic_file_rename_strategy","PStore","PStore.html#method-i-save_data_with_atomic_file_rename_strategy","(data, file)",""],["save_data_with_fast_strategy","PStore","PStore.html#method-i-save_data_with_fast_strategy","(data, file)",""],["save_exception_mode","BigDecimal","BigDecimal.html#method-c-save_exception_mode","()","<p>Execute the provided block, but preserve the exception mode\n\n<pre>BigDecimal.save_exception_mode do\n  BigDecimal.mode(BigDecimal::EXCEPTION_OVERFLOW, ...</pre>\n"],["save_gemspec","Gem::TestCase","Gem/TestCase.html#method-i-save_gemspec","(name = 'a', version = 1, directory = '.')","<p>create_gemspec creates gem specification in given <code>directory</code> or\n&#39;.&#39; for the given <code>name</code> and <code>version</code> …\n"],["save_history","IRB::Context","IRB/Context.html#method-i-save_history","()","<p>A copy of the default <code>IRB.conf[:SAVE_HISTORY]</code>\n"],["save_history=","IRB::Context","IRB/Context.html#method-i-save_history-3D","(val)","<p>Sets <code>IRB.conf[:SAVE_HISTORY]</code> to the given <code>val</code> and\ncalls #init_save_history with this context.\n<p>Will store …\n"],["save_limit","BigDecimal","BigDecimal.html#method-c-save_limit","()","<p>Execute the provided block, but preserve the precision limit\n\n<pre>BigDecimal.limit(100)\nputs BigDecimal.limit ...</pre>\n"],["save_loaded_features","Gem::TestCase","Gem/TestCase.html#method-i-save_loaded_features","()",""],["save_method","RDoc::Store","RDoc/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["save_page","RDoc::Store","RDoc/Store.html#method-i-save_page","(page)","<p>Writes the ri data for <code>page</code>\n"],["save_rounding_mode","BigDecimal","BigDecimal.html#method-c-save_rounding_mode","()","<p>Execute the provided block, but preserve the rounding mode\n\n<pre>BigDecimal.save_rounding_mode do\n  BigDecimal.mode(BigDecimal::ROUND_MODE, ...</pre>\n"],["say","Gem::StreamUI","Gem/StreamUI.html#method-i-say","(statement=\"\")","<p>Display a statement.\n"],["say","Gem::UserInteraction","Gem/UserInteraction.html#method-i-say","(statement = '')","<p>Displays the given <code>statement</code> on the standard output (or\nequivalent).\n"],["scalar","Matrix","Matrix.html#method-c-scalar","(n, value)","<p>Creates an <code>n</code> by <code>n</code> diagonal matrix where each\ndiagonal element is <code>value</code>.\n\n<pre>Matrix.scalar(2, 5)\n  =&gt; 5 0\n ...</pre>\n"],["scalar","Psych::Coder","Psych/Coder.html#method-i-scalar","(*args)",""],["scalar","Psych::Handler","Psych/Handler.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)","<p>Called when a scalar <code>value</code> is found.  The scalar may have an\n<code>anchor</code>, a <code>tag</code>, be implicitly <code>plain</code>\nor implicitly …\n"],["scalar","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)",""],["scalar=","Psych::Coder","Psych/Coder.html#method-i-scalar-3D","(value)","<p>Emit a scalar with <code>value</code>\n"],["scan","OpenSSL::X509::Name::RFC2253DN","OpenSSL/X509/Name/RFC2253DN.html#method-i-scan","(dn)",""],["scan","REXML::IOSource","REXML/IOSource.html#method-i-scan","(pattern, cons=false)",""],["scan","REXML::Source","REXML/Source.html#method-i-scan","(pattern, cons=false)","<p>Scans the source for a given pattern.  Note, that this is not your usual\nscan() method.  For one thing, …\n"],["scan","String","String.html#method-i-scan","(p1)","<p>Both forms iterate through <em>str</em>, matching the pattern (which may be\na <code>Regexp</code> or a <code>String</code>). For each match, …\n"],["scan","StringScanner","StringScanner.html#method-i-scan","(p1)","<p>Tries to match with <code>pattern</code> at the current position. If\nthere&#39;s a match, the scanner advances the …\n"],["scan_full","StringScanner","StringScanner.html#method-i-scan_full","(p1, p2, p3)","<p>Tests whether the given <code>pattern</code> is matched from the current\nscan pointer. Advances the scan pointer if …\n"],["scan_make_command_lines","Gem::TestCase","Gem/TestCase.html#method-i-scan_make_command_lines","(output)",""],["scan_until","StringScanner","StringScanner.html#method-i-scan_until","(p1)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched. \nReturns the substring up to and including the end of …\n"],["scanf","IO","IO.html#method-i-scanf","(str)","<p>Scans the current string until the match is exhausted, yielding each match\nas it is encountered in the …\n"],["scanf","Kernel","Kernel.html#method-i-scanf","(format, &b)","<p>Scans STDIN for data matching <code>format</code>.  See IO#scanf for\ndetails.\n<p>See Scanf for details on creating a format …\n"],["scanf","String","String.html#method-i-scanf","(fstr)","<p>Scans the current string. If a block is given, it functions exactly like\nblock_scanf.\n\n<pre>arr = &quot;123 456&quot;.scanf(&quot;%d%d&quot;) ...</pre>\n"],["scheme=","URI::Generic","URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["scheme_list","URI","URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes\n"],["scope","URI::LDAP","URI/LDAP.html#method-i-scope","()","<p>returns scope.\n"],["scope=","URI::LDAP","URI/LDAP.html#method-i-scope-3D","(val)","<p>setter for scope <code>val</code>\n"],["scrolling_list","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-scrolling_list","(name = \"\", *values)",""],["scrub","String","String.html#method-i-scrub","(*args)","<p>If the string is invalid byte sequence then replace invalid bytes with\ngiven replacement character, else …\n"],["scrub!","String","String.html#method-i-scrub-21","(*args)","<p>If the string is invalid byte sequence then replace invalid bytes with\ngiven replacement character, else …\n"],["search","IRB::JobManager","IRB/JobManager.html#method-i-search","(key)","<p>Returns the associated job for the given <code>key</code>.\n<p>If given an Integer, it will return the <code>key</code> index for the …\n"],["search","Net::IMAP","Net/IMAP.html#method-i-search","(keys, charset = nil)","<p>Sends a SEARCH command to search the mailbox for messages that match the\ngiven searching criteria, and …\n"],["search","OptionParser","OptionParser.html#method-i-search","(id, key)","<p>Searches <code>key</code> in @stack for <code>id</code> hash and returns or\nyields the result.\n"],["search","OptionParser::List","OptionParser/List.html#method-i-search","(id, key)","<p>Searches <code>key</code> in <code>id</code> list. The result is returned\nor yielded if a block is given. If it isn&#39;t found, …\n"],["search_const","OptionParser","OptionParser.html#method-c-search_const","(klass, name)",""],["search_convpath","Encoding::Converter","Encoding/Converter.html#method-c-search_convpath","(*args)","<p>Returns a conversion path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">search_convpath</span>(<span class=\"ruby-string\">&quot;ISO-8859-1&quot;</span>, <span class=\"ruby-string\">&quot;EUC-JP&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; [[#&lt;Encoding:ISO-8859-1&gt;, ...</span>\n</pre>\n"],["search_file","IRB::Locale","IRB/Locale.html#method-i-search_file","(lib_paths, dir, file)","<p>@param paths load paths in which IRB find a localized file. @param dir\ndirectory @param file basename …\n"],["search_for","Gem::Resolver","Gem/Resolver.html#method-i-search_for","(dependency)",""],["search_for","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-search_for","(dependency)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#search_for)\n"],["search_for","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-search_for","(dependency)","<p>Search for the specifications that match the given dependency. The\nspecifications in the returned array …\n"],["search_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-search_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch gem name tuples that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms …\n"],["search_full","StringScanner","StringScanner.html#method-i-search_full","(p1, p2, p3)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched.\nAdvances the scan pointer if <code>advance_pointer_p</code>, otherwise …\n"],["search_internal","Net::IMAP","Net/IMAP.html#method-i-search_internal","(cmd, keys, charset)",""],["search_record","RDoc::ClassModule","RDoc/ClassModule.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_record","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-search_record","()","<p>Used by RDoc::Generator::JsonIndex to create a record for the search\nengine.\n"],["search_record","RDoc::TopLevel","RDoc/TopLevel.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_servlet","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-search_servlet","(path)","<p>Finds a servlet for <code>path</code>\n"],["searcher=","Gem","Gem.html#method-c-searcher-3D","(searcher)","<p>Allows setting the gem path searcher.  This method is available when\nrequiring &#39;rubygems/test_case&#39; …\n"],["sec","Date","Date.html#method-i-sec","()","<p>Returns the second (0-59).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">sec</span>          <span class=\"ruby-comment\">#=&gt; 6</span>\n</pre>\n"],["sec","Time","Time.html#method-i-sec","()","<p>Returns the second of the minute (0..60) for <em>time</em>.\n<p><strong>Note:</strong> Seconds range from zero to 60 to allow the system …\n"],["sec_fraction","Date","Date.html#method-i-sec_fraction","()","<p>Returns the fractional part of the second.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6.5</span>).<span class=\"ruby-identifier\">sec_fraction</span>       <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n"],["second","Date","Date.html#method-i-second","()","<p>Returns the second (0-59).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">sec</span>          <span class=\"ruby-comment\">#=&gt; 6</span>\n</pre>\n"],["second=","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-second-3D","(second)",""],["second=","RSS::Maker::ITunesItemModel::ITunesDurationBase","RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-second-3D","(second)",""],["second_fraction","Date","Date.html#method-i-second_fraction","()","<p>Returns the fractional part of the second.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>,<span class=\"ruby-value\">4</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6.5</span>).<span class=\"ruby-identifier\">sec_fraction</span>       <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n"],["section","RDoc::CodeObject","RDoc/CodeObject.html#method-i-section","()","<p>The section this CodeObject is in.  Sections allow grouping of constants,\nattributes and methods inside …\n"],["section_contents","RDoc::Context","RDoc/Context.html#method-i-section_contents","()","<p>Returns RDoc::Context::Section objects referenced in this context for use\nin a table of contents.\n"],["sections","OpenSSL::Config","OpenSSL/Config.html#method-i-sections","()","<p>Get the names of all sections in the current configuration\n"],["sections","RDoc::Context","RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["secure=","CGI::Cookie","CGI/Cookie.html#method-i-secure-3D","(val)","<p>Set whether the Cookie is a secure cookie or not.\n<p><code>val</code> must be a boolean.\n"],["security_level","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-security_level","()","<p>Returns the security level for the context.\n<p>See also OpenSSL::SSL::SSLContext#security_level=.\n"],["security_level=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-security_level-3D","(p1)","<p>Sets the security level for the context. OpenSSL limits parameters\naccording to the level. The “parameters” …\n"],["see","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has\nno documentation.\n<p>It can be …\n"],["seed","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-seed","()","<p>See the OpenSSL documentation for EC_GROUP_get0_seed()\n"],["seed","OpenSSL::Random","OpenSSL/Random.html#method-c-seed","(p1)","<p>::seed is equivalent to ::add where <code>entropy</code> is length of\n<code>str</code>.\n"],["seed","Random","Random.html#method-i-seed","()","<p>Returns the seed value used to initialize the generator. This may be used\nto initialize another generator …\n"],["seed=","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-seed-3D","(p1)","<p>See the OpenSSL documentation for EC_GROUP_set_seed()\n"],["seek","ARGF","ARGF.html#method-i-seek","(*args)","<p>Seeks to offset <em>amount</em> (an <code>Integer</code>) in the\n<code>ARGF</code> stream according to the value of <em>whence</em>. See\nIO#seek …\n"],["seek","Dir","Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a\nvalue returned by <code>Dir#tell</code>.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["seek","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-seek","(name)","<p>Seeks through the tar file until it finds the <code>entry</code> with\n<code>name</code> and yields it.  Rewinds the tar file to …\n"],["seek","IO","IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>anInteger</em> in the stream according to the\nvalue of <em>whence</em>:\n\n<pre>:CUR or IO::SEEK_CUR ...</pre>\n"],["seek","StringIO","StringIO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>amount</em> in the stream according to the\nvalue of <em>whence</em> (see IO#seek).\n"],["select","Array","Array.html#method-i-select","()","<p>Returns a new array containing all elements of <code>ary</code> for which\nthe given <code>block</code> returns a true value.\n<p>If …\n"],["select","DBM","DBM.html#method-i-select","()","<p>Returns a new array consisting of the [key, value] pairs for which the code\nblock returns true.\n"],["select","ENV","ENV.html#method-c-select","()","<p>Returns a copy of the environment for entries where the block returns true.\n<p>Returns an Enumerator if no …\n"],["select","Enumerable","Enumerable.html#method-i-select","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>If no …\n"],["select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-select","()",""],["select","GDBM","GDBM.html#method-i-select","()","<p>Returns a new array of all key-value pairs of the database for which\n<em>block</em> evaluates to true.\n"],["select","Hash","Hash.html#method-i-select","()","<p>Returns a new hash consisting of entries for which the block returns true.\n<p>If no block is given, an enumerator …\n"],["select","IO","IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of <code>IO</code>\nobjects, waits until one or more of <code>IO</code> objects …\n"],["select","Kernel","Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of <code>IO</code>\nobjects, waits until one or more of <code>IO</code> objects …\n"],["select","Net::IMAP","Net/IMAP.html#method-i-select","(mailbox)","<p>Sends a SELECT command to select a <code>mailbox</code> so that messages in\nthe <code>mailbox</code> can be accessed.\n<p>After you …\n"],["select","SDBM","SDBM.html#method-i-select","()","<p>Returns a new Array of key-value pairs for which the block returns\n<code>true</code>.\n<p>Example:\n\n<pre>require &#39;sdbm&#39;\n\nSDBM.open ...</pre>\n"],["select","Struct","Struct.html#method-i-select","(*args)","<p>Yields each member value from the struct to the block and returns an Array\ncontaining the member values …\n"],["select","URI::Generic","URI/Generic.html#method-i-select","(*components)","<p>Args\n<p>components &mdash; Multiple Symbol arguments defined in URI::HTTP\n\n<p>Description\n"],["select","YAML::DBM","YAML/DBM.html#method-i-select","( *keys )","<p>If a block is provided, returns a new array containing [key, value] pairs\nfor which the block returns …\n"],["select!","Array","Array.html#method-i-select-21","()","<p>Invokes the given block passing in successive elements from\n<code>self</code>, deleting elements for which the block …\n"],["select!","ENV","ENV.html#method-c-select-21","()","<p>Equivalent to ENV#keep_if but returns <code>nil</code> if no changes were\nmade.\n"],["select!","Hash","Hash.html#method-i-select-21","()","<p>Equivalent to <code>Hash#keep_if</code>, but returns <code>nil</code> if no\nchanges were made.\n"],["select!","Set","Set.html#method-i-select-21","(&block)","<p>Equivalent to Set#keep_if, but returns nil if no changes were made. Returns\nan enumerator if no block …\n"],["self","TracePoint","TracePoint.html#method-i-self","()","<p>Return the trace object during event\n<p>Same as TracePoint#binding:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trace</span>.<span class=\"ruby-identifier\">binding</span>.<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&#39;self&#39;</span>)\n</pre>\n"],["send","BasicSocket","BasicSocket.html#method-i-send","(p1, p2, p3 = v3)","<p>send <em>mesg</em> via <em>basicsocket</em>.\n<p><em>mesg</em> should be a string.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants. …\n"],["send","Object","Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["send","REXML::Functions","REXML/Functions.html#method-c-send","(name, *args)",""],["send","UDPSocket","UDPSocket.html#method-i-send","(p1, p2, p3, p4)","<p>Sends <em>mesg</em> via <em>udpsocket</em>.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants.\n\n<pre>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, ...</pre>\n"],["send_command","Net::IMAP","Net/IMAP.html#method-i-send_command","(cmd, *args, &block)",""],["send_data","Net::IMAP","Net/IMAP.html#method-i-send_data","(data)",""],["send_entity","Net::HTTP","Net/HTTP.html#method-i-send_entity","(path, data, initheader, dest, type, &block)","<p>Executes a request which uses a representation and returns its body.\n"],["send_gem","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_gem","(name)",""],["send_io","UNIXSocket","UNIXSocket.html#method-i-send_io","(p1)","<p>Sends <em>io</em> as file descriptor passing.\n\n<pre>s1, s2 = UNIXSocket.pair\n\ns1.send_io STDOUT\nstdout = s2.recv_io\n ...</pre>\n"],["send_list_data","Net::IMAP","Net/IMAP.html#method-i-send_list_data","(list)",""],["send_literal","Net::IMAP","Net/IMAP.html#method-i-send_literal","(str)",""],["send_mail","Net::SMTP","Net/SMTP.html#method-i-send_mail","(msgstr, from_addr, *to_addrs)",""],["send_message","Net::SMTP","Net/SMTP.html#method-i-send_message","(msgstr, from_addr, *to_addrs)","<p>Sends <code>msgstr</code> as a message.  Single CR (“r”) and LF (“n”) found\nin the <code>msgstr</code>, are …\n"],["send_number_data","Net::IMAP","Net/IMAP.html#method-i-send_number_data","(num)",""],["send_quoted_string","Net::IMAP","Net/IMAP.html#method-i-send_quoted_string","(str)",""],["send_request","Net::HTTP","Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if\n<code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["send_request_with_body","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body","(sock, ver, path, body)",""],["send_request_with_body_data","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body_data","(sock, ver, path, params)",""],["send_request_with_body_stream","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-send_request_with_body_stream","(sock, ver, path, f)",""],["send_string_data","Net::IMAP","Net/IMAP.html#method-i-send_string_data","(str)",""],["send_symbol_data","Net::IMAP","Net/IMAP.html#method-i-send_symbol_data","(symbol)",""],["send_time_data","Net::IMAP","Net/IMAP.html#method-i-send_time_data","(time)",""],["sendcmd","Net::FTP","Net/FTP.html#method-i-sendcmd","(cmd)","<p>Sends a command and returns the response.\n"],["sender","IRB::Frame","IRB/Frame.html#method-c-sender","()","<p>Returns the binding context of the caller from the last frame initialized\n"],["sendmail","Net::SMTP","Net/SMTP.html#method-i-sendmail","(msgstr, from_addr, *to_addrs)",""],["sendmsg","BasicSocket","BasicSocket.html#method-i-sendmsg","(mesg, flags = 0, dest_sockaddr = nil, *controls)","<p>sendmsg sends a message using sendmsg(2) system call in blocking manner.\n<p><em>mesg</em> is a string to send.\n<p><em>flags</em> …\n"],["sendmsg_nonblock","BasicSocket","BasicSocket.html#method-i-sendmsg_nonblock","(mesg, flags = 0, dest_sockaddr = nil, *controls, exception: true)","<p>sendmsg_nonblock sends a message using sendmsg(2) system call in\nnon-blocking manner.\n<p>It is similar to …\n"],["separator","OptionParser","OptionParser.html#method-i-separator","(string)","<p>Add separator in summary.\n"],["seplist","PP::PPMethods","PP/PPMethods.html#method-i-seplist","(list, sep=nil, iter_method=:each)","<p>Adds a separated list. The list is separated by comma with breakable space,\nby default.\n<p>#seplist iterates …\n"],["seq=","Psych::Coder","Psych/Coder.html#method-i-seq-3D","(list)","<p>Emit a sequence of <code>list</code>\n"],["serial","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-serial","()","<p>Returns the serial number of the certificate for which status is being\nrequested.\n"],["serial","OpenSSL::PKCS7::RecipientInfo","OpenSSL/PKCS7/RecipientInfo.html#method-i-serial","()",""],["serial","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-serial","()",""],["serial","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-serial","()",""],["serial","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-serial","()",""],["serial=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-serial-3D","(p1)",""],["serial=","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-serial-3D","(p1)",""],["server_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_error?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_name","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-server_name","()","<p>The server name this request is for\n"],["service","DRb::ExtServManager","DRb/ExtServManager.html#method-i-service","(name)",""],["service","WEBrick::CGI","WEBrick/CGI.html#method-i-service","(req, res)","<p>Services the request <code>req</code> which will fill in the response\n<code>res</code>.  See WEBrick::HTTPServlet::AbstractServlet#service …\n"],["service","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-service","(req, res)","<p>Services <code>req</code> and fills in <code>res</code>\n"],["service","WEBrick::HTTPServlet::AbstractServlet","WEBrick/HTTPServlet/AbstractServlet.html#method-i-service","(req, res)","<p>Dispatches to a <code>do_</code> method based on <code>req</code> if such a\nmethod is available.  (<code>do_GET</code> for a GET request).  …\n"],["session","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session","()","<p>Returns the SSLSession object currently used, or nil if the session is not\nestablished.\n"],["session=","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session-3D","(p1)","<p>Sets the Session to be used when the connection is established.\n"],["session_add","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_add","(p1)","<p>Adds <code>session</code> to the session cache.\n"],["session_cache_mode","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode","()","<p>The current session cache mode.\n"],["session_cache_mode=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode-3D","(p1)","<p>Sets the SSL session cache mode.  Bitwise-or together the desired\nSESSION_CACHE_* constants to set.  …\n"],["session_cache_size","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_size","()","<p>Returns the current session cache size.  Zero is used to represent an\nunlimited cache size.\n"],["session_cache_size=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_size-3D","(p1)","<p>Sets the session cache size.  Returns the previously valid session cache\nsize.  Zero is used to represent …\n"],["session_cache_stats","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_cache_stats","()","<p>Returns a Hash containing the following keys:\n<p>:accept &mdash; Number of started SSL/TLS handshakes in server mode …\n"],["session_get_cb","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session_get_cb","()",""],["session_new_cb","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session_new_cb","()",""],["session_remove","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-session_remove","(p1)","<p>Removes <code>session</code> from the session cache.\n"],["session_reused?","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-session_reused-3F","()","<p>Returns true if a reused session was negotiated during the handshake.\n"],["set","IPAddr","IPAddr.html#method-i-set","(addr, *family)","<p>Set +@addr+, the internal stored ip address, to given <code>addr</code>.\nThe parameter <code>addr</code> is validated using the …\n"],["set_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-set_api_key","(host, api_key)","<p>Set a specific host&#39;s API key to <code>api_key</code>\n"],["set_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-set_api_key","(host, key)",""],["set_attributes","URI::LDAP","URI/LDAP.html#method-i-set_attributes","(val)","<p>private setter for attributes <code>val</code>\n"],["set_backtrace","Exception","Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <code>exc</code>. The\n<code>backtrace</code> must be an array of String objects …\n"],["set_backtrace","OptionParser::ParseError","OptionParser/ParseError.html#method-i-set_backtrace","(array)",""],["set_bit!","OpenSSL::BN","OpenSSL/BN.html#method-i-set_bit-21","(p1)",""],["set_close_on_exec","WEBrick::Utils","WEBrick/Utils.html#method-c-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_close_on_exec","WEBrick::Utils","WEBrick/Utils.html#method-i-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_component","Matrix","Matrix.html#method-i-set_component","(i, j, v)",""],["set_component","Vector","Vector.html#method-i-set_component","(i, v)",""],["set_crt_params","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-set_crt_params","(p1, p2, p3)","<p>Sets <code>dmp1</code>, <code>dmq1</code>, <code>iqmp</code> for the RSA\ninstance. They are calculated by <code>d mod (p - 1)</code>, <code>d mod (q\n- 1)</code> and  …\n"],["set_ctypes","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-i-set_ctypes","(types)","<p>Calculates the offsets and sizes for the given <code>types</code> in the\nstruct.\n"],["set_ctypes","Fiddle::CUnionEntity","Fiddle/CUnionEntity.html#method-i-set_ctypes","(types)","<p>Calculate the necessary offset and for each union member with the given\n<code>types</code>\n"],["set_current_section","RDoc::Context","RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also\n#add_section\n"],["set_debug_output","Net::HTTP","Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never\nuse this method in production code.\n<p>Sets an output …\n"],["set_debug_output","Net::POP3","Net/POP3.html#method-i-set_debug_output","(arg)","<p><strong>WARNING</strong>: This method causes a serious security hole. Use\nthis method only for debugging.\n<p>Set an output …\n"],["set_debug_output","Net::SMTP","Net/SMTP.html#method-i-set_debug_output","(arg)",""],["set_default","OpenSSL::Engine","OpenSSL/Engine.html#method-i-set_default","(p1)","<p>Set the defaults for this engine with the given <code>flag</code>.\n<p>These flags are used to control combinations of …\n"],["set_default_paths","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-set_default_paths","()","<p>Configures <code>store</code> to look up CA certificates from the system\ndefault certificate store as needed basis. …\n"],["set_default_values","RSS::Maker::Base","RSS/Maker/Base.html#method-i-set_default_values","(&block)",""],["set_dev","Logger::LogDevice","Logger/LogDevice.html#method-i-set_dev","(log)",""],["set_dictionary","Zlib::Deflate","Zlib/Deflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>. This method is\navailable just only after Zlib::Deflate.new …\n"],["set_dictionary","Zlib::Inflate","Zlib/Inflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>.  This method is\navailable just only after a Zlib::NeedDict …\n"],["set_dn","URI::LDAP","URI/LDAP.html#method-i-set_dn","(val)","<p>private setter for dn <code>val</code>\n"],["set_element","Matrix","Matrix.html#method-i-set_element","(i, j, v)",""],["set_element","Vector","Vector.html#method-i-set_element","(i, v)",""],["set_encoding","ARGF","ARGF.html#method-i-set_encoding","(*args)","<p>If single argument is specified, strings read from ARGF are tagged with the\nencoding specified.\n<p>If two …\n"],["set_encoding","IO","IO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>If single argument is specified, read string from io is tagged with the\nencoding specified.  If encoding …\n"],["set_encoding","RDoc::Encoding","RDoc/Encoding.html#method-c-set_encoding","(string)","<p>Sets the encoding of <code>string</code> based on the magic comment\n"],["set_encoding","StringIO","StringIO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>Specify the encoding of the StringIO as <em>ext_enc</em>. Use the default\nexternal encoding if <em>ext_enc</em> is nil. …\n"],["set_eoutvar","ERB","ERB.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Can be used to set <em>eoutvar</em> as described in ERB::new.  It&#39;s\nprobably easier to just use the constructor …\n"],["set_eoutvar","RDoc::ERBIO","RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_eoutvar","RDoc::ERBPartial","RDoc/ERBPartial.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Overrides <code>compiler</code> startup to set the <code>eoutvar</code> to\nan empty string only if it isn&#39;t already set.\n"],["set_error","GetoptLong","GetoptLong.html#method-i-set_error","(type, message)","<p>Set an error (a protected method).\n"],["set_error","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-set_error","(ex, backtrace=false)","<p>Creates an error page for exception <code>ex</code> with an optional\n<code>backtrace</code>\n"],["set_extensions","URI::LDAP","URI/LDAP.html#method-i-set_extensions","(val)","<p>private setter for extensions <code>val</code>\n"],["set_factors","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-set_factors","(p1, p2)","<p>Sets <code>p</code>, <code>q</code> for the RSA instance.\n"],["set_filter","URI::LDAP","URI/LDAP.html#method-i-set_filter","(val)","<p>private setter for filter <code>val</code>\n"],["set_generator","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-set_generator","(p1, p2, p3)","<p>Sets the curve parameters. <code>generator</code> must be an instance of\nEC::Point that is on the curve. <code>order</code> and …\n"],["set_get_line_procs","Tracer","Tracer.html#method-c-set_get_line_procs","(file_name, p = proc)","<p>Register an event handler <code>p</code> which is called everytime a line\nin <code>file_name</code> is executed.\n<p>Example:\n\n<pre>Tracer.set_get_line_procs(&quot;example.rb&quot;, ...</pre>\n"],["set_headers","URI::MailTo","URI/MailTo.html#method-i-set_headers","(v)","<p>private setter for headers <code>v</code>\n"],["set_host","URI::Generic","URI/Generic.html#method-i-set_host","(v)","<p>protected setter for the host component <code>v</code>\n<p>see also URI::Generic.host=\n"],["set_key","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-set_key","(p1, p2)","<p>Sets <code>pub_key</code> and <code>priv_key</code> for the DH instance.\n<code>priv_key</code> may be nil.\n"],["set_key","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-set_key","(p1, p2)","<p>Sets <code>pub_key</code> and <code>priv_key</code> for the DSA instance.\n<code>priv_key</code> may be nil.\n"],["set_key","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-set_key","(p1, p2, p3)","<p>Sets <code>n</code>, <code>e</code>, <code>d</code> for the RSA instance.\n"],["set_last_thread","DEBUGGER__","DEBUGGER__.html#method-c-set_last_thread","(th)",""],["set_last_value","IRB::Context","IRB/Context.html#method-i-set_last_value","(value)","<p>Sets the return value from the last statement evaluated in this context to\n#last_value.\n"],["set_next_element","RSS::Element","RSS/Element.html#method-i-set_next_element","(tag_name, next_element)",""],["set_non_blocking","WEBrick::Utils","WEBrick/Utils.html#method-i-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_non_blocking","WEBrick::Utils","WEBrick/Utils.html#method-c-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_opaque","URI::Generic","URI/Generic.html#method-i-set_opaque","(v)","<p>protected setter for the opaque component <code>v</code>\n<p>see also URI::Generic.opaque=\n"],["set_option","OptionParser::ParseError","OptionParser/ParseError.html#method-i-set_option","(opt, eq)",""],["set_options","GetoptLong","GetoptLong.html#method-i-set_options","(*arguments)","<p>Set options. Takes the same argument as GetoptLong.new.\n<p>Raises a RuntimeError if option processing has …\n"],["set_params","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-set_params","(params={})","<p>Sets saner defaults optimized for the use with HTTP-like protocols.\n<p>If a Hash <code>params</code> is given, the parameters …\n"],["set_parent","RSS::Maker::Base","RSS/Maker/Base.html#method-i-set_parent","(target, parent)",""],["set_passwd","WEBrick::HTTPAuth::Htdigest","WEBrick/HTTPAuth/Htdigest.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::Htpasswd","WEBrick/HTTPAuth/Htpasswd.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::UserDB","WEBrick/HTTPAuth/UserDB.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in <code>realm</code> with <code>user</code> and\n<code>password</code> for the auth_type of this database.\n"],["set_password","URI::Generic","URI/Generic.html#method-i-set_password","(v)","<p>protected setter for the password component <code>v</code>\n<p>see also URI::Generic.password=\n"],["set_path","URI::FTP","URI/FTP.html#method-i-set_path","(v)","<p>Private setter for the path of the URI::FTP\n"],["set_path","URI::Generic","URI/Generic.html#method-i-set_path","(v)","<p>protected setter for the path component <code>v</code>\n<p>see also URI::Generic.path=\n"],["set_payload","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-set_payload","(name, payload)","<p>Sets the payload of the vertex with the given name @param [String] name the\nname of the vertex @param …\n"],["set_payload","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-set_payload","(graph, name, payload)","<p>@macro action\n"],["set_port","URI::Generic","URI/Generic.html#method-i-set_port","(v)","<p>protected setter for the port component <code>v</code>\n<p>see also URI::Generic.port=\n"],["set_pqg","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-set_pqg","(p1, p2, p3)","<p>Sets <code>p</code>, <code>q</code>, <code>g</code> for the DH instance.\n"],["set_pqg","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-set_pqg","(p1, p2, p3)","<p>Sets <code>p</code>, <code>q</code>, <code>g</code> for the DSA instance.\n"],["set_redirect","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-set_redirect","(status, url)","<p>Redirects to <code>url</code> with a WEBrick::HTTPStatus::Redirect\n<code>status</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">res</span>.<span class=\"ruby-identifier\">set_redirect</span> <span class=\"ruby-constant\">WEBrick</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HTTPStatus</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TemporaryRedirect</span>\n</pre>\n"],["set_scheme","URI::Generic","URI/Generic.html#method-i-set_scheme","(v)","<p>protected setter for the scheme component <code>v</code>\n<p>see also URI::Generic.scheme=\n"],["set_scope","URI::LDAP","URI/LDAP.html#method-i-set_scope","(val)","<p>private setter for scope <code>val</code>\n"],["set_screen_size","Readline","Readline.html#method-c-set_screen_size","(p1, p2)","<p>Set terminal size to <code>rows</code> and <code>columns</code>.\n<p>See GNU Readline&#39;s rl_set_screen_size function.\n<p>Raises NotImplementedError …\n"],["set_size","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-i-set_size","(new_value)",""],["set_socket","Net::FTP","Net/FTP.html#method-i-set_socket","(sock, get_greeting = true)","<p>Set the socket used to connect to the FTP server.\n<p>May raise FTPReplyError if <code>get_greeting</code> is false.\n"],["set_to","URI::MailTo","URI/MailTo.html#method-i-set_to","(v)","<p>private setter for to <code>v</code>\n"],["set_to_infinity!","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-set_to_infinity-21","()",""],["set_trace","DEBUGGER__","DEBUGGER__.html#method-c-set_trace","( arg )",""],["set_trace_func","Kernel","Kernel.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> as the handler for tracing, or disables tracing\nif the parameter is <code>nil</code>.\n<p><strong>Note:</strong> this method …\n"],["set_trace_func","Thread","Thread.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> on <em>thr</em> as the handler for tracing, or\ndisables tracing if the parameter is <code>nil</code>.\n<p>See  …\n"],["set_typecode","URI::FTP","URI/FTP.html#method-i-set_typecode","(v)","<p>Private setter for the typecode <code>v</code>\n<p>see also URI::FTP.typecode=\n"],["set_user","URI::Generic","URI/Generic.html#method-i-set_user","(v)","<p>protected setter for the user component <code>v</code>\n<p>see also URI::Generic.user=\n"],["set_userinfo","URI::Generic","URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>protect setter for the <code>user</code> component, and\n<code>password</code> if available. (with validation)\n<p>see also URI::Generic.userinfo= …\n"],["set_visibility_for","RDoc::Context","RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of\neach to <code>visibility</code>\n"],["set_xhtml_uri_as_default_uri","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-set_xhtml_uri_as_default_uri","(children)",""],["setacl","Net::IMAP","Net/IMAP.html#method-i-setacl","(mailbox, user, rights)","<p>Sends the SETACL command along with <code>mailbox</code>, <code>user</code>\nand the <code>rights</code> that user is to have on that mailbox. …\n"],["setbyte","String","String.html#method-i-setbyte","(p1, p2)","<p>modifies the <em>index</em>th byte as <em>integer</em>.\n"],["setegid","Process::Sys","Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>group</em>.  Not\navailable on all platforms.\n"],["seteuid","Process::Sys","Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>user</em>.  Not\navailable on all platforms.\n"],["setgid","Process::Sys","Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>group</em>. Not available on\nall platforms.\n"],["setgid?","File","File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n"],["setgid?","File::Stat","File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setgid?","FileTest","FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n"],["setgid?","Pathname","Pathname.html#method-i-setgid-3F","()","<p>See FileTest.setgid?.\n"],["setgrent","Etc","Etc.html#method-c-setgrent","()","<p>Resets the process of reading the /etc/group file, so that the next call to\n::getgrent will return the …\n"],["setpgid","Process","Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to\n<em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpriority","Process","Process.html#method-c-setpriority","(p1, p2, p3)","<p>See <code>Process#getpriority</code>.\n\n<pre>Process.setpriority(Process::PRIO_USER, 0, 19)      #=&gt; 0\nProcess.setpriority(Process::PRIO_PROCESS, ...</pre>\n"],["setproctitle","Process","Process.html#method-c-setproctitle","(p1)","<p>Sets the process title that appears on the ps(1) command.  Not necessarily\neffective on all platforms. …\n"],["setproperty","WIN32OLE","WIN32OLE.html#method-i-setproperty","(*args)","<p>Sets property of OLE object. When you want to set property with argument,\nyou can use this method.\n\n<pre>excel ...</pre>\n"],["setpwent","Etc","Etc.html#method-c-setpwent","()","<p>Resets the process of reading the /etc/passwd file, so that the next call\nto ::getpwent will return the …\n"],["setquota","Net::IMAP","Net/IMAP.html#method-i-setquota","(mailbox, quota)","<p>Sends a SETQUOTA command along with the specified <code>mailbox</code> and\n<code>quota</code>.  If <code>quota</code> is nil, then <code>quota</code>\nwill …\n"],["setregid","Process::Sys","Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (group) real and/or effective group IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (group) real, effective, and saved user IDs of the current process\nto <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (user) real, effective, and saved user IDs of the current process\nto <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (user) real and/or effective user IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively.  …\n"],["setrgid","Process::Sys","Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>group</em>. Not\navailable on all platforms.\n"],["setrlimit","Process","Process.html#method-c-setrlimit","(*args)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>user</em>. Not available\non all platforms.\n"],["setsid","Process","Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no\ncontrolling tty. Returns …\n"],["setsockopt","BasicSocket","BasicSocket.html#method-i-setsockopt","(p1, p2, p3)","<p>Sets a socket option. These are protocol and system specific, see your\nlocal system documentation for …\n"],["setsockopt","OpenSSL::SSL::SocketForwarder","OpenSSL/SSL/SocketForwarder.html#method-i-setsockopt","(level, optname, optval)",""],["setter","RSS::BaseListener","RSS/BaseListener.html#method-c-setter","(uri, tag_name)","<p>return the setter for the uri, tag_name pair, or nil.\n"],["setuid","Process::Sys","Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>user</em>. Not available on\nall platforms.\n"],["setuid?","File","File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n"],["setuid?","File::Stat","File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setuid?","FileTest","FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n"],["setuid?","Pathname","Pathname.html#method-i-setuid-3F","()","<p>See FileTest.setuid?.\n"],["setup","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-setup","()","<p>@gem &mdash; the path to a built gem from @spec\n<p>@user_spec &mdash; the path to a built gem from @user_spec\n<p>@installer &mdash; "],["setup","Gem::TestCase","Gem/TestCase.html#method-i-setup","()","<p>#setup prepares a sandboxed location to install gems.  All installs are\ndirected to a temporary directory. …\n"],["setup","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-setup","()","<p>This method is called automatically when a new SSLSocket is created.\nHowever, it is not thread-safe and …\n"],["setup","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup","RDoc::RubygemsHook","RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup","RDoc::TestCase","RDoc/TestCase.html#method-i-setup","()","<p>Abstract test-case setup\n"],["setup_certificate","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_certificate","()","<p>Ensures that :SSLCertificate and :SSLPrivateKey have been provided or that\na new certificate is generated …\n"],["setup_elements","RSS::Maker::Atom::Entry","RSS/Maker/Atom/Entry.html#method-i-setup_elements","(entry)",""],["setup_elements","RSS::Maker::Atom::Feed","RSS/Maker/Atom/Feed.html#method-i-setup_elements","(feed)",""],["setup_elements","RSS::Maker::RSS09","RSS/Maker/RSS09.html#method-i-setup_elements","(rss)",""],["setup_elements","RSS::Maker::RSS10","RSS/Maker/RSS10.html#method-i-setup_elements","(rss)",""],["setup_generator","RDoc::Options","RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_image","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-setup_image","(rss)",""],["setup_image","RSS::Maker::RSS10::Channel","RSS/Maker/RSS10/Channel.html#method-i-setup_image","(rss)",""],["setup_items","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-setup_items","(rss)",""],["setup_items","RSS::Maker::RSS10::Channel","RSS/Maker/RSS10/Channel.html#method-i-setup_items","(rss)",""],["setup_maker","RSS::Atom::Entry","RSS/Atom/Entry.html#method-i-setup_maker","(maker)","<p>Sets up the <code>maker</code> for constructing Entry elements.\n"],["setup_maker","RSS::RDF::Bag","RSS/RDF/Bag.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Bag","RSS/RDF/Bag.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Seq","RSS/RDF/Seq.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Seq","RSS/RDF/Seq.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::SetupMaker","RSS/SetupMaker.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::XMLStyleSheet","RSS/XMLStyleSheet.html#method-i-setup_maker","(maker)",""],["setup_maker_attributes","RSS::Atom::Feed::Generator","RSS/Atom/Feed/Generator.html#method-i-setup_maker_attributes","(target)",""],["setup_maker_attributes","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-i-setup_maker_attributes","(target)",""],["setup_maker_attributes","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-i-setup_maker_attributes","(category)",""],["setup_maker_attributes","RSS::ITunesChannelModel::ITunesImage","RSS/ITunesChannelModel/ITunesImage.html#method-i-setup_maker_attributes","(image)",""],["setup_maker_attributes","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-i-setup_maker_attributes","(favicon)",""],["setup_maker_attributes","RSS::ImageItemModel::ImageItem","RSS/ImageItemModel/ImageItem.html#method-i-setup_maker_attributes","(item)",""],["setup_maker_attributes","RSS::RDF::Channel","RSS/RDF/Channel.html#method-i-setup_maker_attributes","(channel)",""],["setup_maker_attributes","RSS::Rss::Channel::Item::Category","RSS/Rss/Channel/Item/Category.html#method-i-setup_maker_attributes","(category)",""],["setup_maker_attributes","RSS::Rss::Channel::Item::Enclosure","RSS/Rss/Channel/Item/Enclosure.html#method-i-setup_maker_attributes","(enclosure)",""],["setup_maker_attributes","RSS::Rss::Channel::Item::Guid","RSS/Rss/Channel/Item/Guid.html#method-i-setup_maker_attributes","(guid)",""],["setup_maker_attributes","RSS::Rss::Channel::Item::Source","RSS/Rss/Channel/Item/Source.html#method-i-setup_maker_attributes","(source)",""],["setup_maker_attributes","RSS::SetupMaker","RSS/SetupMaker.html#method-i-setup_maker_attributes","(target)",""],["setup_maker_element","RSS::Atom::ContentModel","RSS/Atom/ContentModel.html#method-i-setup_maker_element","(target)",""],["setup_maker_element","RSS::Atom::Feed","RSS/Atom/Feed.html#method-i-setup_maker_element","(channel)",""],["setup_maker_element","RSS::ITunesChannelModel::ITunesOwner","RSS/ITunesChannelModel/ITunesOwner.html#method-i-setup_maker_element","(owner)",""],["setup_maker_element","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-setup_maker_element","(duration)",""],["setup_maker_element","RSS::Rss::Channel::Item","RSS/Rss/Channel/Item.html#method-i-setup_maker_element","(item)",""],["setup_maker_element","RSS::SetupMaker","RSS/SetupMaker.html#method-i-setup_maker_element","(target)",""],["setup_maker_element_writer","RSS::Atom::ContentModel","RSS/Atom/ContentModel.html#method-i-setup_maker_element_writer","()",""],["setup_maker_element_writer","RSS::Atom::Feed::Logo","RSS/Atom/Feed/Logo.html#method-i-setup_maker_element_writer","()",""],["setup_maker_elements","RSS::Atom::Feed","RSS/Atom/Feed.html#method-i-setup_maker_elements","(channel)",""],["setup_maker_elements","RSS::ITunesChannelModel::ITunesCategory","RSS/ITunesChannelModel/ITunesCategory.html#method-i-setup_maker_elements","(category)",""],["setup_maker_elements","RSS::Rss","RSS/Rss.html#method-i-setup_maker_elements","(maker)",""],["setup_maker_elements","RSS::Rss::Channel","RSS/Rss/Channel.html#method-i-setup_maker_elements","(channel)",""],["setup_maker_elements","RSS::SetupMaker","RSS/SetupMaker.html#method-i-setup_maker_elements","(parent)",""],["setup_next_element","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-setup_next_element","(tag_name, klass, attributes)",""],["setup_next_element_in_unknown_element","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-setup_next_element_in_unknown_element","()",""],["setup_other_elements","RSS::Maker::Base","RSS/Maker/Base.html#method-i-setup_other_elements","(feed, current=nil)",""],["setup_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn&#39;t exist. If it does exist, but\ndoesn&#39;t contain the flag file …\n"],["setup_params","WEBrick::AccessLog","WEBrick/AccessLog.html#method-i-setup_params","(config, req, res)","<p>This format specification is a subset of mod_log_config of Apache:\n<p>%a &mdash; Remote IP address\n<p>%b &mdash; Total response …\n"],["setup_signer","Gem::Package","Gem/Package.html#method-i-setup_signer","()","<p>Prepares the gem for signing and checksum generation.  If a signing\ncertificate and key are not present …\n"],["setup_ssl_context","DRb::DRbSSLSocket::SSLConfig","DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_ssl_context","()","<p>Establish the OpenSSL::SSL::SSLContext with the configuration parameters\nprovided.\n"],["setup_textinput","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-setup_textinput","(rss)",""],["setup_textinput","RSS::Maker::RSS10::Channel","RSS/Maker/RSS10/Channel.html#method-i-setup_textinput","(rss)",""],["setup_values","RSS::Maker::Base","RSS/Maker/Base.html#method-i-setup_values","(target)",""],["sev_threshold=","Logger","Logger.html#method-i-sev_threshold-3D","(severity)",""],["sexp","Ripper","Ripper.html#method-c-sexp","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. Returns more readable tree\nrather than Ripper.sexp_raw …\n"],["sexp_raw","Ripper","Ripper.html#method-c-sexp_raw","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. This method is mainly for\ndeveloper use.\n\n<pre>require &#39;ripper&#39; ...</pre>\n\n"],["sfork","Shell::ProcessController","Shell/ProcessController.html#method-i-sfork","(command)","<p>simple fork\n"],["shallow_eql?","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-shallow_eql-3F","(other)","<p>@param  [Vertex] other the other vertex to compare to @return [Boolean]\nwhether the two vertices are …\n"],["shebang","Gem::Installer","Gem/Installer.html#method-i-shebang","(bin_file_name)","<p>Generates a #! line for <code>bin_file_name</code>&#39;s wrapper copying\narguments if necessary.\n<p>If the :custom_shebang …\n"],["shellescape","Shellwords","Shellwords.html#method-i-shellescape","(str)","<p>Escapes a string so that it can be safely used in a Bourne shell command\nline.  <code>str</code> can be a non-string …\n"],["shellescape","Shellwords","Shellwords.html#method-c-shellescape","(str)","<p>Escapes a string so that it can be safely used in a Bourne shell command\nline.  <code>str</code> can be a non-string …\n"],["shellescape","String","String.html#method-i-shellescape","()","<p>Escapes <code>str</code> so that it can be safely used in a Bourne shell\ncommand line.\n<p>See Shellwords.shellescape for …\n"],["shelljoin","Array","Array.html#method-i-shelljoin","()","<p>Builds a command line string from an argument list <code>array</code>\njoining all elements escaped for the Bourne …\n"],["shelljoin","Shellwords","Shellwords.html#method-c-shelljoin","(array)","<p>Builds a command line string from an argument list, <code>array</code>.\n<p>All elements are joined into a single string …\n"],["shelljoin","Shellwords","Shellwords.html#method-i-shelljoin","(array)","<p>Builds a command line string from an argument list, <code>array</code>.\n<p>All elements are joined into a single string …\n"],["shellsplit","Shellwords","Shellwords.html#method-c-shellsplit","(line)","<p>Splits a string into an array of tokens in the same way the UNIX Bourne\nshell does.\n\n<pre>argv = Shellwords.split(&#39;here ...</pre>\n"],["shellsplit","Shellwords","Shellwords.html#method-i-shellsplit","(line)","<p>Splits a string into an array of tokens in the same way the UNIX Bourne\nshell does.\n\n<pre>argv = Shellwords.split(&#39;here ...</pre>\n"],["shellsplit","String","String.html#method-i-shellsplit","()","<p>Splits <code>str</code> into an array of tokens in the same way the UNIX\nBourne shell does.\n<p>See Shellwords.shellsplit …\n"],["shellwords","Shellwords","Shellwords.html#method-c-shellwords","(line)",""],["shellwords","Shellwords","Shellwords.html#method-i-shellwords","(line)",""],["shift","Array","Array.html#method-i-shift","(*args)","<p>Removes the first element of <code>self</code> and returns it (shifting all\nother elements down by one). Returns  …\n"],["shift","CSV","CSV.html#method-i-shift","()","<p>The primary read method for wrapped Strings and IOs, a single row is pulled\nfrom the data source, parsed …\n"],["shift","DBM","DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the\ndatabase is empty, returns nil. …\n"],["shift","ENV","ENV.html#method-c-shift","()","<p>Removes an environment variable name-value pair from ENV and returns it as\nan Array.  Returns <code>nil</code> if …\n"],["shift","GDBM","GDBM.html#method-i-shift","()","<p>Removes a key-value-pair from this database and returns it as a two-item\narray [ <em>key</em>, <em>value</em> ]. Returns …\n"],["shift","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-shift","()",""],["shift","Hash","Hash.html#method-i-shift","()","<p>Removes a key-value pair from <em>hsh</em> and returns it as the two-item\narray <code>[</code> <em>key, value</em> <code>]</code>, or the hash&#39;s\n…\n"],["shift","Queue","Queue.html#method-i-shift","(*args)",""],["shift","SDBM","SDBM.html#method-i-shift","()","<p>Removes a key-value pair from the database and returns them as an Array. If\nthe database is empty, returns …\n"],["shift","SizedQueue","SizedQueue.html#method-i-shift","(*args)",""],["shift","YAML::DBM","YAML/DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the\ndatabase is empty, returns <code>nil</code> …\n"],["shift_log_age","Logger::LogDevice","Logger/LogDevice.html#method-i-shift_log_age","()",""],["shift_log_period","Logger::LogDevice","Logger/LogDevice.html#method-i-shift_log_period","(period_end)",""],["short_name","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-short_name","()",""],["show_documentation","RDoc::Servlet","RDoc/Servlet.html#method-i-show_documentation","(req, res)","<p>Displays documentation for <code>req</code> on <code>res</code>, whether\nthat be HTML or some asset.\n"],["show_files","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-show_files","(files)",""],["show_gems","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-show_gems","(name, prerelease)","<p>Guts of original execute\n"],["show_help","Gem::Command","Gem/Command.html#method-i-show_help","()","<p>Display the help message for the command.\n"],["show_lookup_failure","Gem::Command","Gem/Command.html#method-i-show_lookup_failure","(gem_name, version, errors, domain)","<p>Display to the user that a gem couldn&#39;t be found and reasons why\n"],["show_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-show_owners","(name)",""],["show_rdoc_for_pattern","Gem::Server","Gem/Server.html#method-i-show_rdoc_for_pattern","(pattern, res)","<p>Returns true and prepares http response, if rdoc for the requested gem name\npattern was found.\n<p>The search …\n"],["show_release_notes","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-show_release_notes","()",""],["show_version","OptionParser","OptionParser.html#method-c-show_version","(*pkgs)",""],["shuffle","Array","Array.html#method-i-shuffle","(*args)","<p>Returns a new array with elements of <code>self</code> shuffled.\n\n<pre>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle ...</pre>\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","(*args)","<p>Shuffles elements in <code>self</code> in place.\n\n<pre>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle!                ...</pre>\n"],["shutdown","BasicSocket","BasicSocket.html#method-i-shutdown","(p1 = v1)","<p>Calls shutdown(2) system call.\n<p>s.shutdown(Socket::SHUT_RD) disallows further read.\n<p>s.shutdown(Socket::SHUT_WR) …\n"],["shutdown","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-shutdown","(how=Socket::SHUT_RDWR)","<p>See BasicSocket#shutdown for details.\n"],["shutdown","Rinda::RingServer","Rinda/RingServer.html#method-i-shutdown","()","<p>Shuts down the RingServer\n"],["shutdown","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-shutdown","()","<p>Shuts down the server and all listening sockets.  New listeners must be\nprovided to restart the server. …\n"],["sid_available?","Process::GID","Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID\nfunctionality.\n"],["sid_available?","Process::UID","Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID\nfunctionality.\n"],["sign","BigDecimal","BigDecimal.html#method-i-sign","()","<p>Returns the sign of the value.\n<p>Returns a positive value if &gt; 0, a negative value if &lt; 0, and a zero\n…\n"],["sign","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-sign","(cert_file)",""],["sign","Gem::Security","Gem/Security.html#method-c-sign","(certificate, signing_key, signing_cert, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Sign the public key from <code>certificate</code> with the\n<code>signing_key</code> and <code>signing_cert</code>, using the\nGem::Security::DIGEST_ALGORITHM …\n"],["sign","Gem::Security::Signer","Gem/Security/Signer.html#method-i-sign","(data)","<p>Sign data with given digest algorithm\n"],["sign","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-sign","(p1, p2)","<p>Parameters\n<p><code>key</code> - the private key to be used for signing this instance\n<p><code>digest</code> - the digest to be used for …\n"],["sign","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4, p5 = v5)","<p>Signs this OCSP response using the <code>cert</code>, <code>key</code> and\noptional <code>digest</code>. This behaves in the similar way as …\n"],["sign","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4, p5 = v5)","<p>Signs this OCSP request using <code>cert</code>, <code>key</code> and\noptional <code>digest</code>. If <code>digest</code> is not specified,\nSHA-1 is used. …\n"],["sign","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-sign","(p1, p2, p3, p4 = v4, p5 = v5)",""],["sign","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-sign","(p1, p2)","<p>To sign the <code>String</code> <code>data</code>, <code>digest</code>, an\ninstance of OpenSSL::Digest, must be provided. The return value is …\n"],["sign","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-sign","(p1, p2)",""],["sign_in","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-sign_in","(sign_in_host = nil)","<p>Signs in with the RubyGems API at <code>sign_in_host</code> and sets the\nrubygems API key.\n"],["sign_s3_url","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-sign_s3_url","(uri, expiration = nil)","<p>we have our own signing code here to avoid a dependency on the aws-sdk gem\nfortunately, a simple GET …\n"],["signal","ConditionVariable","ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-signal","()",""],["signal_handle","IRB::Irb","IRB/Irb.html#method-i-signal_handle","()","<p>Handler for the signal SIGINT, see Kernel#trap for more information.\n"],["signal_status","IRB::Irb","IRB/Irb.html#method-i-signal_status","(status)","<p>Evaluates the given block using the given <code>status</code>.\n"],["signaled?","Process::Status","Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an\nuncaught signal.\n"],["signame","Signal","Signal.html#method-c-signame","(p1)","<p>Convert signal number to signal name. Returns <code>nil</code> if the signo\nis an invalid signal number.\n\n<pre>Signal.trap(&quot;INT&quot;) ...</pre>\n"],["signature","RDoc::TomDoc","RDoc/TomDoc.html#method-c-signature","(comment)","<p>Extracts the Signature section&#39;s method signature\n<p>comment &mdash; An RDoc::Comment that will be parsed and …\n\n"],["signature_algorithm","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-signature_algorithm","()",""],["signed_time","OpenSSL::PKCS7::SignerInfo","OpenSSL/PKCS7/SignerInfo.html#method-i-signed_time","()",""],["signers","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-signers","()",""],["signo","SignalException","SignalException.html#method-i-signo","()","<p>Returns a signal number.\n"],["silent_system","Gem::Util","Gem/Util.html#method-c-silent_system","(*command)","<p>Invokes system, but silences all output.\n"],["sin","BigMath","BigMath.html#method-i-sin","(x, prec)","<p>Computes the sine of <code>decimal</code> to the specified number of digits\nof precision, <code>numeric</code>.\n<p>If <code>decimal</code> is Infinity …\n"],["sin","CMath","CMath.html#method-i-sin","(z)","<p>Returns the sine of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">sin</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.2984575814159773+0.6349639147847361i)</span>\n</pre>\n"],["sin","CMath","CMath.html#method-c-sin","(z)","<p>Returns the sine of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">sin</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.2984575814159773+0.6349639147847361i)</span>\n</pre>\n"],["sin","Math","Math.html#method-c-sin","(p1)","<p>Computes the sine of <code>x</code> (expressed in radians). Returns a Float\nin the range -1.0..1.0.\n<p>Domain: (-INFINITY, …\n"],["single?","REXML::Validation::Event","REXML/Validation/Event.html#method-i-single-3F","()",""],["single_delegate","SingleForwardable","SingleForwardable.html#method-i-single_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols. \nThese symbols correspond …\n"],["singleline_format","PrettyPrint","PrettyPrint.html#method-c-singleline_format","(output=''.dup, maxwidth=nil, newline=nil, genspace=nil)","<p>This is similar to PrettyPrint::format but the result has no breaks.\n<p><code>maxwidth</code>, <code>newline</code> and <code>genspace</code> are …\n"],["singleline_pp","PP","PP.html#method-c-singleline_pp","(obj, out=$>)","<p>Outputs <code>obj</code> to <code>out</code> like PP.pp but with no indent\nand newline.\n<p>PP.singleline_pp returns <code>out</code>.\n"],["singleton_class","Object","Object.html#method-i-singleton_class","()","<p>Returns the singleton class of <em>obj</em>.  This method creates a new\nsingleton class if <em>obj</em> does not have one. …\n"],["singleton_class?","Module","Module.html#method-i-singleton_class-3F","()","<p>Returns <code>true</code> if <em>mod</em> is a singleton class or\n<code>false</code> if it is an ordinary class or module.\n\n<pre>class C\nend\nC.singleton_class? ...</pre>\n"],["singleton_method","Object","Object.html#method-i-singleton_method","(p1)","<p>Similar to <em>method</em>, searches singleton method only.\n\n<pre>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  ...</pre>\n"],["singleton_method_added","BasicObject","BasicObject.html#method-i-singleton_method_added","(p1)","<p>Invoked as a callback whenever a singleton method is added to the receiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_added(id) ...</pre>\n"],["singleton_method_added","Numeric","Numeric.html#method-i-singleton_method_added","(p1)","<p>Trap attempts to add methods to Numeric objects. Always raises a TypeError.\n<p>Numerics should be values; …\n"],["singleton_method_added","REXML::Functions","REXML/Functions.html#method-c-singleton_method_added","(name)",""],["singleton_method_removed","BasicObject","BasicObject.html#method-i-singleton_method_removed","(p1)","<p>Invoked as a callback whenever a singleton method is removed from the\nreceiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_removed(id) ...</pre>\n"],["singleton_method_undefined","BasicObject","BasicObject.html#method-i-singleton_method_undefined","(p1)","<p>Invoked as a callback whenever a singleton method is undefined in the\nreceiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_undefined(id) ...</pre>\n"],["singleton_methods","Object","Object.html#method-i-singleton_methods","(p1 = v1)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the\noptional <em>all</em> parameter is true, the ...\n"],["singular?","Matrix","Matrix.html#method-i-singular-3F","()","<p>Returns <code>true</code> if this is a singular matrix.\n"],["singular?","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-singular-3F","()","<p>Returns <code>true</code> if <code>U</code>, and hence <code>A</code>, is\nsingular.\n"],["sinh","CMath","CMath.html#method-i-sinh","(z)","<p>Returns the hyperbolic sine of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">sinh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.6349639147847361+1.2984575814159773i)</span>\n</pre>\n"],["sinh","CMath","CMath.html#method-c-sinh","(z)","<p>Returns the hyperbolic sine of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">sinh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.6349639147847361+1.2984575814159773i)</span>\n</pre>\n"],["sinh","Math","Math.html#method-c-sinh","(p1)","<p>Computes the hyperbolic sine of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, …\n"],["site","Net::FTP","Net/FTP.html#method-i-site","(arg)","<p>Issues a SITE command.\n"],["size","Array","Array.html#method-i-size","()",""],["size","DBM","DBM.html#method-i-size","()","<p>Returns the number of entries in the database.\n"],["size","Digest::Instance","Digest/Instance.html#method-i-size","()","<p>Returns digest_obj.digest_length().\n"],["size","ENV","ENV.html#method-c-size","()","<p>Returns the number of environment variables.\n"],["size","Enumerator","Enumerator.html#method-i-size","()","<p>Returns the size of the enumerator, or <code>nil</code> if it can&#39;t be\ncalculated lazily.\n\n<pre>(1..100).to_a.permutation(4).size ...</pre>\n"],["size","Fiddle::CStructEntity","Fiddle/CStructEntity.html#method-c-size","(types)","<p>Returns the offset for the packed sizes for the given <code>types</code>.\n\n<pre>Fiddle::CStructEntity.size(\n  [ Fiddle::TYPE_DOUBLE, ...</pre>\n"],["size","Fiddle::CUnionEntity","Fiddle/CUnionEntity.html#method-c-size","(types)","<p>Returns the size needed for the union with the given <code>types</code>.\n\n<pre>Fiddle::CUnionEntity.size(\n  [ Fiddle::TYPE_DOUBLE, ...</pre>\n"],["size","Fiddle::Pointer","Fiddle/Pointer.html#method-i-size","()","<p>Get the size of this pointer.\n"],["size","File","File.html#method-i-size","()","<p>Returns the size of <em>file</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","File","File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","File::Stat","File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","FileTest","FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","GDBM","GDBM.html#method-i-size","()","<p>Returns the number of key-value pairs in this database.\n"],["size","Gem::AvailableSet","Gem/AvailableSet.html#method-i-size","()",""],["size","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-size","()","<p>How many elements are in the list\n"],["size","Hash","Hash.html#method-i-size","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...</pre>\n"],["size","Integer","Integer.html#method-i-size","()","<p>Returns the number of bytes in the machine representation of\n<code>int</code>.\n\n<pre>1.size            #=&gt; 4\n-1.size     ...</pre>\n"],["size","Integer","Integer.html#method-i-size","()","<p>Returns the number of bytes in the machine representation of\n<code>int</code>.\n\n<pre>1.size            #=&gt; 4\n-1.size     ...</pre>\n"],["size","MatchData","MatchData.html#method-i-size","()","<p>Returns the number of elements in the match array.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</pre>\n"],["size","Net::FTP","Net/FTP.html#method-i-size","(filename)","<p>Returns the size of the given (remote) filename.\n"],["size","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-size","()",""],["size","Pathname","Pathname.html#method-i-size","()","<p>See FileTest.size.\n"],["size","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-size","()",""],["size","Queue","Queue.html#method-i-size","()",""],["size","REXML::Attributes","REXML/Attributes.html#method-i-size","()",""],["size","REXML::Elements","REXML/Elements.html#method-i-size","()","<p>Returns the number of <code>Element</code> children of the parent object.\n\n<pre>doc = Document.new &#39;&lt;a&gt;sean&lt;b/&gt;elliott&lt;b/&gt;russell&lt;b/&gt;&lt;/a&gt;&#39; ...</pre>\n"],["size","REXML::Light::Node","REXML/Light/Node.html#method-i-size","()",""],["size","REXML::Parent","REXML/Parent.html#method-i-size","()","<p>@return the number of children of this parent\n"],["size","REXML::SyncEnumerator","REXML/SyncEnumerator.html#method-i-size","()","<p>Returns the number of enumerated Enumerable objects, i.e. the size of each\nrow.\n"],["size","Range","Range.html#method-i-size","()","<p>Returns the number of elements in the range. Both the begin and the end of\nthe Range must be Numeric …\n"],["size","Rinda::Tuple","Rinda/Tuple.html#method-i-size","()","<p>The number of elements in the tuple.\n"],["size","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-size","()","<p>The size of the tuple.\n"],["size","SDBM","SDBM.html#method-i-size","()","<p>Returns the number of keys in the database.\n"],["size","Set","Set.html#method-i-size","()","<p>Returns the number of elements.\n"],["size","String","String.html#method-i-size","()","<p>Returns the character length of <em>str</em>.\n"],["size","StringIO","StringIO.html#method-i-size","()","<p>Returns the size of the buffer string.\n"],["size","Struct","Struct.html#method-i-size","()","<p>Returns the number of struct members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["size","Symbol","Symbol.html#method-i-size","()","<p>Same as <code>sym.to_s.length</code>.\n"],["size","Tempfile","Tempfile.html#method-i-size","()","<p>Returns the size of the temporary file.  As a side effect, the IO buffer is\nflushed before determining …\n"],["size","Vector","Vector.html#method-i-size","()","<p>Returns the number of elements in the vector.\n"],["size=","Fiddle::Pointer","Fiddle/Pointer.html#method-i-size-3D","(p1)","<p>Set the size of this pointer to <code>size</code>\n"],["size=","RSS::ImageFaviconModel::ImageFavicon","RSS/ImageFaviconModel/ImageFavicon.html#method-i-size-3D","(new_value)",""],["size?","File","File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","File::Stat","File/Stat.html#method-i-size-3F","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size?","FileTest","FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","Pathname","Pathname.html#method-i-size-3F","()","<p>See FileTest.size?.\n"],["size_opt_params","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-size_opt_params","()","<p>Returns the size of optional parameters.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["size_params","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-size_params","()","<p>Returns the size of arguments of the method.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["sizeof","Fiddle::Importer","Fiddle/Importer.html#method-i-sizeof","(ty)","<p>Returns the sizeof <code>ty</code>, using Fiddle::Importer.parse_ctype to\ndetermine the C type and the appropriate …\n"],["skip","ARGF","ARGF.html#method-i-skip","()","<p>Sets the current file to the next file in ARGV. If there aren&#39;t any\nmore files it has no effect. …\n"],["skip","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-skip","(type)",""],["skip","StringScanner","StringScanner.html#method-i-skip","(p1)","<p>Attempts to skip over the given <code>pattern</code> beginning with the\nscan pointer. If it matches, the scan pointer …\n"],["skip_blanks?","CSV","CSV.html#method-i-skip_blanks-3F","()","<p>Returns <code>true</code> blank lines are skipped by the parser. See\nCSV::new for details.\n"],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-i-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-c-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["skip_until","StringScanner","StringScanner.html#method-i-skip_until","(p1)","<p>Advances the scan pointer until <code>pattern</code> is matched and\nconsumed.  Returns the number of bytes advanced, …\n"],["sleep","Kernel","Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any\nnumber, including a <code>Float</code> with fractional …\n"],["sleep","Mutex_m","Mutex_m.html#method-i-sleep","(timeout = nil)","<p>See Mutex#sleep\n"],["sleep","Thread::Mutex","Thread/Mutex.html#method-i-sleep","(p1 = v1)","<p>Releases the lock and sleeps <code>timeout</code> seconds if it is given\nand non-nil or forever.  Raises <code>ThreadError</code> …\n"],["slice","Array","Array.html#method-i-slice","(p1, p2 = v2)","<p>Element Reference — Returns the element at <code>index</code>, or returns a\nsubarray starting at the <code>start</code> index …\n"],["slice","Ripper","Ripper.html#method-c-slice","(src, pattern, n = 0)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and return a string which was matched to\n<code>pattern</code>. <code>pattern</code> should be described …\n"],["slice","String","String.html#method-i-slice","(*args)","<p>Element Reference — If passed a single <code>index</code>, returns a\nsubstring of one character at that index.  …\n"],["slice","Symbol","Symbol.html#method-i-slice","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["slice!","Array","Array.html#method-i-slice-21","(p1, p2 = v2)","<p>Deletes the element(s) given by an <code>index</code> (optionally up to\n<code>length</code> elements) or by a <code>range</code>.\n<p>Returns the …\n"],["slice!","String","String.html#method-i-slice-21","(*args)","<p>Deletes the specified portion from <em>str</em>, and returns the portion\ndeleted.\n\n<pre>string = &quot;this is a string&quot;\nstring.slice!(2) ...</pre>\n"],["slice_after","Enumerable","Enumerable.html#method-i-slice_after","(p1)","<p>Creates an enumerator for each chunked elements. The ends of chunks are\ndefined by <em>pattern</em> and the block. …\n"],["slice_after","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_after","(*args)",""],["slice_before","Enumerable","Enumerable.html#method-i-slice_before","(p1)","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by <em>pattern</em> and …\n"],["slice_before","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_before","(*args)",""],["slice_when","Enumerable","Enumerable.html#method-i-slice_when","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by the block.\n<p>This …\n"],["slice_when","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_when","(*args)",""],["sn","OpenSSL::ASN1::ObjectId","OpenSSL/ASN1/ObjectId.html#method-i-sn","()","<p>The short name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["snippet","RDoc::Text","RDoc/Text.html#method-i-snippet","(text, limit = 100)","<p>The first <code>limit</code> characters of <code>text</code> as HTML\n"],["soak_up_spaces","IO","IO.html#method-i-soak_up_spaces","()",""],["sockaddr_in","Socket","Socket.html#method-c-sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_in</span>(<span class=\"ruby-value\">80</span>, <span class=\"ruby-string\">&quot;127.0.0.1&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...</span>\n</pre>\n"],["sockaddr_un","Socket","Socket.html#method-c-sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Socket</span>.<span class=\"ruby-identifier\">sockaddr_un</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>) <span class=\"ruby-comment\">#=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;</span>\n</pre>\n"],["socket?","File","File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n<p><em>file_name</em> can be an IO object.\n"],["socket?","File::Stat","File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t support …\n"],["socket?","FileTest","FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n<p><em>file_name</em> can be an IO object.\n"],["socket?","Pathname","Pathname.html#method-i-socket-3F","()","<p>See FileTest.socket?.\n"],["socketpair","Socket","Socket.html#method-c-socketpair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["socketpair","UNIXSocket","UNIXSocket.html#method-c-socketpair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected to each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, …\n"],["socktype","Addrinfo","Addrinfo.html#method-i-socktype","()","<p>returns the socket type as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-value\">80</span>).<span class=\"ruby-identifier\">socktype</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SOCK_STREAM</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["solve","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-solve","(b)","<p>Returns <code>m</code> so that <code>A*m = b</code>, or equivalently so\nthat <code>L*U*m = P*b</code> <code>b</code> can be a Matrix or a Vector\n"],["sort","Array","Array.html#method-i-sort","()","<p>Returns a new array created by sorting <code>self</code>.\n<p>Comparisons for the sort will be done using the <code>&lt;=&gt;</code> …\n"],["sort","Enumerable","Enumerable.html#method-i-sort","()","<p>Returns an array containing the items in <em>enum</em> sorted.\n<p>Comparisons for the sort will be done using the …\n"],["sort","Net::IMAP","Net/IMAP.html#method-i-sort","(sort_keys, search_keys, charset)","<p>Sends a SORT command to sort messages in the mailbox. Returns an array of\nmessage sequence numbers.  …\n"],["sort!","Array","Array.html#method-i-sort-21","()","<p>Sorts <code>self</code> in place.\n<p>Comparisons for the sort will be done using the <code>&lt;=&gt;</code>\noperator or using an optional …\n"],["sort_by","Enumerable","Enumerable.html#method-i-sort_by","()","<p>Sorts <em>enum</em> using a set of keys generated by mapping the values in\n<em>enum</em> through the given block.\n<p>The result …\n"],["sort_by!","Array","Array.html#method-i-sort_by-21","()","<p>Sorts <code>self</code> in place using a set of keys generated by mapping\nthe values in <code>self</code> through the given block. …\n"],["sort_by!","Gem::Specification","Gem/Specification.html#method-c-sort_by-21","(list, &block)",""],["sort_dependencies","Gem::Resolver","Gem/Resolver.html#method-i-sort_dependencies","(dependencies, activated, conflicts)",""],["sort_dependencies","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>(see Gem::Resolver::Molinillo::SpecificationProvider#sort_dependencies)\n"],["sort_dependencies","Gem::Resolver::Molinillo::SpecificationProvider","Gem/Resolver/Molinillo/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>Sort dependencies so that the ones that are easiest to resolve are first.\nEasiest to resolve is (usually) …\n"],["sort_if_need","RSS::Maker::ItemsBase","RSS/Maker/ItemsBase.html#method-i-sort_if_need","()",""],["sort_internal","Net::IMAP","Net/IMAP.html#method-i-sort_internal","(cmd, sort_keys, search_keys, charset)",""],["sort_obj","Gem::Specification","Gem/Specification.html#method-i-sort_obj","()","<p>Returns an object you can use to sort specifications in #sort_by.\n"],["sort_sections","RDoc::Context","RDoc/Context.html#method-i-sort_sections","()","<p>Sorts sections alphabetically (default) or in TomDoc fashion (none, Public,\nInternal, Deprecated)\n"],["sorted","Gem::AvailableSet","Gem/AvailableSet.html#method-i-sorted","()",""],["sorted_requests","Gem::RequestSet","Gem/RequestSet.html#method-i-sorted_requests","()",""],["source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-source","(url)","<p>Sets <code>url</code> as a source for gems for this dependency API. \nRubyGems uses the default configured sources …\n"],["source","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-source","()","<p>The source for this specification\n"],["source","RDoc::Store","RDoc/Store.html#method-i-source","()","<p>Source of the contents of this store.\n<p>For a store from a gem the source is the gem name.  For a store …\n"],["source","REXML::Parsers::SAX2Parser","REXML/Parsers/SAX2Parser.html#method-i-source","()",""],["source","Regexp","Regexp.html#method-i-source","()","<p>Returns the original string of the pattern.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/ix</span>.<span class=\"ruby-identifier\">source</span> <span class=\"ruby-comment\">#=&gt; &quot;ab+c&quot;</span>\n</pre>\n<p>Note that escape sequences are retained …\n"],["source_encoding","Encoding::Converter","Encoding/Converter.html#method-i-source_encoding","()","<p>Returns the source encoding as an Encoding object.\n"],["source_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-source_file","(path)","<p>Loads a given file in the current session and displays the source lines\n<p>See Irb#suspend_input_method for …\n"],["source_for","Gem::AvailableSet","Gem/AvailableSet.html#method-i-source_for","(spec)",""],["source_location","Method","Method.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_location","Proc","Proc.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this proc or\n<code>nil</code> if this proc was not defined …\n"],["source_location","UnboundMethod","UnboundMethod.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_ole_types","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-source_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["source_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-source_paths","()","<p>Returns the paths to the source files for use with analysis and\ndocumentation tools.  These paths are …\n"],["sources","Gem","Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from. Uses default_sources\nif the sources list is empty. …\n"],["sources=","Gem","Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace\nsince that would cause an infinite …\n"],["spawn","Kernel","Kernel.html#method-i-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre>pid = spawn(&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;)\nProcess.wait ...</pre>\n"],["spawn","PTY","PTY.html#method-c-spawn","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the\nalias ::getpty.\n<p>The command&#39;s …\n"],["spawn","Process","Process.html#method-c-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre>pid = spawn(&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;)\nProcess.wait ...</pre>\n"],["spec","Gem::Installer","Gem/Installer.html#method-i-spec","()","<p>Lazy accessor for the installer&#39;s spec.\n"],["spec","Gem::Package","Gem/Package.html#method-i-spec","()","<p>The spec for this gem.\n<p>If this is a package for a built gem the spec is loaded from the gem and\nreturned. …\n"],["spec","Gem::Package::Old","Gem/Package/Old.html#method-i-spec","()","<p>The specification for this gem\n"],["spec","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-spec","()","<p>A specification constructed from the lockfile is returned\n"],["spec","Gem::TestCase","Gem/TestCase.html#method-i-spec","(name, version, &block)","<p>Constructs a new Gem::Specification.\n"],["spec","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-spec","(name, version, dependencies = nil, &block)","<p>Creates a spec with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The created gem can be downloaded and installed.\n<p>The specification …\n"],["spec_authors","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-spec_authors","(entry, spec)",""],["spec_cache_dir","Gem","Gem.html#method-c-spec_cache_dir","()",""],["spec_dir","Gem::Specification","Gem/Specification.html#method-i-spec_dir","()","<p>Returns the full path to the directory containing this spec&#39;s gemspec\nfile. eg: /usr/local/lib/ruby/gems/1.8/specifications …\n"],["spec_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-spec_fetcher","(repository = @gem_repo)","<p>Creates a SpecFetcher pre-filled with the gems or specs defined in the\nblock.\n<p>Yields a <code>fetcher</code> object …\n"],["spec_file","Gem::Installer","Gem/Installer.html#method-i-spec_file","()","<p>The location of the spec file that is installed.\n"],["spec_file","Gem::Specification","Gem/Specification.html#method-i-spec_file","()","<p>Returns the full path to this spec&#39;s gemspec file. eg:\n/usr/local/lib/ruby/gems/1.8/specifications/mygem-1.0.gemspec …\n"],["spec_for","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-spec_for","(name)",""],["spec_for","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-spec_for","(name)",""],["spec_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-spec_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch specs that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms are …\n"],["spec_groups","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-spec_groups","()",""],["spec_homepage","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-spec_homepage","(entry, spec)",""],["spec_license","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-spec_license","(entry, spec)",""],["spec_loaded_from","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-spec_loaded_from","(entry, spec, specs)",""],["spec_name","Gem::NameTuple","Gem/NameTuple.html#method-i-spec_name","()","<p>Return the name that the gemspec file would be\n"],["spec_name","Gem::Specification","Gem/Specification.html#method-i-spec_name","()","<p>The default name of the gemspec.  See also #file_name\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">spec_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gemspec&quot;</span>\n</pre>\n"],["spec_path","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-spec_path","(gem_full_name)",""],["spec_platforms","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-spec_platforms","(entry, platforms)",""],["spec_predecessors","Gem::DependencyList","Gem/DependencyList.html#method-i-spec_predecessors","()","<p>Return a hash of predecessors.  <code>result[spec]</code> is an Array of\ngemspecs that have a dependency satisfied …\n"],["spec_summary","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-spec_summary","(entry, spec)",""],["special_prefixes","Readline","Readline.html#method-c-special_prefixes","()","<p>Gets the list of characters that are word break characters, but should be\nleft in text when it is passed …\n"],["special_prefixes=","Readline","Readline.html#method-c-special_prefixes-3D","(p1)","<p>Sets the list of characters that are word break characters, but should be\nleft in text when it is passed …\n"],["specific?","Gem::Dependency","Gem/Dependency.html#method-i-specific-3F","()","<p>True if the dependency will not always match the latest version.\n"],["specific?","Gem::Requirement","Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific_extra_args","Gem::Command","Gem/Command.html#method-c-specific_extra_args","(cmd)","<p>Return an array of extra arguments for the command.  The extra arguments\ncome from the gem configuration …\n"],["specific_extra_args_hash","Gem::Command","Gem/Command.html#method-c-specific_extra_args_hash","()","<p>Accessor for the specific extra args hash (self initializing).\n"],["specs","Gem::RequestSet","Gem/RequestSet.html#method-i-specs","()",""],["specs","Gem::Server","Gem/Server.html#method-i-specs","(req, res)",""],["specs","Gem::Source::Git","Gem/Source/Git.html#method-i-specs","()","<p>Loads all gemspecs in the repository\n"],["specs_in","Gem::RequestSet","Gem/RequestSet.html#method-i-specs_in","(dir)",""],["split","BigDecimal","BigDecimal.html#method-i-split","()","<p>Splits a BigDecimal number into four parts, returned as an array of values.\n<p>The first value represents …\n"],["split","File","File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns\nthem in a two-element array. …\n"],["split","Pathname","Pathname.html#method-i-split","()","<p>Returns the #dirname and the #basename in an Array.\n<p>See File.split.\n"],["split","Shellwords","Shellwords.html#method-c-split","(line)",""],["split","String","String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Divides <em>str</em> into substrings based on a delimiter, returning an\narray of these substrings.\n<p>If <em>pattern</em> is …\n"],["split","URI","URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">split</span>(<span class=\"ruby-identifier\">uri</span>)\n</pre>\n<p>Args\n"],["split","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against regexp\n"],["split_arguments","Fiddle::CParser","Fiddle/CParser.html#method-i-split_arguments","(arguments, sep=',')",""],["split_gem_path","Gem::PathSupport","Gem/PathSupport.html#method-i-split_gem_path","(gpaths, home)","<p>Split the Gem search path (as reported by Gem.path).\n"],["split_header_value","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-split_header_value","(str)","<p>Splits a header value <code>str</code> according to HTTP specification.\n"],["split_header_value","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-c-split_header_value","(str)","<p>Splits a header value <code>str</code> according to HTTP specification.\n"],["split_name","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-split_name","(name)",""],["split_path","URI::Generic","URI/Generic.html#method-i-split_path","(path)","<p>returns an Array of the path split on &#39;/&#39;\n"],["split_userinfo","URI::Generic","URI/Generic.html#method-i-split_userinfo","(ui)","<p>returns the userinfo <code>ui</code> as user, password if properly\nformatted as &#39;user:password&#39;\n"],["sprintf","Kernel","Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format ...\n"],["sqr","OpenSSL::BN","OpenSSL/BN.html#method-i-sqr","()",""],["sqrt","BigDecimal","BigDecimal.html#method-i-sqrt","(p1)","<p>Returns the square root of the value.\n<p>Result has at least n significant digits.\n"],["sqrt","BigMath","BigMath.html#method-i-sqrt","(x, prec)","<p>Computes the square root of <code>decimal</code> to the specified number of\ndigits of precision, <code>numeric</code>.\n\n<pre>BigMath.sqrt(BigDecimal.new(&#39;2&#39;), ...</pre>\n"],["sqrt","CMath","CMath.html#method-i-sqrt","(z)","<p>Returns the non-negative square root of Complex.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">sqrt</span>(<span class=\"ruby-value\">-1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">0</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; 0.0+1.0i</span>\n</pre>\n"],["sqrt","CMath","CMath.html#method-c-sqrt","(z)","<p>Returns the non-negative square root of Complex.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">sqrt</span>(<span class=\"ruby-value\">-1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">0</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; 0.0+1.0i</span>\n</pre>\n"],["sqrt","Math","Math.html#method-i-sqrt","(a)","<p>Computes the square root of <code>a</code>.  It makes use of Complex and\nRational to have no rounding errors if possible. …\n"],["sqrt","Math","Math.html#method-c-sqrt","(a)","<p>Computes the square root of <code>a</code>.  It makes use of Complex and\nRational to have no rounding errors if possible. …\n"],["square?","Matrix","Matrix.html#method-i-square-3F","()","<p>Returns <code>true</code> if this is a square matrix.\n"],["squeeze","String","String.html#method-i-squeeze","(*args)","<p>Builds a set of characters from the <em>other_str</em> parameter(s) using\nthe procedure described for <code>String#count</code> …\n"],["squeeze!","String","String.html#method-i-squeeze-21","(*args)","<p>Squeezes <em>str</em> in place, returning either <em>str</em>, or\n<code>nil</code> if no changes were made.\n"],["srand","Kernel","Kernel.html#method-i-srand","(*args)","<p>Seeds the system pseudo-random number generator, Random::DEFAULT, with\n<code>number</code>.  The previous seed value …\n"],["srand","Random","Random.html#method-c-srand","(*args)","<p>Seeds the system pseudo-random number generator, Random::DEFAULT, with\n<code>number</code>.  The previous seed value …\n"],["src_type","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-src_type","()","<p>Returns source class when the OLE class is &#39;Alias&#39;.\n\n<pre>tobj =  WIN32OLE_TYPE.new(&#39;Microsoft Office ...</pre>\n"],["ssl?","Net::SMTP","Net/SMTP.html#method-i-ssl-3F","()",""],["ssl?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["ssl_params","Net::POP3","Net/POP3.html#method-c-ssl_params","()","<p>returns the SSL Parameters\n<p>see also POP3.enable_ssl\n"],["ssl_socket","Net::SMTP","Net/SMTP.html#method-i-ssl_socket","(socket, context)",""],["ssl_version","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-ssl_version","()","<p>Returns a String representing the SSL/TLS version that was negotiated for\nthe connection, for example …\n"],["ssl_version=","OpenSSL::SSL::SSLContext","OpenSSL/SSL/SSLContext.html#method-i-ssl_version-3D","(p1)","<p>Sets the SSL/TLS protocol version for the context. This forces connections\nto use only the specified …\n"],["sspi_auth","Net::HTTP","Net/HTTP.html#method-i-sspi_auth","(req)",""],["sspi_auth?","Net::HTTP","Net/HTTP.html#method-i-sspi_auth-3F","(res)",""],["stand_alone?","REXML::Document","REXML/Document.html#method-i-stand_alone-3F","()","<p>@return the XMLDecl standalone value of this document as a String. If no\nXMLDecl has been set, returns …\n"],["start","Coverage","Coverage.html#method-c-start","()","<p>Enables coverage measurement.\n"],["start","Date","Date.html#method-i-start","()","<p>Returns the Julian day number denoting the day of calendar reform.\n\n<pre>Date.new(2001,2,3).start           ...</pre>\n"],["start","GC","GC.html#method-c-start","(p1 = {})","<p>Initiates garbage collection, unless manually disabled.\n<p>This method is defined with keyword arguments …\n"],["start","IRB","IRB.html#method-c-start","(ap_path = nil)","<p>Initializes IRB and creates a new Irb.irb object at the\n<code>TOPLEVEL_BINDING</code>\n"],["start","Net::HTTP","Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["start","Net::HTTP","Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, then additionally opens the TCP connection\nand HTTP session.\n<p>Arguments …\n"],["start","Net::POP3","Net/POP3.html#method-i-start","(account, password)","<p>Starts a POP3 session.\n<p>When called with block, gives a POP3 object to the block and closes the\nsession …\n"],["start","Net::POP3","Net/POP3.html#method-c-start","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Creates a new POP3 object and open the connection.  Equivalent to\n\n<pre>Net::POP3.new(address, port, isapop).start(account, ...</pre>\n"],["start","Net::SMTP","Net/SMTP.html#method-c-start","(address, port = nil, helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Creates a new Net::SMTP object and connects to the server.\n<p>This method is equivalent to:\n\n<pre>Net::SMTP.new(address, ...</pre>\n"],["start","Net::SMTP","Net/SMTP.html#method-i-start","(helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Opens a TCP connection and starts the SMTP session.\n<p>Parameters\n<p><code>helo</code> is the <em>HELO</em> <em>domain</em> that you&#39;ll …\n"],["start","Psych::Streaming","Psych/Streaming.html#method-i-start","(encoding = Nodes::Stream::UTF8)","<p>Start streaming using <code>encoding</code>\n"],["start","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-start","(encoding = Nodes::Stream::UTF8)",""],["start","Shell::SystemCommand","Shell/SystemCommand.html#method-i-start","()",""],["start","Thread","Thread.html#method-c-start","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then\ncalling <code>start</code> in that subclass …\n"],["start","WEBrick::CGI","WEBrick/CGI.html#method-i-start","(env=ENV, stdin=$stdin, stdout=$stdout)","<p>Starts the CGI process with the given environment <code>env</code> and\nstandard input and output <code>stdin</code> and <code>stdout</code> …\n"],["start","WEBrick::Daemon","WEBrick/Daemon.html#method-c-start","()","<p>Performs the standard operations for daemonizing a process.  Runs a block,\nif given.\n"],["start","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-start","(&block)","<p>Starts the server and runs the <code>block</code> for each connection. \nThis method does not return until the server …\n"],["start","WEBrick::SimpleServer","WEBrick/SimpleServer.html#method-c-start","()","<p>A SimpleServer only yields when you start it\n"],["startElement","RSS::REXMLLikeXMLParser","RSS/REXMLLikeXMLParser.html#method-i-startElement","(name, attrs)",""],["start_collecting_tokens","RDoc::TokenStream","RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by\n:enddoc:\n"],["start_document","Psych::Handler","Psych/Handler.html#method-i-start_document","(version, tag_directives, implicit)","<p>Called when the document starts with the declared <code>version</code>,\n<code>tag_directives</code>, if the document is <code>implicit</code> …\n"],["start_document","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-start_document","(version, tag_directives, implicit)","<p>Handles start_document events with <code>version</code>,\n<code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["start_document","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-start_document","()",""],["start_element","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-start_element","(uri, localname, qname, attributes)",""],["start_element?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-start_element-3F","()","<p>Content: [ String tag_name, Hash attributes ]\n"],["start_else_element","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-start_else_element","(local, prefix, attrs, ns)",""],["start_export","Shell::SystemCommand","Shell/SystemCommand.html#method-i-start_export","()",""],["start_get_text_element","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-start_get_text_element","(tag_name, prefix, ns, required_uri)",""],["start_have_something_element","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-start_have_something_element","(tag_name, prefix, attrs, ns, klass)",""],["start_import","Shell::SystemCommand","Shell/SystemCommand.html#method-i-start_import","()",""],["start_job","Shell::ProcessController","Shell/ProcessController.html#method-i-start_job","(command = nil)","<p>start a job\n"],["start_keeper","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-start_keeper","()","<p>Creates a thread that scans the tuplespace for expired tuples.\n"],["start_mapping","Psych::Handler","Psych/Handler.html#method-i-start_mapping","(anchor, tag, implicit, style)","<p>Called when a map starts.\n<p><code>anchor</code> is the anchor associated with the map or\n<code>nil</code>. <code>tag</code> is the tag associated …\n"],["start_prefix_mapping","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-start_prefix_mapping","(prefix, uri)",""],["start_profile","Profiler__","Profiler__.html#method-i-start_profile","()","<p>Starts the profiler.\n<p>See Profiler__ for more information.\n"],["start_resolution","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-start_resolution","()","<p>Sets up the resolution process @return [void]\n"],["start_sequence","Psych::Handler","Psych/Handler.html#method-i-start_sequence","(anchor, tag, implicit, style)","<p>Called when a sequence is started.\n<p><code>anchor</code> is the anchor associated with the sequence or nil.\n<code>tag</code> is the …\n"],["start_service","DRb","DRb.html#method-i-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server\n…\n"],["start_service","DRb","DRb.html#method-c-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server\n…\n"],["start_stream","Psych::Handler","Psych/Handler.html#method-i-start_stream","(encoding)","<p>Called with <code>encoding</code> when the YAML stream starts.  This method\nis called once per stream.  A stream may …\n"],["start_stream","Psych::TreeBuilder","Psych/TreeBuilder.html#method-i-start_stream","(encoding)",""],["start_tls_session","Net::FTP","Net/FTP.html#method-i-start_tls_session","(sock)",""],["start_tls_session","Net::IMAP","Net/IMAP.html#method-i-start_tls_session","(params = {})",""],["start_with?","String","String.html#method-i-start_with-3F","(*args)","<p>Returns true if <code>str</code> starts with one of the\n<code>prefixes</code> given.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">start_with?</span>(<span class=\"ruby-string\">&quot;hell&quot;</span>)               <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["started?","Net::HTTP","Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["started?","Net::POP3","Net/POP3.html#method-i-started-3F","()","<p><code>true</code> if the POP3 session has started.\n"],["started?","Net::SMTP","Net/SMTP.html#method-i-started-3F","()","<p><code>true</code> if the SMTP session has been started.\n"],["starts_with","REXML::Functions","REXML/Functions.html#method-c-starts_with","( string, test )","<p>Fixed by Mike Stok\n"],["starttls","Net::IMAP","Net/IMAP.html#method-i-starttls","(options = {}, verify = true)","<p>Sends a STARTTLS command to start TLS session.\n"],["starttls","Net::SMTP","Net/SMTP.html#method-i-starttls","()",""],["starttls?","Net::SMTP","Net/SMTP.html#method-i-starttls-3F","()","<p>Returns truth value if this object uses STARTTLS. If this object always\nuses STARTTLS, returns :always. …\n"],["starttls_always?","Net::SMTP","Net/SMTP.html#method-i-starttls_always-3F","()","<p>true if this object uses STARTTLS.\n"],["starttls_auto?","Net::SMTP","Net/SMTP.html#method-i-starttls_auto-3F","()","<p>true if this object uses STARTTLS when server advertises STARTTLS.\n"],["stat","File","File.html#method-c-stat","(p1)","<p>Returns a <code>File::Stat</code> object for the named file (see\n<code>File::Stat</code>).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Tue ...</span>\n</pre>\n"],["stat","GC","GC.html#method-c-stat","(p1 = v1)","<p>Returns a Hash containing information about the GC.\n<p>The hash includes information about internal statistics …\n"],["stat","IO","IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type\n<code>File::Stat</code>.\n\n<pre>f = File.new(&quot;testfile&quot;)\ns = f.stat ...</pre>\n"],["stat","Pathname","Pathname.html#method-i-stat","()","<p>Returns a File::Stat object.\n<p>See File.stat.\n"],["stat","RubyVM","RubyVM.html#method-c-stat","(p1 = v1)","<p>Returns a Hash containing implementation-dependent counters inside the VM.\n<p>This hash includes information …\n"],["stat","TracePoint","TracePoint.html#method-c-stat","()","<p>Returns internal information of TracePoint.\n<p>The contents of the returned value are implementation specific. …\n"],["state","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-state","()","<p>@return [RequirementState] the current state the resolution is\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">operating</span> <span class=\"ruby-identifier\">upon</span>\n</pre>\n"],["state","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-state","()","<p>A description of the current connection state. This is for diagnostic\npurposes only.\n"],["state_any?","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-state_any-3F","(state)","<p>@return [Boolean] whether or not the given state has any possibilities\n\n<pre>left.</pre>\n"],["state_index_for_unwind","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-state_index_for_unwind","()","<p>@return [Integer] The index to which the resolution should unwind in the\n\n<pre>case of conflict.</pre>\n"],["status","Net::FTP","Net/FTP.html#method-i-status","(pathname = nil)","<p>Returns the status (STAT command). pathname - when stat is invoked with\npathname as a parameter it acts …\n"],["status","Net::IMAP","Net/IMAP.html#method-i-status","(mailbox, attr)","<p>Sends a STATUS command, and returns the status of the indicated\n<code>mailbox</code>. <code>attr</code> is a list of one or more …\n"],["status","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-status","()","<p>Returns an Array of statuses for this response.  Each status contains a\nCertificateId, the status (0 …\n"],["status","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-status","()","<p>Returns the status of the response.\n"],["status","PTY::ChildExited","PTY/ChildExited.html#method-i-status","()","<p>Returns the exit status of the child for which PTY#check raised this\nexception\n"],["status","SystemExit","SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","Thread.html#method-i-status","()","<p>Returns the status of <code>thr</code>.\n<p>“sleep” &mdash; Returned if this thread is sleeping or waiting on I/O\n<p>“run” … &mdash; "],["status=","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-status-3D","(status)","<p>Sets the response&#39;s status to the <code>status</code> code\n"],["status?","OpenSSL::Random","OpenSSL/Random.html#method-c-status-3F","()","<p>Return true if the PRNG has been seeded with enough data, false otherwise.\n"],["status_line","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-status_line","()","<p>The response&#39;s HTTP status line\n"],["status_string","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-status_string","()","<p>Returns a status string for the response.\n"],["status_type_char","Net::SMTP::Response","Net/SMTP/Response.html#method-i-status_type_char","()","<p>Takes the first digit of the reply code to determine the status type\n"],["stdinput","CGI","CGI.html#method-i-stdinput","()","<p>Synonym for $stdin.\n"],["stdout","DEBUGGER__","DEBUGGER__.html#method-c-stdout","()","<p>Returns the IO used as stdout. Defaults to STDOUT\n"],["stdout=","DEBUGGER__","DEBUGGER__.html#method-c-stdout-3D","(s)","<p>Sets the IO used as stdout. Defaults to STDOUT\n"],["stdoutput","CGI","CGI.html#method-i-stdoutput","()","<p>Synonym for $stdout.\n"],["step","Date","Date.html#method-i-step","(p1, p2 = v2)","<p>Iterates evaluation of the given block, which takes a date object. The\nlimit should be a date object. …\n"],["step","Numeric","Numeric.html#method-i-step","(*args)","<p>Invokes the given block with the sequence of numbers starting at\n<code>num</code>, incremented by <code>step</code> (defaulted …\n"],["step","Range","Range.html#method-i-step","(p1 = v1)","<p>Iterates over the range, passing each <code>n</code>th element to the\nblock. If begin and end are numeric, <code>n</code> is added …\n"],["sticky?","File","File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n"],["sticky?","File::Stat","File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set,\n<code>false</code> if it doesn&#39;t or if the operating system doesn&#39;t\n…\n"],["sticky?","FileTest","FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n"],["sticky?","Pathname","Pathname.html#method-i-sticky-3F","()","<p>See FileTest.sticky?.\n"],["stop","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-stop","()","<p>Sends “close notify” to the peer and tries to shut down the SSL connection\ngracefully.\n"],["stop","Thread","Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep&#39;&#39;\nstate, and schedules execution …\n"],["stop","WEBrick::GenericServer","WEBrick/GenericServer.html#method-i-stop","()","<p>Stops the server from accepting new connections.\n"],["stop?","Thread","Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <code>thr</code> is dead or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span> }\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">stop?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["stop_doc","RDoc::CodeObject","RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["stop_profile","Profiler__","Profiler__.html#method-i-stop_profile","()","<p>Stops the profiler.\n<p>See Profiler__ for more information.\n"],["stop_service","DRb","DRb.html#method-c-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server\ncurrently …\n"],["stop_service","DRb","DRb.html#method-i-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server\ncurrently …\n"],["stop_service","DRb::DRbServer","DRb/DRbServer.html#method-i-stop_service","()","<p>Stop this server.\n"],["stop_service","DRb::ExtServ","DRb/ExtServ.html#method-i-stop_service","()",""],["stopped?","Process::Status","Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned\nif the corresponding <code>wait</code> call had the …\n"],["stopsig","Process::Status","Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or\n<code>nil</code> if self is not stopped).\n"],["storbinary","Net::FTP","Net/FTP.html#method-i-storbinary","(cmd, file, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given server-side\ncommand (such as “STOR …\n"],["store","DBM","DBM.html#method-i-store","(p1, p2)","<p>Stores the specified string value in the database, indexed via the string\nkey provided.\n"],["store","ENV","ENV.html#method-c-store","(p1, p2)","<p>Sets the environment variable <code>name</code> to <code>value</code>.  If\nthe value given is <code>nil</code> the environment variable is deleted. …\n"],["store","GDBM","GDBM.html#method-i-store","(p1, p2)","<p>Associates the value <em>value</em> with the specified <em>key</em>.\n"],["store","Hash","Hash.html#method-i-store","(p1, p2)","<p>Element Assignment\n<p>Associates the value given by <code>value</code> with the key given by\n<code>key</code>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</pre>\n"],["store","Net::IMAP","Net/IMAP.html#method-i-store","(set, attr, flags)","<p>Sends a STORE command to alter data associated with messages in the\nmailbox, in particular their flags. …\n"],["store","SDBM","SDBM.html#method-i-store","(p1, p2)","<p>Stores a new <code>value</code> in the database with the given\n<code>key</code> as an index.\n<p>If the <code>key</code> already exists, this will …\n"],["store","YAML::DBM","YAML/DBM.html#method-i-store","( key, val )","<p>Stores <code>value</code> in database with <code>key</code> as the index.\n<code>value</code> is converted to YAML before being stored.\n<p>Returns …\n"],["store=","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-store-3D","(store)","<p>Sets the store for this method and its referenced code objects.\n"],["store=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::CodeObject","RDoc/CodeObject.html#method-i-store-3D","(store)","<p>Sets the <code>store</code> that contains this CodeObject\n"],["store=","RDoc::Constant","RDoc/Constant.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::Mixin","RDoc/Mixin.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::RDoc","RDoc/RDoc.html#method-i-store-3D","(store)","<p>Sets the current documentation tree to <code>store</code> and sets the\nstore&#39;s rdoc driver to this instance.\n"],["store_for","RDoc::Servlet","RDoc/Servlet.html#method-i-store_for","(source_name)","<p>Returns an RDoc::Store for the given <code>source_name</code>\n(&#39;ruby&#39; or a gem name).\n"],["store_internal","Net::IMAP","Net/IMAP.html#method-i-store_internal","(cmd, set, attr, flags)",""],["storlines","Net::FTP","Net/FTP.html#method-i-storlines","(cmd, file)","<p>Puts the connection into ASCII (text) mode, issues the given server-side\ncommand (such as “STOR …\n"],["stream=","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-stream-3D","( source )",""],["stream_check","Net::HTTPResponse","Net/HTTPResponse.html#method-i-stream_check","()",""],["stream_end?","Zlib::ZStream","Zlib/ZStream.html#method-i-stream_end-3F","()","<p>Returns true if the stream is finished.\n"],["streaming?","Psych::Handler","Psych/Handler.html#method-i-streaming-3F","()","<p>Is this handler a streaming handler?\n"],["stress","GC","GC.html#method-c-stress","()","<p>Returns current status of GC stress mode.\n"],["stress=","GC","GC.html#method-c-stress-3D","(p1)","<p>Updates the GC stress mode.\n<p>When stress mode is enabled, the GC is invoked at every GC opportunity: all\n…\n"],["strftime","Date","Date.html#method-i-strftime","(*args)","<p>Formats date according to the directives in the given format string. The\ndirectives begin with a percent …\n"],["strftime","DateTime","DateTime.html#method-i-strftime","(*args)","<p>Formats date according to the directives in the given format string. The\ndirectives begin with a percent …\n"],["strftime","Time","Time.html#method-i-strftime","(p1)","<p>Formats <em>time</em> according to the directives in the given format\nstring.\n<p>The directives begin with a percent …\n"],["strict_decode64","Base64","Base64.html#method-i-strict_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with RFC 4648. ArgumentError is raised …\n"],["strict_encode64","Base64","Base64.html#method-i-strict_encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with RFC 4648. No line feeds are added. …\n"],["string","MatchData","MatchData.html#method-i-string","()","<p>Returns a frozen copy of the string passed in to <code>match</code>.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.string ...</pre>\n"],["string","REXML::Functions","REXML/Functions.html#method-c-string","( object=nil )","<p>A node-set is converted to a string by returning the string-value of the\nnode in the node-set that is …\n"],["string","StringIO","StringIO.html#method-i-string","()","<p>Returns underlying String object, the subject of IO.\n"],["string","StringScanner","StringScanner.html#method-i-string","()","<p>Returns the string being scanned.\n"],["string","TempIO","TempIO.html#method-i-string","()","<p>The content of the TempIO as a String.\n"],["string=","StringIO","StringIO.html#method-i-string-3D","(p1)","<p>Changes underlying String object, the subject of IO.\n"],["string=","StringScanner","StringScanner.html#method-i-string-3D","(p1)","<p>Changes the string being scanned to <code>str</code> and resets the\nscanner. Returns <code>str</code>.\n"],["string_length","REXML::Functions","REXML/Functions.html#method-c-string_length","( string )","<p>UNTESTED\n"],["string_value","REXML::Functions","REXML/Functions.html#method-c-string_value","( o )","<p>A node-set is converted to a string by returning the concatenation of the\nstring-value of each of the …\n"],["strip","String","String.html#method-i-strip","()","<p>Returns a copy of <em>str</em> with leading and trailing whitespace\nremoved.\n<p>Whitespace is defined as any of the …\n"],["strip!","String","String.html#method-i-strip-21","()","<p>Removes leading and trailing whitespace from <em>str</em>. Returns\n<code>nil</code> if <em>str</em> was not altered.\n<p>Refer to <code>strip</code> for …\n"],["strip_hashes","RDoc::Text","RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_newlines","RDoc::Text","RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_quotes","REXML::DocType","REXML/DocType.html#method-i-strip_quotes","(quoted_string)","<p>Method contributed by Henrik Martensson\n"],["strip_stars","RDoc::Text","RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips       style comments\n"],["strong","RDoc::Markdown","RDoc/Markdown.html#method-i-strong","(text)","<p>Wraps <code>text</code> in strong markup for rdoc inline formatting\n"],["strongly_connected_components","TSort","TSort.html#method-c-strongly_connected_components","(each_node, each_child)","<p>Returns strongly connected components as an array of arrays of nodes. The\narray is sorted from children …\n"],["strongly_connected_components","TSort","TSort.html#method-i-strongly_connected_components","()","<p>Returns strongly connected components as an array of arrays of nodes. The\narray is sorted from children …\n"],["strptime","Date","Date.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template,\nand creates a date object. …\n"],["strptime","DateTime","DateTime.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template,\nand creates a DateTime object. …\n"],["strptime","Time","Time.html#method-c-strptime","(date, format, now=self.now)","<p>Parses <code>date</code> using Date._strptime and converts it to a Time\nobject.\n<p>If a block is given, the year described …\n"],["struct","Fiddle::Importer","Fiddle/Importer.html#method-i-struct","(signature)","<p>Creates a class to wrap the C struct described by <code>signature</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">MyStruct</span> = <span class=\"ruby-identifier\">struct</span> [<span class=\"ruby-string\">&#39;int i&#39;</span>, <span class=\"ruby-string\">&#39;char c&#39;</span>]\n</pre>\n"],["stubbed?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-stubbed-3F","()","<p>Whether this specification is stubbed - i.e. we have information about the\ngem from a stub line, without …\n"],["stubbed?","Gem::Specification","Gem/Specification.html#method-i-stubbed-3F","()",""],["stubs","Gem::Specification","Gem/Specification.html#method-c-stubs","()","<p>Returns a Gem::StubSpecification for every installed gem\n"],["stubs_for","Gem::Specification","Gem/Specification.html#method-c-stubs_for","(name)","<p>Returns a Gem::StubSpecification for installed gem named <code>name</code>\n"],["su","WEBrick::Utils","WEBrick/Utils.html#method-i-su","(user)","<p>Changes the process&#39;s uid and gid to the ones of <code>user</code>\n"],["su","WEBrick::Utils","WEBrick/Utils.html#method-c-su","(user)","<p>Changes the process&#39;s uid and gid to the ones of <code>user</code>\n"],["sub","BigDecimal","BigDecimal.html#method-i-sub","(p1, p2)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">sub</span>(<span class=\"ruby-identifier\">b</span>,<span class=\"ruby-identifier\">n</span>)\n</pre>\n"],["sub","Kernel","Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that\n<code>$_</code> will be updated if substitution occurs. Available only when\n…\n"],["sub","Pathname","Pathname.html#method-i-sub","(*args)","<p>Return a pathname which is substituted by String#sub.\n\n<pre>path1 = Pathname.new(&#39;/usr/bin/perl&#39;)\npath1.sub(&#39;perl&#39;, ...</pre>\n"],["sub","String","String.html#method-i-sub","(*args)","<p>Returns a copy of <code>str</code> with the <em>first</em> occurrence of\n<code>pattern</code> replaced by the second argument. The\n<code>pattern</code> …\n"],["sub!","String","String.html#method-i-sub-21","(*args)","<p>Performs the same substitution as String#sub in-place.\n<p>Returns <code>str</code> if a substitution was performed or …\n"],["sub_ext","Pathname","Pathname.html#method-i-sub_ext","(p1)","<p>Return a pathname with <code>repl</code> added as a suffix to the basename.\n<p>If self has no extension part, <code>repl</code> is …\n"],["subdomain_of?","Resolv::DNS::Name","Resolv/DNS/Name.html#method-i-subdomain_of-3F","(other)","<p>Returns true if <code>other</code> is a subdomain.\n<p>Example:\n\n<pre>domain = Resolv::DNS::Name.create(&quot;y.z&quot;)\np Resolv::DNS::Name.create(&quot;w.x.y.z&quot;).subdomain_of?(domain) ...</pre>\n"],["subject","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-subject","()",""],["subject","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-subject","()",""],["subject=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-subject-3D","(p1)",""],["subject=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-subject-3D","(p1)",""],["subject_certificate=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-subject_certificate-3D","(p1)",""],["subject_request=","OpenSSL::X509::ExtensionFactory","OpenSSL/X509/ExtensionFactory.html#method-i-subject_request-3D","(p1)",""],["submit","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-submit","(value = nil, name = nil)","<p>Generate a submit button Input element, as a String.\n<p><code>value</code> is the text to display on the button.  <code>name</code>\n…\n"],["subscribe","Net::IMAP","Net/IMAP.html#method-i-subscribe","(mailbox)","<p>Sends a SUBSCRIBE command to add the specified <code>mailbox</code> name to\nthe server&#39;s set of “active” …\n"],["subsec","Time","Time.html#method-i-subsec","()","<p>Returns the fraction for <em>time</em>.\n<p>The return value can be a rational number.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>        <span class=\"ruby-comment\">#=&gt; 2009-03-26 ...</span>\n</pre>\n"],["subset?","Set","Set.html#method-i-subset-3F","(set)","<p>Returns true if the set is a subset of the given set.\n"],["substring","REXML::Functions","REXML/Functions.html#method-c-substring","( string, start, length=nil )","<p>Take equal portions of Mike Stok and Sean Russell; mix vigorously, and pour\ninto a tall, chilled glass. …\n"],["substring_after","REXML::Functions","REXML/Functions.html#method-c-substring_after","( string, test )","<p>Kouhei fixed this too\n"],["substring_before","REXML::Functions","REXML/Functions.html#method-c-substring_before","( string, test )","<p>Kouhei fixed this\n"],["subtract","Set","Set.html#method-i-subtract","(enum)","<p>Deletes every element that appears in the given enumerable object and\nreturns self.\n"],["succ","Date","Date.html#method-i-succ","()","<p>Returns a date object denoting the following day.\n"],["succ","IPAddr","IPAddr.html#method-i-succ","()","<p>Returns the successor to the ipaddr.\n"],["succ","Integer","Integer.html#method-i-succ","()","<p>Returns the Integer equal to <code>int</code> + 1.\n\n<pre>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ      #=&gt; 2\n(-1).succ ...</pre>\n"],["succ","Integer","Integer.html#method-i-succ","()","<p>Returns the Integer equal to <code>int</code> + 1.\n\n<pre>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ      #=&gt; 2\n(-1).succ ...</pre>\n"],["succ","Prime::EratosthenesGenerator","Prime/EratosthenesGenerator.html#method-i-succ","()",""],["succ","Prime::Generator23","Prime/Generator23.html#method-i-succ","()",""],["succ","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-succ","()","<p>returns the next pseudo-prime number, and move the internal position\nforward.\n<p><code>PseudoPrimeGenerator</code>#succ …\n"],["succ","Prime::TrialDivisionGenerator","Prime/TrialDivisionGenerator.html#method-i-succ","()",""],["succ","String","String.html#method-i-succ","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["succ","Symbol","Symbol.html#method-i-succ","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["succ","Time","Time.html#method-i-succ","()","<p>Returns a new Time object, one second later than <em>time</em>. Time#succ\nis obsolete since 1.9.2 for time is …\n"],["succ!","String","String.html#method-i-succ-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["success?","Net::SMTP::Response","Net/SMTP/Response.html#method-i-success-3F","()","<p>Determines whether the response received was a Positive Completion reply\n(2xx reply code)\n"],["success?","Process::Status","Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful,\n<code>false</code> if not. Returns <code>nil</code> if <code>exited?</code>\nis not <code>true</code>.\n"],["success?","SystemExit","SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["success?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-c-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["success?","WEBrick::HTTPStatus","WEBrick/HTTPStatus.html#method-i-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["successors","Gem::Resolver::Molinillo::DependencyGraph::Vertex","Gem/Resolver/Molinillo/DependencyGraph/Vertex.html#method-i-successors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge\nwith\n\n<pre>`self` as their {Edge#origin}</pre>\n"],["suffix_pattern","Gem","Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffixes","Gem","Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["suggest_gems_from_name","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-suggest_gems_from_name","(gem_name)","<p>Suggests gems based on the supplied <code>gem_name</code>. Returns an array\nof alternative gem names.\n"],["suggestions","Gem::Licenses","Gem/Licenses.html#method-c-suggestions","(license)",""],["sum","Array","Array.html#method-i-sum","(p1 = v1)","<p>Returns the sum of elements. For example, [e1, e2, e3].sum returns init +\ne1 + e2 + e3.\n<p>If a block is …\n"],["sum","Enumerable","Enumerable.html#method-i-sum","(p1 = v1)","<p>Returns the sum of elements in an Enumerable.\n<p>If a block is given, the block is applied to each element …\n"],["sum","REXML::Functions","REXML/Functions.html#method-c-sum","( nodes )",""],["sum","String","String.html#method-i-sum","(p1 = v1)","<p>Returns a basic <em>n</em>-bit checksum of the characters in <em>str</em>,\nwhere <em>n</em> is the optional <code>Integer</code> parameter, defaulting\n…\n"],["summarize","OptionParser","OptionParser.html#method-i-summarize","(to = [], width = @summary_width, max = width - 1, indent = @summary_indent, &blk)","<p>Puts option summary into <code>to</code> and returns <code>to</code>.\nYields each line if a block is given.\n<p>to &mdash; Output destination, …\n"],["summarize","OptionParser::List","OptionParser/List.html#method-i-summarize","(*args, &block)","<p>Creates the summary table, passing each line to the <code>block</code>\n(without newline). The arguments <code>args</code> are passed …\n"],["summarize","OptionParser::Switch","OptionParser/Switch.html#method-i-summarize","(sdone = [], ldone = [], width = 1, max = width - 1, indent = \"\")","<p>Produces the summary text. Each line of the summary is yielded to the block\n(without newline).\n<p>sdone &mdash; "],["summary","RDoc::Stats","RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["summary=","Gem::Specification","Gem/Specification.html#method-i-summary-3D","(str)","<p>A short summary of this gem&#39;s description.\n"],["sunday?","Date","Date.html#method-i-sunday-3F","()","<p>Returns true if the date is Sunday.\n"],["sunday?","Time","Time.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Sunday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1990</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">1</span>)       <span class=\"ruby-comment\">#=&gt; 1990-04-01 00:00:00 -0600 ...</span>\n</pre>\n"],["super_each","Shell::SystemCommand","Shell/SystemCommand.html#method-i-super_each","(rs = nil)",""],["super_method","Method","Method.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or\nnil if there is no method …\n"],["super_method","UnboundMethod","UnboundMethod.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or\nnil if there is no method …\n"],["superclass","Class","Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">superclass</span>          <span class=\"ruby-comment\">#=&gt; IO</span>\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">superclass</span>            <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["superclass","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass\nobject, returns the name if it …\n"],["superclass","RDoc::NormalModule","RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don&#39;t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["superclass_method","RDoc::AnyMethod","RDoc/AnyMethod.html#method-i-superclass_method","()","<p>For methods that <code>super</code>, find the superclass method that would\nbe called.\n"],["superset?","Set","Set.html#method-i-superset-3F","(set)","<p>Returns true if the set is a superset of the given set.\n"],["supply_default_content_type","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-supply_default_content_type","()",""],["supported?","RSS::Maker","RSS/Maker.html#method-c-supported-3F","(version)","<p>Returns true if the version is supported\n"],["suppress","RDoc::CodeObject","RDoc/CodeObject.html#method-i-suppress","()","<p>Use this to suppress a CodeObject and all its children until the next file\nit is seen in or documentation …\n"],["suppressed?","RDoc::CodeObject","RDoc/CodeObject.html#method-i-suppressed-3F","()","<p>Has this class been suppressed?\n<p>See also #suppress\n"],["suspend","DEBUGGER__","DEBUGGER__.html#method-c-suspend","()",""],["suspend_context","IRB::Irb","IRB/Irb.html#method-i-suspend_context","(context)","<p>Evaluates the given block using the given <code>context</code> as the\nContext.\n"],["suspend_input_method","IRB::Irb","IRB/Irb.html#method-i-suspend_input_method","(input_method)","<p>Evaluates the given block using the given <code>input_method</code> as the\nContext#io.\n<p>Used by the irb commands <code>source</code> …\n"],["suspend_name","IRB::Irb","IRB/Irb.html#method-i-suspend_name","(path = nil, name = nil)","<p>Evaluates the given block using the given <code>path</code> as the\nContext#irb_path and <code>name</code> as the Context#irb_name …\n"],["suspend_workspace","IRB::Irb","IRB/Irb.html#method-i-suspend_workspace","(workspace)","<p>Evaluates the given block using the given <code>workspace</code> as the\nContext#workspace.\n<p>Used by the irb command …\n"],["swapcase","String","String.html#method-i-swapcase","(*args)","<p>Returns a copy of <em>str</em> with uppercase alphabetic characters\nconverted to lowercase and lowercase characters …\n"],["swapcase","Symbol","Symbol.html#method-i-swapcase","(*args)","<p>Same as <code>sym.to_s.swapcase.intern</code>.\n"],["swapcase!","String","String.html#method-i-swapcase-21","(*args)","<p>Equivalent to <code>String#swapcase</code>, but modifies the receiver in\nplace, returning <em>str</em>, or <code>nil</code> if no changes …\n"],["switch","IRB::JobManager","IRB/JobManager.html#method-i-switch","(key)","<p>Changes the current active irb session to the given <code>key</code> in the\njobs Array.\n<p>Raises an IrbAlreadyDead exception …\n"],["switch","Process::GID","Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a\n<em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a\n<em>block</em> is given, the user IDs will …\n"],["switch_name","OptionParser::Switch","OptionParser/Switch.html#method-i-switch_name","()","<p>Main name of the switch.\n"],["sym","Fiddle::CompositeHandler","Fiddle/CompositeHandler.html#method-i-sym","(symbol)","<p>Returns the address as an Integer from any handlers with the function named\n<code>symbol</code>.\n<p>Raises a DLError if …\n"],["sym","Fiddle::Handle","Fiddle/Handle.html#method-c-sym","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["sym","Fiddle::Handle","Fiddle/Handle.html#method-i-sym","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["symbolize","Psych::ClassLoader::Restricted","Psych/ClassLoader/Restricted.html#method-i-symbolize","(sym)",""],["symlink","File","File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file\n<em>old_name</em>. Raises a <code>NotImplemented</code> exception …\n"],["symlink","FileUtils","FileUtils.html#method-i-symlink","(src, dest, force: nil, noop: nil, verbose: nil)",""],["symlink","FileUtils","FileUtils.html#method-c-symlink","(src, dest, force: nil, noop: nil, verbose: nil)",""],["symlink?","File","File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","File::Stat","File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["symlink?","FileTest","FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-symlink-3F","()","<p>Is this tar entry a symlink?\n"],["symlink?","Pathname","Pathname.html#method-i-symlink-3F","()","<p>See FileTest.symlink?.\n"],["symmetric?","Matrix","Matrix.html#method-i-symmetric-3F","()","<p>Returns <code>true</code> if this is a symmetric matrix. Raises an error if\nmatrix is not square.\n"],["sync","GDBM","GDBM.html#method-i-sync","()","<p>Unless the <em>gdbm</em> object has been opened with the\n<strong>SYNC</strong> flag, it is not guaranteed that database modification\n…\n"],["sync","IO","IO.html#method-i-sync","()","<p>Returns the current “sync mode&#39;&#39; of <em>ios</em>. When sync mode is\ntrue, all output is immediately flushed …\n"],["sync","StringIO","StringIO.html#method-i-sync","()","<p>Returns <code>true</code> always.\n"],["sync","Zlib::GzipFile","Zlib/GzipFile.html#method-i-sync","()","<p>Same as IO#sync\n"],["sync","Zlib::Inflate","Zlib/Inflate.html#method-i-sync","(p1)","<p>Inputs <code>string</code> into the end of input buffer and skips data\nuntil a full flush point can be found.  If …\n"],["sync=","IO","IO.html#method-i-sync-3D","(p1)","<p>Sets the “sync mode&#39;&#39; to <code>true</code> or <code>false</code>.\nWhen sync mode is true, all output is immediately flushed …\n"],["sync=","StringIO","StringIO.html#method-i-sync-3D","(p1)","<p>Returns the argument unchanged.  Just for compatibility to IO.\n"],["sync=","Zlib::GzipFile","Zlib/GzipFile.html#method-i-sync-3D","(p1)","<p>Same as IO.  If flag is <code>true</code>, the associated IO object must\nrespond to the <code>flush</code> method.  While <code>sync</code> …\n"],["sync_exclusive?","Sync_m","Sync_m.html#method-i-sync_exclusive-3F","()",""],["sync_exclusive?","Sync_m","Sync_m.html#method-i-sync_exclusive-3F","()",""],["sync_extend","Sync_m","Sync_m.html#method-i-sync_extend","()",""],["sync_extend","Sync_m","Sync_m.html#method-i-sync_extend","()",""],["sync_initialize","Sync_m","Sync_m.html#method-i-sync_initialize","()",""],["sync_initialize","Sync_m","Sync_m.html#method-i-sync_initialize","()",""],["sync_inspect","Sync_m","Sync_m.html#method-i-sync_inspect","()",""],["sync_inspect","Sync_m","Sync_m.html#method-i-sync_inspect","()",""],["sync_lock","Sync_m","Sync_m.html#method-i-sync_lock","(m = EX)",""],["sync_lock","Sync_m","Sync_m.html#method-i-sync_lock","(m = EX)",""],["sync_locked?","Sync_m","Sync_m.html#method-i-sync_locked-3F","()","<p>accessing\n"],["sync_locked?","Sync_m","Sync_m.html#method-i-sync_locked-3F","()","<p>accessing\n"],["sync_point?","Zlib::Inflate","Zlib/Inflate.html#method-i-sync_point-3F","()","<p>Quoted verbatim from original documentation:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">What</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">this?</span>\n</pre>\n<p><code>:)</code>\n"],["sync_shared?","Sync_m","Sync_m.html#method-i-sync_shared-3F","()",""],["sync_shared?","Sync_m","Sync_m.html#method-i-sync_shared-3F","()",""],["sync_synchronize","Sync_m","Sync_m.html#method-i-sync_synchronize","(mode = EX)",""],["sync_synchronize","Sync_m","Sync_m.html#method-i-sync_synchronize","(mode = EX)",""],["sync_try_lock","Sync_m","Sync_m.html#method-i-sync_try_lock","(mode = EX)","<p>locking methods.\n"],["sync_try_lock","Sync_m","Sync_m.html#method-i-sync_try_lock","(mode = EX)","<p>locking methods.\n"],["sync_try_lock_sub","Sync_m","Sync_m.html#method-i-sync_try_lock_sub","(m)",""],["sync_try_lock_sub","Sync_m","Sync_m.html#method-i-sync_try_lock_sub","(m)",""],["sync_unlock","Sync_m","Sync_m.html#method-i-sync_unlock","(m = EX)",""],["sync_unlock","Sync_m","Sync_m.html#method-i-sync_unlock","(m = EX)",""],["synchronize","MonitorMixin","MonitorMixin.html#method-i-synchronize","()",""],["synchronize","Thread::Mutex","Thread/Mutex.html#method-i-synchronize","()","<p>Obtains a lock, runs the block, and releases the lock when the block\ncompletes.  See the example under …\n"],["syncmode=","GDBM","GDBM.html#method-i-syncmode-3D","(p1)","<p>Turns the database&#39;s synchronization mode on or off. If the\nsynchronization mode is turned on, the …\n"],["sysaccept","Socket","Socket.html#method-i-sysaccept","()","<p>Accepts an incoming connection returning an array containing the (integer)\nfile descriptor for the incoming …\n"],["sysaccept","TCPServer","TCPServer.html#method-i-sysaccept","()","<p>Returns a file descriptor of a accepted connection.\n\n<pre>TCPServer.open(&quot;127.0.0.1&quot;, 28561) {|serv|\n  fd = ...</pre>\n"],["sysaccept","UNIXServer","UNIXServer.html#method-i-sysaccept","()","<p>Accepts a new connection. It returns the new file descriptor which is an\ninteger.\n\n<pre>UNIXServer.open(&quot;/tmp/sock&quot;) ...</pre>\n"],["syscall","Kernel","Kernel.html#method-i-syscall","(*args)","<p>Calls the operating system function identified by <em>num</em> and returns\nthe result of the function or raises …\n"],["sysclose","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-sysclose","()","<p>Sends “close notify” to the peer and tries to shut down the SSL connection\ngracefully.\n<p>If sync_close …\n"],["sysconf","Etc","Etc.html#method-c-sysconf","(p1)","<p>Returns system configuration variable using sysconf().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["sysconfdir","Etc","Etc.html#method-c-sysconfdir","()","<p>Returns system configuration directory.\n<p>This is typically “/etc”, but is modified by the prefix …\n"],["syslog","Syslog::Logger","Syslog/Logger.html#method-c-syslog","()","<p>Returns the internal Syslog object that is initialized when the first\ninstance is created.\n"],["syslog=","Syslog::Logger","Syslog/Logger.html#method-c-syslog-3D","(syslog)","<p>Specifies the internal Syslog object to be used.\n"],["sysopen","IO","IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the given path, returning the underlying file descriptor as a\n<code>Integer</code>.\n\n<pre>IO.sysopen(&quot;testfile&quot;)   ...</pre>\n"],["sysopen","Pathname","Pathname.html#method-i-sysopen","(p1 = v1, p2 = v2)","<p>See IO.sysopen.\n"],["sysread","IO","IO.html#method-i-sysread","(p1, p2 = v2)","<p>Reads <em>maxlen</em> bytes from <em>ios</em> using a low-level read and\nreturns them as a string.  Do not mix with other …\n"],["sysread","IO::generic_readable","IO/generic_readable.html#method-i-sysread","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["sysread","Object","Object.html#method-i-sysread","(io, size)","<p>cgi_runner.rb – CGI launcher.\n<p>Author: IPR – Internet Programming with Ruby – writers Copyright © …\n"],["sysread","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-sysread","(*args)","<p>Reads <code>length</code> bytes from the SSL connection.  If a\npre-allocated <code>buffer</code> is provided the data will be written …\n"],["sysread_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-sysread_nonblock","(*args)","<p>A non-blocking version of #sysread.  Raises an SSLError if reading would\nblock.  If “exception: …\n"],["sysseek","IO","IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Seeks to a given <em>offset</em> in the stream according to the value of\n<em>whence</em> (see <code>IO#seek</code> for values of <em>whence</em> …\n"],["syssign","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-syssign","(p1)","<p>Computes and returns the DSA signature of <code>string</code>, where\n<code>string</code> is expected to be an already-computed …\n"],["system","Kernel","Kernel.html#method-i-system","(*args)","<p>Executes <em>command…</em> in a subshell. <em>command…</em> is one of\nfollowing forms.\n\n<pre>commandline                 : ...</pre>\n"],["system","Net::FTP","Net/FTP.html#method-i-system","()","<p>Returns system information.\n"],["system","REXML::DocType","REXML/DocType.html#method-i-system","()","<p>This method retrieves the system identifier identifying the document&#39;s\nDTD\n<p>Method contributed by  …\n"],["system","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-system","(command, *opts)","<p>Executes the given <code>command</code> with the <code>options</code>\nparameter.\n<p>Example:\n\n<pre>print sh.system(&quot;ls&quot;, &quot;-l&quot;)\nsh.system(&quot;ls&quot;, ...</pre>\n"],["system_path=","Shell","Shell.html#method-i-system_path-3D","(path)","<p>Sets the system path (the Shell instance&#39;s PATH environment variable).\n<p><code>path</code> should be an array of …\n"],["systmpdir","Etc","Etc.html#method-c-systmpdir","()","<p>Returns system temporary directory; typically “/tmp”.\n"],["sysverify","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-sysverify","(p1, p2)","<p>Verifies whether the signature is valid given the message digest input. It\ndoes so by validating <code>sig</code> …\n"],["syswrite","IO","IO.html#method-i-syswrite","(p1)","<p>Writes the given string to <em>ios</em> using a low-level write. Returns\nthe number of bytes written. Do not mix …\n"],["syswrite","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-syswrite","(p1)","<p>Writes <code>string</code> to the SSL connection.\n"],["syswrite_nonblock","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-syswrite_nonblock","(p1, p2 = {})","<p>Writes <code>string</code> to the SSL connection in a non-blocking manner. \nRaises an SSLError if writing would block. …\n"],["t","Matrix","Matrix.html#method-i-t","()",""],["table","CSV","CSV.html#method-c-table","(path, options = Hash.new)","<p>A shortcut for:\n\n<pre>CSV.read( path, { headers:           true,\n                  converters:        :numeric, ...</pre>\n"],["tag","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tag","(tag)","<p>Tags the current state of the dependency as the given tag @param  [Object]\ntag an opaque tag for the …\n"],["tag","Gem::Resolver::Molinillo::DependencyGraph::Log","Gem/Resolver/Molinillo/DependencyGraph/Log.html#method-i-tag","(graph, tag)","<p>@macro action\n"],["tag","RSS::Element","RSS/Element.html#method-i-tag","(indent, additional_attrs={}, &block)",""],["tag","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-tag","(indent, attrs={}, &block)",""],["tag","UncaughtThrowError","UncaughtThrowError.html#method-i-tag","()","<p>Return the tag object which was called for.\n"],["tag_end","REXML::StreamListener","REXML/StreamListener.html#method-i-tag_end","(name)","<p>Called when the end tag is reached.  In the case of &lt;tag/&gt;, tag_end\nwill be called immediately …\n"],["tag_end","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-tag_end","(name)",""],["tag_filter","RSS::Element","RSS/Element.html#method-i-tag_filter","(tags)",""],["tag_name","RSS::Element","RSS/Element.html#method-i-tag_name","()",""],["tag_name","RSS::Element","RSS/Element.html#method-c-tag_name","()",""],["tag_name_with_prefix","RSS::Element","RSS/Element.html#method-i-tag_name_with_prefix","(prefix)",""],["tag_start","REXML::StreamListener","REXML/StreamListener.html#method-i-tag_start","(name, attrs)","<p>Called when a tag is encountered. @p name the tag name @p attrs an array of\narrays of attribute/value …\n"],["tag_start","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-tag_start","(name, attributes)",""],["tagurize","Psych","Psych.html#method-c-tagurize","(thing)",""],["taint","Delegator","Delegator.html#method-i-taint","","<p>Taint both the object returned by _<em>getobj</em>_ and self.\n"],["taint","Object","Object.html#method-i-taint","()","<p>Mark the object as tainted.\n<p>Objects that are marked as tainted will be restricted from various built-in\n…\n"],["taint","Pathname","Pathname.html#method-i-taint","()","<p>Taints this Pathname.\n<p>See Object.taint.\n"],["tainted?","Object","Object.html#method-i-tainted-3F","()","<p>Returns true if the object is tainted.\n<p>See #taint for more information.\n"],["take","Array","Array.html#method-i-take","(p1)","<p>Returns first <code>n</code> elements from the array.\n<p>If a negative number is given, raises an ArgumentError.\n<p>See also …\n"],["take","Enumerable","Enumerable.html#method-i-take","(p1)","<p>Returns first n elements from <em>enum</em>.\n\n<pre>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=&gt; [1, 2, 3]\na.take(30) ...</pre>\n"],["take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take","(p1)",""],["take","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-take","(tuple, sec=nil, &block)","<p>Removes <code>tuple</code>\n"],["take","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-take","(tuple, sec=nil, &block)","<p>Takes <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#take.\n"],["take_while","Array","Array.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerable","Enumerable.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take_while","()",""],["tan","CMath","CMath.html#method-c-tan","(z)","<p>Returns the tangent of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">tan</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.27175258531951174+1.0839233273386943i)</span>\n</pre>\n"],["tan","CMath","CMath.html#method-i-tan","(z)","<p>Returns the tangent of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">tan</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (0.27175258531951174+1.0839233273386943i)</span>\n</pre>\n"],["tan","Math","Math.html#method-c-tan","(p1)","<p>Computes the tangent of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY,  …\n"],["tanh","CMath","CMath.html#method-i-tanh","(z)","<p>Returns the hyperbolic tangent of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">tanh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0839233273386943+0.27175258531951174i)</span>\n</pre>\n"],["tanh","CMath","CMath.html#method-c-tanh","(z)","<p>Returns the hyperbolic tangent of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CMath</span>.<span class=\"ruby-identifier\">tanh</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">i</span>) <span class=\"ruby-comment\">#=&gt; (1.0839233273386943+0.27175258531951174i)</span>\n</pre>\n"],["tanh","Math","Math.html#method-c-tanh","(p1)","<p>Computes the hyperbolic tangent of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-1, …\n"],["tap","Object","Object.html#method-i-tap","()","<p>Yields self to the block, and then returns self. The primary purpose of\nthis method is to “tap into” …\n"],["tar_dir_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_dir_header","(name, prefix, mode, mtime)",""],["tar_file_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_file_header","(fname, dname, mode, length, mtime)",""],["tar_symlink_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_symlink_header","(fname, prefix, mode, mtime, linkname)",""],["tcp","Addrinfo","Addrinfo.html#method-c-tcp","(p1, p2)","<p>returns an addrinfo object for TCP address.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">tcp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-string\">&quot;smtp&quot;</span>) <span class=\"ruby-comment\">#=&gt; #&lt;Addrinfo: 127.0.0.1:25 ...</span>\n</pre>\n"],["tcp","Socket","Socket.html#method-c-tcp","(host, port, local_host = nil, local_port = nil, connect_timeout: nil)","<p>creates a new socket object connected to host:port using TCP/IP.\n<p>If local_host:local_port is given, the …\n"],["tcp_server_loop","Socket","Socket.html#method-c-tcp_server_loop","(host=nil, port)","<p>creates a TCP/IP server on <em>port</em> and calls the block for each\nconnection accepted. The block is called …\n"],["tcp_server_sockets","Socket","Socket.html#method-c-tcp_server_sockets","(host=nil, port)","<p>creates TCP/IP server sockets for <em>host</em> and <em>port</em>.\n<em>host</em> is optional.\n<p>If no block given, it returns an array …\n"],["tcp_socket","Net::SMTP","Net/SMTP.html#method-i-tcp_socket","(address, port)",""],["teardown","Gem::TestCase","Gem/TestCase.html#method-i-teardown","()","<p>#teardown restores the process to its original state and removes the\ntempdir unless the <code>KEEP_FILES</code> environment …\n"],["tee","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-tee","(file)","<p>Returns a Tee filter object, with the given <code>file</code> command\n"],["tell","ARGF","ARGF.html#method-i-tell","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["tell","Dir","Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...</pre>\n"],["tell","IO","IO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["tell","StringIO","StringIO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <strong>strio</strong>.\n"],["tell","Zlib::GzipReader","Zlib/GzipReader.html#method-i-tell","()","<p>Total number of output bytes output so far.\n"],["tell","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-tell","()","<p>Total number of input bytes read so far.\n"],["temp_dir","RDoc::TestCase","RDoc/TestCase.html#method-i-temp_dir","()","<p>Creates a temporary directory changes the current directory to it for the\nduration of the block.\n<p>Depends …\n"],["template_dir_for","RDoc::Options","RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["terminal","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-terminal","(o)",""],["terminate","GetoptLong","GetoptLong.html#method-i-terminate","()","<p>Explicitly terminate option processing.\n"],["terminate","OptionParser","OptionParser.html#method-c-terminate","(arg = nil)",""],["terminate","OptionParser","OptionParser.html#method-i-terminate","(arg = nil)","<p>Terminates option parsing. Optional parameter <code>arg</code> is a string\npushed back to be the first non-option …\n"],["terminate","Shell::SystemCommand","Shell/SystemCommand.html#method-i-terminate","()",""],["terminate","StringScanner","StringScanner.html#method-i-terminate","()","<p>Set the scan pointer to the end of the string and clear matching data.\n"],["terminate","Thread","Thread.html#method-i-terminate","()","<p>Terminates <code>thr</code> and schedules another thread to be run.\n<p>If this thread is already marked to be killed, …\n"],["terminate","WEBrick","WEBrick.html#method-i-terminate","()",""],["terminate","WEBrick::Utils::TimeoutHandler","WEBrick/Utils/TimeoutHandler.html#method-c-terminate","()",""],["terminate_interaction","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminate_interaction","(status=0)",""],["terminate_interaction","Gem::StreamUI","Gem/StreamUI.html#method-i-terminate_interaction","(status = 0)","<p>Terminate the application with exit code <code>status</code>, running any\nexit handlers that might have been defined. …\n"],["terminate_interaction","Gem::UserInteraction","Gem/UserInteraction.html#method-i-terminate_interaction","(exit_code = 0)","<p>Terminates the RubyGems process with the given <code>exit_code</code>\n"],["terminate_job","Shell::ProcessController","Shell/ProcessController.html#method-i-terminate_job","(command)","<p>terminate a job\n"],["terminated?","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminated-3F","()",""],["terminated?","GetoptLong","GetoptLong.html#method-i-terminated-3F","()","<p>Returns true if option processing has terminated, false otherwise.\n"],["termsig","Process::Status","Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or\n<code>nil</code> if self was not terminated by …\n"],["test","Kernel","Kernel.html#method-i-test","(*args)","<p>Uses the character <code>cmd</code> to perform various tests on\n<code>file1</code> (first table below) or on <code>file1</code> and\n<code>file2</code> (second …\n"],["test","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-test","(command, file1, file2=nil)","<p>Tests if the given <code>command</code> exists in <code>file1</code>, or\noptionally <code>file2</code>.\n<p>Example:\n\n<pre>sh[?e, &quot;foo&quot;]\nsh[:e, &quot;foo&quot;]\nsh[&quot;e&quot;, ...</pre>\n"],["text","PrettyPrint","PrettyPrint.html#method-i-text","(obj, width=obj.length)","<p>This adds <code>obj</code> as a text of <code>width</code> columns in\nwidth.\n<p>If <code>width</code> is not specified, obj.length is used.\n"],["text","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-text","(obj, width=nil)","<p>Add <code>obj</code> to the text to be output.\n<p><code>width</code> argument is here for compatibility. It is a noop\nargument.\n"],["text","REXML::Element","REXML/Element.html#method-i-text","( path = nil )","<p>A convenience method which returns the String value of the <em>first</em>\nchild text element, if one exists, and …\n"],["text","REXML::Functions","REXML/Functions.html#method-c-text","( )",""],["text","REXML::StreamListener","REXML/StreamListener.html#method-i-text","(text)","<p>Called when text is encountered in the document @p text the text content.\n"],["text","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-text","(data)",""],["text=","RDoc::Comment","RDoc/Comment.html#method-i-text-3D","(text)","<p>Replaces this comment&#39;s text with <code>text</code> and resets the\nparsed document.\n<p>An error is raised if the comment …\n"],["text=","REXML::Element","REXML/Element.html#method-i-text-3D","( text )","<p>Sets the first Text child of this object.  See text() for a discussion\nabout Text children.\n<p>If a Text …\n"],["text=","REXML::Light::Node","REXML/Light/Node.html#method-i-text-3D","( foo )",""],["text?","RDoc::TopLevel","RDoc/TopLevel.html#method-i-text-3F","()","<p>Is this TopLevel from a text file instead of a source code file?\n"],["text?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-text-3F","()","<p>Content: [ String raw_text, String unnormalized_text ]\n"],["text_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-text_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a text field Input element, as a String.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits initial …\n"],["text_type_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-text_type_writer","(name, disp_name=name)",""],["textarea","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-textarea","(name = \"\", cols = 70, rows = 10)","<p>Generate a TextArea element, as a String.\n<p><code>name</code> is the name of the textarea.  <code>cols</code> is the\nnumber of columns …\n"],["textinput","RSS::Rss","RSS/Rss.html#method-i-textinput","()",""],["texts","REXML::Element","REXML/Element.html#method-i-texts","()","<p>Get an array of all Text children. IMMUTABLE\n"],["this","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-this","()",""],["this_update","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-this_update","()",""],["thread","DRb","DRb.html#method-c-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","DRb","DRb.html#method-i-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","IRB::JobManager","IRB/JobManager.html#method-i-thread","(key)","<p>Returns the thread for the given <code>key</code> object, see #search for\nmore information.\n"],["thread","Net::IMAP","Net/IMAP.html#method-i-thread","(algorithm, search_keys, charset)","<p>Similar to #search(), but returns message sequence numbers in threaded\nformat, as a Net::IMAP::ThreadMember …\n"],["thread_internal","Net::IMAP","Net/IMAP.html#method-i-thread_internal","(cmd, algorithm, search_keys, charset)",""],["thread_list","DEBUGGER__","DEBUGGER__.html#method-c-thread_list","(num)",""],["thread_list_all","DEBUGGER__","DEBUGGER__.html#method-c-thread_list_all","()","<p>Prints all threads in @thread_list to @stdout. Returns a sorted array of\nvalues from the @thread_list …\n"],["thread_variable?","Thread","Thread.html#method-i-thread_variable-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre>me = Thread.current\nme.thread_variable_set(:oliver, ...</pre>\n"],["thread_variable_get","Thread","Thread.html#method-i-thread_variable_get","(p1)","<p>Returns the value of a thread local variable that has been set.  Note that\nthese are different than fiber …\n"],["thread_variable_set","Thread","Thread.html#method-i-thread_variable_set","(p1, p2)","<p>Sets a thread local with <code>key</code> to <code>value</code>.  Note that\nthese are local to threads, and not to fibers.  Please …\n"],["thread_variables","Thread","Thread.html#method-i-thread_variables","()","<p>Returns an array of the names of the thread-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</pre>\n"],["throw","Kernel","Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting\nfor <em>tag</em>. Raises <code>UncaughtThrowError</code> if …\n"],["thursday?","Date","Date.html#method-i-thursday-3F","()","<p>Returns true if the date is Thursday.\n"],["thursday?","Time","Time.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Thursday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1995</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">21</span>)     <span class=\"ruby-comment\">#=&gt; 1995-12-21 00:00:00 -0600 ...</span>\n</pre>\n"],["time","Gem","Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug\nUI output.\n"],["time","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-time","()","<p>Returns the time at which the session was established.\n"],["time","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-time","()",""],["time=","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-time-3D","(p1)","<p>Sets start time of the session. Time resolution is in seconds.\n"],["time=","OpenSSL::X509::Revoked","OpenSSL/X509/Revoked.html#method-i-time-3D","(p1)",""],["time=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-time-3D","(p1)","<p>Sets the time to be used in verifications.\n"],["time=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-time-3D","(p1)","<p>Sets the time used in the verification. If not set, the current time is\nused.\n"],["timeout","Object","Object.html#method-i-timeout","(*args, &block)",""],["timeout","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-timeout","()","<p>Returns the timeout value set for the session, in seconds from the\nestablished time.\n"],["timeout","Timeout","Timeout.html#method-c-timeout","(sec, klass = nil, message = nil)","<p>Perform an operation in a block, raising an error if it takes longer than\n<code>sec</code> seconds to complete.\n<p>sec … &mdash; "],["timeout","Timeout","Timeout.html#method-i-timeout","(sec, klass = nil, message = nil)","<p>Perform an operation in a block, raising an error if it takes longer than\n<code>sec</code> seconds to complete.\n<p>sec … &mdash; "],["timeout=","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-timeout-3D","(p1)","<p>Sets how long until the session expires in seconds.\n"],["timeouts=","Resolv::DNS","Resolv/DNS.html#method-i-timeouts-3D","(values)","<p>Sets the resolver timeouts.  This may be a single positive number or an\narray of positive numbers representing …\n"],["times","Integer","Integer.html#method-i-times","()","<p>Iterates the given block <code>int</code> times, passing in values from\nzero to <code>int - 1</code>.\n<p>If no block is given, an  …\n"],["times","Integer","Integer.html#method-i-times","()","<p>Iterates the given block <code>int</code> times, passing in values from\nzero to <code>int - 1</code>.\n<p>If no block is given, an  …\n"],["times","Process","Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see <code>Process::Tms</code>) that\ncontains user and system CPU times for this process, …\n"],["timestamp","Socket::AncillaryData","Socket/AncillaryData.html#method-i-timestamp","()","<p>returns the timestamp as a time object.\n<p><em>ancillarydata</em> should be one of following type:\n<p>SOL_SOCKET/SCM_TIMESTAMP …\n"],["title","RDoc::Store","RDoc/Store.html#method-i-title","()","<p>Gets the title for this RDoc store.  This is used as the title in each page\non the RDoc server\n"],["title=","RDoc::Store","RDoc/Store.html#method-i-title-3D","(title)","<p>Sets the title page for this RDoc store.\n"],["tls?","Net::SMTP","Net/SMTP.html#method-i-tls-3F","()","<p>true if this object uses SMTP/TLS (SMTPS).\n"],["tlsconnect","Net::SMTP","Net/SMTP.html#method-i-tlsconnect","(s)",""],["tmp_dh_callback","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-tmp_dh_callback","()",""],["tmp_ecdh_callback","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-tmp_ecdh_callback","()",""],["tmp_key","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-tmp_key","()","<p>Returns the ephemeral key used in case of forward secrecy cipher.\n"],["tmpdir","Dir","Dir.html#method-c-tmpdir","()","<p>Returns the operating system&#39;s temporary file path.\n"],["to=","URI::MailTo","URI/MailTo.html#method-i-to-3D","(v)","<p>setter for to <code>v</code>\n"],["to_a","ARGF","ARGF.html#method-i-to_a","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["to_a","Array","Array.html#method-i-to_a","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of Array, converts the receiver to an Array object.\n"],["to_a","Benchmark::Tms","Benchmark/Tms.html#method-i-to_a","()","<p>Returns a new 6-element array, consisting of the label, user CPU time,\nsystem CPU time, children&#39;s …\n"],["to_a","CSV::Table","CSV/Table.html#method-i-to_a","()","<p>Returns the table as an Array of Arrays.  Headers will be the first row,\nthen all of the field rows will …\n"],["to_a","DBM","DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays,\nand returns it.\n"],["to_a","ENV","ENV.html#method-c-to_a","()","<p>Converts the environment variables into an array of names and value arrays.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [[&quot;TERM&quot;, &quot;xterm-color&quot;], ...</span>\n</pre>\n"],["to_a","Enumerable","Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">to_a</span>                       <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5, 6, ...</span>\n</pre>\n"],["to_a","GDBM","GDBM.html#method-i-to_a","()","<p>Returns an array of all key-value pairs contained in the database.\n"],["to_a","Gem::List","Gem/List.html#method-i-to_a","()",""],["to_a","Gem::NameTuple","Gem/NameTuple.html#method-i-to_a","()","<p>Convert back to the [name, version, platform] tuple\n"],["to_a","Gem::Platform","Gem/Platform.html#method-i-to_a","()",""],["to_a","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-to_a","()",""],["to_a","Gem::SourceList","Gem/SourceList.html#method-i-to_a","()","<p>Returns an Array of source URI Strings.\n"],["to_a","Hash","Hash.html#method-i-to_a","()","<p>Converts <em>hsh</em> to a nested array of <code>[</code> <em>key,\nvalue</em> <code>]</code> arrays.\n\n<pre>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; ...</pre>\n"],["to_a","MatchData","MatchData.html#method-i-to_a","()","<p>Returns the array of matches.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; [&quot;HX1138&quot;, &quot;H&quot;, &quot;X&quot;, ...</span>\n</pre>\n"],["to_a","Matrix","Matrix.html#method-i-to_a","()","<p>Returns an array of arrays that describe the rows of the matrix.\n"],["to_a","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-to_a","()",""],["to_a","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-to_a","()",""],["to_a","NilClass","NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; []</span>\n</pre>\n"],["to_a","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_a","()",""],["to_a","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_a","()","<p>Returns an Array representation of the distinguished name suitable for\npassing to ::new\n"],["to_a","OptionParser","OptionParser.html#method-i-to_a","()","<p>Returns option summary list.\n"],["to_a","REXML::Attributes","REXML/Attributes.html#method-i-to_a","()",""],["to_a","REXML::Elements","REXML/Elements.html#method-i-to_a","( xpath=nil )","<p>Returns an Array of Element children.  An XPath may be supplied to filter\nthe children.  Only Element …\n"],["to_a","REXML::Parent","REXML/Parent.html#method-i-to_a","()",""],["to_a","Rinda::RingFinger","Rinda/RingFinger.html#method-i-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","Rinda::RingFinger","Rinda/RingFinger.html#method-c-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_a","()","<p>Returns an Array with 14 elements representing the instruction sequence\nwith the following data:\n<p>magic … &mdash; "],["to_a","SDBM","SDBM.html#method-i-to_a","()","<p>Returns a new Array containing each key-value pair in the database.\n<p>Example:\n\n<pre>require &#39;sdbm&#39;\n\nSDBM.open ...</pre>\n"],["to_a","Set","Set.html#method-i-to_a","()","<p>Converts the set to an array.  The order of elements is uncertain.\n"],["to_a","Shell::Filter","Shell/Filter.html#method-i-to_a","()",""],["to_a","Struct","Struct.html#method-i-to_a","()","<p>Returns the values for this struct as an Array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["to_a","Time","Time.html#method-i-to_a","()","<p>Returns a ten-element <em>array</em> of values for <em>time</em>:\n\n<pre>[sec, min, hour, day, month, year, wday, yday, isdst, ...</pre>\n"],["to_a","Vector","Vector.html#method-i-to_a","()","<p>Returns the elements of the vector in an array.\n"],["to_a","YAML::DBM","YAML/DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays,\nand returns it.\n"],["to_ary","Array","Array.html#method-i-to_ary","()","<p>Returns <code>self</code>.\n"],["to_ary","Gem::SourceList","Gem/SourceList.html#method-i-to_ary","()",""],["to_ary","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-to_ary","()","<p>Returns [eigenvector_matrix, eigenvalue_matrix, eigenvector_matrix_inv]\n"],["to_ary","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-to_ary","()","<p>Returns <code>L</code>, <code>U</code>, <code>P</code> in an array\n"],["to_ary","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-to_ary","()","<p>A FormData will behave like an Array\n"],["to_atom","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-to_atom","(type, &block)",""],["to_basic","Gem::NameTuple","Gem/NameTuple.html#method-c-to_basic","(list)","<p>Turn an array of NameTuple objects back into an array of\n<p>name, version, platform &mdash; tuples.\n\n"],["to_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_binary","(p1 = v1)","<p>Returns serialized iseq binary format data as a String object. A\ncorresponding iseq object is created …\n"],["to_bn","Integer","Integer.html#method-i-to_bn","()","<p>Casts an Integer as an OpenSSL::BN\n<p>See `man bn` for more info.\n"],["to_bn","Integer","Integer.html#method-i-to_bn","()","<p>Casts an Integer as an OpenSSL::BN\n<p>See `man bn` for more info.\n"],["to_bn","OpenSSL::BN","OpenSSL/BN.html#method-i-to_bn","()",""],["to_bn","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-to_bn","(p1 = v1)","<p>Convert the EC point into an octet string and store in an OpenSSL::BN. If\n<code>conversion_form</code> is given, the …\n"],["to_c","Complex","Complex.html#method-i-to_c","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_c</span>      <span class=\"ruby-comment\">#=&gt; (2+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_c</span>  <span class=\"ruby-comment\">#=&gt; (-8+6i)</span>\n</pre>\n"],["to_c","NilClass","NilClass.html#method-i-to_c","()","<p>Returns zero as a complex.\n"],["to_c","Numeric","Numeric.html#method-i-to_c","()","<p>Returns the value as a complex.\n"],["to_c","String","String.html#method-i-to_c","()","<p>Returns a complex which denotes the string form.  The parser ignores\nleading whitespaces and trailing …\n"],["to_class_name","RSS::Utils","RSS/Utils.html#method-i-to_class_name","(name)","<p>Given a <code>name</code> in a name_with_underscores or a name-with-dashes\nformat, returns the CamelCase version of …\n"],["to_csv","CSV::Row","CSV/Row.html#method-i-to_csv","(options = Hash.new)","<p>Returns the row as a CSV String.  Headers are not used.  Equivalent to:\n\n<pre>csv_row.fields.to_csv( options ...</pre>\n"],["to_csv","CSV::Table","CSV/Table.html#method-i-to_csv","(options = Hash.new)","<p>Returns the table as a complete CSV String.  Headers will be listed first,\nthen all of the field rows. …\n"],["to_d","BigDecimal","BigDecimal.html#method-i-to_d","()","<p>Returns self.\n"],["to_d","Float","Float.html#method-i-to_d","(precision=nil)","<p>Convert <code>flt</code> to a BigDecimal and return it.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-value\">0.5</span>.<span class=\"ruby-identifier\">to_d</span>\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_d","Integer","Integer.html#method-i-to_d","()","<p>Convert <code>int</code> to a BigDecimal and return it.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-value\">42</span>.<span class=\"ruby-identifier\">to_d</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_d","Integer","Integer.html#method-i-to_d","()","<p>Convert <code>int</code> to a BigDecimal and return it.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;bigdecimal/util&#39;</span>\n\n<span class=\"ruby-value\">42</span>.<span class=\"ruby-identifier\">to_d</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_d","Rational","Rational.html#method-i-to_d","(precision)","<p>Converts a Rational to a BigDecimal.\n<p>The required <code>precision</code> parameter is used to determine the\namount …\n"],["to_d","String","String.html#method-i-to_d","()","<p>Convert <code>string</code> to a BigDecimal and return it.\n\n<pre>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\n&quot;0.5&quot;.to_d ...</pre>\n"],["to_date","Date","Date.html#method-i-to_date","()","<p>Returns self.\n"],["to_date","DateTime","DateTime.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_date","Time","Time.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_datetime","Date","Date.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_datetime","DateTime","DateTime.html#method-i-to_datetime","()","<p>Returns self.\n"],["to_datetime","Time","Time.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_der","OpenSSL::ASN1::ASN1Data","OpenSSL/ASN1/ASN1Data.html#method-i-to_der","()","<p>Encodes this ASN1Data into a DER-encoded String value. The result is\nDER-encoded except for the possibility …\n"],["to_der","OpenSSL::ASN1::Constructive","OpenSSL/ASN1/Constructive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details.\n"],["to_der","OpenSSL::ASN1::Primitive","OpenSSL/ASN1/Primitive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details. *\n"],["to_der","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_der","()","<p>Returns the DER encoding of this SPKI.\n"],["to_der","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-to_der","()","<p>Encodes this basic response into a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::CertificateId","OpenSSL/OCSP/CertificateId.html#method-i-to_der","()","<p>Encodes this certificate identifier into a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-to_der","()","<p>Returns this request as a DER-encoded string\n"],["to_der","OpenSSL::OCSP::Response","OpenSSL/OCSP/Response.html#method-i-to_der","()","<p>Returns this response as a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::SingleResponse","OpenSSL/OCSP/SingleResponse.html#method-i-to_der","()","<p>Encodes this SingleResponse into a DER-encoded string.\n"],["to_der","OpenSSL::PKCS12","OpenSSL/PKCS12.html#method-i-to_der","()",""],["to_der","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-to_der","()",""],["to_der","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_der","()","<p>Encodes this DH to its DER encoding. Note that any existing per-session\npublic/private keys will <strong>not</strong> …\n"],["to_der","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_der","()","<p>Encodes this DSA to its DER encoding.\n"],["to_der","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPrivateKey_bio()\n"],["to_der","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPKParameters_bio()\n"],["to_der","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_der","()","<p>Outputs this keypair in DER encoding.\n"],["to_der","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-to_der","()","<p>Returns an ASN1 encoded String that contains the Session object.\n"],["to_der","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_der","()","<p>Converts the name to DER encoding\n"],["to_der","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_der","()",""],["to_digits","BigDecimal","BigDecimal.html#method-i-to_digits","()","<p>Converts a BigDecimal to a String of the form “nnnnnn.mmm”. This method is\ndeprecated; use …\n"],["to_dot","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-to_dot","(options = {})","<p>@param [Hash] options options for dot output. @return [String] Returns a\ndot format representation of …\n"],["to_element_methods","RSS::Element","RSS/Element.html#method-c-to_element_methods","()",""],["to_enum","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_enum","(*args)","<p>Similar to Kernel#to_enum, except it returns a lazy enumerator. This makes\nit easy to define Enumerable …\n"],["to_enum","Object","Object.html#method-i-to_enum","(*args)","<p>Creates a new Enumerator which will enumerate by calling\n<code>method</code> on <code>obj</code>, passing <code>args</code> if any.\n<p>If a block …\n"],["to_f","BigDecimal","BigDecimal.html#method-i-to_f","()","<p>Returns a new Float object having approximately the same value as the\nBigDecimal number. Normal accuracy …\n"],["to_f","Complex","Complex.html#method-i-to_f","()","<p>Returns the value as a float if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1, 0).to_f ...</pre>\n"],["to_f","Float","Float.html#method-i-to_f","()","<p>Since <code>float</code> is already a float, returns <code>self</code>.\n"],["to_f","Integer","Integer.html#method-i-to_f","()","<p>Converts <code>int</code> to a <code>Float</code>.  If <code>int</code>\ndoesn&#39;t fit in a <code>Float</code>, the result is infinity.\n"],["to_f","Integer","Integer.html#method-i-to_f","()","<p>Converts <code>int</code> to a <code>Float</code>.  If <code>int</code>\ndoesn&#39;t fit in a <code>Float</code>, the result is infinity.\n"],["to_f","NilClass","NilClass.html#method-i-to_f","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_f</span>   <span class=\"ruby-comment\">#=&gt; 0.0</span>\n</pre>\n"],["to_f","Rational","Rational.html#method-i-to_f","()","<p>Return the value as a float.\n\n<pre>Rational(2).to_f      #=&gt; 2.0\nRational(9, 4).to_f   #=&gt; 2.25\nRational(-3, ...</pre>\n"],["to_f","String","String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <em>str</em> as a\nfloating point number. Extraneous characters …\n"],["to_f","Time","Time.html#method-i-to_f","()","<p>Returns the value of <em>time</em> as a floating point number of seconds\nsince the Epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; ...</pre>\n"],["to_feed","RSS::Maker::Atom::Entry::Items","RSS/Maker/Atom/Entry/Items.html#method-i-to_feed","(entry)",""],["to_feed","RSS::Maker::Atom::Entry::Items::Item","RSS/Maker/Atom/Entry/Items/Item.html#method-i-to_feed","(entry)",""],["to_feed","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::Cloud","RSS/Maker/Atom/Feed/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::SkipDays","RSS/Maker/Atom/Feed/Channel/SkipDays.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::SkipHours","RSS/Maker/Atom/Feed/Channel/SkipHours.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Image","RSS/Maker/Atom/Feed/Image.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items","RSS/Maker/Atom/Feed/Items.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item","RSS/Maker/Atom/Feed/Items/Item.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Content","RSS/Maker/Atom/Feed/Items/Item/Content.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Enclosure","RSS/Maker/Atom/Feed/Items/Item/Enclosure.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Guid","RSS/Maker/Atom/Feed/Items/Item/Guid.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Source","RSS/Maker/Atom/Feed/Items/Item/Source.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Source::Icon","RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomCategory","RSS/Maker/AtomCategory.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomGenerator","RSS/Maker/AtomGenerator.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomLink","RSS/Maker/AtomLink.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomLogo","RSS/Maker/AtomLogo.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesImageBase","RSS/Maker/ITunesChannelModel/ITunesImageBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesOwnerBase","RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesItemModel::ITunesDurationBase","RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ImageFaviconModel::ImageFaviconBase","RSS/Maker/ImageFaviconModel/ImageFaviconBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ImageItemModel::ImageItemBase","RSS/Maker/ImageItemModel/ImageItemBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Channel::Authors","RSS/Maker/RSS09/Channel/Authors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Authors::Author","RSS/Maker/RSS09/Channel/Authors/Author.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Categories","RSS/Maker/RSS09/Channel/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Channel::Cloud","RSS/Maker/RSS09/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Channel::Contributors","RSS/Maker/RSS09/Channel/Contributors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Copyright","RSS/Maker/RSS09/Channel/Copyright.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Description","RSS/Maker/RSS09/Channel/Description.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Generator","RSS/Maker/RSS09/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Links","RSS/Maker/RSS09/Channel/Links.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Links::Link","RSS/Maker/RSS09/Channel/Links/Link.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipDays","RSS/Maker/RSS09/Channel/SkipDays.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipDays::Day","RSS/Maker/RSS09/Channel/SkipDays/Day.html#method-i-to_feed","(rss, days)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipHours","RSS/Maker/RSS09/Channel/SkipHours.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipHours::Hour","RSS/Maker/RSS09/Channel/SkipHours/Hour.html#method-i-to_feed","(rss, hours)",""],["to_feed","RSS::Maker::RSS09::Channel::Title","RSS/Maker/RSS09/Channel/Title.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Image","RSS/Maker/RSS09/Image.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items","RSS/Maker/RSS09/Items.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items::Item","RSS/Maker/RSS09/Items/Item.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Authors","RSS/Maker/RSS09/Items/Item/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Categories","RSS/Maker/RSS09/Items/Item/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Content","RSS/Maker/RSS09/Items/Item/Content.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Contributors","RSS/Maker/RSS09/Items/Item/Contributors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Description","RSS/Maker/RSS09/Items/Item/Description.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Enclosure","RSS/Maker/RSS09/Items/Item/Enclosure.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Guid","RSS/Maker/RSS09/Items/Item/Guid.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Links","RSS/Maker/RSS09/Items/Item/Links.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Links::Link","RSS/Maker/RSS09/Items/Item/Links/Link.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Rights","RSS/Maker/RSS09/Items/Item/Rights.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source","RSS/Maker/RSS09/Items/Item/Source.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Authors","RSS/Maker/RSS09/Items/Item/Source/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Categories","RSS/Maker/RSS09/Items/Item/Source/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Contributors","RSS/Maker/RSS09/Items/Item/Source/Contributors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Generator","RSS/Maker/RSS09/Items/Item/Source/Generator.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Icon","RSS/Maker/RSS09/Items/Item/Source/Icon.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Links","RSS/Maker/RSS09/Items/Item/Source/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Logo","RSS/Maker/RSS09/Items/Item/Source/Logo.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Rights","RSS/Maker/RSS09/Items/Item/Source/Rights.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Subtitle","RSS/Maker/RSS09/Items/Item/Source/Subtitle.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Title","RSS/Maker/RSS09/Items/Item/Source/Title.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Title","RSS/Maker/RSS09/Items/Item/Title.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Textinput","RSS/Maker/RSS09/Textinput.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Channel","RSS/Maker/RSS10/Channel.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Channel::Authors","RSS/Maker/RSS10/Channel/Authors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Authors::Author","RSS/Maker/RSS10/Channel/Authors/Author.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Categories","RSS/Maker/RSS10/Channel/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Cloud","RSS/Maker/RSS10/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Contributors","RSS/Maker/RSS10/Channel/Contributors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Copyright","RSS/Maker/RSS10/Channel/Copyright.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Description","RSS/Maker/RSS10/Channel/Description.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Generator","RSS/Maker/RSS10/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Links","RSS/Maker/RSS10/Channel/Links.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Links::Link","RSS/Maker/RSS10/Channel/Links/Link.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::SkipDays","RSS/Maker/RSS10/Channel/SkipDays.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::SkipHours","RSS/Maker/RSS10/Channel/SkipHours.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Title","RSS/Maker/RSS10/Channel/Title.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Image","RSS/Maker/RSS10/Image.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items","RSS/Maker/RSS10/Items.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items::Item","RSS/Maker/RSS10/Items/Item.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Authors","RSS/Maker/RSS10/Items/Item/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Categories","RSS/Maker/RSS10/Items/Item/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Content","RSS/Maker/RSS10/Items/Item/Content.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Contributors","RSS/Maker/RSS10/Items/Item/Contributors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Description","RSS/Maker/RSS10/Items/Item/Description.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Enclosure","RSS/Maker/RSS10/Items/Item/Enclosure.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Guid","RSS/Maker/RSS10/Items/Item/Guid.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Links","RSS/Maker/RSS10/Items/Item/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Rights","RSS/Maker/RSS10/Items/Item/Rights.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source","RSS/Maker/RSS10/Items/Item/Source.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Authors","RSS/Maker/RSS10/Items/Item/Source/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Categories","RSS/Maker/RSS10/Items/Item/Source/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Contributors","RSS/Maker/RSS10/Items/Item/Source/Contributors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Generator","RSS/Maker/RSS10/Items/Item/Source/Generator.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Icon","RSS/Maker/RSS10/Items/Item/Source/Icon.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Links","RSS/Maker/RSS10/Items/Item/Source/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Logo","RSS/Maker/RSS10/Items/Item/Source/Logo.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Rights","RSS/Maker/RSS10/Items/Item/Source/Rights.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Subtitle","RSS/Maker/RSS10/Items/Item/Source/Subtitle.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Title","RSS/Maker/RSS10/Items/Item/Source/Title.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Title","RSS/Maker/RSS10/Items/Item/Title.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Textinput","RSS/Maker/RSS10/Textinput.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS20::Channel::Categories","RSS/Maker/RSS20/Channel/Categories.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Categories::Category","RSS/Maker/RSS20/Channel/Categories/Category.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Cloud","RSS/Maker/RSS20/Channel/Cloud.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Generator","RSS/Maker/RSS20/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Authors","RSS/Maker/RSS20/Items/Item/Authors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Authors::Author","RSS/Maker/RSS20/Items/Item/Authors/Author.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Categories","RSS/Maker/RSS20/Items/Item/Categories.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Categories::Category","RSS/Maker/RSS20/Items/Item/Categories/Category.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Enclosure","RSS/Maker/RSS20/Items/Item/Enclosure.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Guid","RSS/Maker/RSS20/Items/Item/Guid.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source","RSS/Maker/RSS20/Items/Item/Source.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source::Links","RSS/Maker/RSS20/Items/Item/Source/Links.html#method-i-to_feed","(rss, source)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source::Links::Link","RSS/Maker/RSS20/Items/Item/Source/Links/Link.html#method-i-to_feed","(rss, source)",""],["to_feed","RSS::Maker::RSSBase","RSS/Maker/RSSBase.html#method-i-to_feed","()",""],["to_feed","RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::XMLStyleSheets::XMLStyleSheet","RSS/Maker/XMLStyleSheets/XMLStyleSheet.html#method-i-to_feed","(feed)",""],["to_feed","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-to_feed","(type, &block)",""],["to_feed_for_categories","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-to_feed_for_categories","(feed, current)",""],["to_fullpath","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_fullpath","(path)","<p>Full path of the target library file. If the file is not in this gem,\nreturn nil.\n"],["to_h","Array","Array.html#method-i-to_h","()","<p>Returns the result of interpreting <em>ary</em> as an array of <code>[key,\nvalue]</code> pairs.\n\n<pre>[[:foo, :bar], [1, 2]].to_h ...</pre>\n"],["to_h","ENV","ENV.html#method-c-to_h","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_h","Enumerable","Enumerable.html#method-i-to_h","(*args)","<p>Returns the result of interpreting <em>enum</em> as a list of <code>[key,\nvalue]</code> pairs.\n\n<pre>%i[hello world].each_with_index.to_h ...</pre>\n"],["to_h","Hash","Hash.html#method-i-to_h","()","<p>Returns <code>self</code>. If called on a subclass of Hash, converts the\nreceiver to a Hash object.\n"],["to_h","NilClass","NilClass.html#method-i-to_h","()","<p>Always returns an empty hash.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_h</span>   <span class=\"ruby-comment\">#=&gt; {}</span>\n</pre>\n"],["to_h","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_h","()",""],["to_h","OpenStruct","OpenStruct.html#method-i-to_h","()","<p>Converts the OpenStruct to a hash with keys representing each attribute (as\nsymbols) and their corresponding …\n"],["to_h","Struct","Struct.html#method-i-to_h","()","<p>Returns a Hash containing the names and values for the struct&#39;s\nmembers.\n\n<pre>Customer = Struct.new(:name, ...</pre>\n"],["to_h","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-i-to_h","()","<p>Returns Ruby Hash object which represents VT_RECORD variable. The keys of\nHash object are member names …\n"],["to_hash","CSV::Row","CSV/Row.html#method-i-to_hash","()","<p>Collapses the row into a simple Hash.  Be warned that this discards field\norder and clobbers duplicate …\n"],["to_hash","DBM","DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and\nreturns it.\n"],["to_hash","ENV","ENV.html#method-c-to_hash","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_hash","GDBM","GDBM.html#method-i-to_hash","()","<p>Returns a hash of all key-value pairs contained in the database.\n"],["to_hash","Hash","Hash.html#method-i-to_hash","()","<p>Returns <code>self</code>.\n"],["to_hash","JSON::GenericObject","JSON/GenericObject.html#method-i-to_hash","()",""],["to_hash","SDBM","SDBM.html#method-i-to_hash","()","<p>Returns a new Hash containing each key-value pair in the database.\n"],["to_hash","YAML::DBM","YAML/DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and\nreturns it.\n"],["to_html","RDoc::Text","RDoc/Text.html#method-i-to_html","(text)","<p>Converts ampersand, dashes, ellipsis, quotes, copyright and registered\ntrademark symbols in <code>text</code> to properly …\n"],["to_html","RDoc::TokenStream","RDoc/TokenStream.html#method-c-to_html","(token_stream)","<p>Converts <code>token_stream</code> to HTML wrapping various tokens with\n<code>&lt;span&gt;</code> elements.  The following tokens …\n"],["to_i","ARGF","ARGF.html#method-i-to_i","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["to_i","BigDecimal","BigDecimal.html#method-i-to_i","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_i","Complex","Complex.html#method-i-to_i","()","<p>Returns the value as an integer if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1, 0).to_i ...</pre>\n"],["to_i","Fiddle::Closure","Fiddle/Closure.html#method-i-to_i","()","<p>Returns the memory address for this closure\n"],["to_i","Fiddle::Function","Fiddle/Function.html#method-i-to_i","()","<p>The integer memory location of this function\n"],["to_i","Fiddle::Handle","Fiddle/Handle.html#method-i-to_i","()","<p>Returns the memory address for this handle.\n"],["to_i","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_i","()","<p>Returns the integer memory location of this pointer.\n"],["to_i","Float","Float.html#method-i-to_i","()","<p>Returns the <code>float</code> truncated to an Integer.\n<p>Synonyms are #to_i and #to_int\n"],["to_i","IO","IO.html#method-i-to_i","()",""],["to_i","IPAddr","IPAddr.html#method-i-to_i","()","<p>Returns the integer representation of the ipaddr.\n"],["to_i","Integer","Integer.html#method-i-to_i","()","<p>As <code>int</code> is already an Integer, all these methods simply return\nthe receiver.\n<p>Synonyms is #to_int\n"],["to_i","Integer","Integer.html#method-i-to_i","()","<p>As <code>int</code> is already an Integer, all these methods simply return\nthe receiver.\n<p>Synonyms is #to_int\n"],["to_i","NilClass","NilClass.html#method-i-to_i","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["to_i","OpenSSL::BN","OpenSSL/BN.html#method-i-to_i","()",""],["to_i","Process::Status","Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as a <code>Integer</code>. Poking around\nin these bits is platform dependent.\n\n<pre>fork { exit ...</pre>\n"],["to_i","Rational","Rational.html#method-i-to_i","()","<p>Returns the truncated value as an integer.\n<p>Equivalent to\n\n<pre>rat.truncate.\n\nRational(2, 3).to_i   #=&gt; 0\nRational(3).to_i ...</pre>\n"],["to_i","String","String.html#method-i-to_i","(p1 = v1)","<p>Returns the result of interpreting leading characters in <em>str</em> as an\ninteger base <em>base</em> (between 2 and 36). …\n"],["to_i","Time","Time.html#method-i-to_i","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["to_i","WEBrick::HTTPStatus::Status","WEBrick/HTTPStatus/Status.html#method-i-to_i","()",""],["to_id","DRb","DRb.html#method-i-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb","DRb.html#method-c-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object&#39;s __id__ in the local …\n"],["to_id","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object&#39;s __id__ in the local …\n"],["to_id","DRb::DRbServer","DRb/DRbServer.html#method-i-to_id","(obj)","<p>Convert a local object to a dRuby reference.\n"],["to_int","BigDecimal","BigDecimal.html#method-i-to_int","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_int","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_int","()","<p>Returns the integer memory location of this pointer.\n"],["to_int","Float","Float.html#method-i-to_int","()","<p>Returns the <code>float</code> truncated to an Integer.\n<p>Synonyms are #to_i and #to_int\n"],["to_int","Integer","Integer.html#method-i-to_int","()","<p>As <code>int</code> is already an Integer, all these methods simply return\nthe receiver.\n<p>Synonyms is #to_int\n"],["to_int","Integer","Integer.html#method-i-to_int","()","<p>As <code>int</code> is already an Integer, all these methods simply return\nthe receiver.\n<p>Synonyms is #to_int\n"],["to_int","Numeric","Numeric.html#method-i-to_int","()","<p>Invokes the child class&#39;s <code>to_i</code> method to convert\n<code>num</code> to an integer.\n\n<pre>1.0.class =&gt; Float\n1.0.to_int.class ...</pre>\n"],["to_int","OpenSSL::BN","OpenSSL/BN.html#method-i-to_int","()",""],["to_io","ARGF","ARGF.html#method-i-to_io","()","<p>Returns an <code>IO</code> object representing the current file. This will\nbe a <code>File</code> object unless the current file …\n"],["to_io","IO","IO.html#method-i-to_io","()","<p>Returns <em>ios</em>.\n"],["to_io","OpenSSL::SSL::SSLServer","OpenSSL/SSL/SSLServer.html#method-i-to_io","()","<p>Returns the TCPServer passed to the SSLServer when initialized.\n"],["to_io","Zlib::GzipFile","Zlib/GzipFile.html#method-i-to_io","()","<p>Same as IO.\n"],["to_json","BigDecimal","BigDecimal.html#method-i-to_json","(*)","<p>return the JSON value\n"],["to_json","Complex","Complex.html#method-i-to_json","(*)","<p>Stores class name (Complex) along with real value <code>r</code> and\nimaginary value <code>i</code> as JSON string\n"],["to_json","Date","Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> as JSON string …\n"],["to_json","DateTime","DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset  …\n"],["to_json","Exception","Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace\narray <code>b</code> as JSON string\n"],["to_json","JSON::GenericObject","JSON/GenericObject.html#method-i-to_json","(*a)",""],["to_json","OpenStruct","OpenStruct.html#method-i-to_json","(*args)","<p>Stores class name (OpenStruct) with this struct&#39;s values <code>v</code>\nas a JSON string.\n"],["to_json","Psych","Psych.html#method-c-to_json","(object)","<p>Dump Ruby <code>object</code> to a JSON string.\n"],["to_json","Range","Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which\ninclude <code>first</code> (integer), <code>last</code> (integer), …\n"],["to_json","Rational","Rational.html#method-i-to_json","(*)","<p>Stores class name (Rational) along with numerator value <code>n</code> and\ndenominator value <code>d</code> as JSON string\n"],["to_json","Regexp","Regexp.html#method-i-to_json","(*)","<p>Stores class name (Regexp) with options <code>o</code> and source\n<code>s</code> (Regexp or String) as JSON string\n"],["to_json","Struct","Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON\nstring. Only named structs are supported.\n"],["to_json","Symbol","Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON\nstring.\n"],["to_json","Time","Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of\nmicroseconds for Time as JSON …\n"],["to_mailtext","URI::MailTo","URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre>require &#39;uri&#39;\n\nuri = URI.parse(&quot;mailto:ruby-list@ruby-lang.org?Subject=subscribe&amp;cc=myaddr&quot;) ...</pre>\n"],["to_name","Resolv::IPv4","Resolv/IPv4.html#method-i-to_name","()","<p>Turns this IPv4 address into a Resolv::DNS::Name.\n"],["to_name","Resolv::IPv6","Resolv/IPv6.html#method-i-to_name","()","<p>Turns this IPv6 address into a Resolv::DNS::Name.\n"],["to_obj","DRb","DRb.html#method-c-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb","DRb.html#method-i-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbIdConv","DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbServer","DRb/DRbServer.html#method-i-to_obj","(ref)","<p>Convert a dRuby reference to the local object it refers to.\n"],["to_oct","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-to_oct","(n, pad_size)",""],["to_path","Dir","Dir.html#method-i-to_path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["to_path","File","File.html#method-i-to_path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n\n<pre>File.new(&quot;testfile&quot;).path ...</pre>\n"],["to_path","Pathname","Pathname.html#method-i-to_path","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_pem","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_pem","()","<p>Returns the PEM encoding of this SPKI.\n"],["to_pem","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-to_pem","()","<p>See the OpenSSL documentation for PEM_write_bio_ECPKParameters()\n"],["to_pem","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-to_pem","()","<p>Returns a PEM encoded String that contains the Session object.\n"],["to_pem","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_pem","()",""],["to_proc","Hash","Hash.html#method-i-to_proc","()",""],["to_proc","Method","Method.html#method-i-to_proc","()","<p>Returns a <code>Proc</code> object corresponding to this method.\n"],["to_proc","Proc","Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to <code>Proc</code> objects.\nInstances of class <code>Proc</code> simply return themselves. …\n"],["to_proc","Symbol","Symbol.html#method-i-to_proc","()","<p>Returns a <em>Proc</em> object which respond to the given method by\n<em>sym</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">collect</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">to_s</span>)  <span class=\"ruby-comment\">#=&gt; [&quot;1&quot;, &quot;2&quot;, ...</span>\n</pre>\n"],["to_ptr","Fiddle::Pointer","Fiddle/Pointer.html#method-c-to_ptr","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a Fiddle::Pointer object.\n"],["to_r","BigDecimal","BigDecimal.html#method-i-to_r","()","<p>Converts a BigDecimal to a Rational.\n"],["to_r","Complex","Complex.html#method-i-to_r","()","<p>Returns the value as a rational if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1, 0).to_r ...</pre>\n"],["to_r","Float","Float.html#method-i-to_r","()","<p>Returns the value as a rational.\n<p>NOTE: 0.3.to_r isn&#39;t the same as &#39;0.3&#39;.to_r.  The latter …\n"],["to_r","Integer","Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_r</span>        <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">&lt;&lt;</span><span class=\"ruby-value\">64</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (18446744073709551616/1)</span>\n</pre>\n"],["to_r","Integer","Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_r</span>        <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">&lt;&lt;</span><span class=\"ruby-value\">64</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (18446744073709551616/1)</span>\n</pre>\n"],["to_r","NilClass","NilClass.html#method-i-to_r","()","<p>Returns zero as a rational.\n"],["to_r","Rational","Rational.html#method-i-to_r","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_r</span>      <span class=\"ruby-comment\">#=&gt; (2/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (-4/3)</span>\n</pre>\n"],["to_r","String","String.html#method-i-to_r","()","<p>Returns a rational which denotes the string form.  The parser ignores\nleading whitespaces and trailing …\n"],["to_r","Time","Time.html#method-i-to_r","()","<p>Returns the value of <em>time</em> as a rational number of seconds since\nthe Epoch.\n\n<pre>t = Time.now\np t.to_r      ...</pre>\n"],["to_range","IPAddr","IPAddr.html#method-i-to_range","()","<p>Creates a Range object for the network address.\n"],["to_request_set","Gem::AvailableSet","Gem/AvailableSet.html#method-i-to_request_set","(development = :none)","<p>Converts this AvailableSet into a RequestSet that can be used to install\ngems.\n<p>If <code>development</code> is :none …\n"],["to_rfc822text","URI::MailTo","URI/MailTo.html#method-i-to_rfc822text","()",""],["to_rss","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-to_rss","(type, &block)",""],["to_ruby","Gem::Specification","Gem/Specification.html#method-i-to_ruby","()","<p>Returns a Ruby code representation of this specification, such that it can\nbe eval&#39;ed and reconstruct …\n"],["to_ruby","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-to_ruby","()","<p>Convert this node to Ruby.\n<p>See also Psych::Visitors::ToRuby\n"],["to_ruby_for_cache","Gem::Specification","Gem/Specification.html#method-i-to_ruby_for_cache","()","<p>Returns a Ruby lighter-weight code representation of this specification,\nused for indexing only.\n<p>See  …\n"],["to_s","ARGF","ARGF.html#method-i-to_s","()","<p>Returns “ARGF”.\n"],["to_s","Addrinfo","Addrinfo.html#method-i-to_s","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre>Addrinfo.tcp(&quot;localhost&quot;, 80).to_sockaddr ...</pre>\n"],["to_s","Array","Array.html#method-i-to_s","()",""],["to_s","Benchmark::Tms","Benchmark/Tms.html#method-i-to_s","()","<p>Same as #format.\n"],["to_s","BigDecimal","BigDecimal.html#method-i-to_s","(p1 = v1)","<p>Converts the value to a string.\n<p>The default format looks like  0.xxxxEnn.\n<p>The optional parameter s consists …\n"],["to_s","CGI::Cookie","CGI/Cookie.html#method-i-to_s","()","<p>Convert the Cookie to its string representation.\n"],["to_s","CSV::Row","CSV/Row.html#method-i-to_s","(options = Hash.new)",""],["to_s","CSV::Table","CSV/Table.html#method-i-to_s","(options = Hash.new)",""],["to_s","Complex","Complex.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre>Complex(2).to_s                       #=&gt; &quot;2+0i&quot;\nComplex(&#39;-8/6&#39;).to_s  ...</pre>\n"],["to_s","Date","Date.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format. (This method doesn&#39;t use the\nexpanded representations.)\n\n<pre>Date.new(2001,2,3).to_s ...</pre>\n"],["to_s","DateTime","DateTime.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format. (This method doesn&#39;t use the\nexpanded representations.)\n\n<pre>DateTime.new(2001,2,3,4,5,6,&#39;-7&#39;).to_s ...</pre>\n"],["to_s","Digest::Instance","Digest/Instance.html#method-i-to_s","()","<p>Returns digest_obj.hexdigest().\n"],["to_s","ENV","ENV.html#method-c-to_s","()","<p>Returns “ENV”\n"],["to_s","Encoding","Encoding.html#method-i-to_s","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["to_s","Exception","Exception.html#method-i-to_s","()","<p>Returns exception&#39;s message (or the name of the exception if no message\nis set).\n"],["to_s","FalseClass","FalseClass.html#method-i-to_s","()","<p>&#39;nuf said…\n"],["to_s","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_s","(p1 = v1)","<p>Returns the pointer contents as a string.\n<p>When called with no arguments, this method will return the contents …\n"],["to_s","Float","Float.html#method-i-to_s","()","<p>Returns a string containing a representation of self. As well as a fixed or\nexponential form of the  …\n"],["to_s","Gem::Platform","Gem/Platform.html#method-i-to_s","()",""],["to_s","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-to_s","()","<p>The contents of the lock file.\n"],["to_s","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-to_s","()",""],["to_s","Gem::Version","Gem/Version.html#method-i-to_s","()",""],["to_s","Hash","Hash.html#method-i-to_s","()",""],["to_s","IPAddr","IPAddr.html#method-i-to_s","()","<p>Returns a string containing the IP address representation.\n"],["to_s","Integer","Integer.html#method-i-to_s","(*args)","<p>Returns a string containing the representation of <code>int</code> radix\n<code>base</code> (between 2 and 36).\n\n<pre>12345.to_s       ...</pre>\n"],["to_s","Integer","Integer.html#method-i-to_s","(*args)","<p>Returns a string containing the representation of <code>int</code> radix\n<code>base</code> (between 2 and 36).\n\n<pre>12345.to_s       ...</pre>\n"],["to_s","MatchData","MatchData.html#method-i-to_s","()","<p>Returns the entire matched string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">to_s</span>   <span class=\"ruby-comment\">#=&gt; &quot;HX1138&quot;</span>\n</pre>\n"],["to_s","Matrix","Matrix.html#method-i-to_s","()","<p>Overrides Object#to_s\n"],["to_s","Method","Method.html#method-i-to_s","()","<p>Returns the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["to_s","Module","Module.html#method-i-to_s","()","<p>Returns a string representing this module or class. For basic classes and\nmodules, this is the name. …\n"],["to_s","NilClass","NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n"],["to_s","Object","Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default <code>to_s</code>\nprints the object&#39;s class and an encoding of …\n"],["to_s","OpenSSL::BN","OpenSSL/BN.html#method-i-to_s","(p1 = v1)","<p>Parameters\n<p><code>base</code> - integer Valid values:\n<p>0 - MPI\n"],["to_s","OpenSSL::Config","OpenSSL/Config.html#method-i-to_s","()","<p>Get the parsable form of the current configuration\n<p>Given the following configuration being created:\n\n<pre>config ...</pre>\n"],["to_s","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-to_s","()",""],["to_s","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_s","()",""],["to_s","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Name","OpenSSL/X509/Name.html#method-i-to_s","(p1 = v1)","<p>Returns this name as a Distinguished Name string.  <code>flags</code> may\nbe one of:\n<p>OpenSSL::X509::Name::COMPAT\n<p>OpenSSL::X509::Name::RFC2253 …\n"],["to_s","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_s","()",""],["to_s","OpenStruct","OpenStruct.html#method-i-to_s","()",""],["to_s","OptionParser","OptionParser.html#method-i-to_s","()",""],["to_s","OptionParser::ParseError","OptionParser/ParseError.html#method-i-to_s","()",""],["to_s","Pathname","Pathname.html#method-i-to_s","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_s","Proc","Proc.html#method-i-to_s","()","<p>Returns the unique identifier for this proc, along with an indication of\nwhere the proc was defined. …\n"],["to_s","Process::Status","Process/Status.html#method-i-to_s","()","<p>Show pid and exit status as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_s</span>         <span class=\"ruby-comment\">#=&gt; &quot;pid 12766 exit 1&quot;</span>\n</pre>\n"],["to_s","REXML::Attribute","REXML/Attribute.html#method-i-to_s","()","<p>Returns the attribute value, with entities replaced\n"],["to_s","REXML::CData","REXML/CData.html#method-i-to_s","()","<p>Returns the content of this CData object\n<p><em>Examples</em>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">c</span> = <span class=\"ruby-constant\">CData</span>.<span class=\"ruby-identifier\">new</span>( <span class=\"ruby-string\">&quot;Some text&quot;</span> )\n<span class=\"ruby-identifier\">c</span>.<span class=\"ruby-identifier\">to_s</span>        <span class=\"ruby-comment\"># -&gt; &quot;Some ...</span>\n</pre>\n"],["to_s","REXML::DTD::EntityDecl","REXML/DTD/EntityDecl.html#method-i-to_s","()",""],["to_s","REXML::DTD::NotationDecl","REXML/DTD/NotationDecl.html#method-i-to_s","()",""],["to_s","REXML::Declaration","REXML/Declaration.html#method-i-to_s","()",""],["to_s","REXML::Entity","REXML/Entity.html#method-i-to_s","()","<p>Returns this entity as a string.  See write().\n"],["to_s","REXML::ExternalEntity","REXML/ExternalEntity.html#method-i-to_s","()",""],["to_s","REXML::Light::Node","REXML/Light/Node.html#method-i-to_s","()",""],["to_s","REXML::Node","REXML/Node.html#method-i-to_s","(indent=nil)","<p>indent &mdash; <strong>DEPRECATED</strong> This parameter is now ignored.  See the\nformatters in the REXML::Formatters package …\n\n"],["to_s","REXML::NotationDecl","REXML/NotationDecl.html#method-i-to_s","()",""],["to_s","REXML::Output","REXML/Output.html#method-i-to_s","()",""],["to_s","REXML::ParseException","REXML/ParseException.html#method-i-to_s","()",""],["to_s","REXML::Text","REXML/Text.html#method-i-to_s","()","<p>Returns the string value of this text node.  This string is always escaped,\nmeaning that it is a valid …\n"],["to_s","REXML::Validation::Event","REXML/Validation/Event.html#method-i-to_s","()",""],["to_s","REXML::Validation::Ref","REXML/Validation/Ref.html#method-i-to_s","()",""],["to_s","REXML::Validation::State","REXML/Validation/State.html#method-i-to_s","()",""],["to_s","RSS::Element","RSS/Element.html#method-i-to_s","(need_convert=true, indent='')",""],["to_s","RSS::XML::Element","RSS/XML/Element.html#method-i-to_s","()",""],["to_s","RSS::XMLStyleSheet","RSS/XMLStyleSheet.html#method-i-to_s","()",""],["to_s","Range","Range.html#method-i-to_s","()","<p>Convert this range object to a printable form (using #to_s to convert the\nbegin and end objects).\n"],["to_s","Rational","Rational.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre>Rational(2).to_s      #=&gt; &quot;2/1&quot;\nRational(-8, 6).to_s  #=&gt; &quot;-4/3&quot;\nRational(&#39;1/2&#39;).to_s ...</pre>\n"],["to_s","Regexp","Regexp.html#method-i-to_s","()","<p>Returns a string containing the regular expression and its options (using\nthe <code>(?opts:source)</code> notation. …\n"],["to_s","Resolv::DNS::Name","Resolv/DNS/Name.html#method-i-to_s","()","<p>returns the domain name as a string.\n<p>The domain name doesn&#39;t have a trailing dot even if the name …\n"],["to_s","Shell::Filter","Shell/Filter.html#method-i-to_s","()",""],["to_s","Socket::Option","Socket/Option.html#method-i-to_s","()","<p>returns the socket option data as a string.\n\n<pre>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).data ...</pre>\n"],["to_s","String","String.html#method-i-to_s","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of String, converts the receiver to a String\nobject.\n"],["to_s","Struct","Struct.html#method-i-to_s","()",""],["to_s","Symbol","Symbol.html#method-i-to_s","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">id2name</span>   <span class=\"ruby-comment\">#=&gt; &quot;fred&quot;</span>\n</pre>\n"],["to_s","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-to_s","()","<p>Returns a Kernel#caller style string representing this frame.\n"],["to_s","Time","Time.html#method-i-to_s","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n#strftime with the appropriate format string. …\n"],["to_s","TrueClass","TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","URI::FTP","URI/FTP.html#method-i-to_s","()","<p>Returns a String representation of the URI::FTP\n"],["to_s","URI::Generic","URI/Generic.html#method-i-to_s","()","<p>Constructs String from URI\n"],["to_s","URI::MailTo","URI/MailTo.html#method-i-to_s","()","<p>Constructs String from URI\n"],["to_s","UnboundMethod","UnboundMethod.html#method-i-to_s","()","<p>Returns the name of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: String#count&gt;&quot;</span>\n</pre>\n"],["to_s","UncaughtThrowError","UncaughtThrowError.html#method-i-to_s","()","<p>Returns formatted message with the inspected tag.\n"],["to_s","Vector","Vector.html#method-i-to_s","()","<p>Overrides Object#to_s\n"],["to_s","WEBrick::Cookie","WEBrick/Cookie.html#method-i-to_s","()","<p>The cookie string suitable for use in an HTTP header\n"],["to_s","WEBrick::HTTPUtils::FormData","WEBrick/HTTPUtils/FormData.html#method-i-to_s","()","<p>This FormData&#39;s body\n"],["to_s","WEBrick::HTTPVersion","WEBrick/HTTPVersion.html#method-i-to_s","()","<p>The HTTP version as show in the HTTP request and response.  For example,\n“1.1”\n"],["to_s","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-to_s","()",""],["to_s","WIN32OLE_PARAM","WIN32OLE_PARAM.html#method-i-to_s","()",""],["to_s","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-to_s","()",""],["to_s","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-to_s","()",""],["to_s","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-to_s","()",""],["to_set","Enumerable","Enumerable.html#method-i-to_set","(klass = Set, *args, &block)","<p>Makes a set from the enumerable object with given arguments. Needs to\n+require “set”+ to use …\n"],["to_set","Set","Set.html#method-i-to_set","(klass = Set, *args, &block)","<p>Returns self if no arguments are given.  Otherwise, converts the set to\nanother with klass.new(self, …\n"],["to_sockaddr","Addrinfo","Addrinfo.html#method-i-to_sockaddr","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre>Addrinfo.tcp(&quot;localhost&quot;, 80).to_sockaddr ...</pre>\n"],["to_spec","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_spec","()","<p>Return a Gem::Specification from this gem\n"],["to_spec","Gem::Dependency","Gem/Dependency.html#method-i-to_spec","()",""],["to_spec","Gem::Specification","Gem/Specification.html#method-i-to_spec","()","<p>Returns self\n"],["to_specs","Gem::Dependency","Gem/Dependency.html#method-i-to_specs","()",""],["to_str","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_str","(p1 = v1)","<p>Returns the pointer contents as a string.\n<p>When called with no arguments, this method will return the contents …\n"],["to_str","String","String.html#method-i-to_str","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of String, converts the receiver to a String\nobject.\n"],["to_string","IPAddr","IPAddr.html#method-i-to_string","()","<p>Returns a string containing the IP address representation in canonical\nform.\n"],["to_string","REXML::Attribute","REXML/Attribute.html#method-i-to_string","()","<p>Returns this attribute out as XML source, expanding the name\n\n<pre>a = Attribute.new( &quot;x&quot;, &quot;y&quot; )\na.to_string ...</pre>\n"],["to_sym","String","String.html#method-i-to_sym","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> ...\n"],["to_sym","Symbol","Symbol.html#method-i-to_sym","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["to_text","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-to_text","()","<p>Returns a textual representation of this SPKI, useful for debugging\npurposes.\n"],["to_text","OpenSSL::PKey::DH","OpenSSL/PKey/DH.html#method-i-to_text","()","<p>Prints all parameters of key to buffer INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use :-)) …\n"],["to_text","OpenSSL::PKey::DSA","OpenSSL/PKey/DSA.html#method-i-to_text","()","<p>Prints all parameters of key to buffer INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use :-)) …\n"],["to_text","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-to_text","()","<p>See the OpenSSL documentation for EC_KEY_print()\n"],["to_text","OpenSSL::PKey::EC::Group","OpenSSL/PKey/EC/Group.html#method-i-to_text","()","<p>See the OpenSSL documentation for ECPKParameters_print()\n"],["to_text","OpenSSL::PKey::RSA","OpenSSL/PKey/RSA.html#method-i-to_text","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Dumps all parameters of a keypair to a String …\n"],["to_text","OpenSSL::SSL::Session","OpenSSL/SSL/Session.html#method-i-to_text","()","<p>Shows everything in the Session object. This is for diagnostic purposes.\n"],["to_text","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-to_text","()",""],["to_time","Date","Date.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","DateTime","DateTime.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","Time","Time.html#method-i-to_time","()","<p>Returns self.\n"],["to_uri","RSS::Parser","RSS/Parser.html#method-i-to_uri","(rss)","<p>Attempt to convert rss to a URI, but just return it if there&#39;s a\n::URI::Error\n"],["to_value","Fiddle::Pointer","Fiddle/Pointer.html#method-i-to_value","()","<p>Cast this pointer to a ruby object.\n"],["to_write_io","ARGF","ARGF.html#method-i-to_write_io","()","<p>Returns IO instance tied to <em>ARGF</em> for writing if inplace mode is\nenabled.\n"],["to_xml","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-to_xml","(type=nil, &block)",""],["to_yaml","Object","Object.html#method-i-to_yaml","(options = {})",""],["to_yaml","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-to_yaml","(io = nil, options = {})",""],["today","Date","Date.html#method-c-today","(p1 = v1)","<p>Creates a date object denoting the present day.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Date: 2011-06-11 ...&gt;</span>\n</pre>\n"],["toeuc","Kconv","Kconv.html#method-i-toeuc","(str)","<p>Convert <code>str</code> to EUC-JP\n"],["toeuc","Kconv","Kconv.html#method-c-toeuc","(str)","<p>Convert <code>str</code> to EUC-JP\n"],["toeuc","String","String.html#method-i-toeuc","()","<p>Convert <code>self</code> to EUC-JP\n"],["tojis","Kconv","Kconv.html#method-i-tojis","(str)","<p>Convert <code>str</code> to ISO-2022-JP\n"],["tojis","Kconv","Kconv.html#method-c-tojis","(str)","<p>Convert <code>str</code> to ISO-2022-JP\n"],["tojis","String","String.html#method-i-tojis","()","<p>Convert <code>self</code> to ISO-2022-JP\n"],["token_stream","RDoc::TokenStream","RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["token_to_str","Racc::Parser","Racc/Parser.html#method-i-token_to_str","(t)","<p>Convert internal ID of token symbol to the string.\n"],["tokenize","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-tokenize","(input)",""],["tokenize","Psych::ScalarScanner","Psych/ScalarScanner.html#method-i-tokenize","(string)","<p>Tokenize <code>string</code> returning the Ruby object\n"],["tokenize","RDoc::RubyLex","RDoc/RubyLex.html#method-c-tokenize","(ruby, options)","<p>Returns an Array of <code>ruby</code> tokens.  See ::new for a description\nof <code>options</code>.\n"],["tokenize","RDoc::TomDoc","RDoc/TomDoc.html#method-i-tokenize","(text)","<p>Turns text into an Array of tokens\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Returns\n"],["tokenize","Ripper","Ripper.html#method-c-tokenize","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of strings.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Ripper</span>.<span class=\"ruby-identifier\">tokenize</span>(<span class=\"ruby-string\">&quot;def m(a) nil end&quot;</span>)\n   <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["tokens_to_s","RDoc::TokenStream","RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tolocale","Kconv","Kconv.html#method-i-tolocale","(str)","<p>Convert <code>self</code> to locale encoding\n"],["tolocale","Kconv","Kconv.html#method-c-tolocale","(str)","<p>Convert <code>self</code> to locale encoding\n"],["tolocale","String","String.html#method-i-tolocale","()","<p>Convert <code>self</code> to locale encoding\n"],["tomdoc?","RDoc::Comment","RDoc/Comment.html#method-i-tomdoc-3F","()","<p>Returns true if this comment is in TomDoc format.\n"],["top","IRB::Frame","IRB/Frame.html#method-i-top","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the last\nframe initialized.\n<p>Raises FrameUnderflow …\n"],["top","IRB::Frame","IRB/Frame.html#method-c-top","(n = 0)","<p>Convenience method for Frame#top\n"],["top","Net::POPMail","Net/POPMail.html#method-i-top","(lines, dest = '')","<p>Fetches the message header and <code>lines</code> lines of body.\n<p>The optional <code>dest</code> argument is obsolete.\n<p>This method …\n"],["top","OptionParser","OptionParser.html#method-c-top","()",""],["top","OptionParser","OptionParser.html#method-i-top","()","<p>Subject of #on / #on_head, #accept / #reject\n"],["top_level","RDoc::Context","RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if\nnot found.\n"],["top_level_test","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-top_level_test","(command, file1, file2=nil)","<p>See Shell::CommandProcessor#test\n"],["toplevel_load","IRB::Locale","IRB/Locale.html#method-i-toplevel_load","(file, priv=nil)",""],["tosjis","Kconv","Kconv.html#method-i-tosjis","(str)","<p>Convert <code>str</code> to Shift_JIS\n"],["tosjis","Kconv","Kconv.html#method-c-tosjis","(str)","<p>Convert <code>str</code> to Shift_JIS\n"],["tosjis","String","String.html#method-i-tosjis","()","<p>Convert <code>self</code> to Shift_JIS\n"],["total_in","Zlib::ZStream","Zlib/ZStream.html#method-i-total_in","()","<p>Returns the total bytes of the input data to the stream.  FIXME\n"],["total_out","Zlib::ZStream","Zlib/ZStream.html#method-i-total_out","()","<p>Returns the total bytes of the output data from the stream.  FIXME\n"],["total_time","GC::Profiler","GC/Profiler.html#method-c-total_time","()","<p>The total time used for garbage collection in seconds\n"],["touch","FileUtils","FileUtils.html#method-i-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification time (mtime) and access time (atime) of file(s) in\n<code>list</code>.  Files are created if they …\n"],["touch","FileUtils","FileUtils.html#method-c-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification time (mtime) and access time (atime) of file(s) in\n<code>list</code>.  Files are created if they …\n"],["toutf16","Kconv","Kconv.html#method-i-toutf16","(str)","<p>Convert <code>str</code> to UTF-16\n"],["toutf16","Kconv","Kconv.html#method-c-toutf16","(str)","<p>Convert <code>str</code> to UTF-16\n"],["toutf16","String","String.html#method-i-toutf16","()","<p>Convert <code>self</code> to UTF-16\n"],["toutf32","Kconv","Kconv.html#method-i-toutf32","(str)","<p>Convert <code>str</code> to UTF-32\n"],["toutf32","Kconv","Kconv.html#method-c-toutf32","(str)","<p>Convert <code>str</code> to UTF-32\n"],["toutf32","String","String.html#method-i-toutf32","()","<p>Convert <code>self</code> to UTF-32\n"],["toutf8","Kconv","Kconv.html#method-c-toutf8","(str)","<p>Convert <code>str</code> to UTF-8\n"],["toutf8","Kconv","Kconv.html#method-i-toutf8","(str)","<p>Convert <code>str</code> to UTF-8\n"],["toutf8","String","String.html#method-i-toutf8","()","<p>Convert <code>self</code> to UTF-8\n"],["tr","Matrix","Matrix.html#method-i-tr","()",""],["tr","String","String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <code>str</code> with the characters in\n<code>from_str</code> replaced by the corresponding characters in\n<code>to_str</code> …\n"],["tr!","String","String.html#method-i-tr-21","(p1, p2)","<p>Translates <em>str</em> in place, using the same rules as\n<code>String#tr</code>. Returns <em>str</em>, or <code>nil</code> if no\nchanges were made. …\n"],["tr_s","String","String.html#method-i-tr_s","(p1, p2)","<p>Processes a copy of <em>str</em> as described under <code>String#tr</code>,\nthen removes duplicate characters in regions that …\n"],["tr_s!","String","String.html#method-i-tr_s-21","(p1, p2)","<p>Performs <code>String#tr_s</code> processing on <em>str</em> in place,\nreturning <em>str</em>, or <code>nil</code> if no changes were made.\n"],["trace","Matrix","Matrix.html#method-i-trace","()","<p>Returns the trace (sum of diagonal elements) of the matrix.\n\n<pre>Matrix[[7,6], [3,9]].trace\n  =&gt; 16</pre>\n"],["trace","Net::HTTP","Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["trace","TracePoint","TracePoint.html#method-c-trace","(*args)","<p>A convenience method for TracePoint.new, that activates the trace\nautomatically.\n\n<pre>trace = TracePoint.trace(:call) ...</pre>\n"],["trace_func","IRB::Frame","IRB/Frame.html#method-i-trace_func","(event, file, line, id, binding)","<p>Used by Kernel#set_trace_func to register each event in the call stack\n"],["trace_object_allocations","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations","()","<p>Starts tracing object allocations from the ObjectSpace extension module.\n<p>For example:\n\n<pre>require &#39;objspace&#39; ...</pre>\n"],["trace_object_allocations_clear","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_clear","()","<p>Clear recorded tracing information.\n"],["trace_object_allocations_debug_start","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_debug_start","()",""],["trace_object_allocations_start","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_start","()","<p>Starts tracing object allocations.\n"],["trace_object_allocations_stop","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_stop","()","<p>Stop tracing object allocations.\n<p>Note that if ::trace_object_allocations_start is called n-times, then …\n"],["trace_var","Kernel","Kernel.html#method-i-trace_var","(p1, p2 = v2)","<p>Controls tracing of assignments to global variables. The parameter\n<code>symbol</code> identifies the variable (as ...\n"],["transact","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-transact","(&block)","<p>Executes a block as self\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sh</span>.<span class=\"ruby-identifier\">transact</span> { <span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;ls&quot;</span>, <span class=\"ruby-string\">&quot;-l&quot;</span>) <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">head</span> <span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">STDOUT</span> }\n</pre>\n"],["transaction","PStore","PStore.html#method-i-transaction","(read_only = false)","<p>Opens a new transaction for the data store.  Code executed inside a block\npassed to this method may read …\n"],["transfer","Fiber","Fiber.html#method-i-transfer","(*args)","<p>Transfer control to another fiber, resuming it from where it last stopped\nor starting it if it was not …\n"],["transform","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-transform","()",""],["transform_values","Hash","Hash.html#method-i-transform_values","()","<p>Return a new with the results of running block once for every value. This\nmethod does not change the …\n"],["transform_values!","Hash","Hash.html#method-i-transform_values-21","()","<p>Return a new with the results of running block once for every value. This\nmethod does not change the …\n"],["translate","REXML::Functions","REXML/Functions.html#method-c-translate","( string, tr1, tr2 )","<p>This is entirely Mike Stok&#39;s beast\n"],["transport_request","Net::HTTP","Net/HTTP.html#method-i-transport_request","(req)",""],["transpose","Array","Array.html#method-i-transpose","()","<p>Assumes that <code>self</code> is an array of arrays and transposes the\nrows and columns.\n\n<pre>a = [[1,2], [3,4], [5,6]] ...</pre>\n"],["transpose","Matrix","Matrix.html#method-i-transpose","()","<p>Returns the transpose of the matrix.\n\n<pre>Matrix[[1,2], [3,4], [5,6]]\n  =&gt; 1 2\n     3 4\n     5 6\nMatrix[[1,2], ...</pre>\n"],["trap","Kernel","Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["trap","Signal","Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["traverse","Gem::Specification","Gem/Specification.html#method-i-traverse","(trail = [], visited = {})","<p>Recursively walk dependencies of this spec, executing the\n<code>block</code> for each hop.\n"],["traverse","OpenSSL::ASN1","OpenSSL/ASN1.html#method-c-traverse","(p1)","<p>If a block is given, it prints out each of the elements encountered. Block\nparameters are (in that order): …\n"],["traverse_parents","Gem::Util","Gem/Util.html#method-c-traverse_parents","(directory)","<p>Enumerates the parents of <code>directory</code>.\n"],["tree","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-tree","()",""],["tridiagonalize","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-tridiagonalize","()","<p>Symmetric Householder reduction to tridiagonal form.\n"],["true","REXML::Functions","REXML/Functions.html#method-c-true","( )","<p>UNTESTED\n"],["truncate","BigDecimal","BigDecimal.html#method-i-truncate","(p1 = v1)","<p>Truncate to the nearest integer (by default), returning the result as a\nBigDecimal.\n\n<pre>BigDecimal(&#39;3.14159&#39;).truncate ...</pre>\n"],["truncate","File","File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes\nlong. Not available on all platforms.\n\n<pre>f = File.new(&quot;out&quot;, ...</pre>\n"],["truncate","File","File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be\nopened for writing. Not available on all platforms. …\n"],["truncate","Float","Float.html#method-i-truncate","(*args)","<p>Truncates <code>float</code> to a given precision in decimal digits\n(default 0 digits).\n<p>Precision may be negative. …\n"],["truncate","Integer","Integer.html#method-i-truncate","(*args)","<p>Returns the smallest number than or equal to <code>int</code> in decimal\ndigits (default 0 digits).\n<p>Precision may be …\n"],["truncate","Integer","Integer.html#method-i-truncate","(*args)","<p>Returns the smallest number than or equal to <code>int</code> in decimal\ndigits (default 0 digits).\n<p>Precision may be …\n"],["truncate","Numeric","Numeric.html#method-i-truncate","(*args)","<p>Returns <code>num</code> truncated to an Integer.\n<p>Numeric implements this by converting its value to a Float and invoking …\n"],["truncate","Pathname","Pathname.html#method-i-truncate","(p1)","<p>Truncates the file to <code>length</code> bytes.\n<p>See File.truncate.\n"],["truncate","Rational","Rational.html#method-i-truncate","(*args)","<p>Returns the truncated value (toward zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">truncate</span>      <span class=\"ruby-comment\">#=&gt; 3</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">truncate</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["truncate","StringIO","StringIO.html#method-i-truncate","(p1)","<p>Truncates the buffer string to at most <em>integer</em> bytes. The\n<strong>strio</strong> must be opened for writing.\n"],["truncate_text","Gem::Text","Gem/Text.html#method-i-truncate_text","(text, description, max_length = 100_000)",""],["trust","Delegator","Delegator.html#method-i-trust","","<p>Trust both the object returned by _<em>getobj</em>_ and self.\n"],["trust","Object","Object.html#method-i-trust","()","<p>Deprecated method that is equivalent to #untaint.\n"],["trust=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-trust-3D","(p1)",""],["trust=","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-trust-3D","(p1)",""],["trust_cert","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-trust_cert","(certificate)","<p>Add a certificate to trusted certificate list.\n"],["trust_dir","Gem::Security","Gem/Security.html#method-c-trust_dir","()","<p>Returns a Gem::Security::TrustDir which wraps the directory where trusted\ncertificates live.\n"],["trusted_certificates","Gem::Security","Gem/Security.html#method-c-trusted_certificates","(&block)","<p>Enumerates the trusted certificates via Gem::Security::TrustDir.\n"],["try_activate","Gem","Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if\nactivation succeeded or wasn&#39;t needed because …\n"],["try_const","MakeMakefile","MakeMakefile.html#method-i-try_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.\n<p>See also <code>have_const</code>\n"],["try_convert","Array","Array.html#method-c-try_convert","(p1)","<p>Tries to convert <code>obj</code> into an array, using <code>to_ary</code>\nmethod.  Returns the converted array or <code>nil</code> if\n<code>obj</code> cannot …\n"],["try_convert","Hash","Hash.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a hash, using to_hash method. Returns\nconverted hash or nil if <em>obj</em> cannot be …\n"],["try_convert","IO","IO.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into an IO, using to_io method. Returns\nconverted IO or <code>nil</code> if <em>obj</em> cannot be converted …\n"],["try_convert","Regexp","Regexp.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a Regexp, using to_regexp method. Returns\nconverted regexp or nil if <em>obj</em> cannot …\n"],["try_convert","String","String.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a String, using to_str method. Returns\nconverted string or nil if <em>obj</em> cannot …\n"],["try_lock","Thread::Mutex","Thread/Mutex.html#method-i-try_lock","()","<p>Attempts to obtain the lock and returns immediately. Returns\n<code>true</code> if the lock was granted.\n"],["try_mon_enter","MonitorMixin","MonitorMixin.html#method-i-try_mon_enter","()","<p>For backward compatibility\n"],["try_type","MakeMakefile","MakeMakefile.html#method-i-try_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.\n<p>See also <code>have_type</code>\n"],["tsort","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-c-tsort","(vertices)","<p>Topologically sorts the given vertices. @param [Enumerable&lt;Vertex&gt;]\nvertices the vertices to be …\n"],["tsort","TSort","TSort.html#method-i-tsort","()","<p>Returns a topologically sorted array of nodes. The array is sorted from\nchildren to parents, i.e. the …\n"],["tsort","TSort","TSort.html#method-c-tsort","(each_node, each_child)","<p>Returns a topologically sorted array of nodes. The array is sorted from\nchildren to parents, i.e. the …\n"],["tsort_each","TSort","TSort.html#method-i-tsort_each","()","<p>The iterator version of the #tsort method.\n<code><em>obj</em>.tsort_each</code> is similar to\n<code><em>obj</em>.tsort.each</code>, but modification …\n"],["tsort_each","TSort","TSort.html#method-c-tsort_each","(each_node, each_child)","<p>The iterator version of the TSort.tsort method.\n<p>The graph is represented by <em>each_node</em> and <em>each_child</em>. …\n"],["tsort_each_child","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_child","(node)",""],["tsort_each_child","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tsort_each_child","(vertex, &block)","<p>@!visibility private\n"],["tsort_each_child","TSort","TSort.html#method-i-tsort_each_child","(node)","<p>Should be implemented by a extended class.\n<p>#tsort_each_child is used to iterate for child nodes of <em>node</em> …\n"],["tsort_each_node","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_node","(&block)",""],["tsort_each_node","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-tsort_each_node","()","<p>@!visibility private\n"],["tsort_each_node","TSort","TSort.html#method-i-tsort_each_node","()","<p>Should be implemented by a extended class.\n<p>#tsort_each_node is used to iterate for all nodes over a graph. …\n"],["tty?","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-tty-3F","()",""],["tty?","Gem::StreamUI","Gem/StreamUI.html#method-i-tty-3F","()","<p>Returns true if TTY methods should be used on this StreamUI.\n"],["tty?","IO","IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre>File.new(&quot;testfile&quot;).isatty ...</pre>\n"],["tty?","StringIO","StringIO.html#method-i-tty-3F","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["tuesday?","Date","Date.html#method-i-tuesday-3F","()","<p>Returns true if the date is Tuesday.\n"],["tuesday?","Time","Time.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Tuesday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1991</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">19</span>)      <span class=\"ruby-comment\">#=&gt; 1991-02-19 00:00:00 -0600 ...</span>\n</pre>\n"],["tv_nsec","Time","Time.html#method-i-tv_nsec","()","<p>Returns the number of nanoseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...</pre>\n"],["tv_sec","Time","Time.html#method-i-tv_sec","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["tv_usec","Time","Time.html#method-i-tv_usec","()","<p>Returns the number of microseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...</pre>\n"],["type","Gem::Dependency","Gem/Dependency.html#method-i-type","()","<p>Dependency type.\n"],["type","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-type","()",""],["type","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-type","()","<p>Returns the type of the internal object.\n"],["type","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-type","()",""],["type","RDoc::ClassModule","RDoc/ClassModule.html#method-i-type","()","<p>&#39;module&#39; or &#39;class&#39;\n"],["type","RDoc::MethodAttr","RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["type","Socket::AncillaryData","Socket/AncillaryData.html#method-i-type","()","<p>returns the cmsg type as an integer.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Socket</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AncillaryData</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-constant\">INET6</span>, :<span class=\"ruby-constant\">IPV6</span>, :<span class=\"ruby-constant\">PKTINFO</span>, <span class=\"ruby-string\">&quot;&quot;</span>).<span class=\"ruby-identifier\">type</span>\n<span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["type=","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-type-3D","(p1)",""],["typealias","Fiddle::Importer","Fiddle/Importer.html#method-i-typealias","(alias_type, orig_type)","<p>Sets the type alias for <code>alias_type</code> as <code>orig_type</code>\n"],["typecode=","URI::FTP","URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["typekind","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-typekind","()","<p>Returns number which represents type.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;) ...</pre>\n"],["typelibs","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-c-typelibs","()","<p>Returns array of type libraries. This method will be OBSOLETE. Use\nWIN32OLE_TYPELIB.typelibs.collect{|t| …\n"],["typelibs","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-c-typelibs","()","<p>Returns the array of WIN32OLE_TYPELIB object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tlibs</span> = <span class=\"ruby-constant\">WIN32OLE_TYPELIB</span>.<span class=\"ruby-identifier\">typelibs</span>\n</pre>\n"],["typename","WIN32OLE_RECORD","WIN32OLE_RECORD.html#method-i-typename","()","<p>Returns the type name of VT_RECORD OLE variable.\n<p>If COM server in VB.NET ComServer project is the following: …\n"],["u","ERB::Util","ERB/Util.html#method-i-u","(s)",""],["u","ERB::Util","ERB/Util.html#method-c-u","(s)",""],["u","Matrix::LUPDecomposition","Matrix/LUPDecomposition.html#method-i-u","()","<p>Returns the upper triangular factor <code>U</code>\n"],["ucmp","OpenSSL::BN","OpenSSL/BN.html#method-i-ucmp","(p1)",""],["udp","Addrinfo","Addrinfo.html#method-c-udp","(p1, p2)","<p>returns an addrinfo object for UDP address.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">udp</span>(<span class=\"ruby-string\">&quot;localhost&quot;</span>, <span class=\"ruby-string\">&quot;daytime&quot;</span>) <span class=\"ruby-comment\">#=&gt; #&lt;Addrinfo: 127.0.0.1:13 ...</span>\n</pre>\n"],["udp_server_loop","Socket","Socket.html#method-c-udp_server_loop","(host=nil, port)","<p>creates a UDP/IP server on <em>port</em> and calls the block for each\nmessage arrived. The block is called with …\n"],["udp_server_loop_on","Socket","Socket.html#method-c-udp_server_loop_on","(sockets)","<p>Run UDP/IP server loop on the given sockets.\n<p>The return value of Socket.udp_server_sockets is appropriate …\n"],["udp_server_recv","Socket","Socket.html#method-c-udp_server_recv","(sockets)","<p>Receive UDP/IP packets from the given <em>sockets</em>. For each packet\nreceived, the block is called.\n<p>The block …\n"],["udp_server_sockets","Socket","Socket.html#method-c-udp_server_sockets","(host=nil, port)","<p>Creates UDP/IP sockets for a UDP server.\n<p>If no block given, it returns an array of sockets.\n<p>If a block …\n"],["ui","Gem","Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui","()","<p>See DefaultUserInteraction::ui\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui","()","<p>Return the default UI.\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui-3D","(new_ui)","<p>Set the default UI.  If the default UI is never explicitly set, a simple\nconsole based UserInteraction …\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui-3D","(new_ui)","<p>See DefaultUserInteraction::ui=\n"],["uid","File::Stat","File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid","Process","Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid=","Process","Process.html#method-c-uid-3D","(p1)","<p>Sets the (user) user ID for this process. Not available on all platforms.\n"],["uid_copy","Net::IMAP","Net/IMAP.html#method-i-uid_copy","(set, mailbox)","<p>Similar to #copy(), but <code>set</code> contains unique identifiers.\n"],["uid_fetch","Net::IMAP","Net/IMAP.html#method-i-uid_fetch","(set, attr)","<p>Similar to #fetch(), but <code>set</code> contains unique identifiers.\n"],["uid_move","Net::IMAP","Net/IMAP.html#method-i-uid_move","(set, mailbox)","<p>Similar to #move(), but <code>set</code> contains unique identifiers.\n"],["uid_search","Net::IMAP","Net/IMAP.html#method-i-uid_search","(keys, charset = nil)","<p>Similar to #search(), but returns unique identifiers.\n"],["uid_sort","Net::IMAP","Net/IMAP.html#method-i-uid_sort","(sort_keys, search_keys, charset)","<p>Similar to #sort(), but returns an array of unique identifiers.\n"],["uid_store","Net::IMAP","Net/IMAP.html#method-i-uid_store","(set, attr, flags)","<p>Similar to #store(), but <code>set</code> contains unique identifiers.\n"],["uid_thread","Net::IMAP","Net/IMAP.html#method-i-uid_thread","(algorithm, search_keys, charset)","<p>Similar to #thread(), but returns unique identifiers instead of message\nsequence numbers.\n"],["uidl","Net::POPMail","Net/POPMail.html#method-i-uidl","()",""],["umask","File","File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument\nis given, set the umask to …\n"],["umount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-umount","(dir)",""],["unadvise","WIN32OLE_EVENT","WIN32OLE_EVENT.html#method-i-unadvise","()","<p>disconnects OLE server. If this method called, then the WIN32OLE_EVENT\nobject does not receive the OLE …\n"],["unalias_command","Shell","Shell.html#method-c-unalias_command","(ali)","<p>Convenience method for Shell::CommandProcessor.unalias_command\n"],["unalias_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-unalias_command","(ali)","<p>Unaliases the given <code>alias</code> command.\n"],["uname","Etc","Etc.html#method-c-uname","()","<p>Returns the system information obtained by uname system call.\n<p>The return value is a hash which has 5 keys …\n"],["unbind","Method","Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from its current receiver. The resulting\n<code>UnboundMethod</code> can subsequently be bound to …\n"],["unconverted_fields?","CSV","CSV.html#method-i-unconverted_fields-3F","()","<p>Returns <code>true</code> if unconverted_fields() to parsed results.  See\nCSV::new for details.\n"],["undef_method","Module","Module.html#method-i-undef_method","(*args)","<p>Prevents the current class from responding to calls to the named method.\nContrast this with <code>remove_method</code> …\n"],["undef_system_command","Shell","Shell.html#method-c-undef_system_command","(command)","<p>Convenience method for Shell::CommandProcessor.undef_system_command\n"],["undef_system_command","Shell::CommandProcessor","Shell/CommandProcessor.html#method-c-undef_system_command","(command)","<p>Undefines a command\n"],["undefine_finalizer","ObjectSpace","ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["undoc_params","RDoc::Stats","RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented. \nReturns a total parameter count and an Array …\n"],["unescape","CGI::Util","CGI/Util.html#method-i-unescape","(string,encoding=@@accept_charset)","<p>URL-decode a string with encoding(optional).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">unescape</span>(<span class=\"ruby-string\">&quot;%27Stop%21%27+said+Fred&quot;</span>)\n   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["unescape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-unescape","()","<p>Unescapes the #uri which came from a CGI parameter\n"],["unescape","URI::Escape","URI/Escape.html#method-i-unescape","(*arg)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span>.<span class=\"ruby-identifier\">unescape</span>(<span class=\"ruby-identifier\">str</span>)\n</pre>\n<p>Args\n"],["unescape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p>str &mdash; String to remove escapes from\n<p>unsafe &mdash; Regexp to apply. Defaults to self.regexp\n"],["unescape","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-unescape","(str)","<p>Unescapes HTTP reserved and unwise characters in <code>str</code>\n"],["unescapeElement","CGI::Util","CGI/Util.html#method-i-unescapeElement","(string, *elements)","<p>Undo escaping such as that done by CGI::escapeElement()\n\n<pre>print CGI::unescapeElement(\n        CGI::escapeHTML(&#39;&lt;BR&gt;&lt;A ...</pre>\n"],["unescapeHTML","CGI::Util","CGI/Util.html#method-i-unescapeHTML","(string)","<p>Unescape a string that has been HTML-escaped\n\n<pre>CGI::unescapeHTML(&quot;Usage: foo &amp;quot;bar&amp;quot; &amp;lt;baz&amp;gt;&quot;) ...</pre>\n"],["unescape_element","CGI::Util","CGI/Util.html#method-i-unescape_element","(string, *elements)","<p>Synonym for CGI::unescapeElement(str)\n"],["unescape_form","WEBrick::HTTPUtils","WEBrick/HTTPUtils.html#method-i-unescape_form","(str)","<p>Unescapes form reserved characters in <code>str</code>\n"],["unescape_html","CGI::Util","CGI/Util.html#method-i-unescape_html","(string)","<p>Synonym for CGI::unescapeHTML(str)\n"],["unescape_value","OpenSSL::Config","OpenSSL/Config.html#method-c-unescape_value","(data, section, value)",""],["ungetbyte","IO","IO.html#method-i-ungetbyte","(p1)","<p>Pushes back bytes (passed as a parameter) onto <em>ios</em>, such that a\nsubsequent buffered read will return …\n"],["ungetbyte","StringIO","StringIO.html#method-i-ungetbyte","(p1)","<p>See IO#ungetbyte\n"],["ungetbyte","Zlib::GzipReader","Zlib/GzipReader.html#method-i-ungetbyte","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["ungetc","IO","IO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto <em>ios</em>, such\nthat a subsequent buffered character …\n"],["ungetc","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-ungetc","(c)","<p>Pushes character <code>c</code> back onto the stream such that a subsequent\nbuffered character read will return it. …\n"],["ungetc","StringIO","StringIO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto\n<strong>strio</strong> such that a subsequent buffered read will …\n"],["ungetc","Zlib::GzipReader","Zlib/GzipReader.html#method-i-ungetc","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["unicode_normalize","String","String.html#method-i-unicode_normalize","(form = :nfc)","<p>Unicode Normalization\n<p>Returns a normalized form of <code>str</code>, using Unicode normalizations\nNFC, NFD, NFKC, or …\n"],["unicode_normalize!","String","String.html#method-i-unicode_normalize-21","(form = :nfc)","<p>Destructive version of String#unicode_normalize, doing Unicode\nnormalization in place.\n"],["unicode_normalized?","String","String.html#method-i-unicode_normalized-3F","(form = :nfc)","<p>Checks whether <code>str</code> is in Unicode normalization form\n<code>form</code>, which is any of the four values :nfc, :nfd, …\n"],["uninstall","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall","()","<p>Performs the uninstall of the gem.  This removes the spec, the Gem\ndirectory, and the cached .gem file. …\n"],["uninstall_all","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_all","()",""],["uninstall_dep","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-uninstall_dep","(spec)",""],["uninstall_gem","Gem::TestCase","Gem/TestCase.html#method-i-uninstall_gem","(spec)","<p>Uninstalls the Gem::Specification <code>spec</code>\n"],["uninstall_gem","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall_gem","(spec)","<p>Uninstalls gem <code>spec</code>\n"],["uninstall_old_gemcutter","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-uninstall_old_gemcutter","()",""],["uninstall_specific","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_specific","()",""],["union","Fiddle::Importer","Fiddle/Importer.html#method-i-union","(signature)","<p>Creates a class to wrap the C union described by <code>signature</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">MyUnion</span> = <span class=\"ruby-identifier\">union</span> [<span class=\"ruby-string\">&#39;int i&#39;</span>, <span class=\"ruby-string\">&#39;char c&#39;</span>]\n</pre>\n"],["union","Regexp","Regexp.html#method-c-union","(*args)","<p>Return a <code>Regexp</code> object that is the union of the given\n<em>pattern</em>s, i.e., will match any of its parts. The …\n"],["union","Set","Set.html#method-i-union","(enum)",""],["uniq","Array","Array.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>.\n<p>If a block is given, it will use the return …\n"],["uniq","Enumerable","Enumerable.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>.\n<p>See also Array#uniq.\n"],["uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-uniq","()",""],["uniq!","Array","Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <code>self</code>.\n<p>If a block is given, it will use the return value of the block for …\n"],["unique_classes","RDoc::Store","RDoc/Store.html#method-i-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::Store","RDoc/Store.html#method-i-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must\nhave been called prior to …\n"],["unique_id","Net::POPMail","Net/POPMail.html#method-i-unique_id","()","<p>Returns the unique-id of the message. Normally the unique-id is a hash\nstring of the message.\n<p>This method …\n"],["unique_modules","RDoc::Store","RDoc/Store.html#method-i-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been\ncalled prior to using this method. …\n"],["unit","Matrix","Matrix.html#method-c-unit","(n)",""],["unitary?","Matrix","Matrix.html#method-i-unitary-3F","()","<p>Returns <code>true</code> if this is a unitary matrix Raises an error if\nmatrix is not square.\n"],["unix","Addrinfo","Addrinfo.html#method-c-unix","(p1, p2 = v2)","<p>returns an addrinfo object for UNIX socket address.\n<p><em>socktype</em> specifies the socket type. If it is omitted, …\n"],["unix","Socket","Socket.html#method-c-unix","(path)","<p>creates a new socket connected to path using UNIX socket socket.\n<p>If a block is given, the block is called …\n"],["unix?","Addrinfo","Addrinfo.html#method-i-unix-3F","()","<p>returns true if addrinfo is UNIX address. returns false otherwise.\n\n<pre>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).unix? ...</pre>\n"],["unix_path","Addrinfo","Addrinfo.html#method-i-unix_path","()","<p>Returns the socket path as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Addrinfo</span>.<span class=\"ruby-identifier\">unix</span>(<span class=\"ruby-string\">&quot;/tmp/sock&quot;</span>).<span class=\"ruby-identifier\">unix_path</span>       <span class=\"ruby-comment\">#=&gt; &quot;/tmp/sock&quot;</span>\n</pre>\n"],["unix_rights","Socket::AncillaryData","Socket/AncillaryData.html#method-c-unix_rights","(*args)","<p>Creates a new Socket::AncillaryData object which contains file descriptors\nas data.\n\n<pre>p Socket::AncillaryData.unix_rights(STDERR) ...</pre>\n"],["unix_rights","Socket::AncillaryData","Socket/AncillaryData.html#method-i-unix_rights","()","<p>returns the array of IO objects for SCM_RIGHTS control message in UNIX\ndomain socket.\n<p>The class of the …\n"],["unix_server_loop","Socket","Socket.html#method-c-unix_server_loop","(path)","<p>creates a UNIX socket server on <em>path</em>. It calls the block for each\nsocket accepted.\n<p>If <em>host</em> is specified, …\n"],["unix_server_socket","Socket","Socket.html#method-c-unix_server_socket","(path)","<p>creates a UNIX server socket on <em>path</em>\n<p>If no block given, it returns a listening socket.\n<p>If a block is given, …\n"],["unix_socket_abstract_name?","Socket","Socket.html#method-c-unix_socket_abstract_name-3F","(path)",""],["unknown","Logger","Logger.html#method-i-unknown","(progname = nil, &block)","<p>Log an <code>UNKNOWN</code> message.  This will be printed no matter what\nthe logger&#39;s level is.\n<p>See #info for …\n"],["unknown","Object","Object.html#method-i-unknown","","<p>mathn\n<p>mathn serves to make mathematical operations more precise in Ruby and to\nintegrate other mathematical …\n"],["unknown","Syslog::Logger","Syslog/Logger.html#method-i-unknown","","<p>Logs a <code>message</code> at the unknown (syslog alert) log level, or\nlogs the message returned from the block. …\n"],["unlink","Dir","Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["unlink","File","File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["unlink","Pathname","Pathname.html#method-i-unlink","()","<p>Removes a file or directory, using File.unlink if <code>self</code> is a\nfile, or Dir.unlink as necessary.\n"],["unlink","Shell::CommandProcessor","Shell/CommandProcessor.html#method-i-unlink","(path)","<p>See IO.unlink when <code>path</code> is a file.\n<p>See Dir.unlink when <code>path</code> is a directory.\n"],["unlink","Tempfile","Tempfile.html#method-i-unlink","()","<p>Unlinks (deletes) the file from the filesystem. One should always unlink\nthe file after using it, as …\n"],["unlock","Net::HTTP","Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["unlock","Thread::Mutex","Thread/Mutex.html#method-i-unlock","()","<p>Releases the lock. Raises <code>ThreadError</code> if <code>mutex</code>\nwasn&#39;t locked by the current thread.\n"],["unmount","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-unmount","(dir)","<p>Unmounts <code>dir</code>\n"],["unnormalize","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-unnormalize","( string, entities=nil, filter=nil )","<p>Unescapes all possible entities\n"],["unnormalize","REXML::Text","REXML/Text.html#method-c-unnormalize","( string, doctype=nil, filter=nil, illegal=nil )","<p>Unescapes all possible entities\n"],["unnormalized","REXML::Entity","REXML/Entity.html#method-i-unnormalized","()","<p>Evaluates to the unnormalized value of this entity; that is, replacing all\nentities – both %ent; and …\n"],["unpack","Gem::Installer","Gem/Installer.html#method-i-unpack","(directory)","<p>Unpacks the gem into the given directory.\n"],["unpack","Socket::Option","Socket/Option.html#method-i-unpack","(p1)","<p>Calls String#unpack on sockopt.data.\n\n<pre>sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack(&quot;i&quot;)) ...</pre>\n"],["unpack","String","String.html#method-i-unpack","(p1)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning an array of each …\n"],["unpack1","String","String.html#method-i-unpack1","(p1)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning the first value …\n"],["unpack_sockaddr_in","Socket","Socket.html#method-c-unpack_sockaddr_in","(p1)","<p>Unpacks <em>sockaddr</em> into port and ip_address.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_INET/AF_INET6. …\n"],["unpack_sockaddr_un","Socket","Socket.html#method-c-unpack_sockaddr_un","(p1)","<p>Unpacks <em>sockaddr</em> into path.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_UNIX.\n\n<pre>sockaddr = Socket.sockaddr_un(&quot;/tmp/sock&quot;) ...</pre>\n"],["unregist","DRb::ExtServManager","DRb/ExtServManager.html#method-i-unregist","(name)",""],["unregister_command","Gem::CommandManager","Gem/CommandManager.html#method-i-unregister_command","(command)","<p>Unregister the Symbol <code>command</code> as a gem command.\n"],["unresolved_deps","Gem::Specification","Gem/Specification.html#method-c-unresolved_deps","()","<p>DOC: This method needs documented or nodoc&#39;d\n"],["unresolved_names","Gem::TestCase","Gem/TestCase.html#method-i-unresolved_names","()",""],["unscan","StringScanner","StringScanner.html#method-i-unscan","()","<p>Set the scan pointer to the previous position.  Only one previous position\nis remembered, and it changes …\n"],["unshift","Array","Array.html#method-i-unshift","(*args)","<p>Prepends objects to the front of <code>self</code>, moving other elements\nupwards. See also Array#shift for the opposite …\n"],["unshift","Gem::RequestSet::Lockfile::Tokenizer","Gem/RequestSet/Lockfile/Tokenizer.html#method-i-unshift","(token)",""],["unshift","REXML::Parent","REXML/Parent.html#method-i-unshift","( object )",""],["unshift","REXML::Parsers::BaseParser","REXML/Parsers/BaseParser.html#method-i-unshift","(token)","<p>Push an event back on the head of the stream.  This method has\n(theoretically) infinite depth.\n"],["unshift","REXML::Parsers::PullParser","REXML/Parsers/PullParser.html#method-i-unshift","(token)",""],["unsubscribe","Net::IMAP","Net/IMAP.html#method-i-unsubscribe","(mailbox)","<p>Sends a UNSUBSCRIBE command to remove the specified <code>mailbox</code>\nname from the server&#39;s set of “active” …\n"],["untaint","Delegator","Delegator.html#method-i-untaint","","<p>Untaint both the object returned by _<em>getobj</em>_ and self.\n"],["untaint","Object","Object.html#method-i-untaint","()","<p>Removes the tainted mark from the object.\n<p>See #taint for more information.\n"],["untaint","Pathname","Pathname.html#method-i-untaint","()","<p>Untaints this Pathname.\n<p>See Object.untaint.\n"],["untrace_var","Kernel","Kernel.html#method-i-untrace_var","(p1, p2 = v2)","<p>Removes tracing for the specified command on the given global variable and\nreturns <code>nil</code>. If no command ...\n"],["untrust","Delegator","Delegator.html#method-i-untrust","","<p>Untrust both the object returned by _<em>getobj</em>_ and self.\n"],["untrust","Object","Object.html#method-i-untrust","()","<p>Deprecated method that is equivalent to #taint.\n"],["untrusted?","Object","Object.html#method-i-untrusted-3F","()","<p>Deprecated method that is equivalent to #tainted?.\n"],["unused","Zlib::GzipReader","Zlib/GzipReader.html#method-i-unused","()","<p>Returns the rest of the data which had read for parsing gzip format, or\n<code>nil</code> if the whole gzip file is …\n"],["unwind_for_conflict","Gem::Resolver::Molinillo::Resolver::Resolution","Gem/Resolver/Molinillo/Resolver/Resolution.html#method-i-unwind_for_conflict","()","<p>Unwinds the states stack because a conflict has been encountered @return\n[void]\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::Action","Gem/Resolver/Molinillo/DependencyGraph/Action.html#method-i-up","(graph)","<p>Performs the action on the given graph. @param  [DependencyGraph] graph the\ngraph to perform the action …\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular","Gem/Resolver/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge","Gem/Resolver/Molinillo/DependencyGraph/DeleteEdge.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed","Gem/Resolver/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Gem::Resolver::Molinillo::DependencyGraph::Tag","Gem/Resolver/Molinillo/DependencyGraph/Tag.html#method-i-up","(_graph)","<p>(see Action#up)\n"],["upcase","String","String.html#method-i-upcase","(*args)","<p>Returns a copy of <em>str</em> with all lowercase letters replaced with\ntheir uppercase counterparts.\n<p>See String#downcase …\n"],["upcase","Symbol","Symbol.html#method-i-upcase","(*args)","<p>Same as <code>sym.to_s.upcase.intern</code>.\n"],["upcase!","String","String.html#method-i-upcase-21","(*args)","<p>Upcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n<p>See String#downcase for meaning of …\n"],["update","CGI::Session","CGI/Session.html#method-i-update","()","<p>Store session data on the server.  For some session storage types, this is\na no-op.\n"],["update","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-update","()","<p>Save session state to the session&#39;s FileStore file.\n"],["update","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::PStore","CGI/Session/PStore.html#method-i-update","()","<p>Save session state to the session&#39;s PStore file.\n"],["update","DBM","DBM.html#method-i-update","(p1)","<p>Updates the database with multiple values from the specified object. Takes\nany object which implements …\n"],["update","Digest::Base","Digest/Base.html#method-i-update","(p1)","<p>Update the digest using given <em>string</em> and return <code>self</code>.\n"],["update","Digest::Instance","Digest/Instance.html#method-i-update","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["update","ENV","ENV.html#method-c-update","(p1)","<p>Adds the contents of <code>hash</code> to the environment variables.  If no\nblock is specified entries with duplicate …\n"],["update","GDBM","GDBM.html#method-i-update","(p1)","<p>Adds the key-value pairs of <em>other</em> to <em>gdbm</em>, overwriting\nentries with duplicate keys with those from <em>other</em> …\n"],["update","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-update","(current)","<p>Nothing can update the silent download reporter.\n"],["update","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-update","(bytes)","<p>Updates the verbose download reporter for the given number of\n<code>bytes</code>.\n"],["update","Hash","Hash.html#method-i-update","(p1)","<p>Adds the contents of <em>other_hash</em> to <em>hsh</em>.  If no block is\nspecified, entries with duplicate keys are overwritten …\n"],["update","OpenSSL::Cipher","OpenSSL/Cipher.html#method-i-update","(p1, p2 = v2)","<p>Encrypts data in a streaming fashion. Hand consecutive blocks of data to\nthe <code>update</code> method in order to …\n"],["update","OpenSSL::Digest","OpenSSL/Digest.html#method-i-update","(p1)","<p>Not every message digest can be computed in one single pass. If a message\ndigest is to be computed from …\n"],["update","OpenSSL::HMAC","OpenSSL/HMAC.html#method-i-update","(p1)","<p>Returns <code>self</code> updated with the message to be authenticated. Can\nbe called repeatedly with chunks of the …\n"],["update","OptionParser::List","OptionParser/List.html#method-i-update","(sw, sopts, lopts, nsw = nil, nlopts = nil)","<p>Adds <code>sw</code> according to <code>sopts</code>, <code>lopts</code>\nand <code>nlopts</code>.\n<p>sw &mdash; OptionParser::Switch instance to be added.\n<p>sopts &mdash; Short …\n"],["update","SDBM","SDBM.html#method-i-update","(p1)","<p>Insert or update key-value pairs.\n<p>This method will work with any object which implements an each_pair …\n"],["update","YAML::DBM","YAML/DBM.html#method-i-update","( hsh )","<p>Updates the database with multiple values from the specified object. Takes\nany object which implements …\n"],["update_aliases","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are\naliases through a constant.\n<p>The …\n"],["update_cache?","Gem::Source","Gem/Source.html#method-i-update_cache-3F","()","<p>Returns true when it is possible and safe to update the cache directory.\n"],["update_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-update_checksum","()","<p>Updates the TarHeader&#39;s checksum\n"],["update_content","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-update_content","()",""],["update_content","RSS::Maker::ITunesItemModel::ITunesDurationBase","RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-update_content","()",""],["update_extends","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_extends","()","<p>Deletes from #extends those whose module has been removed from the\ndocumentation.\n"],["update_gem","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gem","(name, version = Gem::Requirement.default)",""],["update_gems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gems","(gems_to_update)",""],["update_includes","RDoc::ClassModule","RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the\ndocumentation.\n"],["update_index","Gem::Indexer","Gem/Indexer.html#method-i-update_index","()","<p>Perform an in-place update of the repository from newly added gems.\n"],["update_output_dir","RDoc::RDoc","RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["update_rubygems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_rubygems","()","<p>Update RubyGems software to the latest version.\n"],["update_specs_index","Gem::Indexer","Gem/Indexer.html#method-i-update_specs_index","(index, source, dest)","<p>Combines specs in <code>index</code> and <code>source</code> then writes\nout a new copy to <code>dest</code>.  For a latest index, does not …\n"],["updated","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-updated","(message)","<p>Does not print <code>message</code> when updated as this object has taken a\nvow of silence.\n"],["updated","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-updated","(message)","<p>Prints out a dot and ignores <code>message</code>.\n"],["updated","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-updated","(message)","<p>Prints out the position relative to the total and the <code>message</code>.\n"],["updated","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-updated","()",""],["updated","RSS::Maker::ItemsBase::ItemBase","RSS/Maker/ItemsBase/ItemBase.html#method-i-updated","()",""],["updated","RSS::Maker::ItemsBase::ItemBase::SourceBase","RSS/Maker/ItemsBase/ItemBase/SourceBase.html#method-i-updated","()",""],["updated=","RSS::Maker::ChannelBase","RSS/Maker/ChannelBase.html#method-i-updated-3D","(date)",""],["updated=","RSS::Maker::ItemsBase::ItemBase","RSS/Maker/ItemsBase/ItemBase.html#method-i-updated-3D","(date)",""],["updated=","RSS::Maker::ItemsBase::ItemBase::SourceBase","RSS/Maker/ItemsBase/ItemBase/SourceBase.html#method-i-updated-3D","(date)",""],["upgrade_to_class","RDoc::Context","RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a\n<code>class_type</code>\n"],["upper_bound","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-upper_bound","()",""],["upper_bound=","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-upper_bound-3D","(ubound)",""],["upper_triangular?","Matrix","Matrix.html#method-i-upper_triangular-3F","()","<p>Returns <code>true</code> if this is an upper triangular matrix.\n"],["upto","Date","Date.html#method-i-upto","(p1)","<p>This method is equivalent to step(max, 1){|date| …}.\n"],["upto","Integer","Integer.html#method-i-upto","(p1)","<p>Iterates the given block, passing in integer values from <code>int</code>\nup to and including <code>limit</code>.\n<p>If no block is …\n"],["upto","Integer","Integer.html#method-i-upto","(p1)","<p>Iterates the given block, passing in integer values from <code>int</code>\nup to and including <code>limit</code>.\n<p>If no block is …\n"],["upto","String","String.html#method-i-upto","(p1, p2 = v2)","<p>Iterates through successive values, starting at <em>str</em> and ending at\n<em>other_str</em> inclusive, passing each value …\n"],["uptodate?","FileUtils","FileUtils.html#method-c-uptodate-3F","(new, old_list)","<p>Returns true if <code>new</code> is newer than all <code>old_list</code>.\nNon-existent files are older than any file.\n\n<pre>FileUtils.uptodate?(&#39;hello.o&#39;, ...</pre>\n"],["uptodate?","FileUtils","FileUtils.html#method-i-uptodate-3F","(new, old_list)","<p>Returns true if <code>new</code> is newer than all <code>old_list</code>.\nNon-existent files are older than any file.\n\n<pre>FileUtils.uptodate?(&#39;hello.o&#39;, ...</pre>\n"],["uri","DRb","DRb.html#method-i-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri","DRb","DRb.html#method-c-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri_convert_attr_reader","RSS::BaseModel","RSS/BaseModel.html#method-i-uri_convert_attr_reader","(*attrs)",""],["uri_encode","Gem::Server","Gem/Server.html#method-i-uri_encode","(str)",""],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-i-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_option","DRb::DRbProtocol","DRb/DRbProtocol.html#method-c-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_registered?","RSS::BaseListener","RSS/BaseListener.html#method-c-uri_registered-3F","(uri, name)","<p>test if this uri is registered against this name\n"],["url_encode","ERB::Util","ERB/Util.html#method-i-url_encode","(s)","<p>A utility method for encoding the String <em>s</em> as a URL.\n\n<pre>require &quot;erb&quot;\ninclude ERB::Util\n\nputs url_encode(&quot;Programming ...</pre>\n"],["url_encode","ERB::Util","ERB/Util.html#method-c-url_encode","(s)","<p>A utility method for encoding the String <em>s</em> as a URL.\n\n<pre>require &quot;erb&quot;\ninclude ERB::Util\n\nputs url_encode(&quot;Programming ...</pre>\n"],["urlsafe_base64","Random::Formatter","Random/Formatter.html#method-i-urlsafe_base64","(n=nil, padding=false)","<p>SecureRandom.urlsafe_base64 generates a random URL-safe base64 string.\n<p>The argument <em>n</em> specifies the length, …\n"],["urlsafe_decode64","Base64","Base64.html#method-i-urlsafe_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with “Base 64 Encoding with URL and …\n"],["urlsafe_encode64","Base64","Base64.html#method-i-urlsafe_encode64","(bin, padding: true)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with “Base 64 Encoding with URL and …\n"],["usage","Gem::Command","Gem/Command.html#method-i-usage","()","<p>Override to display the usage for an individual gem command.\n<p>The text “[options]” is automatically …\n"],["use_gemdeps","Gem","Gem.html#method-c-use_gemdeps","(path = nil)","<p>Looks for a gem dependency file at <code>path</code> and activates the gems\nin the file if found.  If the file is …\n"],["use_loader","IRB::Context","IRB/Context.html#method-i-use_loader","()","<p>Returns whether <code>irb</code>&#39;s own file reader method is used by\n<code>load</code>/<code>require</code> or not.\n<p>This mode is globally …\n"],["use_loader=","IRB::Context","IRB/Context.html#method-i-use_loader-3D","(opt)","<p>Sets IRB.conf\n<p>See #use_loader for more information.\n"],["use_loader?","IRB::Context","IRB/Context.html#method-i-use_loader-3F","()",""],["use_markup","RDoc::Parser","RDoc/Parser.html#method-c-use_markup","(content)","<p>If there is a <code>markup: parser_name</code> comment at the front of the\nfile, use it to determine the parser.  …\n"],["use_paths","Gem","Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and\nGem.path.  Used mainly by the unit tests to provide environment …\n"],["use_readline=","IRB::Context","IRB/Context.html#method-i-use_readline-3D","(opt)","<p>Obsolete method.\n<p>Can be set using the <code>--noreadline</code> and <code>--readline</code>\ncommand line options.\n<p>See IRB@Command+line+options …\n"],["use_ssl=","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you\nchange use_ssl value after session …\n"],["use_ssl?","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["use_ssl?","Net::POP3","Net/POP3.html#method-i-use_ssl-3F","()","<p>does this instance use SSL?\n"],["use_ssl?","Net::POP3","Net/POP3.html#method-c-use_ssl-3F","()","<p>returns <code>true</code> if POP3.ssl_params is set\n"],["use_tracer=","IRB::Context","IRB/Context.html#method-i-use_tracer-3D","(opt)","<p>Sets whether or not to use the Tracer library when evaluating statements in\nthis context.\n<p>See <code>lib/tracer.rb</code> …\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-use_ui","(new_ui)","<p>Use <code>new_ui</code> for the duration of <code>block</code>.\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-use_ui","(new_ui, &block)","<p>See DefaultUserInteraction::use_ui\n"],["usec","Time","Time.html#method-i-usec","()","<p>Returns the number of microseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...</pre>\n"],["used_modules","Module","Module.html#method-c-used_modules","()","<p>Returns an array of all modules used in the current scope. The ordering of\nmodules in the resulting array …\n"],["user","URI::Generic","URI/Generic.html#method-i-user","()","<p>returns the user component\n"],["user=","URI::Generic","URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["user_agent","Gem::Request","Gem/Request.html#method-i-user_agent","()",""],["user_dir","Gem","Gem.html#method-c-user_dir","()","<p>Path for gems in the user&#39;s home directory\n"],["user_home","Gem","Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["userinfo","URI::Generic","URI/Generic.html#method-i-userinfo","()","<p>returns the userinfo, either as &#39;user&#39; or &#39;user:password&#39;\n"],["userinfo=","URI::Generic","URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like &#39;name:pass&#39;\n"],["using","Module","Module.html#method-i-using","(p1)","<p>Import class refinements from <em>module</em> into the current class or\nmodule definition.\n"],["using_anon_cipher?","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-using_anon_cipher-3F","()",""],["utc","Time","Time.html#method-c-utc","(*args)","<p>Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other …\n"],["utc","Time","Time.html#method-i-utc","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...</pre>\n"],["utc?","Time","Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>                        <span class=\"ruby-comment\">#=&gt; 2007-11-19 ...</span>\n</pre>\n"],["utc_offset","Time","Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["util_build_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_build_gem","(spec)","<p>Builds a gem from <code>spec</code> and places it in <code>File.join\n@gemhome, &#39;cache&#39;</code>.  Automatically creates files …\n"],["util_clear_gems","Gem::TestCase","Gem/TestCase.html#method-i-util_clear_gems","()","<p>Removes all installed gems from +@gemhome+.\n"],["util_dir_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_dir_entry","()",""],["util_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_entry","(tar)",""],["util_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_gem","(name, version, deps = nil, &block)","<p>Creates a gem with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The specification will be yielded before gem creation\nfor …\n"],["util_gzip","Gem::TestCase","Gem/TestCase.html#method-i-util_gzip","(data)","<p>Gzips <code>data</code>.\n"],["util_inst_bindir","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_inst_bindir","()","<p>The path where installed executables live\n"],["util_installer","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_installer","(spec, gem_home, user=false)","<p>Creates an installer for <code>spec</code> that will install into\n<code>gem_home</code>.  If <code>user</code> is true a user-install will be\n…\n"],["util_make_exec","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_make_exec","(spec = @spec, shebang = \"#!/usr/bin/ruby\")","<p>Adds an executable named “executable” to <code>spec</code> with the given\n<code>shebang</code>.\n<p>The executable is also …\n"],["util_make_gems","Gem::TestCase","Gem/TestCase.html#method-i-util_make_gems","(prerelease = false)","<p>Creates several default gems which all have a lib/code.rb file.  The gems\nare not installed but are available …\n"],["util_remove_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_remove_gem","(spec)",""],["util_restore_RUBY_VERSION","Gem::TestCase","Gem/TestCase.html#method-i-util_restore_RUBY_VERSION","()",""],["util_set_RUBY_VERSION","Gem::TestCase","Gem/TestCase.html#method-i-util_set_RUBY_VERSION","(version, patchlevel = nil, revision = nil)",""],["util_set_arch","Gem::TestCase","Gem/TestCase.html#method-i-util_set_arch","(arch)","<p>Set the platform to <code>arch</code>\n"],["util_setup_fake_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-util_setup_fake_fetcher","(prerelease = false)","<p>Sets up a fake fetcher using the gems from #util_make_gems.  Optionally\nadditional <code>prerelease</code> gems may …\n"],["util_setup_gem","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_setup_gem","(ui = @ui)","<p>Builds the @spec gem and returns an installer for it.  The built gem\nincludes:\n\n<pre>bin/executable\nlib/code.rb ...</pre>\n"],["util_setup_spec_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-util_setup_spec_fetcher","(*specs)","<p>Sets up Gem::SpecFetcher to return information from the gems in\n<code>specs</code>. Best used with +@all_gems+ from …\n"],["util_spec","Gem::TestCase","Gem/TestCase.html#method-i-util_spec","(name, version = 2, deps = nil)","<p>Creates a spec with <code>name</code>, <code>version</code>. \n<code>deps</code> can specify the dependency or a <code>block</code> can be\ngiven for full …\n"],["util_symlink_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_symlink_entry","()",""],["util_zip","Gem::TestCase","Gem/TestCase.html#method-i-util_zip","(data)","<p>Deflates <code>data</code>\n"],["utime","File","File.html#method-c-utime","(*args)","<p>Sets the access and modification times of each named file to the first two\narguments. Returns the number …\n"],["utime","Pathname","Pathname.html#method-i-utime","(p1, p2)","<p>Update the access and modification times of the file.\n<p>See File.utime.\n"],["uuid","Random::Formatter","Random/Formatter.html#method-i-uuid","()","\n<pre class=\"ruby\"><span class=\"ruby-comment\"># SecureRandom.random_number generates a random number.</span>\n<span class=\"ruby-comment\">#</span>\n<span class=\"ruby-comment\"># If a positive integer is given as _n_,</span>\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["v","Gem::TestCase","Gem/TestCase.html#method-i-v","(string)","<p>Construct a new Gem::Version.\n"],["v","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-v","()",""],["v_inv","Matrix::EigenvalueDecomposition","Matrix/EigenvalueDecomposition.html#method-i-v_inv","()",""],["valid?","RSS::Element","RSS/Element.html#method-i-valid-3F","(ignore_unknown_element=true)",""],["valid_civil?","Date","Date.html#method-c-valid_civil-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given calendar date is valid, and false if not.\n\n<pre>Date.valid_date?(2001,2,3)        ...</pre>\n"],["valid_commercial?","Date","Date.html#method-c-valid_commercial-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given week date is valid, and false if not.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">valid_commercial?</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">5</span>,<span class=\"ruby-value\">6</span>)  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["valid_date?","Date","Date.html#method-c-valid_date-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given calendar date is valid, and false if not.\n\n<pre>Date.valid_date?(2001,2,3)        ...</pre>\n"],["valid_encoding?","String","String.html#method-i-valid_encoding-3F","()","<p>Returns true for a string which is encoded correctly.\n\n<pre>&quot;\\xc2\\xa1&quot;.force_encoding(&quot;UTF-8&quot;).valid_encoding? ...</pre>\n"],["valid_jd?","Date","Date.html#method-c-valid_jd-3F","(p1, p2 = v2)","<p>Just returns true.  It&#39;s nonsense, but is for symmetry.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">valid_jd?</span>(<span class=\"ruby-value\">2451944</span>)           <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["valid_number?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-valid_number-3F","(num)","<p>Check is passed argument valid &#39;number&#39; in RFC 3501 terminology\n"],["valid_nz_number?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-valid_nz_number-3F","(num)","<p>Check is passed argument valid &#39;nz_number&#39; in RFC 3501 terminology\n"],["valid_ordinal?","Date","Date.html#method-c-valid_ordinal-3F","(p1, p2, p3 = v3)","<p>Returns true if the given ordinal date is valid, and false if not.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">valid_ordinal?</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">34</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["valid_v6?","IPSocket","IPSocket.html#method-c-valid_v6-3F","(addr)",""],["validate","Gem::Specification","Gem/Specification.html#method-i-validate","(packaging = true)","<p>Checks that the specification contains all required fields, and does a very\nbasic sanity check.\n<p>Raises …\n"],["validate","REXML::Validation::Validator","REXML/Validation/Validator.html#method-i-validate","( event )",""],["validate","RSS::Element","RSS/Element.html#method-i-validate","(ignore_unknown_element=true)",""],["validate_attribute","RSS::Element","RSS/Element.html#method-i-validate_attribute","()",""],["validate_data","Net::IMAP","Net/IMAP.html#method-i-validate_data","(data)",""],["validate_duplicate_links","RSS::Atom::DuplicateLinkChecker","RSS/Atom/DuplicateLinkChecker.html#method-i-validate_duplicate_links","(links)","<p>Checks if there are duplicate links with the same type and hreflang\nattributes that have an alternate …\n"],["validate_for_stream","RSS::Element","RSS/Element.html#method-i-validate_for_stream","(tags, ignore_unknown_element=true)",""],["validate_line","Net::SMTP","Net/SMTP.html#method-i-validate_line","(line)",""],["validate_one_tag_name","RSS::ImageModelUtils","RSS/ImageModelUtils.html#method-i-validate_one_tag_name","(ignore_unknown_element, name, tags)",""],["validate_permissions","Gem::Specification","Gem/Specification.html#method-i-validate_permissions","()","<p>Checks to see if the files to be packaged are world-readable.\n"],["value","CGI::Cookie","CGI/Cookie.html#method-i-value","()","<p>Returns the value or list of values for this cookie.\n"],["value","Fiddle::Importer","Fiddle/Importer.html#method-i-value","(ty, val=nil)",""],["value","Net::HTTPResponse","Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["value","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-value","()",""],["value","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-value","()",""],["value","REXML::Attribute","REXML/Attribute.html#method-i-value","()","<p>Returns the UNNORMALIZED value of this attribute.  That is, entities have\nbeen expanded to their values …\n"],["value","REXML::CData","REXML/CData.html#method-i-value","()",""],["value","REXML::Entity","REXML/Entity.html#method-i-value","()","<p>Returns the value of this entity.  At the moment, only internal entities\nare processed.  If the value …\n"],["value","REXML::Text","REXML/Text.html#method-i-value","()","<p>Returns the string value of this text.  This is the text without entities,\nas it might be used programmatically, …\n"],["value","Rinda::Tuple","Rinda/Tuple.html#method-i-value","()","<p>Return the tuple itself\n"],["value","Rinda::TupleEntry","Rinda/TupleEntry.html#method-i-value","()","<p>Return the object which makes up the tuple itself: the Array or Hash.\n"],["value","Thread","Thread.html#method-i-value","()","<p>Waits for <code>thr</code> to complete, using #join, and returns its value\nor raises the exception which terminated …\n"],["value","UncaughtThrowError","UncaughtThrowError.html#method-i-value","()","<p>Return the return value which was called for.\n"],["value","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-value","()","<p>Returns value if value is exists. If the value does not exist, this method\nreturns nil.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["value","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-i-value","()","<p>Returns Ruby object value from OLE variant.\n\n<pre>obj = WIN32OLE_VARIANT.new(1, WIN32OLE::VARIANT::VT_BSTR) ...</pre>\n"],["value=","CGI::Cookie","CGI/Cookie.html#method-i-value-3D","(val)","<p>Replaces the value of this cookie with a new value or list of values.\n"],["value=","OpenSSL::X509::Attribute","OpenSSL/X509/Attribute.html#method-i-value-3D","(p1)",""],["value=","OpenSSL::X509::Extension","OpenSSL/X509/Extension.html#method-i-value-3D","(p1)",""],["value=","REXML::Text","REXML/Text.html#method-i-value-3D","( val )","<p>Sets the contents of this text node.  This expects the text to be\nunnormalized.  It returns self.\n\n<pre>e = ...</pre>\n"],["value=","RSS::ITunesItemModel::ITunesDuration","RSS/ITunesItemModel/ITunesDuration.html#method-i-value-3D","(value)",""],["value=","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-i-value-3D","(p1)","<p>Sets variant value to val. If the val type does not match variant value\ntype(vartype), then val is changed …\n"],["value?","DBM","DBM.html#method-i-value-3F","(p1)","<p>Returns true if the database contains the specified string value, false\notherwise.\n"],["value?","ENV","ENV.html#method-c-value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["value?","GDBM","GDBM.html#method-i-value-3F","(p1)","<p>Returns true if the given value <em>v</em> exists within the database.\nReturns false otherwise.\n"],["value?","Hash","Hash.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.value?(100) ...</pre>\n"],["value?","SDBM","SDBM.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>value</code>.\n"],["values","DBM","DBM.html#method-i-values","()","<p>Returns an array of all the string values in the database.\n"],["values","ENV","ENV.html#method-c-values","()","<p>Returns every environment variable value as an Array\n"],["values","GDBM","GDBM.html#method-i-values","()","<p>Returns an array of all values of this database.\n"],["values","Hash","Hash.html#method-i-values","()","<p>Returns a new array populated with the values from <em>hsh</em>. See also\n<code>Hash#keys</code>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200, ...</pre>\n"],["values","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-values","()","<p>Iterates over values and objects in a weakly referenced object\n"],["values","SDBM","SDBM.html#method-i-values","()","<p>Returns a new Array containing the values in the database.\n"],["values","Struct","Struct.html#method-i-values","()","<p>Returns the values for this struct as an Array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["values","YAML::DBM","YAML/DBM.html#method-i-values","()","<p>Returns an array of values from the database.\n"],["values_at","Array","Array.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <code>self</code> corresponding\nto the given <code>selector</code>(s).\n<p>The selectors …\n"],["values_at","CSV::Row","CSV/Row.html#method-i-values_at","(*headers_and_or_indices)",""],["values_at","CSV::Table","CSV/Table.html#method-i-values_at","(*indices_or_headers)","<p>The mixed mode default is to treat a list of indices as row access,\nreturning the rows indicated.  Anything …\n"],["values_at","DBM","DBM.html#method-i-values_at","(*args)","<p>Returns an array containing the values associated with the given keys.\n"],["values_at","ENV","ENV.html#method-c-values_at","(*args)","<p>Returns an array containing the environment variable values associated with\nthe given names.  See also …\n"],["values_at","GDBM","GDBM.html#method-i-values_at","(*args)","<p>Returns an array of the values associated with each specified <em>key</em>.\n"],["values_at","Hash","Hash.html#method-i-values_at","(*args)","<p>Return an array containing the values associated with the given keys. Also\nsee <code>Hash.select</code>.\n\n<pre>h = { &quot;cat&quot; ...</pre>\n"],["values_at","MatchData","MatchData.html#method-i-values_at","(*args)","<p>Uses each <em>index</em> to access the matching values, returning an array\nof the corresponding matches.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138: ...</pre>\n"],["values_at","SDBM","SDBM.html#method-i-values_at","(*args)","<p>Returns an Array of values corresponding to the given keys.\n"],["values_at","Struct","Struct.html#method-i-values_at","(*args)","<p>Returns the struct member values for each <code>selector</code> as an\nArray.  A <code>selector</code> may be either an Integer …\n"],["values_at","YAML::DBM","YAML/DBM.html#method-i-values_at","( *keys )","<p>Returns an array containing the values associated with the given keys.\n"],["variable_is_set?","RSS::Maker::Atom::Entry::Items::Item","RSS/Maker/Atom/Entry/Items/Item.html#method-i-variable_is_set-3F","()",""],["variable_is_set?","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-variable_is_set-3F","()",""],["variable_is_set?","RSS::Maker::Base","RSS/Maker/Base.html#method-i-variable_is_set-3F","()",""],["variable_kind","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-variable_kind","()","<p>Returns variable kind string.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...</pre>\n"],["variables","REXML::Functions","REXML/Functions.html#method-c-variables","()",""],["variables","RSS::Maker::Atom::Entry::Items::Item","RSS/Maker/Atom/Entry/Items/Item.html#method-i-variables","()",""],["variables","RSS::Maker::Atom::Feed::Channel","RSS/Maker/Atom/Feed/Channel.html#method-i-variables","()",""],["variables","RSS::Maker::Atom::Feed::Items::Item","RSS/Maker/Atom/Feed/Items/Item.html#method-i-variables","()",""],["variables","RSS::Maker::Atom::Feed::Items::Item::Content","RSS/Maker/Atom/Feed/Items/Item/Content.html#method-i-variables","()",""],["variables","RSS::Maker::Atom::Feed::Items::Item::Source","RSS/Maker/Atom/Feed/Items/Item/Source.html#method-i-variables","()",""],["variables","RSS::Maker::AtomCategory","RSS/Maker/AtomCategory.html#method-i-variables","()",""],["variables","RSS::Maker::AtomTextConstruct","RSS/Maker/AtomTextConstruct.html#method-i-variables","()",""],["variables","RSS::Maker::Base","RSS/Maker/Base.html#method-i-variables","()",""],["variables","RSS::Maker::RSS09::Channel","RSS/Maker/RSS09/Channel.html#method-i-variables","()",""],["variables","RSS::Maker::RSS10::Image","RSS/Maker/RSS10/Image.html#method-i-variables","()",""],["variables","RSS::Maker::RSS10::Items::Item","RSS/Maker/RSS10/Items/Item.html#method-i-variables","()",""],["variables","RSS::Maker::RSS20::Items::Item","RSS/Maker/RSS20/Items/Item.html#method-i-variables","()",""],["variables","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-variables","()","<p>Returns array of WIN32OLE_VARIABLE objects which represent variables\ndefined in OLE class.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</pre>\n"],["variables=","REXML::Functions","REXML/Functions.html#method-c-variables-3D","(x)",""],["variables=","REXML::XPathParser","REXML/XPathParser.html#method-i-variables-3D","( vars={} )",""],["varkind","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-varkind","()","<p>Returns the number which represents variable kind.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</pre>\n"],["vartype","WIN32OLE_VARIANT","WIN32OLE_VARIANT.html#method-i-vartype","()","<p>Returns OLE variant type.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-constant\">WIN32OLE_VARIANT</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;string&quot;</span>)\n<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">vartype</span> <span class=\"ruby-comment\"># =&gt; WIN32OLE::VARIANT::VT_BSTR</span>\n</pre>\n"],["vc_windows?","Gem::TestCase","Gem/TestCase.html#method-i-vc_windows-3F","()","<p>Returns whether or not we&#39;re on a version of Ruby built with VC++ (or\nBorland) versus Cygwin, Mingw …\n"],["vc_windows?","Gem::TestCase","Gem/TestCase.html#method-c-vc_windows-3F","()","<p>Returns whether or not we&#39;re on a version of Ruby built with VC++ (or\nBorland) versus Cygwin, Mingw …\n"],["vendor_gem","Gem::TestCase","Gem/TestCase.html#method-i-vendor_gem","(name = 'a', version = 1)","<p>A vendor_gem is used with a gem dependencies file.  The gem created here\nhas no files, just a gem specification …\n"],["ver","BigDecimal","BigDecimal.html#method-c-ver","()","<p>Returns the BigDecimal version number.\n"],["ver","OptionParser","OptionParser.html#method-i-ver","()","<p>Returns version string from program_name, version and release.\n"],["verb","RDoc::TestCase","RDoc/TestCase.html#method-i-verb","(*parts)","<p>Shortcut for RDoc::Markup::Verbatim.new with <code>parts</code>\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose","()","<p>Get the default value of the :verbose option.\n"],["verbose","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose","()","<p>Get whether the server is in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose","Gem::UserInteraction","Gem/UserInteraction.html#method-i-verbose","(msg = nil)","<p>Calls <code>say</code> with <code>msg</code> or the results of the block if\nreally_verbose is true.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-i-verbose-3D","(v)","<p>Set whether to operate in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose=","DRb::DRbServer","DRb/DRbServer.html#method-c-verbose-3D","(on)","<p>Set the default value of the :verbose option.\n<p>See #new().  The initial default value is false.\n"],["verbose?","IRB::Context","IRB/Context.html#method-i-verbose-3F","()","<p>Returns whether messages are displayed or not.\n"],["verbose_capture_io","RDoc::TestCase","RDoc/TestCase.html#method-i-verbose_capture_io","()","<p>run capture_io with setting $VERBOSE = true\n"],["verify","Gem::Package","Gem/Package.html#method-i-verify","()","<p>Verifies that this gem:\n<p>Contains a valid gem specification\n<p>Contains a contents archive\n"],["verify","Gem::Package::Old","Gem/Package/Old.html#method-i-verify","()","<p>Raises an exception if a security policy that verifies data is active. Old\nformat gems cannot be verified …\n"],["verify","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify","(chain, key = nil, digests = {})","<p>For <code>full_name</code>, verifies the certificate <code>chain</code> is\nvalid, the <code>digests</code> match the signatures\n<code>signatures</code> created …\n"],["verify","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-verify","()","<p>Make sure the trust directory exists.  If it does exist, make sure it&#39;s\nactually a directory.  If …\n"],["verify","Net::POP3","Net/POP3.html#method-c-verify","()","<p>returns whether verify_mode is enable from POP3.ssl_params\n"],["verify","OpenSSL::Netscape::SPKI","OpenSSL/Netscape/SPKI.html#method-i-verify","(p1)","<p>Parameters\n<p><code>key</code> - the public key to be used for verifying the SPKI\nsignature\n\n<p>Returns <code>true</code> if the signature …\n"],["verify","OpenSSL::OCSP::BasicResponse","OpenSSL/OCSP/BasicResponse.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies the signature of the response using the given\n<code>certificates</code> and <code>store</code>. This works in the similar\n…\n"],["verify","OpenSSL::OCSP::Request","OpenSSL/OCSP/Request.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies this request using the given <code>certificates</code> and\n<code>store</code>. <code>certificates</code> is an array of\nOpenSSL::X509::Certificate …\n"],["verify","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-i-verify","(p1, p2, p3 = v3, p4 = v4)",""],["verify","OpenSSL::PKey::PKey","OpenSSL/PKey/PKey.html#method-i-verify","(p1, p2, p3)","<p>To verify the <code>String</code> <code>signature</code>,\n<code>digest</code>, an instance of OpenSSL::Digest, must be provided to\nre-compute …\n"],["verify","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-verify","(p1)",""],["verify","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC\n&#39;key&#39;\n"],["verify","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC\n&#39;key&#39;\n"],["verify","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-verify","(p1, p2 = v2)","<p>Performs a certificate verification on the OpenSSL::X509::Certificate\n<code>cert</code>.\n<p><code>chain</code> can be an array of  …\n"],["verify","OpenSSL::X509::StoreContext","OpenSSL/X509/StoreContext.html#method-i-verify","()",""],["verify_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-verify_api_key","(key)","<p>Retrieves the pre-configured API key <code>key</code> or terminates\ninteraction with an error.\n"],["verify_callback=","OpenSSL::X509::Store","OpenSSL/X509/Store.html#method-i-verify_callback-3D","(p1)","<p>General callback for OpenSSL verify\n"],["verify_certificate","Gem::Request","Gem/Request.html#method-c-verify_certificate","(store_context)",""],["verify_certificate_identity","OpenSSL::SSL","OpenSSL/SSL.html#method-c-verify_certificate_identity","(cert, hostname)",""],["verify_certificate_identity","OpenSSL::SSL","OpenSSL/SSL.html#method-i-verify_certificate_identity","(cert, hostname)",""],["verify_certificate_message","Gem::Request","Gem/Request.html#method-c-verify_certificate_message","(error_number, cert)",""],["verify_entry","Gem::Package","Gem/Package.html#method-i-verify_entry","(entry)","<p>Verifies <code>entry</code> in a .gem file.\n"],["verify_files","Gem::Package","Gem/Package.html#method-i-verify_files","(gem)","<p>Verifies the files of the <code>gem</code>\n"],["verify_gem","Gem::Validator","Gem/Validator.html#method-i-verify_gem","(gem_data)","<p>Given a gem file&#39;s contents, validates against its own MD5 checksum\n<p>gem_data &mdash; <p>String &mdash; Contents of the …\n\n\n"],["verify_gem_file","Gem::Validator","Gem/Validator.html#method-i-verify_gem_file","(gem_path)","<p>Given the path to a gem file, validates against its own MD5 checksum\n<p>gem_path &mdash; <p>String &mdash; Path to gem file …\n\n\n"],["verify_internal_consistency","GC","GC.html#method-c-verify_internal_consistency","()","<p>Verify internal consistency.\n<p>This method is implementation specific. Now this method checks generational\n…\n"],["verify_result","OpenSSL::SSL::SSLSocket","OpenSSL/SSL/SSLSocket.html#method-i-verify_result","()","<p>Returns the result of the peer certificates verification.  See verify(1)\nfor error values and descriptions. …\n"],["verify_signatures","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify_signatures","(spec, digests, signatures)","<p>Extracts the certificate chain from the <code>spec</code> and calls #verify\nto ensure the signatures and certificate …\n"],["verify_spec_name","Gem::Installer","Gem/Installer.html#method-i-verify_spec_name","()",""],["version","ERB","ERB.html#method-c-version","()","<p>Returns revision information for the erb.rb module.\n"],["version","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-version","()","<p>Version of the gem\n"],["version","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-version","()","<p>The version of this activation request&#39;s specification\n"],["version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-version","()","<p>The version of the gem for this specification.\n"],["version","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-version","()","<p>The Requirement of the unresolved dependency (not Version).\n"],["version","Gem::Version","Gem/Version.html#method-i-version","()","<p>A string representation of this Version.\n"],["version","IRB","IRB.html#method-c-version","()","<p>Returns the current version of IRB, including release version and last\nupdated date.\n"],["version","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-version","()",""],["version","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-version","()",""],["version","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-version","()",""],["version","OptionParser","OptionParser.html#method-i-version","()","<p>Version\n"],["version","REXML::Document","REXML/Document.html#method-i-version","()","<p>@return the XMLDecl version of this document as a String. If no XMLDecl has\nbeen set, returns the default …\n"],["version","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-version","()","<p>Returns the type library version.\n\n<pre>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;)\nputs ...</pre>\n"],["version=","Gem::Specification","Gem/Specification.html#method-i-version-3D","(version)","<p>Set the version to <code>version</code>, potentially also setting\nrequired_rubygems_version if <code>version</code> indicates it …\n"],["version=","OpenSSL::X509::CRL","OpenSSL/X509/CRL.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Certificate","OpenSSL/X509/Certificate.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Request","OpenSSL/X509/Request.html#method-i-version-3D","(p1)",""],["version_1_2","Net::HTTP","Net/HTTP.html#method-c-version_1_2","()","<p>Turns on net/http 1.2 (Ruby 1.8) features. Defaults to ON in Ruby 1.8 or\nlater.\n"],["version_1_2?","Net::HTTP","Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns true if net/http is in version 1.2 mode. Defaults to true.\n"],["versions","RSS::Maker","RSS/Maker.html#method-c-versions","()","<p>Returns collection of supported maker versions\n"],["vertex_named","Gem::Resolver::Molinillo::DependencyGraph","Gem/Resolver/Molinillo/DependencyGraph.html#method-i-vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the vertex with the given name\n"],["vi_editing_mode","Readline","Readline.html#method-c-vi_editing_mode","()","<p>Specifies VI editing mode. See the manual of GNU Readline for details of VI\nediting mode.\n<p>Raises NotImplementedError …\n"],["vi_editing_mode?","Readline","Readline.html#method-c-vi_editing_mode-3F","()","<p>Returns true if vi mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["virtual_host","WEBrick::HTTPServer","WEBrick/HTTPServer.html#method-i-virtual_host","(server)","<p>Adds <code>server</code> as a virtual host.\n"],["visibility=","RDoc::Options","RDoc/Options.html#method-i-visibility-3D","(visibility)","<p>Sets the minimum visibility of a documented method.\n<p>Accepts <code>:public</code>, <code>:protected</code>,\n<code>:private</code>, <code>:nodoc</code>, or …\n"],["visible?","WIN32OLE_METHOD","WIN32OLE_METHOD.html#method-i-visible-3F","()","<p>Returns true if the method is public.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...</pre>\n"],["visible?","WIN32OLE_TYPE","WIN32OLE_TYPE.html#method-i-visible-3F","()","<p>Returns true if the OLE class is public.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["visible?","WIN32OLE_TYPELIB","WIN32OLE_TYPELIB.html#method-i-visible-3F","()","<p>Returns true if the type library information is not hidden. If wLibFlags of\nTLIBATTR is 0 or LIBFLAG_FRESTRICTED …\n"],["visible?","WIN32OLE_VARIABLE","WIN32OLE_VARIABLE.html#method-i-visible-3F","()","<p>Returns true if the variable is public.\n\n<pre>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</pre>\n"],["visit","OptionParser","OptionParser.html#method-i-visit","(id, *args, &block)","<p>Traverses @stack, sending each element method <code>id</code> with\n<code>args</code> and <code>block</code>.\n"],["visit","Psych::Visitors::Visitor","Psych/Visitors/Visitor.html#method-i-visit","(target)",""],["visit_Array","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Array","(o)",""],["visit_BasicObject","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_BasicObject","(o)",""],["visit_BigDecimal","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_BigDecimal","(o)",""],["visit_Class","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Class","(o)",""],["visit_Complex","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Complex","(o)",""],["visit_Date","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Date","(o)",""],["visit_DateTime","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_DateTime","(o)",""],["visit_Encoding","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Encoding","(o)",""],["visit_Exception","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Exception","(o)",""],["visit_FalseClass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_FalseClass","(o)",""],["visit_Float","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Float","(o)",""],["visit_Hash","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Hash","(o)",""],["visit_Integer","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Integer","(o)",""],["visit_Module","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Module","(o)",""],["visit_NameError","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_NameError","(o)",""],["visit_NilClass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_NilClass","(o)",""],["visit_Object","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Object","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::NoAliasRuby","Psych/Visitors/NoAliasRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::DepthFirst","Psych/Visitors/DepthFirst.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::Emitter","Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::ToRuby","Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Omap","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Omap","(o)",""],["visit_Psych_Set","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Set","(o)",""],["visit_Range","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Range","(o)",""],["visit_Rational","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Rational","(o)",""],["visit_Regexp","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Regexp","(o)",""],["visit_String","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-visit_String","(str)",""],["visit_String","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_String","(o)",""],["visit_Struct","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Struct","(o)",""],["visit_Symbol","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Symbol","(o)",""],["visit_Time","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_Time","(o)",""],["visit_TrueClass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_TrueClass","(o)",""],["visit_array_subclass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_array_subclass","(o)",""],["visit_hash_subclass","Psych::Visitors::YAMLTree","Psych/Visitors/YAMLTree.html#method-i-visit_hash_subclass","(o)",""],["voidcmd","Net::FTP","Net/FTP.html#method-i-voidcmd","(cmd)","<p>Sends a command and expect a response beginning with &#39;2&#39;.\n"],["vstack","Matrix","Matrix.html#method-c-vstack","(x, *matrices)","<p>Create a matrix by stacking matrices vertically\n\n<pre>x = Matrix[[1, 2], [3, 4]]\ny = Matrix[[5, 6], [7, 8]] ...</pre>\n"],["vstack","Matrix","Matrix.html#method-i-vstack","(*matrices)","<p>Returns a new matrix resulting by stacking vertically the receiver with the\ngiven matrices\n\n<pre>x = Matrix[[1, ...</pre>\n"],["w3cdtf","Time","Time.html#method-c-w3cdtf","(date)","<p>This method converts a W3CDTF string date/time format to Time object.\n<p>The W3CDTF format is defined here: …\n"],["w3cdtf","Time","Time.html#method-i-w3cdtf","()","<p>This method converts a Time object to a String. The String contains the\ntime in W3CDTF date/time format. …\n"],["wait","ConditionVariable","ConditionVariable.html#method-i-wait","(p1, p2 = v2)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock\non wakeup.\n<p>If <code>timeout</code> is given, this method …\n"],["wait","IO","IO.html#method-i-wait","(*args)","<p>Waits until IO is readable or writable without blocking and returns\n<code>self</code>, or <code>nil</code> when times out. Returns …\n"],["wait","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-wait","(timeout = nil)","<p>Releases the lock held in the associated monitor and waits; reacquires the\nlock on wakeup.\n<p>If <code>timeout</code> …\n"],["wait","Process","Process.html#method-c-wait","(*args)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["wait","Rinda::WaitTemplateEntry","Rinda/WaitTemplateEntry.html#method-i-wait","()",""],["wait2","Process","Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wait?","Shell::BuiltInCommand","Shell/BuiltInCommand.html#method-i-wait-3F","()",""],["wait?","Shell::SystemCommand","Shell/SystemCommand.html#method-i-wait-3F","()",""],["wait_all_jobs_execution","Shell::ProcessController","Shell/ProcessController.html#method-i-wait_all_jobs_execution","()","<p>wait for all jobs to terminate\n"],["wait_for_child_process_to_exit","Gem::TestCase","Gem/TestCase.html#method-i-wait_for_child_process_to_exit","()","<p>In case we&#39;re building docs in a background process, this method waits\nfor that process to exit (or …\n"],["wait_for_continue","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-wait_for_continue","(sock, ver)","<p>Waits up to the continue timeout for a response from the server provided\nwe&#39;re speaking HTTP 1.1 …\n"],["wait_readable","IO","IO.html#method-i-wait_readable","(*args)","<p>Waits until IO is readable without blocking and returns <code>self</code>,\nor <code>nil</code> when times out. Returns <code>true</code> immediately …\n"],["wait_to_finish_all_process_controllers","Shell::ProcessController","Shell/ProcessController.html#method-c-wait_to_finish_all_process_controllers","()",""],["wait_until","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-wait_until","()","<p>Calls wait repeatedly until the given block yields a truthy value.\n"],["wait_while","MonitorMixin::ConditionVariable","MonitorMixin/ConditionVariable.html#method-i-wait_while","()","<p>Calls wait repeatedly while the given block yields a truthy value.\n"],["wait_writable","IO","IO.html#method-i-wait_writable","(*args)","<p>Waits until IO is writable without blocking and returns <code>self</code>\nor <code>nil</code> when times out.\n"],["waitall","Process","Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em>\npairs (where <em>status</em> is a <code>Process::Status</code> object). …\n"],["waiting","DEBUGGER__","DEBUGGER__.html#method-c-waiting","()","<p>Returns the list of waiting threads.\n<p>When stepping through the traces of a function, thread gets suspended, …\n"],["waiting_job?","Shell::ProcessController","Shell/ProcessController.html#method-i-waiting_job-3F","(job)",""],["waiting_jobs","Shell::ProcessController","Shell/ProcessController.html#method-i-waiting_jobs","()",""],["waiting_jobs_exist?","Shell::ProcessController","Shell/ProcessController.html#method-i-waiting_jobs_exist-3F","()",""],["waitpid","Process","Process.html#method-c-waitpid","(*args)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["waitpid2","Process","Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wakeup","Thread","Thread.html#method-i-wakeup","()","<p>Marks a given thread as eligible for scheduling, however it may still\nremain blocked on I/O.\n<p><strong>Note:</strong> This …\n"],["warn","Kernel","Kernel.html#method-i-warn","(*args)","<p>Displays each of the given messages followed by a record separator on\nSTDERR unless warnings have been …\n"],["warn","Logger","Logger.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message.\n<p>See #info for more information.\n"],["warn","OptionParser","OptionParser.html#method-i-warn","(mesg = $!)",""],["warn","RDoc::Options","RDoc/Options.html#method-i-warn","(message)","<p>Displays a warning using Kernel#warn if we&#39;re being verbose\n"],["warn","Ripper","Ripper.html#method-i-warn","(fmt, *args)","<p>This method is called when weak warning is produced by the parser.\n<code>fmt</code> and <code>args</code> is printf style.\n"],["warn","Syslog::Logger","Syslog/Logger.html#method-i-warn","","<p>Logs a <code>message</code> at the warn (syslog notice) log level, or logs\nthe message returned from the block.\n"],["warn","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-warn","(msg)","<p>Shortcut for logging a WARN message\n"],["warn","Warning","Warning.html#method-i-warn","(p1)",""],["warn?","Logger","Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>WARN</code> messages.\n"],["warn?","WEBrick::BasicLog","WEBrick/BasicLog.html#method-i-warn-3F","()","<p>Will the logger output WARN messages?\n"],["warning","Ripper","Ripper.html#method-i-warning","(fmt, *args)","<p>This method is called when strong warning is produced by the parser.\n<code>fmt</code> and <code>args</code> is printf style.\n"],["wday","Date","Date.html#method-i-wday","()","<p>Returns the day of week (0-6, Sunday is zero).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">wday</span>           <span class=\"ruby-comment\">#=&gt; 6</span>\n</pre>\n"],["wday","Time","Time.html#method-i-wday","()","<p>Returns an integer representing the day of the week, 0..6, with Sunday ==\n0.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; 2007-11-20 ...</span>\n</pre>\n"],["weakref_alive?","WeakRef","WeakRef.html#method-i-weakref_alive-3F","()","<p>Returns true if the referenced object is still alive.\n"],["wednesday?","Date","Date.html#method-i-wednesday-3F","()","<p>Returns true if the date is Wednesday.\n"],["wednesday?","Time","Time.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Wednesday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1993</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">24</span>)      <span class=\"ruby-comment\">#=&gt; 1993-02-24 00:00:00 -0600 ...</span>\n</pre>\n"],["when_invoked","Gem::Command","Gem/Command.html#method-i-when_invoked","(&block)","<p>Call the given block when invoked.\n<p>Normal command invocations just executes the <code>execute</code> method of\nthe …\n"],["which_to_update","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-which_to_update","(highest_installed_gems, gem_names, system = false)",""],["whitespace","REXML::Element","REXML/Element.html#method-i-whitespace","()","<p>Evaluates to <code>true</code> if whitespace is respected for this element.\nThis is the case if:\n<p>Neither :<code>respect_whitespace</code> …\n"],["why_not_ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-why_not_ok-3F","(quick = false)",""],["win32_last_error","Fiddle","Fiddle.html#method-c-win32_last_error","()","<p>Returns the last win32 <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["win32_last_error=","Fiddle","Fiddle.html#method-c-win32_last_error-3D","(error)","<p>Sets the last win32 <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["win_platform=","Gem","Gem.html#method-c-win_platform-3D","(val)","<p>Allows toggling Windows behavior.  This method is available when requiring\n&#39;rubygems/test_case&#39; …\n"],["win_platform?","Gem","Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["win_platform?","Gem::TestCase","Gem/TestCase.html#method-c-win_platform-3F","()","<p>Is this test being run on a Windows platform?\n"],["win_platform?","Gem::TestCase","Gem/TestCase.html#method-i-win_platform-3F","()","<p>Is this test being run on a Windows platform?\n"],["windows_stub_script","Gem::Installer","Gem/Installer.html#method-i-windows_stub_script","(bindir, bin_file_name)","<p>return the stub script text used to launch the true Ruby script\n"],["winsize","IO","IO.html#method-i-winsize","()","<p>Returns console size.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["winsize=","IO","IO.html#method-i-winsize-3D","(p1)","<p>Tries to set console size.  The effect depends on the platform and the\nrunning environment.\n<p>You must require …\n"],["with","OptionParser","OptionParser.html#method-c-with","(*args, &block)","<p>Initializes a new instance and evaluates the optional block in context of\nthe instance. Arguments <code>args</code> …\n"],["with_config","MakeMakefile","MakeMakefile.html#method-i-with_config","(config, default=nil)","<p>Tests for the presence of a <code>--with-</code><em>config</em> or\n<code>--without-</code><em>config</em> option.  Returns <code>true</code>\nif the with option …\n"],["with_index","Enumerator","Enumerator.html#method-i-with_index","(p1 = v1)","<p>Iterates the given block for each element with an index, which starts from\n<code>offset</code>.  If no block is given, …\n"],["with_index","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-with_index","(offset = 0)","<p>see <code>Enumerator</code>#with_index.\n"],["with_no_such_dependency_error_handling","Gem::Resolver::Molinillo::Delegates::SpecificationProvider","Gem/Resolver/Molinillo/Delegates/SpecificationProvider.html#method-i-with_no_such_dependency_error_handling","()","<p>Ensures any raised {NoSuchDependencyError} has its\n{NoSuchDependencyError#required_by} set. @yield\n"],["with_object","Enumerator","Enumerator.html#method-i-with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["with_object","Prime::PseudoPrimeGenerator","Prime/PseudoPrimeGenerator.html#method-i-with_object","(obj)","<p>see <code>Enumerator</code>#with_object.\n"],["with_response","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-with_response","(response, error_prefix = nil)","<p>If <code>response</code> is an HTTP Success (2XX) response, yields the\nresponse if a block was given or shows the …\n"],["wordy","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-wordy","()","<p>A wordy description of the error.\n"],["wordy","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-i-wordy","()","<p>An English description of the error.\n"],["workspaces","IRB::Context","IRB/Context.html#method-i-workspaces","()","<p>WorkSpaces in the current stack\n"],["world_readable?","File","File.html#method-c-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","File::Stat","File/Stat.html#method-i-world_readable-3F","()","<p>If <em>stat</em> is readable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_readable?","FileTest","FileTest.html#method-i-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","Pathname","Pathname.html#method-i-world_readable-3F","()","<p>See FileTest.world_readable?.\n"],["world_writable?","File","File.html#method-c-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","File::Stat","File/Stat.html#method-i-world_writable-3F","()","<p>If <em>stat</em> is writable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_writable?","FileTest","FileTest.html#method-i-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","Pathname","Pathname.html#method-i-world_writable-3F","()","<p>See FileTest.world_writable?.\n"],["wrap","Gem::Command","Gem/Command.html#method-i-wrap","(text, width)","<p>Wraps <code>text</code> to <code>width</code>\n"],["wrap","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-wrap","(io, digests)","<p>Wraps <code>io</code> and updates digest for each of the digest algorithms\nin the <code>digests</code> Hash.  Returns the digests …\n"],["wrap","JSON::JSONError","JSON/JSONError.html#method-c-wrap","(exception)",""],["wrap","RDoc::Text","RDoc/Text.html#method-i-wrap","(txt, line_len = 76)","<p>Wraps <code>txt</code> to <code>line_len</code>\n"],["wrap","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-wrap","(string, width)",""],["wrap","REXML::Text","REXML/Text.html#method-i-wrap","(string, width, addnewline=false)",""],["wrap","Zlib::GzipFile","Zlib/GzipFile.html#method-c-wrap","(*args)","<p>Creates a GzipReader or GzipWriter associated with <code>io</code>, passing\nin any necessary extra options, and executes …\n"],["writable?","File","File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["writable?","File::Stat","File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective\nuser id of this process.\n\n<pre>File.stat(&quot;testfile&quot;).writable? ...</pre>\n"],["writable?","FileTest","FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["writable?","Net::FTP::MLSxEntry","Net/FTP/MLSxEntry.html#method-i-writable-3F","()","<p>Returns <code>true</code> if the STOR command may be applied to the file.\n"],["writable?","Pathname","Pathname.html#method-i-writable-3F","()","<p>See FileTest.writable?.\n"],["writable_real?","File","File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user\nand group id of this process. See access(3) …\n"],["writable_real?","File::Stat","File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id\nof this process.\n\n<pre>File.stat(&quot;testfile&quot;).writable_real? ...</pre>\n"],["writable_real?","FileTest","FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user\nand group id of this process. See access(3) …\n"],["writable_real?","Pathname","Pathname.html#method-i-writable_real-3F","()","<p>See FileTest.writable_real?.\n"],["write","ARGF","ARGF.html#method-i-write","(p1)","<p>Writes <em>string</em> if inplace mode.\n"],["write","Gem::ConfigFile","Gem/ConfigFile.html#method-i-write","()","<p>Writes out this config file, replacing its source.\n"],["write","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-i-write","(data)","<p>Writes <code>data</code> to the underlying IO and updates the digests\n"],["write","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO, raising a FileOverflow exception if\nthe number of bytes will be more than #limit …\n"],["write","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO\n"],["write","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-write","()","<p>Writes the lock file alongside the gem dependencies file\n"],["write","Gem::Security","Gem/Security.html#method-c-write","(pemmable, path, permissions = 0600, passphrase = nil, cipher = KEY_CIPHER)","<p>Writes <code>pemmable</code>, which must respond to <code>to_pem</code> to\n<code>path</code> with the given <code>permissions</code>. If passed\n<code>cipher</code> and …\n"],["write","IO","IO.html#method-c-write","(*args)","<p>Opens the file, optionally seeks to the given <em>offset</em>, writes\n<em>string</em>, then returns the length written. …\n"],["write","IO","IO.html#method-i-write","(p1)","<p>Writes the given string to <em>ios</em>. The stream must be opened for\nwriting. If the argument is not a string, …\n"],["write","Logger::LogDevice","Logger/LogDevice.html#method-i-write","(message)",""],["write","Net::InternetMessageIO::WriteAdapter","Net/InternetMessageIO/WriteAdapter.html#method-i-write","(str)",""],["write","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-write","(s)","<p>Writes <code>s</code> to the stream.  If the argument is not a string it\nwill be converted using String#to_s.  Returns …\n"],["write","Pathname","Pathname.html#method-i-write","(p1 = v1, p2 = v2, p3 = v3)","<p>Writes <code>contents</code> to the file.\n<p>See IO.write.\n"],["write","REXML::AttlistDecl","REXML/AttlistDecl.html#method-i-write","(out, indent=-1)","<p>Write out exactly what we got in.\n"],["write","REXML::Attribute","REXML/Attribute.html#method-i-write","( output, indent=-1 )","<p>Writes this attribute (EG, puts &#39;key=“value”&#39; to the output)\n"],["write","REXML::CData","REXML/CData.html#method-i-write","( output=$stdout, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See the rexml/formatters package\n<p>Generates XML output of this object\n"],["write","REXML::Comment","REXML/Comment.html#method-i-write","( output, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See REXML::Formatters\n<p>output &mdash; Where to write the string\n"],["write","REXML::DTD::EntityDecl","REXML/DTD/EntityDecl.html#method-i-write","( output, indent )",""],["write","REXML::DTD::NotationDecl","REXML/DTD/NotationDecl.html#method-i-write","( output, indent )",""],["write","REXML::Declaration","REXML/Declaration.html#method-i-write","( output, indent )","<p>DEPRECATED\n<p>See REXML::Formatters\n"],["write","REXML::DocType","REXML/DocType.html#method-i-write","( output, indent=0, transitive=false, ie_hack=false )","<p>output &mdash; Where to write the string\n<p>indent &mdash; An integer.  If -1, no indentation will be used; otherwise, the …\n"],["write","REXML::Document","REXML/Document.html#method-i-write","(*arguments)","<p>Write the XML tree out, optionally with indent.  This writes out the entire\nXML document, including  …\n"],["write","REXML::Element","REXML/Element.html#method-i-write","(output=$stdout, indent=-1, transitive=false, ie_hack=false)","<p>DEPRECATED\n<p>See REXML::Formatters\n<p>Writes out this element, and recursively, all children.\n"],["write","REXML::Entity","REXML/Entity.html#method-i-write","(out, indent=-1)","<p>Write out a fully formed, correct entity definition (assuming the Entity\nobject itself is valid.)\n<p>out … &mdash; "],["write","REXML::ExternalEntity","REXML/ExternalEntity.html#method-i-write","( output, indent )",""],["write","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write","( node, output )","<p>Writes the node to some output.\n<p>node &mdash; The node to write\n<p>output &mdash; A class implementing <code>&amp;lt;&amp;lt;</code>.   …\n"],["write","REXML::Instruction","REXML/Instruction.html#method-i-write","(writer, indent=-1, transitive=false, ie_hack=false)","<p>DEPRECATED\n<p>See the rexml/formatters package\n"],["write","REXML::NotationDecl","REXML/NotationDecl.html#method-i-write","( output, indent=-1 )",""],["write","REXML::Text","REXML/Text.html#method-i-write","( writer, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See REXML::Formatters\n"],["write","REXML::XMLDecl","REXML/XMLDecl.html#method-i-write","(writer, indent=-1, transitive=false, ie_hack=false)","<p>indent &mdash; Ignored.  There must be no whitespace before an XML declaration\n<p>transitive &mdash; Ignored\n<p>ie_hack &mdash; Ignored …\n"],["write","Rinda::TupleSpace","Rinda/TupleSpace.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code>\n"],["write","Rinda::TupleSpaceProxy","Rinda/TupleSpaceProxy.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code> to the proxied TupleSpace.  See TupleSpace#write.\n"],["write","StringIO","StringIO.html#method-i-write","(p1)","<p>Appends the given string to the underlying buffer string of\n<strong>strio</strong>. The stream must be opened for writing. …\n"],["write","Zlib::GzipWriter","Zlib/GzipWriter.html#method-i-write","(p1)","<p>Same as IO.\n"],["write_binary","Gem","Gem.html#method-c-write_binary","(path, data)","<p>Safely write a file in binary mode on all platforms.\n"],["write_build_info_file","Gem::Installer","Gem/Installer.html#method-i-write_build_info_file","()","<p>Writes the file containing the arguments for building this gem&#39;s\nextensions.\n"],["write_cache_file","Gem::Installer","Gem/Installer.html#method-i-write_cache_file","()","<p>Writes the .gem file to the cache directory\n"],["write_cdata","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write_cdata","( node, output )",""],["write_cdata","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-write_cdata","( node, output)",""],["write_comment","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write_comment","( node, output )",""],["write_comment","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-write_comment","( node, output)",""],["write_default_spec","Gem::Installer","Gem/Installer.html#method-i-write_default_spec","()","<p>Writes the full .gemspec specification (in Ruby) to the gem home&#39;s\nspecifications/default directory. …\n"],["write_document","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write_document","( node, output )",""],["write_document","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-write_document","( node, output )",""],["write_element","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write_element","( node, output )",""],["write_element","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-write_element","(node, output)",""],["write_element","REXML::Formatters::Transitive","REXML/Formatters/Transitive.html#method-i-write_element","( node, output )",""],["write_file","Gem::TestCase","Gem/TestCase.html#method-i-write_file","(path)","<p>Writes a binary file to <code>path</code> which is relative to +@gemhome+\n"],["write_header","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-write_header","(sock, ver, path)",""],["write_headers?","CSV","CSV.html#method-i-write_headers-3F","()","<p>Returns <code>true</code> if headers are written in output. See CSV::new\nfor details.\n"],["write_instruction","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write_instruction","( node, output )",""],["write_nonblock","IO","IO.html#method-i-write_nonblock","(buf, exception: true)","<p>Writes the given string to <em>ios</em> using the write(2) system call\nafter O_NONBLOCK is set for the underlying …\n"],["write_nonblock","IO::generic_writable","IO/generic_writable.html#method-i-write_nonblock","(p1, p2 = {})",""],["write_nonblock","OpenSSL::Buffering","OpenSSL/Buffering.html#method-i-write_nonblock","(s, exception: true)","<p>Writes <code>s</code> in the non-blocking manner.\n<p>If there is buffered data, it is flushed first.  This may block. …\n"],["write_options","RDoc::Options","RDoc/Options.html#method-i-write_options","()","<p>Writes the YAML file .rdoc_options to the current directory containing the\nparsed options.\n"],["write_random_file","OpenSSL::Random","OpenSSL/Random.html#method-c-write_random_file","(p1)","<p>Writes a number of random generated bytes (currently 1024) to\n<code>filename</code> which can be used to initialize …\n"],["write_services","Rinda::RingServer","Rinda/RingServer.html#method-i-write_services","()","<p>Creates threads that pick up UDP packets and passes them to do_write for\ndecoding.\n"],["write_smime","OpenSSL::PKCS7","OpenSSL/PKCS7.html#method-c-write_smime","(p1, p2 = v2, p3 = v3)",""],["write_spec","Gem::Installer","Gem/Installer.html#method-i-write_spec","()","<p>Writes the .gemspec specification (in Ruby) to the gem home&#39;s\nspecifications directory.\n"],["write_text","REXML::Formatters::Default","REXML/Formatters/Default.html#method-i-write_text","( node, output )",""],["write_text","REXML::Formatters::Pretty","REXML/Formatters/Pretty.html#method-i-write_text","( node, output )",""],["write_text","REXML::Formatters::Transitive","REXML/Formatters/Transitive.html#method-i-write_text","( node, output )",""],["write_with_substitution","REXML::Text","REXML/Text.html#method-i-write_with_substitution","(out, input)","<p>Writes out text, substituting special characters beforehand.\n<code>out</code> A String, IO, or any other object supporting …\n"],["xhtml","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-xhtml","()","<p>Returns the element content in XHTML.\n"],["xhtml","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-i-xhtml","()","<p>Returns or builds the XHTML content.\n"],["xhtml=","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-xhtml-3D","(content)",""],["xlist","Net::IMAP","Net/IMAP.html#method-i-xlist","(refname, mailbox)","<p>Sends a XLIST command, and returns a subset of names from the complete set\nof all names available to …\n"],["xml","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-i-xml","()","<p>Returns or builds the element content in XML.\n"],["xml=","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-xml-3D","(content)",""],["xmlDecl","RSS::REXMLLikeXMLParser","RSS/REXMLLikeXMLParser.html#method-i-xmlDecl","(version, encoding, standalone)",""],["xml_content=","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-xml_content-3D","(content)",""],["xml_content=","RSS::Maker::ItemsBase::ItemBase::ContentBase","RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-xml_content-3D","(content)",""],["xml_decl","REXML::Document","REXML/Document.html#method-i-xml_decl","()","<p>@return the XMLDecl of this document; if no XMLDecl has been set, the\ndefault declaration is returned. …\n"],["xml_getter","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-c-xml_getter","()",""],["xml_getter","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-c-xml_getter","()",""],["xml_setter","RSS::Atom::Feed::Entry::Content","RSS/Atom/Feed/Entry/Content.html#method-c-xml_setter","()",""],["xml_setter","RSS::Atom::TextConstruct","RSS/Atom/TextConstruct.html#method-c-xml_setter","()",""],["xml_stylesheet_pi","RSS::XMLStyleSheetMixin","RSS/XMLStyleSheetMixin.html#method-i-xml_stylesheet_pi","()",""],["xml_type?","RSS::Maker::Atom::Feed::Items::Item::Content","RSS/Maker/Atom/Feed/Items/Item/Content.html#method-i-xml_type-3F","()",""],["xmldecl","REXML::SAX2Listener","REXML/SAX2Listener.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML PI is encountered in the document. EG: &lt;?xml\nversion=“1.0” encoding=“utf”?&gt; …\n"],["xmldecl","REXML::StreamListener","REXML/StreamListener.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML PI is encountered in the document. EG: &lt;?xml\nversion=“1.0” encoding=“utf”?&gt; …\n"],["xmldecl","REXML::XMLDecl","REXML/XMLDecl.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl","RSS::ListenerMixin","RSS/ListenerMixin.html#method-i-xmldecl","(version, encoding, standalone)","<p>set instance vars for version, encoding, standalone\n"],["xmldecl","RSS::REXMLListener","RSS/REXMLListener.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl","RSS::RootElementMixin","RSS/RootElementMixin.html#method-i-xmldecl","()",""],["xmldecl","RSS::XMLParserListener","RSS/XMLParserListener.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl?","REXML::Parsers::PullEvent","REXML/Parsers/PullEvent.html#method-i-xmldecl-3F","()","<p>Content: [ String version, String encoding, String standalone ]\n"],["xmled_content","RSS::Element","RSS/Element.html#method-i-xmled_content","()",""],["xmlschema","Date","Date.html#method-i-xmlschema","()","<p>This method is equivalent to strftime(&#39;%F&#39;).\n"],["xmlschema","Date","Date.html#method-c-xmlschema","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical XML Schema formats.\n\n<pre>Date.xmlschema(&#39;2001-02-03&#39;) ...</pre>\n"],["xmlschema","DateTime","DateTime.html#method-c-xmlschema","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical XML Schema formats. …\n"],["xmlschema","DateTime","DateTime.html#method-i-xmlschema","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T&#39;).  The optional\nargument <code>n</code> is the number of digits …\n"],["xmlschema","Time","Time.html#method-c-xmlschema","(date)","<p>Parses <code>date</code> as a dateTime defined by the XML Schema and\nconverts it to a Time object.  The format is …\n"],["xmlschema","Time","Time.html#method-i-xmlschema","(fraction_digits=0)","<p>Returns a string which represents the time as a dateTime defined by XML\nSchema:\n\n<pre>CCYY-MM-DDThh:mm:ssTZD ...</pre>\n"],["xmp","Object","Object.html#method-i-xmp","(exps, bind = nil)","<p>A convenience method that&#39;s only available when the you require the\nIRB::XMP standard library.\n<p>Creates …\n"],["xpath","REXML::Attribute","REXML/Attribute.html#method-i-xpath","()",""],["xpath","REXML::Element","REXML/Element.html#method-i-xpath","()",""],["xpath","REXML::Text","REXML/Text.html#method-i-xpath","()","<p>FIXME This probably won&#39;t work properly\n"],["y","Kernel","Kernel.html#method-i-y","(*objects)","<p>An alias for Psych.dump_stream meant to be used with IRB.\n"],["yaml","Psych::Nodes::Node","Psych/Nodes/Node.html#method-i-yaml","(io = nil, options = {})","<p>Convert this node to YAML.\n<p>See also Psych::Visitors::Emitter\n"],["yaml_as","Module","Module.html#method-i-yaml_as","(url)",""],["yaml_tag","Object","Object.html#method-c-yaml_tag","(url)",""],["yank_api_request","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_api_request","(method, version, platform, api)",""],["yank_gem","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_gem","(version, platform)",""],["yday","Date","Date.html#method-i-yday","()","<p>Returns the day of the year (1-366).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">yday</span>           <span class=\"ruby-comment\">#=&gt; 34</span>\n</pre>\n"],["yday","Time","Time.html#method-i-yday","()","<p>Returns an integer representing the day of the year, 1..366.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; 2007-11-19 08:32:31 -0600 ...</span>\n</pre>\n"],["year","Date","Date.html#method-i-year","()","<p>Returns the year.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2001</span>,<span class=\"ruby-value\">2</span>,<span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">year</span>           <span class=\"ruby-comment\">#=&gt; 2001</span>\n(<span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>) <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">year</span>        <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["year","Time","Time.html#method-i-year","()","<p>Returns the year for <em>time</em> (including the century).\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:51 -0600\nt.year ...</pre>\n"],["yes_clean_other_attr_reader","RSS::BaseModel","RSS/BaseModel.html#method-i-yes_clean_other_attr_reader","(*attrs)",""],["yes_clean_other_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-yes_clean_other_writer","(name, disp_name=name)",""],["yes_other_attr_reader","RSS::BaseModel","RSS/BaseModel.html#method-i-yes_other_attr_reader","(*attrs)",""],["yes_other_writer","RSS::BaseModel","RSS/BaseModel.html#method-i-yes_other_writer","(name, disp_name=name)",""],["yield","Fiber","Fiber.html#method-c-yield","(*args)","<p>Yields control back to the context that resumed the fiber, passing along\nany arguments that were passed …\n"],["yield","Proc","Proc.html#method-i-yield","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["yyaccept","Racc::Parser","Racc/Parser.html#method-i-yyaccept","()","<p>Exit parser. Return value is Symbol_Value_Stack.\n"],["yydebug","Ripper","Ripper.html#method-i-yydebug","()","<p>Get yydebug.\n"],["yydebug=","Ripper","Ripper.html#method-i-yydebug-3D","(p1)","<p>Set yydebug.\n"],["yyerrok","Racc::Parser","Racc/Parser.html#method-i-yyerrok","()","<p>Leave error recovering mode.\n"],["yyerror","Racc::Parser","Racc/Parser.html#method-i-yyerror","()","<p>Enter error recovering mode. This method does not call #on_error.\n"],["yyparse","Racc::Parser","Racc/Parser.html#method-i-yyparse","(recv, mid)","<p>Another entry point for the parser. If you use this method, you must\nimplement RECEIVER#METHOD_ID method. …\n"],["zero","Matrix","Matrix.html#method-c-zero","(row_count, column_count = row_count)","<p>Creates a zero matrix.\n\n<pre>Matrix.zero(2)\n  =&gt; 0 0\n     0 0</pre>\n"],["zero?","BigDecimal","BigDecimal.html#method-i-zero-3F","()","<p>Returns True if the value is zero.\n"],["zero?","File","File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","File::Stat","File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file;\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">zero?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["zero?","FileTest","FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","Float","Float.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>float</code> is 0.0.\n"],["zero?","Matrix","Matrix.html#method-i-zero-3F","()","<p>Returns <code>true</code> if this is a matrix with only zero elements\n"],["zero?","Numeric","Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>num</code> has a zero value.\n"],["zero?","OpenSSL::BN","OpenSSL/BN.html#method-i-zero-3F","()",""],["zero?","Pathname","Pathname.html#method-i-zero-3F","()","<p>See FileTest.zero?.\n"],["zip","Array","Array.html#method-i-zip","(*args)","<p>Converts any arguments to arrays, then merges elements of <code>self</code>\nwith corresponding elements from each …\n"],["zip","Enumerable","Enumerable.html#method-i-zip","(*args)","<p>Takes one element from <em>enum</em> and merges corresponding elements from\neach <em>args</em>.  This generates a sequence …\n"],["zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-zip","(*args)",""],["zip?","RDoc::Parser","RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from\nwww.garykessler.net/library/file_sigs.html …\n"],["zlib_version","Zlib","Zlib.html#method-c-zlib_version","()","<p>Returns the string which represents the version of zlib library.\n"],["zone","Date","Date.html#method-i-zone","()","<p>Returns the timezone.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&#39;04pm+0730&#39;</span>).<span class=\"ruby-identifier\">zone</span>          <span class=\"ruby-comment\">#=&gt; &quot;+07:30&quot;</span>\n</pre>\n"],["zone","Time","Time.html#method-i-zone","()","<p>Returns the name of the time zone used for <em>time</em>. As of Ruby 1.8,\nreturns “UTC&#39;&#39; rather than …\n"],["zone_offset","Time","Time.html#method-c-zone_offset","(zone, year=self.now.year)","<p>Return the number of seconds the specified time zone differs from UTC.\n<p>Numeric time zones that include …\n"],["zone_utc?","Time","Time.html#method-c-zone_utc-3F","(zone)",""],["|","Array","Array.html#method-i-7C","(p1)","<p>Set Union — Returns a new array by joining <code>ary</code> with\n<code>other_ary</code>, excluding any duplicates and preserving …\n"],["|","FalseClass","FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","IPAddr","IPAddr.html#method-i-7C","(other)","<p>Returns a new ipaddr built by bitwise OR.\n"],["|","Integer","Integer.html#method-i-7C","(p1)","<p>Bitwise OR.\n"],["|","Integer","Integer.html#method-i-7C","(p1)","<p>Bitwise OR.\n"],["|","JSON::GenericObject","JSON/GenericObject.html#method-i-7C","(other)",""],["|","NilClass","NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","Set","Set.html#method-i-7C","(enum)","<p>Returns a new set built by merging the set and the elements of the given\nenumerable object.\n"],["|","Shell::Filter","Shell/Filter.html#method-i-7C","(filter)","<p>Processes a pipeline.\n"],["|","TrueClass","TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>obj</em> is an argument to a method\ncall, it is always evaluated; there is no short-circuit …\n"],["~","Complex","Complex.html#method-i-7E","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["~","IPAddr","IPAddr.html#method-i-7E","()","<p>Returns a new ipaddr built by bitwise negation.\n"],["~","Integer","Integer.html#method-i-7E","()","<p>One&#39;s complement: returns a number where each bit is flipped.\n<p>Inverts the bits in an integer. As  …\n"],["~","Integer","Integer.html#method-i-7E","()","<p>One&#39;s complement: returns a number where each bit is flipped.\n<p>Inverts the bits in an integer. As  …\n"],["~","Regexp","Regexp.html#method-i-7E","()","<p>Match—Matches <em>rxp</em> against the contents of <code>$_</code>.\nEquivalent to <code><em>rxp</em> =~ $_</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;input data&quot;</span>\n<span class=\"ruby-operator\">~</span> <span class=\"ruby-regexp\">/at/</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["README.ja","","README_ja_md.html","","<p>Rubyとは\n<p>Rubyはシンプルかつ強力なオブジェクト指向スクリプト言語です．\nRubyは純粋なオブジェクト指向言語として設計されているので，\nオブジェクト指向プログラミングを手軽に行う事が出来ます．もちろん普通の手続き型のプログラミングも可能です．\n...\n"],["README","","README_md.html","","<p><img src=\"https://travis-ci.org/ruby/ruby.svg\">\n<img\nsrc=\"https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/trunk?svg=true\">\n...\n"],["contributing","","contributing_rdoc.html","","<p>Contributing to Ruby\n<p>Ruby has a vast and friendly community with hundreds of people contributing\nto a …\n"],["contributors","","contributors_rdoc.html","","<p>Contributors to Ruby\n<p>The following list might be incomplete. Feel free to add your name if your\npatch …\n"],["dtrace_probes","","dtrace_probes_rdoc.html","","<p>DTrace Probes\n<p>A list of DTrace probes and their functionality. “Module” and “Function” …\n"],["extension.ja","","extension_ja_rdoc.html","","<p>Rubyの拡張ライブラリの作り方\n<p>Rubyの拡張ライブラリの作り方を説明します．\n<p>基礎知識\n"],["extension","","extension_rdoc.html","","<p>Creating Extension Libraries for Ruby\n<p>This document explains how to make extension libraries for Ruby …\n"],["globals","","globals_rdoc.html","","<p>Pre-defined variables\n<p>$! &mdash; The exception information message set by &#39;raise&#39;.\n<p>$@ &mdash; Array of backtrace …\n"],["keywords","","keywords_rdoc.html","","<p>Keywords\n<p>The following keywords are used by Ruby.\n<p>__ENCODING__ &mdash; The script encoding of the current file. …\n"],["grammar.en","","lib/racc/rdoc/grammar_en_rdoc.html","","<p>Racc Grammar File Reference\n<p>Global Structure\n<p>Class Block and User Code Block\n"],["LICENSE","","lib/rubygems/LICENSE_txt.html","","<p>RubyGems is copyrighted free software by Chad Fowler, Rich Kilmer, Jim\nWeirich and others.  You can redistribute …\n"],["maintainers","","maintainers_rdoc.html","","<p>Maintainers\n<p>This page describes the current module, library, and extension maintainers\nof Ruby.\n<p>Module …\n"],["marshal","","marshal_rdoc.html","","<p>Marshal Format\n<p>The Marshal format is used to serialize ruby objects.  The format can store\narbitrary objects …\n"],["regexp","","regexp_rdoc.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the\ncontents of a string. They&#39;re used …\n"],["security","","security_rdoc.html","","<p>Ruby Security\n<p>The Ruby programming language is large and complex and there are many\nsecurity pitfalls …\n"],["standard_library","","standard_library_rdoc.html","","<p>Ruby Standard Library\n<p>The Ruby Standard Library is a vast collection of classes and modules that\nyou can …\n"],["syntax","","syntax_rdoc.html","","<p>Ruby Syntax\n<p>The Ruby syntax is large and is split up into the following sections:\n<p>Literals  &mdash; Numbers, Strings …\n"],["assignment","","syntax/assignment_rdoc.html","","<p>Assignment\n<p>In Ruby, assignment uses the <code>=</code> (equals sign) character.  This\nexample assigns the number five …\n"],["calling_methods","","syntax/calling_methods_rdoc.html","","<p>Calling Methods\n<p>Calling a method sends a message to an object so it can perform some work.\n<p>In ruby you …\n"],["control_expressions","","syntax/control_expressions_rdoc.html","","<p>Control Expressions\n<p>Ruby has a variety of ways to control execution.  All the expressions\ndescribed here …\n"],["exceptions","","syntax/exceptions_rdoc.html","","<p>Exception Handling\n<p>Exceptions are rescued in a <code>begin</code>/<code>end</code> block:\n\n<pre>begin\n  # code that might raise\nrescue ...</pre>\n"],["literals","","syntax/literals_rdoc.html","","<p>Literals\n<p>Literals create objects you can use in your program.  Literals include:\n<p>Booleans and nil\n"],["methods","","syntax/methods_rdoc.html","","<p>Methods\n<p>Methods implement the functionality of your program.  Here is a simple\nmethod definition:\n\n<pre>def one_plus_one ...</pre>\n"],["miscellaneous","","syntax/miscellaneous_rdoc.html","","<p>Miscellaneous Syntax\n<p>Ending an Expression\n<p>Ruby uses a newline as the end of an expression.  When ending …\n"],["modules_and_classes","","syntax/modules_and_classes_rdoc.html","","<p>Modules\n<p>Modules serve two purposes in Ruby, namespacing and mix-in functionality.\n<p>A namespace can be used …\n"],["precedence","","syntax/precedence_rdoc.html","","<p>Precedence\n<p>From highest to lowest, this is the precedence table for ruby.  High\nprecedence operations …\n"],["refinements","","syntax/refinements_rdoc.html","","<p>Refinements\n<p>Due to Ruby&#39;s open classes you can redefine or add functionality to\nexisting classes. …\n"]]}}